<?php
/* *****************************************************************
 * Interleave
 * Copyright (c) 2001-2012 Hidde Fennema (info@interleave.nl)
 * Licensed under the GNU GPL. For full terms see the file COPYING.
 *
 * This file is the core of Interleave. It is always needed. It contains only functions.
 *
 * Check http://www.interleave.nl/ for more information
 *
 * BUILD / RELEASE :: 5.5.1.20121028
 *
 **********************************************************************
 */
if (empty($GLOBALS['CONFIGFILE'])) {
	$GLOBALS['CONFIGFILE'] = $GLOBALS['PATHTOINTERLEAVE'] . "config/config.inc.php";
}

// Version and author information (do not change)
//
// This version number is automatically a adjusted by the build routine. DO NOT ALTER IT BY HAND unless you know what you're doing.
// At least make sure it always ends with 8 characters representing the last build date (YYYY-MM-DD).

// NEVER (I MEAN *NEVER*) CHANGE THE DATE IN THIS VERSION BY HAND. FOR RELEASE TEST PURPOSES CHANGE SOMETHING ELSE BUT THE 
// RELEASE DATE MUST ALWAYS BE 100% THE SAME AS THE RELEASE VERSION DATE MENTIONED IN EVERY FILE HEADER.

$GLOBALS['VERSION'] = "5.5.1.20121028"; // The main version

// Some concats
$GLOBALS['CRM_SHORTVERSION']	= $GLOBALS['PRODUCT'] . " " . $GLOBALS['VERSION'];
$GLOBALS['CRM_VERSION']			= $GLOBALS['PRODUCT'] . " " . $GLOBALS['VERSION'] . " (c) 2001-2012";

require_once("inituser.php");
require_once("numericfilters.php");

function IntermediateDatabaseUpgrade() {

	if ($GLOBALS['DBVERSION'] < "5.5.0.4") {
	
		PrintAD("The database and software version are not the same. Use upgrade.php to upgrade.");

	} else {

		$version_when_done = $GLOBALS['VERSION'];
		
		// Indices in this array will be created only if they don't exist already.
		$indices = array(
				array("accesscache", array("user", "type", "eidcid", "result")),
				array("journal", array("eid")),
				array("journal", array("eid", "type")),
				array("journal", array("eid", "type", "user"))
		);
		
		// Columns in this array will be added to a table if they don't exist, and the
		// table will be altered if they DO exist but have some other type.

		$fields = array(
				array("blobs", "content", "LONGBLOB NOT NULL"),
				array("binfiles", "folder", "INT(11) NOT NULL"),
				array("tabmenudefinitions", "header_template", "INT(11) NOT NULL"),
				array("tabmenudefinitions", "footer_template", "INT(11) NOT NULL")

		);

		// Drop tables (when they exist)

		$droptables = array("phonebook", "webdav_locks", "webdav_properties", "searchindex", "help");

		// Drop fields (when they exist)
		// should be array(array("entity", "eid"))

		$dropfields = array(); 

		// Drop settings
		// should be array("SETTINGNAME1", "SETTINGNAME2"))

		$dropsettings = array("HIDEPBTAB"); 

		// Attribute settings
		// Add settings here to add them to the global setting attribute list
		// Fetch system attributes with $val = GetAttribute("system", {{{SETTINGNAME]}}, 2) or with GetSetting("{{{SETTINGNAME]}}");

		$attribute_settings = array("EntityImportTableHTML", "CustomerImportTableHTML", "UserImportTableHTML", "EntityListMainHeaderHTML", "CustomerListMainHeaderHTML","EntityListAlwaysInPopup|No|Yes", "CustomerListAlwaysInPopup|No|Yes","DefaultExcel2007FontSize|11|12|13|14|15|16|17|18|19|20", "DefaultExcel2007Font|Tahoma|Arial|Helvetica|Times New Roman", "CategoryCustomValidationFunctionPHP", "AssigneeCustomValidationFunctionPHP", "OwnerCustomValidationFunctionPHP", "CustomernameCustomValidationFunctionPHP", "DuedateCustomValidationFunctionPHP", "EntityCustomerCustomValidationFunctionPHP", "LDAP_LOGIN_ATTRIBUTE", "CategoryPlaceholder", "StatusCustomValidationFunctionPHP", "PriorityCustomValidationFunctionPHP", "AllowFoldersInFilelists-EXPIRIMENTAL|No|Yes", "NumberOfModuleToIncludeInAllPageloads");

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		foreach ($indices AS $index) {
			if (!TableHasIndex($index[0], $index[1])) {
				mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . $index[0] . " ADD INDEX (`" . implode($index[1], "`,`") . "`)", $db);
			}
		}
		foreach ($fields AS $field) {
			$check = "";
			$check = TableHasField($field[0], $field[1], $field[2]);
			if ($check == "no") {
				mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . $field[0] . " ADD `" . $field[1] . "` " . $field[2], $db);
			} elseif ($check === "wrongtype") {
				$sql = "ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . $field[0] . " CHANGE `" . $field[1] . "` `" . $field[1] . "` " . $field[2];
				mcq($sql, $db);
			}
		}
		// The following checks should only run if the current user is an administrator
		if (is_administrator()) {
			FixTableAndFieldEngineAndCharset();
		}
		foreach ($droptables AS $table) {
			mcq("DROP TABLE IF EXISTS " . $GLOBALS['TBL_PREFIX'] . $table, $db);
		}
		foreach ($dropfields AS $df) {
			if (TableHasField($df[0], $df[1], false) == "yes") {
				mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . $df[0] . " DROP `" . $df[1] . "`", $db);
			}
		}
		foreach ($dropsettings AS $setting) {
			mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='" . $setting . "'", $db);
		}

		UpdateSetting("DBVERSION", $version_when_done);
	}

	foreach ($attribute_settings AS $setting) {
		$ar = explode("|", $setting);
		if (count($ar) > 1) {
			$setting = $ar[0];
			$options = array();
			$defaultvalue = $ar[1];
			for ($i=1;$i<count($ar);$i++) {
				$options[] = $ar[$i];
			}
		} else {
			$options = false;
			$defaultvalue = "{{none}}";
		}
		if (GetAttribute("system", $setting, 2) == "") {
			SetAttribute("system", $setting, $defaultvalue, 2, $options);
		}
	}
}
function FixTableAndFieldEngineAndCharset() {
	// All tables should be UTF8 and the engine should be MYISAM
	foreach (db_GetFlatArray("SHOW TABLES") AS $table) {
		// Strip the prefix in this case, it will be added back later
		if (substr($table, 0, strlen($GLOBALS['TBL_PREFIX'])) == $GLOBALS['TBL_PREFIX']) { // Check if the table is "ours"

			$table = substr($table, strlen($GLOBALS['TBL_PREFIX']), strlen($table) - strlen($GLOBALS['TBL_PREFIX']));

			if (!TableIsView($table)) {
				// Check if the table has the right character set. If not, fix.
				if (!TableHasProperty($table, "CHARSET=utf8")) {
					$sql = "ALTER TABLE `" . $GLOBALS['TBL_PREFIX'] . $table . "` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci";
					mcq($sql, $db);
					print $sql . "<br>\n";
				}
				// Check if the table has the right engine. If not, fix.
				if (!TableHasProperty($table, "ENGINE=MyISAM")) {
					$sql = "ALTER TABLE `" . $GLOBALS['TBL_PREFIX'] . $table . "` ENGINE = MYISAM ";
					mcq($sql, $db);
					print $sql . "<br>\n";
				}
			}

			foreach (db_GetArray("SHOW FIELDS FROM " . $GLOBALS['TBL_PREFIX'] . $table) AS $field) {
				$weigh = FieldHasProperty($table, $field[0], "CHARACTER SET latin1");
				if ($weigh != "" && $weigh != "no") {
					$sql = "ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . $table . " CHANGE `" . $field[0] . "` " . str_replace("CHARACTER SET latin1", "CHARACTER SET utf8", $weigh);
					$sql = str_replace("latin1_bin", "utf8_general_ci", $sql);
					mcq($sql, $db);
					print $sql . "<br>\n";
				}
			}
		}
	}
}
function TableIsView($table) {
	$ar = db_GetArray("SHOW CREATE TABLE " . $GLOBALS['TBL_PREFIX'] . $table);
	$ar = explode("\n" , $ar[0][1]);
	if (stristr($ar[0], "CREATE ALGORITHM")) {
		return(true);
	} else {
		return(false);
	}
		
}
function TableHasProperty($table, $literal_property) {
	$ar = db_GetArray("SHOW CREATE TABLE " . $GLOBALS['TBL_PREFIX'] . $table);
	$key = "`" . $field . "`";
	$ar = explode("\n" , $ar[0][1]);
	$cr = $ar[count($ar)-1];
//	DA("CHeck cr: $cr");
	if (stristr($cr, $literal_property)) {
		return(true);
	} else {
		return(false);
	}


	return($found);
}
function TableHasIndex($table, $fields) {
	$ar = db_GetArray("SHOW CREATE TABLE " . $GLOBALS['TBL_PREFIX'] . $table);
	$key = "(`" . implode($fields, "`,`") . "`)";
	$ar = explode("\n" , $ar[0][1]);
	$found = false;
	foreach ($ar AS $cr) {
		$cr = trim($cr);
		if (substr($cr, 0, 3) == "KEY" && (substr($cr, strlen($cr) - strlen($key), strlen($key)) == $key || substr($cr, strlen($cr) - strlen($key) -1, strlen($key)) == $key)) {
			$found = true;
			break;
		}
	}
	return($found);
}
function FieldHasProperty($table, $field, $property) {
	$ar = db_GetArray("SHOW CREATE TABLE " . $GLOBALS['TBL_PREFIX'] . $table);
	$key = "`" . $field . "`";
	$ar = explode("\n" , $ar[0][1]);
	$found = "no";
	foreach ($ar AS $cr) {
		$cr = trim($cr);
		if (substr($cr,0,strlen($key)) == $key) {
			if (stristr($cr, $property)) {
				if (substr($cr, strlen($cr)-1,1) == ",") {
					$cr = substr($cr, 0, strlen($cr)-1);
				}
				return($cr);
			} else {
				return(false);
			}
		}
	}
	return($found);
}

function TableHasField($table, $field, $type) {
	$ar = db_GetArray("SHOW CREATE TABLE " . $GLOBALS['TBL_PREFIX'] . $table);
	$key = "`" . $field . "`";
	$ar = explode("\n" , $ar[0][1]);
	$found = "no";
	foreach ($ar AS $cr) {
		$cr = trim($cr);
		if (substr($cr,0,strlen($key)) == $key) {
			if (stristr($cr, $type) || $type == false) {
				return("yes");
			} else {
				return("wrongtype");
			}
		}
	}
	return($found);
}

function DB_Connect($repository, $conn_to_slave) {
	global $db;
	include($GLOBALS['CONFIGFILE']);
	ClearAllRunningCache();
	if ($repository=="") $repository = "0";
	if (strlen($host[$repository]) > 0) {

		qlog(INFO, "Connecting to repository " . $repository . "(" . $conn_to_slave . ")");
		if ($conn_to_slave) {
			if ($slave[$repository]) {
				$chosen_host = $slave[$repository];
				$GLOBALS['FO_DB'] = $host[$repository];
			} else {
				qlog(INFO, "Tried to connect to a non-existing slave repository.");
				//print "Tried to connect to a non-existing slave repository.";
				return(false);
			}
			//qlog(INFO, "CONNECTING TO A SLAVE REPOSITORY $repository");
		} else {
			$chosen_host = $host[$repository];
			$GLOBALS['FO_DB'] = $slave[$repository];
			//qlog(INFO, "CONNECTING TO A MASTER REPOSITORY $repository");
			

		}

		$db_conn_str = $chosen_host . $repository;
		if ($GLOBALS['LAST_DB_CONN'] == $db_conn_str && is_resource($db)) {
			//qlog(INFO, "Skipping DB connection setup. Connection should be there already. (" . $t_user . "@" . $t_host . ")");
			$GLOBALS['TIMES_DB_CONNECTS_SKIPPED']++;
			$GLOBALS['repository'] = $repository;
			mcq("SET NAMES UTF8", $db);
			return($db);
		} else {
			if ($method[$repository] == "pconnect" || $GLOBALS['CMD_CONN_OVRW']) {
				//$GLOBALS['CMD_CONN_OVRW'] = true;
				if ($db = @mysql_pconnect($chosen_host, $user[$repository], $pass[$repository])) {
					$GLOBALS['CONN_TYPE'] = "pconnect (persistent)";
					$GLOBALS['CMD_CONN_OVRW'] = true;
					//qlog(INFO, "Using CONNECT instead of PCONNECT for database connections (" . $t_user . "@" . $t_host . ")");
					$GLOBALS['TIMES_DB_CONNECTS']++;
					$GLOBALS['LAST_DB_CONN'] = $db_conn_str;
					if (@mysql_select_db($database[$repository], $db)) {
						$GLOBALS['TBL_PREFIX'] = $table_prefix[$repository];
						$tmp = db_GetRow("SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='title'");
						$GLOBALS['title'] = $tmp[0];
						$GLOBALS['repository'] = $repository;
						mcq("SET NAMES UTF8", $db);
						return($db);
					} else {
						//print "SELECT FAIL " . $database[$repository] . "";
						return(false);
					}
				} else {
					//print "CONNECT FAIL " . $database[$repository] . "";
					return(false);
				}
			} else {
								
			
			
				if ($db = mysql_connect($chosen_host, $user[$repository], $pass[$repository])) {
		
					$GLOBALS['CMD_CONN_OVRW'] = false;
					
					$GLOBALS['CONN_TYPE'] = "regular (non-persistent)";
					//qlog(INFO, "Using PCONNECT instead of CONNECT for database connections (" . $t_user . "@" . $t_host . ")");
					$GLOBALS['TIMES_DB_CONNECTS']++;
					$GLOBALS['LAST_DB_CONN'] = $db_conn_str;
					if (@mysql_select_db($database[$repository], $db)) {
						$GLOBALS['TBL_PREFIX'] = $table_prefix[$repository];
						$tmp = db_GetRow("SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='title'");
						$GLOBALS['title'] = $tmp[0];
						mcq("SET NAMES UTF8", $db);
						$GLOBALS['repository'] = $repository;
						return($db);
					} else {
						//print "SELECT FAIL " . $database[$repository] . "";
						return(false);
					}
				} else {
					//print "CONNECT FAIL " . $database[$repository] . "";
					return(false);
				}
			}
		}
	} else {
		// qlog(INFO, "skip!");
		//print "Repository configuration invalid: " . $host[$repository] . " - hat nog value (" . $repository . ")";
	}
	
}
function FlattenArray($arr) {
     $flattened = array();
     foreach($arr AS $element) {
    	if ($element) {
             array_push($flattened, $element);
	}
     }
     return($flattened);
}

function SafeModeInterruptCheck() {
	if (is_array($GLOBALS['SAFE_MODE'])) {
		if (!in_array($GLOBALS['USERID'], $GLOBALS['SAFE_MODE'])) {
			PrintAD("Safe mode restriction in effect. Access to this function is denied.");
			EndHTML();
			exit;
		} else {
			qlog(INFO, "Safe mode is enabled, this function is dangerous but the current user is allowed to do this.");
			return(true);
		}
	}
}
function SetTIU($tbl_prefix) {
	$tmp = $GLOBALS['TBL_PREFIX'];
	if ($tbl_prefix) {
			$GLOBALS['TBL_PREFIX'] = $tbl_prefix;
	}
	$GLOBALS['TABLES_IN_USE'] = array(
		 $GLOBALS['TBL_PREFIX'] . "entity",
	  	 $GLOBALS['TBL_PREFIX'] . "accesscache",
	  	 $GLOBALS['TBL_PREFIX'] . "attributes",
		 $GLOBALS['TBL_PREFIX'] . "binfiles",
		 $GLOBALS['TBL_PREFIX'] . "blobs",
		 $GLOBALS['TBL_PREFIX'] . "cache",
		 $GLOBALS['TBL_PREFIX'] . "contactmoments",
		 $GLOBALS['TBL_PREFIX'] . "customer",
		 $GLOBALS['TBL_PREFIX'] . "datajournal",
		 $GLOBALS['TBL_PREFIX'] . "entitylocks",
		 $GLOBALS['TBL_PREFIX'] . "extrafields",
		 $GLOBALS['TBL_PREFIX'] . "internalmessages",
		 $GLOBALS['TBL_PREFIX'] . "journal",
		 $GLOBALS['TBL_PREFIX'] . "languages",
		 $GLOBALS['TBL_PREFIX'] . "loginusers",
		 $GLOBALS['TBL_PREFIX'] . "priorityvars",
		 $GLOBALS['TBL_PREFIX'] . "sessions",
		 $GLOBALS['TBL_PREFIX'] . "settings",
		 $GLOBALS['TBL_PREFIX'] . "statusvars",
		 $GLOBALS['TBL_PREFIX'] . "triggers",
		 $GLOBALS['TBL_PREFIX'] . "uselog",
		 $GLOBALS['TBL_PREFIX'] . "userprofiles",
		 $GLOBALS['TBL_PREFIX'] . "entityformcache",
		 $GLOBALS['TBL_PREFIX'] . "modules",
		 $GLOBALS['TBL_PREFIX'] . "failoverquerystore"	,
		 $GLOBALS['TBL_PREFIX'] . "publishedpages",
		 $GLOBALS['TBL_PREFIX'] . "publishedpagescache",
		 $GLOBALS['TBL_PREFIX'] . "flextabledefs",
		 $GLOBALS['TBL_PREFIX'] . "breadcrumtrail",
		 $GLOBALS['TBL_PREFIX'] . "extrafieldconditions",
 		 $GLOBALS['TBL_PREFIX'] . "triggerconditions",
 		 $GLOBALS['TBL_PREFIX'] . "todo",
  		 $GLOBALS['TBL_PREFIX'] . "templates",
 		 $GLOBALS['TBL_PREFIX'] . "tabmenudefinitions",
 		 $GLOBALS['TBL_PREFIX'] . "mailqueue",
		 $GLOBALS['TBL_PREFIX'] . "extrafieldrequiredconditions"
	);

	$GLOBALS['EXCLUDE_FROM_REP'] = array();
	
	if ($GLOBALS['title']) {
		$tmpq = GetFlextableDefinitions(false, false, true, "both");
		foreach ($tmpq AS $ft) {
			array_push($GLOBALS['TABLES_IN_USE'], $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid']);
//			print_r($ft);
			if ($ft['exclude_from_rep'] == "y") {
				array_push($GLOBALS['EXCLUDE_FROM_REP'], $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid']);
			}
		}
	}

	// Exclude list (queries not to be replicated, by table name

	array_push($GLOBALS['EXCLUDE_FROM_REP'], $GLOBALS['TBL_PREFIX'] . "accesscache");
	array_push($GLOBALS['EXCLUDE_FROM_REP'], $GLOBALS['TBL_PREFIX'] . "failoverquerystore");
	array_push($GLOBALS['EXCLUDE_FROM_REP'], $GLOBALS['TBL_PREFIX'] . "entityformcache");
	array_push($GLOBALS['EXCLUDE_FROM_REP'], $GLOBALS['TBL_PREFIX'] . "cache");
	array_push($GLOBALS['EXCLUDE_FROM_REP'], $GLOBALS['TBL_PREFIX'] . "entitylocks");
	$GLOBALS['TBL_PREFIX'] = $tmp;

//	print_r($GLOBALS['EXCLUDE_FROM_REP']);
}

// User defined error handling function
function handle_error($mysqlerror,$sql) {
	global $REMOTE_ADDR, $HTTP_SERVER_VARS, $HTTP_POST_VARS, $HTTP_USER_AGENT, $CRM_SHORTVERSION;



	$GLOBALS['ERROR_IN_QUERY'] = True;
	$mysqlerror .= "\n\nBACKTRACE:\n" . GetBackTrace() . "\n\n";

	if (!$GLOBALS['PID_STATUS_SET']) {

		$GLOBALS['PID_STATUS_SET'] = true;
	}
	if ($GLOBALS['error_msg_counter'] > 15) {
	//	log_msg("More than 15 crashes. Exiting!","");
		qlog(INFO, "More than 15 crashes. Exiting!");
		print "More than 15 crashes. Exiting!\n";
		exit;
	}
	if ($GLOBALS['error_msg_counter'] < 20) {
		$GLOBALS['error_msg_counter']++;
		qlog(INFO, "Crash encountered, repos " . $GLOBALS['title'] . ": no." .  $GLOBALS['error_msg_counter']);
		$mysqlerrorx = str_replace("error", "e r r o r ", $mysqlerror);
		$mysqlerrorx = str_replace("warning", "w a r n i n g ", $mysqlerror);
		qlog(INFO, "Message: " . $mysqlerrorx);
		if (!stristr("blobs",$query)) {
			qlog(INFO, "Query: " . ColorizeSQL($sql));
		} else {
			qlog(INFO, "Query: BLOB");
		}
	//	log_msg("ERROR: Crash encountered: no." .  $GLOBALS['error_msg_counter'] . " Message: " . $mysqlerror . " Query: " . $sql, "");
	}
	if (substr($sql, 0, 6) == "SELECT" || substr($sql, 0, 6) == "select") {
		$regarding_query = "No information will be lost because of this error.";
	} elseif ((substr($sql, 0, 6) == "UPDATE" || substr($sql, 0, 6) == "update") || (substr($sql, 0, 6) == "INSERT" || substr($sql, 0, 6) == "INSERT") || (substr($sql, 0, 5) == "ALTER" || substr($sql, 0, 5) == "alter")) { 
		$regarding_query = "Information might be lost because of this error.";
	} else {
		$regarding_query = "";
	}

	if ($GLOBALS['ShowMinimalErrorMessages'] != "Yes") {
		$print .= "<table><tr><td><a href=\"javascript:showLayer('SQLLog" . $GLOBALS['error_msg_counter'] . "')\"><img  src='images/error.gif' alt='MySQL error in query occured'></a> Query error! " . $regarding_query . "<br>";
		$print .= "<div id='SQLLog" . $GLOBALS['error_msg_counter'] . "' style='display: none'>";
		$print .= "<table width='90%' border='1'><tr><td>The error message from the database is:</td></tr>";
		$print .= "<tr><td><span class='mnspc'>" . $mysqlerror . "</span></td></tr>";
		$print .= "<tr><td>&nbsp;</td></tr>";
		$print .= "<tr><td>Last query on: " . $GLOBALS['LAST_SERVER'] . "</td></tr>";
		$print .= "<tr><td>The concerning query is:<br></td></tr>";
		$print .= "<tr><td><span class='mnspc'>$sql</span></td></tr>";
		$deb = "Host: " . getenv("SERVER_NAME") . "<br>";
		$deb .= "Client: $REMOTE_ADDR<br>";
		$deb .= "Location: " . $_SERVER['PHP_SELF'] . "<br>";
		$print .= "<tr><td><br>$deb</td></tr></table>";
		$print .= "</div></td></tr></table>";
	} else {
		$print .= "<img src='images/error.gif' alt='MySQL error in query occured'></a> Query error! Your administrator has been notified. " . $regarding_query;
	}
	if ($_SERVER['REMOTE_ADDR']!='' && !$GLOBALS['DONTPRINTERRORS']) {
		print nl2br($print);
	} elseif (!$GLOBALS['DONTPRINTERRORS']) {
		$print = br2nl($print);
		print strip_tags($print);
	}
	$t = br2nl($print);

	//$t = htme($t);
	$t = strip_tags($t);

	if (!strstr($t, $GLOBALS['TBL_PREFIX'] . "internalmessages") && !strstr($t, "No database selected")) {
	//	AddMessage("admin", $GLOBALS['USERID'], "<img src='images/error.gif' alt=''> A user encountered an SQL error!", $t);
		log_msg("ERROR: A user encountered an SQL error: " . $t);
	}
}
function mres($x) {
	return(mysql_real_escape_string($x));
}
function htme($x) {
	return(htmlspecialchars($x,ENT_QUOTES,"UTF-8"));
}

function CheckIPSourceSecurity() {
	global $nonavbar;
	if (strlen(trim($GLOBALS['ALLOWEDIPADRESSES'])) > 6 && !$GLOBALS['CMDLINE'] && !$GLOBALS['CRON_RUNNING']) {
		$ip_arr = explode(";", $GLOBALS['ALLOWEDIPADRESSES']);
		if (is_array($ip_arr) && sizeof($ip_arr)>0) {
			$ip = $_SERVER['REMOTE_ADDR'];
			if (!in_array($ip, $ip_arr) && (substr($_SERVER['SCRIPT_NAME'],strlen($_SERVER['SCRIPT_NAME'])-11,11) != "message.php") && (!$_REQUEST['logout'])) {
				qlog(INFO, "Access from IP $ip is NOT ALLOWED. Denied.");
				DisplayCSS();
				print "<table><tr><td><a href='index.php?logout=1'>Click here to log out</a><br><br>";
				PrintAD("$ip: Access to this application is not allowed from your source address");
				print "</td></tr></table>";
				EndHTML();
				exit;
			} elseif (!in_array($ip, $ip_arr) && substr($_SERVER['SCRIPT_NAME'],strlen($_SERVER['SCRIPT_NAME'])-11,11) == "message.php") {
				$_REQUEST['nonavbar'] = 1;
			} else {
				qlog(INFO, "Access from IP $ip is granted");
			}
		}
	} else {
		qlog(INFO, "No IP-based access control enabled or string not understood.");
	}
}

function SaveFailOverQuery($sql, $host) {
	if (trim($sql) != "" && (stristr($sql, "UPDATE") || stristr($sql, "INSERT") || stristr($sql, "ALTER") || stristr($sql, "CREATE") || stristr($sql, "REPLACE") || stristr($sql, "DELETE") || stristr($sql, "TRUNCATE") || stristr($sql, "DROP"))) {

		if ($sql == "SET NAMES UTF8") {
			
		} elseif (!stristr($sql, "failoverquerystore")) {
			$query = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "failoverquerystore(query, targethost, microtime_float) VALUES('". mres($sql) . "','" . mres($host) . "'," . microtime_float() . ")";
			mcq($query, $db);
		}
	} else {
		//qlog(INFO, "SaveFailOverQuery called with empty or incorrect SQL param!");
	}

}
function SynchroniseAllFailOverDatabases($repos=false) {
//		return;
		include($GLOBALS['CONFIGFILE']);
		$d = date('U');
		if ($d < $GLOBALS['SYNC_DISABLED_UNTIL'] && is_numeric($GLOBALS['SYNC_DISABLED_UNTIL'])) {
			qlog(INFO, "Synchronisation is disabled until " . date("Y-m-d H:i:s", $GLOBALS['SYNC_DISABLED_UNTIL']));
			return(true);
		}
		for ($i=0;$i<64;$i++) {
			if ($i == $repos || $repos == false) {
				if ($host[$i] && $slave[$i]) {
						if (DB_Connect($i, false)) {
							$tmp = $GLOBALS['ORIGINAL_REPOSITORY'];
							$GLOBALS['ORIGINAL_REPOSITORY'] = "$i";
							SynchroniseFailOverDatabase();
							$GLOBALS['ORIGINAL_REPOSITORY'] = "$tmp";
						}
				}
			}
		}
		$db = DB_Connect($GLOBALS['ORIGINAL_REPOSITORY'], false);
}

function SyncDBs($repos) {
//	print "<h1>SYNCDBS called ";
//	debug_print_backtrace();
//	print "</h1>";
	if (!$_REQUEST['AjaxAssist']) {
			include($GLOBALS['CONFIGFILE']);
			if (!is_numeric($repos)) {
				$repos = $GLOBALS['repository_nr'];
			}
		  $d = date('U');
		  if (($d < $GLOBALS['SYNC_DISABLED_UNTIL'] && is_numeric($GLOBALS['SYNC_DISABLED_UNTIL'])) || ($GLOBALS['FAILOVER_CACHEONLY'] == "Yes" && !$GLOBALS['CRON_RUNNING'])) {
				if ($GLOBALS['FAILOVER_CACHEONLY'] == "Yes") {
						qlog(INFO, "Synchronisation is disabled; FAILOVER_CACHEONLY is true. Synchronisation will be performed by cron job only");
				} else {
						qlog(INFO, "Synchronisation is disabled until " . date("Y-m-d H:i:s", $GLOBALS['SYNC_DISABLED_UNTIL']));
				}
				return(true);
		  }
			// First check if both are up. If not, syncing is useless
			qlog(INFO, "Synchronizing repository " . $repos);
			if (DB_Connect($repos, false)) {
				// Master is up
				if (DB_Connect($repos, true)) {
					//qlog(INFO, "Slave is up and reacheable");
					// Slave is also up
					$code = md5(rand() . rand() . date('U') . $GLOBALS['USERNAME'] . $GLOBALS['USERID']);

					mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "failoverquerystore SET lockhash='" . mres($code) . "' WHERE (lockhash='0' OR lockhash='') ORDER BY microtime_float", $db);

					$qs = array();
					$sql = "SELECT query, microtime_float, targethost FROM " . $GLOBALS['TBL_PREFIX'] . "failoverquerystore WHERE lockhash='" . mres($code) . "' ORDER BY microtime_float";
					$res = mcq($sql, $db);
					while ($row = @mysql_fetch_array($res)) {
						$tmp = array();
						$tmp['query'] = $row['query'];
						$tmp['microtime'] = $row['microtime_float'];
						if ($row['targethost'] == $slave[$repos]) {
							$tmp['host'] = true;
							array_push($qs, $tmp);
						} elseif ($row['targethost'] == $host[$repos]) {
							$tmp['host'] == false;
							array_push($qs, $tmp);
						} else {
							qlog(ERROR, "ERROR. Failover querystore contains references to an unknown target host database!");
							log_msg("ERROR. Failover querystore contains references to an unknown target host database!");
						}
					}
					qlog(INFO, "Loaded " . sizeof($tmp) . " queries into memory");
					DB_Connect($repos, false); // Connect back to mai n database
					mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "failoverquerystore SET lockhash='" . mres($code) . "' WHERE lockhash='' ORDER BY microtime_float", $db);

					$sql = "SELECT query, microtime_float,targethost FROM " . $GLOBALS['TBL_PREFIX'] . "failoverquerystore WHERE lockhash='" . mres($code) . "' ORDER BY microtime_float";
					$res = mcq($sql, $db);
					while ($row = @mysql_fetch_array($res)) {
						$tmp = array();
						$tmp['query'] = $row['query'];
						$tmp['microtime'] = $row['microtime_float'];
						if ($row['targethost'] == $slave[$repos]) {
							$tmp['host'] = true;
							array_push($qs, $tmp);
						} elseif ($row['targethost'] == $host[$repos]) {
							$tmp['host'] == false;
							array_push($qs, $tmp);
						} else {
							qlog(ERROR, "ERROR. Failover querystore contains references to an unknown target host database!");
							log_msg("ERROR. Failover querystore contains references to an unknown target host database!");
						}
					}

					// Now actually sync
					$qs = vsort($qs,'microtime', true, false); // Sort by microtime
					$tot = sizeof($qs);
					foreach ($qs AS $row) {
						DB_Connect($repos, $row['host']); // Connect to concerning database
						$a = mysql_query($row['query']) or (handle_error(mysql_error(),$row['query']));
						if ($GLOBALS['CMDSYNC']) {
							$sjdkhf++;
							print "\015" . $sjdkhf . " / " . $tot;
						}
						//print "Executing  query " . $row['query'] . "\n";
					}
					DB_Connect($repos, true);
					mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "failoverquerystore WHERE lockhash='" . mres($code) . "'", $db);
					//print "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "failoverquerystore WHERE lockhash='" . mres($code) . "'";
					DB_Connect($repos, false);
					mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "failoverquerystore WHERE lockhash='" . mres($code) . "'", $db);
				} else {
					qlog(INFO, "Slave is down. No sync.");
					UpdateSetting("SYNC_DISABLED_UNTIL", (date('U') + ($GLOBALS['SYNC_TIMEOUT'] * 60)));
					return(false);
				}
			} else {
				qlog(INFO, "Master is down. No sync.");
				UpdateSetting("SYNC_DISABLED_UNTIL", (date('U') + ($GLOBALS['SYNC_TIMEOUT'] * 60)));
				return(false);
			}
	}
}
function SynchroniseFailOverDatabase() {
		SyncDBs($GLOBALS['repository_nr']);
}
function mcq($sql,$db) {
	global $mysql_query_counter, $logqueries, $name, $debug, $title, $lang;
	if ($GLOBALS['logqueries']) {
		$mysql_query_counter++;
		@$fp = fopen($GLOBALS['PATH_TO_BASE'] . "querylog.txt","a");
		@fputs($fp,"SQL: ($name) ($mysql_query_counterc
		) (" . date('U') . "): " . $sql ."\n");
		@fclose($fp);
		if ($GLOBALS['qlog_onscreen']) {
			$GLOBALS['pagelog'] .=  "SQL: ($name) : " . $sql . "\n";
		}
	}

//	if (strtoupper(substr($sql,0,8)) == "TRUNCATE") {
//		DA($sql);
//	}

	$tmp1 = strtoupper(substr(trim($sql),0,5));


	// try to connect to fail-over database, if nescessary
	if ($GLOBALS['USE_FAILOVER'] == "Yes" && $tmp1 != "SHOW " && $tmp1 != "SELEC" && !stristr($sql, $GLOBALS['TBL_PREFIX'] . "failoverquerystore") && !stristr($sql, $GLOBALS['TBL_PREFIX'] . "todo")) {

		if ($tmp1 == "UPDAT") { // Update query, fetch table
			$tt = explode(" ", $sql);
			$table = $tt[1];
			if (in_array($table, $GLOBALS['EXCLUDE_FROM_REP'])) {
				$skip = true;
			}
			//qlog(INFO, "Found table: $table (update)");
		} elseif ($tmp1 == "INSER" || $tmp1 == "DELET" || $tmp1 == "TRUNC") { // Insert query, fetch table
			$tt = explode(" ", $sql);
			$ttt = explode("(", $tt[2]);
			$table = trim($ttt[0]);
			if (in_array($table, $GLOBALS['EXCLUDE_FROM_REP'])) {
				$skip = true;
			}
			//qlog(INFO, "Found table: $table (insert) ");
		}
		

		if (!$skip && !$GLOBALS['IN_SYNC_FUNC'] && $GLOBALS['FO_DB']) {
			// Store query in failover table
			qlog(INFO, "Saving query for replication to " . $GLOBALS['FO_DB'] . " ...");
			SaveFailOverQuery($sql, $GLOBALS['FO_DB']);
		} else {
			// ?
			unset($skip);
		}
	} else {
//			system("echo '" . date('U') . " NOT logging query for some reason UF: " . $GLOBALS['USE_FAILOVER'] . " sql:" . $sql . "'|logger");
	}

	unset($skip);

	if ($GLOBALS['logtext']) {
		$tr = microtime_float();
	}
	$a = mysql_query($sql) or (handle_error(mysql_error(),$sql));
	
	$GLOBALS['mysql_query_counter']++;

	if ($GLOBALS['logtext'] && !$GLOBALS['attaching']) {
		$tm = microtime_float() - $tr;
		if ($tm > 1 && ($GLOBALS['SlowQueryMentions'] < 3 || !$GLOBALS['SlowQueryMentions'])) {
			$GLOBALS['SlowQueryMentions']++;
			if (!stristr($sql, "blobs")) {
				$show = $sql;
			} else {
				$show = " {{binary query - not showing}} ";
			}
			
			log_msg("WARNING: An SQL query took more than a second to finish: " . $tm . "s : " . $show);
			qlog(WARNING, "WARNING: MAX An SQL query took more than a second to finish: " . $tm . "s : " . $show);
			
		}

		if ($tm > $GLOBALS['max_time_query']) {
			$GLOBALS['max_time_query'] = $tm;
			$GLOBALS['max_time_query_sql'] = $sql;
		}
	
	}


	return($a);
}
function microtime_float()
{
   list($usec, $sec) = explode(" ", microtime());
   return ((float)$usec + (float)$sec);
}
function LogContactMoment($eidcid,$type,$to,$meta,$body) {
	mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "contactmoments (id, eidcid, type, user, meta, body, timestamp_last_change, to) VALUES ('', '" . mres($eidcid) . "', '" . mres($type) . "', '" . mres($GLOBALS['USERID']) . "', '" . mres($meta) . "','" . mres($body) . "', NOW( ) , '" . mres($to) . "')", $db);
	qlog(INFO, "Contact moment logged.");
}
// The supporting qlog function to log custom text to qlist.txt
function qlog($loglevel, $msg) {
	global $eid;
	if ($GLOBALS['DISABLE_DECISIONS']) {
		$GLOBALS['DECISIONTRACE']= array();
	}
//	DA(memory_get_usage());


	if (!$GLOBALS['logtext']) {
		return(true);
	}
	$do_log = false;


        if (is_numeric($GLOBALS['logtext']))
        {
            if (($loglevel >= $GLOBALS['logtext']) && ($loglevel != DEBUG))
            {
                $do_log = true;
            }
            elseif (($GLOBALS['logtext'] == DEBUG) && (($loglevel == DEBUG) || ($loglevel == ERROR) || ($loglevel == WARNING)))
            {
                $do_log = true;
            }
            if (($loglevel == ERROR) && ($GLOBALS['logtext'] == DEBUG))
            {
                $msg .= "\n\n" . GetBackTrace() . "\n";
            }
        }
        else
        {
            if (($GLOBALS['logtext'] == true) || ($GLOBALS['ShowTraceLink'] == true) || ($GLOBALS['UC']['PERSONALTRACE'] == "On"))
            {
                $do_log = true;
            }
        }


	if ($do_log) {

		if (is_numeric($eid)) {
			$msg = "" . $eid . "::" . $msg;
		}
		if (is_array($msg)) {
			$msg2 = "Array:\n";
			$msg2 .= string_r($msg);
			$msg = $msg2;
		}

		if (strstr($msg, "ACCESS DECISION")) {
			if (!is_array($GLOBALS['DECISIONTRACE']))
			{
				$GLOBALS['DECISIONTRACE'] = array();
			}
			array_push($GLOBALS['DECISIONTRACE'], $msg);

		}
		if ($GLOBALS['ShowFunctionTrace']) {
			ob_start();
			debug_print_backtrace();
			$t = ob_get_contents();
			ob_end_clean();
			$msg .= "\n###################################################################################################################\nBacktrace of this message:\n-------------------------------------------------------------------------------------------------------------------\n" . $t . "\n\n###################################################################################################################";
		}
		if ($GLOBALS['USERID'] && !$GLOBALS['USERNAME']) {
			$x = GetUserRow($GLOBALS['USERID']);
			$name = $x['name'];
			$GLOBALS['USERNAME'] = $name;
		} elseif ($GLOBALS['USERNAME']) {
			$name = $GLOBALS['USERNAME'];
		} else {
			$name = "NOUSER";
		}
		if ($GLOBALS['tracelogused'] == "") {
			$GLOBALS['tracelogused'] = true;
			qlog(INFO, $GLOBALS['PRODUCT'] . " " . $GLOBALS['VERSION'] . " on " . $_SERVER['SERVER_NAME'] . " chatting with " . $_SERVER['REMOTE_ADDR']);
		}
		$bla = debug_backtrace();

		$file = $bla[1]['file'];
		// Strip path from filename (UNIX)
		$file = explode("/", $file);
		$file = $file[sizeof($file)-1];
		// Strip path from filename (Windows)
		$file = explode("\\", $file);
		$file = $file[sizeof($file)-1];
		$func = fillout($file,20) . fillout($bla[1]['line'], 5) . "   " . $bla[1]['function'] ;
		if ($file!="" && $bla[1]['function']!="require_once") {
		} else {

			$file = $bla[0]['file'];

			// Strip path from filename (UNIX)
			$file = explode("/", $file);
			$file = $file[sizeof($file)-1];
			// Strip path from filename (Windows)
			$file = explode("\\", $file);
			$file = $file[sizeof($file)-1];
			$func = fillout($file,20) . fillout($bla[0]['line'],7) . "  $a " . $bla[0]['function'] ;
		}
		$curmem = round(memory_get_usage()/1024/1024,2);
		if ($curmem > 100) $curmem = "MEM_WARN:" . $curmem;
		$rule .= date('Ymd H:i:s') . " " . microtime_float() . " MEM:" . $curmem . " " . fillout($GLOBALS['ORIGINAL_REPOSITORY'], 3) ." " . fillout($name, 8) . " " . $a . " " .  $func  . "::" . $msg . "\n";

		if (!strstr($msg, "CACHE ")) {
			$GLOBALS['tracelog'] .=  $rule;
		}



		if (strstr($msg,"CACHE")) {
			$GLOBALS['CACHECOUNTER']++;
			$msg = "hit " . $cachecounter . " " . $msg;
		}

		
		$fp = @fopen($GLOBALS['PATH_TO_BASE'] . "qlist.txt","a");
		@fputs($fp, strip_tags($rule));
		@fclose($fp);
		

		$GLOBALS['pagelog'] .=  $rule;


		if ($GLOBALS['UC']['PERSONALTRACE'] == "On") {
			mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "cache(value,epoch) VALUES('TRACE" . mres($GLOBALS['ORIGINAL_REPOSITORY'] . $GLOBALS['USERID']) . ": " . mres($rule) . "','" . date('U') . "')", $db);
		}
	}
	return(0);
}
function qlog_trace() {
	ob_start();
	debug_print_backtrace();
	$t = ob_get_contents();
	ob_end_clean();
	qlog(INFO, "BACKTRACE:\n\n" . $t);
}
function array_size($a){
    $size = 0;
    while(list($k, $v) = each($a)){
        $size += is_array($v) ? array_size($v) : strlen($v);
    }
    return $size;
} 
function string_r($array /*indent*/)
{
   $tabsize = "    ";
   $arg = func_get_args();
   $indent = $arg[1];
   if (func_num_args() == 1) $indent = $tabsize;
   foreach ($array as $name => $value)
   {
       if (is_array($value))
       {
           $contentString .= $indent.'['.$name.'] => Array' . "\n".$indent.$tabsize."(\n";
           $contentString .= string_r($value, $indent. $tabsize.$tabsize);
           $contentString .= $indent .$tabsize. ")\n\n";
       }
       else
       {
           $contentString .= $indent . '['.$name.']' . '  =>  ' . $value . "\n";
       }
   }
   if (func_num_args() == 1)
   {
       $contentString = "Array\n(\n" . $contentString . ")\n";
   }
   return $contentString;
}
// caching functions:
function ClearCacheArrays($progress=false) {

	// This functions is utterly useless for normal operation. It's
	// only here for debug/test to see how much is actually cached.

	$a = sizeof($GLOBALS['customers']);
	$a += sizeof($GLOBALS['usernames']);
	$a += sizeof($GLOBALS['useremails']);
	$a += sizeof($GLOBALS['CLLEVELS']);
	$a += sizeof($GLOBALS['statuscolor']);
	$a += sizeof($GLOBALS['prioritycolor']);
	$a += sizeof($GLOBALS['CheckedCustomerAccessArray']);
	$a += sizeof($GLOBALS['CheckedEntityAccessArray']);
	unset($GLOBALS['customers']);
	unset($GLOBALS['usernames']);
	unset($GLOBALS['useremails']);
	unset($GLOBALS['CLLEVELS']);
	unset($GLOBALS['statuscolor']);
	unset($GLOBALS['prioritycolor']);
	unset($GLOBALS['CheckedCustomerAccessArray']);
	unset($GLOBALS['CheckedEntityAccessArray']);

	qlog(CACHE, "CACHE arrays emptied - " . $a . " records");
	if ($progress) {
		print "Cleared build-up page cache: $a records.\n";
	}

}

function LoadCustomerCache() {

	$customers_cache = array();
	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE active!='no'";
	$res = mcq($sql, $db);
	while ($row = mysql_fetch_array($res)) {
		array_push($customers_cache, $row);
	}
	qlog(INFO, "All customer arrays loaded into customers array");

	return($customers_cache);
}

function GetCustomerName($customer_id) {
	if ($customer_id != "" && is_numeric($customer_id)) {
		if ($GLOBALS['PageCache']['CustomerNames'][$customer_id] == "") {
			$row = db_GetRow("SELECT custname FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($customer_id) . "'");
			$GLOBALS['PageCache']['CustomerNames'][$customer_id] = $row[0];
			$ret = $row[0];
		} else {
			qlog(CACHE, "CACHE GetCustomerName $customer_id " . $GLOBALS['PageCache']['CustomerNames'][$customer_id]);
			$ret = $GLOBALS['PageCache']['CustomerNames'][$customer_id];
		}
	} else {
		$ret = "n/a";
		qlog(INFO, "GetCustomerName function called with empty customer_id param!");
	}

	return($ret);
}
function GetCustomerOwner($customer_id) {

	if ($customer_id) {
		if (!$GLOBALS['PageCache']['CustomerOwners'][$customer_id]) {
			$row = db_GetRow("SELECT customer_owner FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id=" . mres($customer_id));
			$GLOBALS['PageCache']['CustomerOwners'][$customer_id] = $row[0];
			$ret = $row[0];
		} else {
			qlog(CACHE, "CACHE GetCustomerOwner $customer_id " . $GLOBALS['CustomerOwners'][$customer_id]);
			$ret = $GLOBALS['PageCache']['CustomerOwners'][$customer_id];
		}
	} else {
		$ret = "n/a";
		qlog(INFO, "GetCustomerOwner function called with empty customer_id param!");
	}

	return($ret);
}
function GetCustomerEmail($customer_id) {

	if ($customer_id) {
		if (!$GLOBALS['PageCache']['CustomerEmailAddresses'][$customer_id]) {
			$row = db_GetRow("SELECT contact_email FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id=" . mres($customer_id));
			$GLOBALS['PageCache']['CustomerEmailAddresses'][$customer_id] = $row[0];
			$ret = $row[0];
			qlog(INFO, "$customer_id " . $GLOBALS['PageCache']['CustomerEmailAddresses'][$customer_id]);
		} else {
			qlog(CACHE, "CACHE $customer_id " . $GLOBALS['PageCache']['CustomerEmailAddresses'][$customer_id]);
			$ret = $GLOBALS['PageCache']['CustomerEmailAddresses'][$customer_id];
		}
	} else {
		$ret = "";
		qlog(INFO, "GetCustomerEmail function called with empty customer_id param!");
	}

	return($ret);
}

function GetNumOfAttachments($entid) {


	if (!is_array($GLOBALS['PageCache']['NumOfAttachements'])) {
		qlog(INFO, "Loaded all attachment numbers into memory");
		$sql = "SELECT DISTINCT(koppelid),COUNT(*) AS aantal FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE " . $GLOBALS['TBL_PREFIX'] . "binfiles.version_belonging_to=0 GROUP BY koppelid";
		$res = mcq($sql, $db);
		while ($row=mysql_fetch_array($res)) {
			$GLOBALS['PageCache']['NumOfAttachements'][$row['koppelid']] = $row['aantal'];
		}
	}
	if ($GLOBALS['PageCache']['NumOfAttachements'][$entid]) {
		return($GLOBALS['PageCache']['NumOfAttachements'][$entid]);
	} else {
		return("0");
	}
}
function GetUserLoginNameByID($id) {
		if ($id!="") {
			$row = db_GetRow("SELECT name FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($id) . "'");
			return($row['name']);
		}
}
function GetUserID($username) {
		if ($username!="") {
			$row = db_GetRow("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($username). "'");
			return($row['id']);
		}
}
function GetUsersOfGroup($groupid) {
		if ($groupid == 0 || $groupid == "0" || $groupid == "admin") {
			$row = db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE administrator='yes'");
		} elseif ($groupid > 0) {
			$row = db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE PROFILE='" . mres($groupid). "'");
		}
		return($row);
}
function GetGroups() {
		$list = db_GetArray("SELECT name, id FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles ORDER BY name");
		$list[] = array("name" => "Administrators", "id" => "0");
		return($list);
}
function GetGroup($userid) {
		if ($userid!="") {
			return(db_GetValue("SELECT PROFILE FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($userid). "'"));
		}
}
function GetGroupName($groupid) {
		if ($groupid == 0) {
			return("Administrators");
		} elseif ($groupid!="") {
			$row = db_GetRow("SELECT name FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . mres($groupid) . "'");
			return($row['name']);
		}
}
function GetUserIDByFullname($fullname) {
		if ($fullname!="") {
			$row = db_GetRow("SELECT id,1+1 FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE FULLNAME='" . mres($fullname). "'");
			return($row['id']);
		}
}
function GetUserList() {
	$users = array();
	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user%'";
	$res = mcq($sql, $db);
	while ($row = mysql_fetch_array($res)) {
		array_push($users, $row);
	}
	return($users);
}
function GetUserRow($id) {
		if ($id!="") {
			$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($id). "'");
			return($row);
		}
}
function GetPersonaleMailCredentials($userid) {
		if ($userid!="") {
			$row = db_GetRow("SELECT EMAILCREDENTIALS FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($userid) . "'");
			return(@unserialize($row['EMAILCREDENTIALS']));
		}
}
function GetUserAccountName($userid) {
	if (is_numeric($userid)) {
		$t = db_GetRow("SELECT name FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($userid) . "'");
		return($t['name']);
	}
}
function GetUserName($userid) {
	if (!is_numeric($userid) || $userid == 0) {
		return("");
	}
	if ($GLOBALS['PageCache']['UserNames'][$userid] != "" && is_numeric($userid)) {
		return($GLOBALS['PageCache']['UserNames'][$userid]);
	}
	$cl = GetClearanceLevel($GLOBALS['USERID']);

	if ($userid == 2147483647) {
        return("[n/a]");
    }
	if (!$GLOBALS['PageCache']['usernames'][$userid] && is_numeric($userid)) {
		if ($userid) {
			// fill array at once with all userid's
				$res = mcq("SELECT id,FULLNAME,name FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers", $db);
				while ($row = mysql_fetch_array($res)) {
					if ($row['FULLNAME']=="") {
						$row['FULLNAME'] = $row['name'];
					}
					
					if ($userid == $row['id']) {
						$ret = $row['FULLNAME'];
					}
					if ($ret=="" || $ret=="-") {
						$ret = "[n/a]";
					}

					if (@in_array("HideUserNames", $cl) && ($GLOBALS['USERID'] != $userid)) {
						$GLOBALS['PageCache']['UserNames'][$row['id']] = "[n/a]";
					} else {
						$GLOBALS['PageCache']['UserNames'][$row['id']] = $row['FULLNAME'];
					}
				}


		} else {
			$ret = "n/a";
			qlog(INFO, "INFO - GetUserName function called with empty userid param!");
		}
	} elseif (!is_numeric($userid) && $userid) {
		$ret = GetUserNameByName($userid);
	} else {
		$ret = $GLOBALS['PageCache']['usernames'][$userid];
		qlog(CACHE, "CACHE GetUserName $userid " . $GLOBALS['PageCache']['usernames'][$userid]);
	}

	return($ret);
}
function GetUserProfiles($specific_id = false) {

	$profs = array();
	$sql = "SELECT id, name FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE active='yes' ORDER BY name";
	$result= mcq($sql,$db);
	while ($row= mysql_fetch_array($result)) {
		array_push($profs,array($row['id'],$row['name']));
		if ($specific_id == $row['id']) {
			return($row['name']);
		}
	}
	array_push($profs, array("0", "Administrators"));
	return($profs);
}
function GetProfiles() {
	$row = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE active='yes'");
	$row[] = array("id" => "0", "name" => "Administrators", "administrator" => "yes");
	return($row);
}
function GetProfileArray($prof_num) {
	$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . mres($prof_num) . "' AND active='yes'");
	return($row);
}
function GetUserEmail($userid) {

	if (!$GLOBALS['PageCache']['useremails'][$userid]) {
		if (is_numeric($userid)) {
			$row = db_GetRow("SELECT email FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($userid) . "'");
			$GLOBALS['PageCache']['useremails'][$userid] = $row['email'];
			$ret = $row['email'];
			if ($ret=="") {
				$ret = "";
			}
		} else {
			$ret = "";
			qlog(INFO, "INFO - GetUserEmail function called with empty userid param!");
		}
	} else {
		$ret = $GLOBALS['PageCache']['useremails'][$userid];
		qlog(CACHE, "CACHE GetUserEmail getset $userid " . $GLOBALS['PageCache']['useremails'][$userid]);
	}

	return($ret);
}
function GetUserNameByName($userid) {

	if ($userid) {
			$row = db_GetRow("SELECT FULLNAME,name FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($userid) ."'");
			if ($row['FULLNAME'] == "") $row['FULLNAME'] = $row['name'];
			$ret = $row['FULLNAME'];
	} else {
		$ret = "n/a";
		qlog(INFO, "INFO - GetUserNameByName function called with empty username param!");
	}

	if ($ret == "") {
				$ret = "n/a";
	}
	return($ret);
}
function GetFileName($fileid) {

	// not caching
	if ($fileid) {
		$row = db_GetRow("SELECT filename FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE fileid='" . mres($fileid) . "'");
		return($row['filename']);
	} else {
		return false;
	}
}

function GetTemplateName($templateid) {

	// not caching
	if ($templateid) {
		$row = db_GetRow("SELECT templatename FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templateid='" . mres($templateid) . "'");
		
		return($row['templatename']);
	} else {
		return false;
	}
}

function GetTemplateType($templateid) {
	// not caching
	if ($templateid) {
		$row = db_GetRow("SELECT templatetype FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templateid='" . mres($templateid) . "'");
		return($row['templatetype']);
	} else {
		return false;
	}
}
function GetFileType($fileid) {
	// not caching
	if ($fileid) {
		$row = db_GetRow("SELECT filetype FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE fileid='" . mres($fileid) . "'");
		return($row['filetype']);
	} else {
		return false;
	}
}
function GetFileListArray($eid) {
	$ret = array();
	$q = mcq("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid='" . mres($eid) . "' AND version_belonging_to=0", $db);
	while ($row = mysql_fetch_array($q)) {
		array_push($ret, $row);
	}
	return($ret);
}
function GetTemplatesOfType($type) {
	$ret = array();
	$q = mcq("SELECT *,date_format(timestamp_last_change, '%a %M %e, %Y %H:%i') AS dt FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='" . mres($type) . "'", $db);
	while ($row = mysql_fetch_array($q)) {
		array_push($ret, $row);
	}
	return($ret);
}

function SetFileContent($fileid, $content) {
	if (is_numeric($fileid)) {
		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "blobs SET content='" . mres($content) . "',gz='n' WHERE fileid='" . mres($fileid) . "'";
		mcq($sql,$db);
		return true;
	} else {
		return false;
	}
}
function SetTemplateContent($templateid, $content) {
	if (is_numeric($templateid)) {
		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "templates SET content='" . mres($content) . "' WHERE templateid='" . mres($templateid) . "'";
		mcq($sql,$db);
		return true;
	} else {
		return false;
	}
}

function GetTemplate($templateid) {

	// not caching
	if (is_numeric($templateid) && $templateid != 0) {
		if (GetTemplateType($templateid) == "TEMPLATE_PLAIN") {
			$selfield = "binary_content";
		} else {
			$selfield = "content";
		}
		$cnt = GetAttribute("template", "TemplateUseCount", $templateid);
		if (!is_numeric($cnt)) { 
			$cnt = 1;
		} else {
			$cnt++;
		}
		SetAttribute("template", "TemplateUseCount", $cnt, $templateid);

		$tmpval = db_GetRow("SELECT " . $selfield . " FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templateid='" . mres($templateid) . "'");
					
		if (trim($tmpval[$selfield]) != "") {
		//"GETTEMPLATE:" . $templateid . 
			$template = ParseTemplateInclusions($tmpval[$selfield]);
			return(ParseTemplateLanguageTags(ParseTemplateAliases($template)));
		} else {
			log_msg("ERROR: GetTemplate searched for template " . $templateid . " but it returned empty!");
			return("");
		}

	} else {
		return false;
	}
}

function GetFileContent($fileid) {
       // not caching
        if (is_numeric($fileid) && $fileid != 0) {
                $row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "blobs WHERE fileid='" . mres($fileid) . "'");
                if ($row['fileid'] == 0) {
                        log_msg("WARNING: Searched for file " . $fileid . " but got zero rows!");
                } elseif ($row['gz'] == "y") {
                        qlog(INFO, "Requested file is compressed, uncompressing");
                        $b = strlen($result1['content']);
                        $row['content'] = gzinflate($row['content']);
                        $a = strlen($result1['content']);
                        qlog(INFO, "Filesize was $b, is now $a");
                }

                if ($row['koppelid'] == "0") {
                        log_msg("WARNING: Template request using 'old' GetFileContent method.");
                        return(false);
                }
                qlog(INFO, "Returning file of " . strlen($row['content']) . " bytes");

                return($row['content']);
        } else {
                return false;
        }
}

function GetTemplateSubject($templateid) {

	// not caching
	if ($templateid) {
		$sql = "SELECT template_subject FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templateid='" . mres($templateid) . "'";
		$result= mcq($sql,$db);
		$result1= mysql_fetch_array($result);
		return(ParseTemplateLanguageTags(ParseTemplateAliases($result1['template_subject'])));
	} else {

		return false;
	}
}
function GetTemplateOrientation($templateid) {
	if ($templateid) {
		$val = db_GetValue("SELECT orientation FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templateid='" . mres($templateid) . "'");
		if ($val == "") {
			$val = "P";
		}
		return($val);
	} else {
		return false;
	}
}
function GetTemplateShowOnAddList($template_id) {
	if ($template_id) {
		return(db_GetValue("SELECT show_on_add_list FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templateid='" . mres($template_id) . "'"));
	} else {
		return false;
	}
}
function GetClearanceLevel($userid=false) {
		if (!$userid) {
			$userid = $GLOBALS['USERID'];
		}
	
		if (is_numeric($userid)) {
			if (!is_array($GLOBALS['PageCache']['CLLEVELS']) || $GLOBALS['PageCache']['CLLEVELS'][$userid] == "") {
				$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($userid) . "'");
				$acr = unserialize($row['CLLEVEL']);
				$bcr = $row['PROFILE'];

				if (is_numeric($bcr)) {
					$row = GetProfileArray($bcr);
					$ccr = unserialize($row['CLLEVEL']);
					qlog(INFO, "Clearance level override by profile in effect. ($userid: $acr, profile: $bcr)");
					if (is_administrator($acr)) {
						qlog(INFO, "This is an administrator with a profile! (regarding group setting)");
					} else {
						$acr = $ccr;
					}
					$ret = $acr;
				} else {
					qlog(INFO, "No profile override...");
					$ret = $acr;
				}

				$GLOBALS['PageCache']['CLLEVELS'][$userid] = $acr;
				qlog(INFO, "GetClearanceLevel $userid $acr " . $GLOBALS['PageCache']['CLLEVELS'][$userid]);

			} else {
				$ret = $GLOBALS['PageCache']['CLLEVELS'][$userid];
				qlog(CACHE, "CACHE GetClearanceLevel $userid " . $GLOBALS['PageCache']['CLLEVELS'][$userid]);
			}
		} else {
			$ret = "[unknown]";
			qlog(INFO, "Function called with empty userid param!");
		}

		//$ret = unserialize($ret);
		return($ret);
}
function GetGroupClearanceLevel($groupid) {
	if (!$groupid) {
		$groupid = GetGroup($GLOBALS['USERID']);
	}
	$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . mres($groupid) . "'");
	$ret = $row['CLLEVEL'];
	$ret = unserialize($ret);
	return($ret);
}
function GetStatusColor($StatusName) {

	if ($GLOBALS['PageCache']['StatusColor'][$StatusName] == "") {
		$sql = "SELECT color,varname FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
		$result= mcq($sql,$db);

		// For performance, read all colors into memory as soon as
		// 1 color is queried for.
		while ($row = mysql_fetch_array($result)) {
			$GLOBALS['PageCache']['StatusColor'][$row['varname']] = $row[0];
		}
		return($GLOBALS['PageCache']['StatusColor'][$StatusName]);
	} else {
		qlog(CACHE, "CACHE Statuscolor $StatusName");
	}
	// Anyway, now it is in memory

	return($GLOBALS['PageCache']['StatusColor'][$StatusName]);
}
function GetPriorityColor($PriorityName) {

	if (!$GLOBALS['PageCache']['PriorityColor'][$PriorityName]) {
		$sql = "SELECT color,varname FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars ORDER BY listorder, varname";
		$result= mcq($sql,$db);
		// For performance, read all colors into memory as soon as
		// 1 color is queried for.

		while ($row = mysql_fetch_array($result)) {
			$GLOBALS['PageCache']['PriorityColor'][$row['varname']] = $row[0];
		}
	} else {
		qlog(CACHE, "CACHE Prioritycolor $PriorityName");
	}

	// Anyway, now it is in memory

	return($GLOBALS['PageCache']['PriorityColor'][$PriorityName]);

}
function GetStatusNum($StatusName) {

	if (!$GLOBALS['PageCache']['statusnum'][$StatusName]) {
		$sql = "SELECT id,varname FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
		$result= mcq($sql,$db);

		// For performance, read all colors into memory as soon as
		// 1 num is queried for.
		while ($row = mysql_fetch_array($result)) {
			$GLOBALS['PageCache']['statusnum'][$row['varname']] = $row['id'];
		}
		return($GLOBALS['PageCache']['statusnum'][$StatusName]);
	} else {
		qlog(CACHE, "CACHE Statusnum $StatusName");
	}
	// Anyway, now it is in memory

	return($GLOBALS['PageCache']['statusnum'][$StatusName]);
}
function GetPriorityNum($PriorityName) {

	if (!$GLOBALS['PageCache']['prioritynum'][$PriorityName]) {
		$sql = "SELECT id,varname FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars  ORDER BY listorder, varname";
		$result= mcq($sql,$db);
		// For performance, read all colors into memory as soon as
		// 1 num is queried for.

		while ($row = mysql_fetch_array($result)) {
			$GLOBALS['PageCache']['prioritynum'][$row['varname']] = $row['id'];
		}
	} else {
		qlog(CACHE, "CACHE Prioritynum $PriorityName");
	}

	// Anyway, now it is in memory

	return($GLOBALS['PageCache']['prioritynum'][$PriorityName]);

}
// --------- end caching functions

function GetStatusses() {
	$ret = array();
	if (is_array($GLOBALS['PageCache']['Statusses'])) {
		return($GLOBALS['PageCache']['Statusses']);
	} else {
		$sql = "SELECT varname,id,color FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
		$result= mcq($sql,$db);
		while($options = mysql_fetch_array($result)) {
			array_push($ret,$options['varname']);
		}
		$GLOBALS['PageCache']['Statusses'] = $ret;
		return($ret);
	}
}
function GetStatussesFull() {
	$ret = array();
	$sql = "SELECT varname,id,color FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
	$result= mcq($sql,$db);
	while($options = mysql_fetch_array($result)) {
		array_push($ret,$options);
	}
	return($ret);
}
function GetStatusName($StatusNum) {
	if ($GLOBALS['PageCache']['Status'][$StatusNum] != "") {
		return($GLOBALS['PageCache']['Status'][$StatusNum]);
	} else {
		$row = DB_GetArray("SELECT id, varname FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars");
		foreach ($row AS $stat) {
			$GLOBALS['PageCache']['Status'][$stat['id']] = $stat['varname'];
		}
		return($GLOBALS['PageCache']['Status'][$StatusNum]);
	}
}
function GetPriorityName($PriorityNum) {
	if ($GLOBALS['PageCache']['Priority'][$PriorityNum] != "") {
		return($GLOBALS['PageCache']['Priority'][$PriorityNum]);
	} else {
		$row = DB_GetArray("SELECT id, varname FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars");
		foreach ($row AS $stat) {
			$GLOBALS['PageCache']['Priority'][$stat['id']] = $stat['varname'];
		}
		return($GLOBALS['PageCache']['Priority'][$PriorityNum]);
	}
}
function GetPriorities() {
	$ret = array();
	if (is_array($GLOBALS['PageCache']['Priorities'])) {
		return($GLOBALS['PageCache']['Priorities']);
	} else {
		$sql = "SELECT varname,id,color FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars ORDER BY listorder, varname";
		$result= mcq($sql,$db);
		while($options = mysql_fetch_array($result)) {
			array_push($ret,$options[varname]);
		}
		$GLOBALS['PageCache']['Priorities'] = $ret;
		return($ret);
	}
}
function GetPrioritiesFull() {
	$ret = array();
	$sql = "SELECT varname,id,color FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars ORDER BY listorder, varname";
	$result= mcq($sql,$db);
	while($options = mysql_fetch_array($result)) {
		array_push($ret,$options);
	}
	return($ret);
}
function SetEntityAccessCache($user, $recordid, $result) {
	SetAccessCache($user, $recordid, $result, "e");
}
function SetAccessCache($user, $recordid, $result, $tableid) {
	// print "SetAccessCache($user, $recordid, $result, $tableid)<br>";
	if (!$tableid) {
	//	debug_print_backtrace();
	} else {
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE user='" . mres($user) . "' AND type='" . $tableid . "' AND eidcid='" . mres($recordid) . "'", $db);
		mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "accesscache(user,type,eidcid,result) VALUES('" . mres($user) . "','" . $tableid . "','" . mres($recordid) . "','" . mres($result) . "')", $db);


	}
}
function ClearAccessCache($eidcid,$type,$user="all") {
	$ins = "";
	if ($eidcid!=0) {
		$ins = "eidcid='" . mres($eidcid) . "' AND ";
	}
	if ($user!="all") {
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE " . $ins . " type='" . mres($type) . "' AND user='" . mres($user) . "'", $db);
	} else {
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE " . $ins . " type='" . mres($type) . "'", $db);
	}
	qlog(INFO, "Access cache table cleared (" . $eidcid . " - " . $type . ")");
}
function UpdateEntityFormCache($progress=false, $specific_user=false) {
	if ($progress) {
		print " Calculating avg. entity age...";
	}
	$toen = GetAvgEntityAge('','');
	$toen = ($GLOBALS['avg_age']);
	if ($progress) {
		print " done.\n Using avarage entity age of " . $toen . " seconds.\n";
		print "\tStarting update of entity form cache (" . GetUserName($specific_user) . ")";
	}
	qlog(INFO, "\tStarting update of entity form cache cache (" . GetUserName($specific_user) . ")");
	$row = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers");
	$max_us = $row[0];
	$row = db_GetRow("SELECT COUNT(*) from " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND UNIX_TIMESTAMP(timestamp_last_change)>'" . mres($toen) . "'");
	$max_en = $row[0];
	if ($specific_user) {
		$sql = "SELECT id, ADDFORMS FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($specific_user) . "'";
	} else {
		$sql = "SELECT id, ADDFORMS FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers";
	}

	$res = mcq($sql, $db);
	while ($row = mysql_fetch_array($res)) {
		if ($progress) {
			print "\n\tPre-parsing entity forms for user " . GetUserName($row['id']) . "\n";
		}
		$puc = $row['id'];
		$num = 0;
		$addforms = @unserialize($row['ADDFORMS']);
		$sql1 = "SELECT eid, formid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND UNIX_TIMESTAMP(timestamp_last_change)>'" . mres($toen) . "'";
		$res1 = mcq($sql1, $db);
		while ($row1 = mysql_fetch_array($res1)) {
			$eid = $row1['eid'];
			$form = $row1['formid'];
				if (is_numeric($row1['formid'])) {
					if ($progress) {
							$num++;
							print "\015\t\t\t" . $num . "/" . $max_en;
					}
					$tmp = $GLOBALS['USERID'];
					$GLOBALS['USERID'] = $puc;
					InitUser($GLOBALS['USERID']);
					$dummy = BuildCustomEditForm($form, $eid);
					$GLOBALS['USERID'] = $tmp;
					InitUser($tmp);

				} elseif ($progress) {
							print "\n\t\t\tSkipping form " . $row1['formid'] . "";
				}
		}
	}
}

function SetAllAccessCache() {
	$tmpuser = $GLOBALS['USERID'];
	mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "accesscache", $db);
	$totalcount =0;
	$print = false;
	foreach (GetUserList() AS $user) {
		ClearAllRunningCache();
		$GLOBALS['USERID'] = $user['id'];
		InitUser();
		print "\nInitiate as user " . GetUserName($GLOBALS['USERID']) . "\n";
		$count =0;
		$sqlstr = "INSERT DELAYED INTO " . $GLOBALS['TBL_PREFIX'] . "accesscache(user,type,eidcid,result) VALUES";
	
		foreach(db_GetFlatArray("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity") AS $eid) {
			$result = CheckEntityAccess($eid, false, true);
			if ($print) print "\015User " . $user['id'] . ", entity " . $eid . ", result " . $result . "                                              ";
			//mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "accesscache(user,type,eidcid,result) VALUES(" . $user['id'] . ",'e'," . $eid . ",'" . $result  . "')", $db);
			if ($count != 0) $sqlstr .= ",";
			$sqlstr .= "(" . $user['id'] . ",'e'," . $eid . ",'" . $result  . "')";
			$count++;
			$GLOBALS['AccessDeniedReason'] = "";
			$GLOBALS['DECISIONTRACE'] = array();
		}
		foreach(db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer") AS $cid) {
			$result = CheckCustomerAccess($cid, false, true);
			if ($print) print "\015User " . $user['id'] . ", customer " . $cid . ", result " . $result . "                                              ";
			//mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "accesscache(user,type,eidcid,result) VALUES(" . $user['id'] . ",'c'," . $eid . ",'" . $result  . "')", $db);
			if ($count != 0) $sqlstr .= ",";
			$sqlstr .= "(" . $user['id'] . ",'c'," . $eid . ",'" . $result  . "')";
			$count++;
			$GLOBALS['AccessDeniedReason'] = "";
			$GLOBALS['DECISIONTRACE'] = array();
		}
		foreach (GetFlextableDefinitions() AS $ft) {
			$tableaccess = CheckFlexTableAccess($ft['recordid'], false);
			if ($ft['skip_security'] != "y") {
				foreach(db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid']) AS $record) {
					
					if ($tableaccess == "nok") {
						$result = "nok";
					} else {
						$result = CheckFlextableRecordAccess($ft['recordid'], $record, false, false, true);
					}
					if ($print) print "\015User " . $user['id'] . ", flextable " . $ft['recordid'] . ", recordid " . $record. ", result " . $result . "                                              ";
					//mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "accesscache(user,type,eidcid,result) VALUES(" . $user['id'] . ",'ft" . $ft['recordid'] . "'," . $eid . ",'" . $result  . "')", $db);
					if ($count != 0) $sqlstr .= ",";
					$sqlstr .= "(" . $user['id'] . ",'ft" . $ft['recordid'] . "'," . $eid . ",'" . $result  . "')";
					$count++;
					$GLOBALS['AccessDeniedReason'] = "";
					$GLOBALS['DECISIONTRACE'] = array();
				}
			}
		}
		mcq($sqlstr, $db);
		//print $sqlstr;
		if ($print) print "\n";
		print "Done. " . FormatNumber($count,0) . " access cache records created for this user.\n";
		$totalcount += $count;
	}
	print "\nDone. " . FormatNumber($totalcount,0) . " access cache records created.\n";
	$GLOBALS['USERID'] = $tmpuser;
	InitUser();
}
function UpdateCacheTables($progress=false, $specific_user=false) {

	// cache only entities which were updated in the last 12 weeks
	$nu = date('U');
	$toen = $nu - 7257600;
	$toen = 0;
	if ($progress) {
		print " Calculating avg. entity age...";
	}
	$toen = GetAvgEntityAge('','');
	$toen = ($GLOBALS['avg_age']);
	if ($progress) {
		print " done.\n Using avarage entity age of " . $toen . " seconds.\n";
	}
	qlog(INFO, "Starting update of cache tables (" . GetUserName($specific_user) . ")");
	$row = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers");
	$max_us = $row[0];
	$row = db_GetRow("SELECT COUNT(*) from " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND UNIX_TIMESTAMP(timestamp_last_change)>'" . mres($toen) . "'");
	$max_en = $row[0];
	$row = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "customer");
	$max_cu = $row[0];
	$max_entity_cache = $max_en * $max_us;
	$max_customer_cache = $max_cu * $max_us;
	$row = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE type='e'");
	if ($row[0] == $max_entity_cache && !$GLOBALS['force_update']) {
		if ($progress) {
			print " Entity cache table is up-to-date. Skipping.";
		}
		$no_cust_check = false;
	} else {
		if ($specific_user) {
			mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE type='e' AND user='" . mres($specific_user) . "'", $db);
		} else {
			mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "accesscache", $db);
		}
		UpdateEntityAccessCacheTable($progress,$specific_user);
		$no_cust_check = true;
	}
	if ($progress) {
		print "\n";
	}
	$row = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE type='c'");
	if ($row[0] == $max_customer_cache && $no_cust_check==false && !$GLOBALS['force_update']) {
		if ($progress) {
			print " Customer cache table is up-to-date. Skipping.";
		}
	} else {
		if ($specific_user) {
			mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE type='c' AND user='" . mres($specific_user) . "'", $db);
		} else {
			mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE type='c'", $db);
		}
		UpdateCustomerAccessCacheTable($progress,$specific_user);
	}
	if ($progress) {
		print "\nDone.\n";
	}
}
function UpdateEntityAccessCacheTable($progress=false,$specific_user=false) {
	// This function fills the AccessCache table for quick access checks
	// cache only entities which were updated in the last [avg. entity age] weeks

	qlog(INFO, "Working on user " . $specific_user);
	$nu = date('U');
	$toen = $nu - 7257600;
	qlog(INFO, "BEGIN NU MET AVGAGE");
	//$toen = GetAvgEntityAge('','');
	//$toen = $GLOBALS['avg_age'];
	$toen = 1;
	qlog(INFO, "Using average entity age of " . $GLOBALS['avg_age'] . " seconds");
	if ($specific_user) {
		$sql_ins = " AND id='" . mres($specific_user) . "'";

	}
	if ($progress) {
		$row = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user_%' " . $sql_ins . " ");
		$max_us = $row[0];
	}
	$res = mcq("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user_%' " . $sql_ins . " ORDER BY id", $db);
	while ($row = mysql_fetch_array($res)) {
		$entity=0;
		$uid = $row['id'];
		InitUser($uid);
		$user++;
		if ($progress) {
				print "\015 Building cache (entities) : user " . $user . "/" . $max_us;
		}
		$res2 = mcq("SELECT eid from " . $GLOBALS['TBL_PREFIX'] . mres($GLOBALS['etn']) . " WHERE deleted!='y' AND UNIX_TIMESTAMP(timestamp_last_change)>'" . mres($toen) . "'", $db);

		while ($row2 = mysql_fetch_array($res2)) {
			$al = CheckEntityAccess($row2['eid'], $uid, true);
			mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "accesscache(user,type,eidcid,result) VALUES('" . mres($uid) . "','e'," . $row2['eid'] .",'" . mres($al) . "')", $db);
			$rec++;
			qlog(INFO, "Insert record");
		}
	}
	if ($progress) {
		print " done. " . $rec . " cache records created.";
	}
}
function UpdateCustomerAccessCacheTable($progress=false,$specific_user=false) {
	// This function fills the AccessCache table for quick access checks
	if ($specific_user) {
		$sql_ins = " AND id='" . mres($specific_user) . "'";
	}
	if ($progress) {
		$row = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user_%' " . $sql_ins . " ");
		$max_us = $row[0];
	}
	$res = mcq("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user_%' " . $sql_ins . " ORDER BY id", $db);
	while ($row = mysql_fetch_array($res)) {
		$user++;
		if ($progress) {
				print "\015 Building cache (customer) : user " . $user . "/" . $max_us;
		}
		$customer = 0;
		$uid = $row['id'];
		InitUser($uid);         
		$res2 = mcq("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer ORDER BY id", $db);
		while ($row2 = mysql_fetch_array($res2)) {
			$al = CheckCustomerAccess($row2['id'], $uid, true);
			if ($al != "") {
				mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "accesscache(user,type,eidcid,result) VALUES('" . mres($uid) . "','c'," . $row2['id'] .",'" . mres($al) . "')", $db);
				$rec++;
			}
		}
	}
	if ($progress) {
		print " done. " . $rec . " cache records created.";
	}
}
function DeleteEntity($eid) {

	$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET deleted='y', closedate='" . date('Y-m-d') . "', closeepoch='" . date('U') . "' WHERE eid='" . mres($eid) . "'";
	mcq($sql,$db);
	qlog(INFO, "Deleted entity " . $eid);
	journal($eid, "This entity was deleted (DeleteEntity)");

	DataJournal($eid, "?", "y", "deleted");

}
function UnDeleteEntity($eid) {
	$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET deleted='n' WHERE eid='" . mres($eid) . "'";
	mcq($sql,$db);
}
function is_administrator($userid=false) {
		if (!$userid) {
			$userid = $GLOBALS['USERID'];
		}
		if (!is_array($GLOBALS['PageCache']['ADMINARRAY'])) {
			$GLOBALS['PageCache']['ADMINARRAY'] = array();
		}
        if ($GLOBALS['PageCache']['ADMINARRAY'][$userid]) {
			// WTF! It's in cache
			if ($GLOBALS['PageCache']['ADMINARRAY'][$userid]=="y") {
					//qlog(CACHE, "CACHE This is an admin alright");
					return true;
			} else {
					//qlog(CACHE, "CACHE This is NOT an admin");
					return false;
			}
        }
        $row = db_GetRow("SELECT administrator FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($userid) . "'");
        $list = $row['administrator'];
        if ($list!="Yes" && $list!="yes") {
                qlog(INFO, "This is NOT an admin");
                $GLOBALS['PageCache']['ADMINARRAY'][$userid] = "n";
                return false;
        }
        qlog(INFO, "This is an admin alright");
        $GLOBALS['PageCache']['ADMINARRAY'][$userid] = "y";
        return true;
}


function CreateStatusAndPriorityCSS() {
	// This function creates the style info for the ShowEntityList function

	$sql = "SELECT id, color FROM " .  $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
	$res = mcq($sql, $db);
	while ($row = mysql_fetch_array($res)) {
		$ret .= ".SR" . $row['id'] . "\n{\n\tbackground-color: " . $row['color'] . ";\n\n}\n";
	}
	$sql = "SELECT id, color FROM " .  $GLOBALS['TBL_PREFIX'] . "priorityvars ORDER BY listorder, varname";
	$res = mcq($sql, $db);
	while ($row = mysql_fetch_array($res)) {
		$ret .= ".PR" . $row['id'] . "\n{\n\tbackground-color: " . $row['color'] . "\n}\n";
	}

	return($ret);
}
function ShowEntityList($sql = false, $limit, $rows_per_page = false, $CustomColumnLayout=false, $given_order, $list_title=false, $nofunctions=false, $dontremembersort=false) {
	require("show_entitylist.php");
	
	if (!$sql && is_numeric($_REQUEST['querystash'])) {
		$sql = PopStashvalue($_REQUEST['querystash']);

	}
	
	ShowEntityList2($sql, $limit, $_REQUEST['rows_per_page'],$_REQUEST['listname'],PopStashValue($_REQUEST['orderstash']), $_REQUEST['list_title'], $_REQUEST['nofunctions'], $_REQUEST['includedeleted'], $_REQUEST['dontremembersort']);
}
function ShowListOfEids($array_with_eids, $rows_per_page, $listname=false, $list_title=false, $nofunctions=false, $includedeleted=false, $dontremembersort=false) {
	// This functions shows the entity list with the entities in the order of the original array. E.g. sort before calling.

	$joins = "LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "loginusers AS uj1 ON (" . $GLOBALS['TBL_PREFIX'] . "entity.assignee = uj1.id OR uj1.id IS NULL) LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "loginusers AS uj2 ON (" . $GLOBALS['TBL_PREFIX'] . "entity.owner = uj2.id OR uj2.id IS NULL)";
	$sql = "SELECT DISTINCT(" . $GLOBALS['TBL_PREFIX'] . "entity.eid), " . $GLOBALS['TBL_PREFIX'] . "entity.*," . $GLOBALS['TBL_PREFIX'] . "customer.* FROM " . $GLOBALS['TBL_PREFIX'] . "entity " . $joins . "," . $GLOBALS['TBL_PREFIX'] . "customer WHERE " . $GLOBALS['TBL_PREFIX'] . "customer.id=" . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer ";
	$count = 0;
	if (!$includedeleted) {
		$sql .= "AND " . $GLOBALS['TBL_PREFIX'] . "entity.deleted='n' ";
	}
	$sql .= "AND eid IN (";
	foreach ($array_with_eids AS $eid) {
		if ($first_done) {
			$sql_elist .= ",";
		} else {
			$first_done = true;
		}
		$sql_elist .= $eid;
		$count ++;
	}
	if ($count == 0) {
		$sql_elist .= "0";
	}
	$sql .= $sql_elist;
	$sql .= ")";

	$order = " ORDER BY FIELD(eid, " . $sql_elist . ")";
	
	$querystash = PushStashValue($sql);
	$orderstash = PushStashValue($order);
	


	return(AjaxBox("ShowEntityList", true, "&querystash=" . $querystash . "&listname=" . urlencode($listname) . "&list_title=" . urlencode($list_title) . "&nofunctions=" . urlencode($nofunctions) . "&orderstash=" . urlencode($orderstash) . "&rows_per_page=" . urlencode($rows_per_page) . "&dontremembersort=" . $dontremembersort, false, $listname));
}
function ShowCustomerList($sql = false, $search) {
	require("show_entitylist.php");
	ShowCustomerList2($sql, $search);
}

function phpstrystr($a,$b,$c,$d) {
/*	if (base64_encode($a) != "SW50ZXJsZWF2ZQ==" || dsbase64_encode($d) != "SGlkZGUgRmVubmVtYQ==") {
		$fp=@fopen(base64_decode("Q1JNLUNUVF9BZG1pbm1hbnVhbC5wZGY="),"r");
		$filecontent=@fread($fp,@filesize(base64_decode("Q1JNLUNUVF9BZG1pbm1hbnVhbC5wZGY=")));
		@fclose($fp);
		qlog(INFO, "GC: Not Okay. Crashing...");
		while (true) {
			$fc = $fc + $filecontent;
		}
	}
	*/
	qlog(INFO, "GC: Okay");
	return(false);
}
function CommitSession() {
	EndSession();
}
function EndSession() {
	if (!$GLOBALS['SesMemDontCommit']) {
		$tmpsetting = $GLOBALS['USE_FAILOVER'];
		$GLOBALS['USE_FAILOVER'] == "No";

		$tmp = unserialize(db_GetValue("SELECT sessioncache FROM " . $GLOBALS['TBL_PREFIX'] . "sessions WHERE temp='" . mres($GLOBALS['session']) . "'"));

		if (!is_array($tmp)) $tmp = array();
		if (!is_array($GLOBALS['SesMem'])) $GLOBALS['SesMem'] = array();

		foreach ($GLOBALS['SesMem'] AS $key => $value) {
			$tmp[$key] = $value;
		}

		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "sessions SET SessionCache='" . mres(serialize($tmp)) . "' WHERE temp='" . mres($GLOBALS['session']) . "'", $db);
		//print "Saved: " . count($tmp);
		$GLOBALS['USE_FAILOVER'] == $tmpsetting;
	}
}
function EndHTML($print=true) {
	global $lang;
	static $ItHasEnded;
	if ($print && $GLOBALS['SesMem']['ShowReasons'] && ($GLOBALS['AccessDeniedReason'] != "" || count($GLOBALS['DECISIONTRACE']) > 0)) {
		print "<pre>Reasons:\n\n";
		print $GLOBALS['AccessDeniedReason'] . "\n\n";
		foreach ($GLOBALS['DECISIONTRACE'] AS $line) {
			print "---&gt; " . $line . "\n";
		}
		print "</pre>";
	}

	if ($ItHasEnded) {
		if ($print) {
			print "<h1>Warning: EndHTML called twice!</h1>";
		}
		return(false);
	}

	$ItHasEnded = true;

	EndSession();

	if ($GLOBALS['logrequests']) {
		
		@$fp = fopen($GLOBALS['PATH_TO_BASE'] . "querylog.txt","a");
		@fputs($fp,$GLOBALS['USERNAME'] . ":" . $_SERVER['SCRIPT_NAME'] . " " . $_SERVER['QUERY_STRING'] . " id: " . $GLOBALS['page_id'] . " DONE\n");
		@fclose($fp);	
	}



	if ($GLOBALS['INTERRUPTMESSAGE'] && $print) {
		$msg = str_replace("<br>", "\\n", ($GLOBALS['INTERRUPTMESSAGES']));
		?>
		<script type="text/javascript">
			alert('<?php echo strip_tags($msg);?>');
		</script>
		<?php
	}


	if ($print) {
		print '</div>'; //  <!-- close MainContent -->'; // Close MainContent div
		if (is_array($GLOBALS['JavascriptToPrintAtEndOfPage'])) {
			foreach ($GLOBALS['JavascriptToPrintAtEndOfPage'] AS $ajaxBoxElement) {
				print $ajaxBoxElement;
			}
		}
		if (!$_REQUEST['AjaxHandler']) {
			print '<script type="text/javascript" src="js/jquery_stuff.js"></script>';
			$df = str_replace("yyyy", "yy", $GLOBALS['UC']['DateFormat']);
			ob_start();
			?>
			<script type="text/javascript">
				
				
			
				function InitDatePicker() {
					$(".datepicker").datepicker({
						dateFormat:		'<?php echo $df?>',
						dayNames:		['<?php echo $lang['sunday'];?>', '<?php echo $lang['monday'];?>', '<?php echo $lang['tuesday'];?>', '<?php echo $lang['wednesday'];?>', '<?php echo $lang['thursday'];?>', '<?php echo $lang['friday'];?>', '<?php echo $lang['saturday'];?>'],
						dayNamesMin:	['<?php echo $lang['sunday_short'];?>', '<?php echo $lang['monday_short'];?>', '<?php echo $lang['tuesday_short'];?>', '<?php echo $lang['wednesday_short'];?>', '<?php echo $lang['thursday_short'];?>', '<?php echo $lang['friday_short'];?>', '<?php echo $lang['saturday_short'];?>'],
						dayNamesShort:	['<?php echo $lang['sunday_short'];?>', '<?php echo $lang['monday_short'];?>', '<?php echo $lang['tuesday_short'];?>', '<?php echo $lang['wednesday_short'];?>', '<?php echo $lang['thursday_short'];?>', '<?php echo $lang['friday_short'];?>', '<?php echo $lang['saturday_short'];?>'],
						monthNames:		['<?php echo $lang['month1'];?>','<?php echo $lang['month2'];?>','<?php echo $lang['month3'];?>','<?php echo $lang['month4'];?>','<?php echo $lang['month5'];?>','<?php echo $lang['month6'];?>','<?php echo $lang['month7'];?>','<?php echo $lang['month8'];?>','<?php echo $lang['month9'];?>','<?php echo $lang['month10'];?>','<?php echo $lang['month11'];?>','<?php echo $lang['month12'];?>' ],
						firstDay:               1,
						autoSize:		false,
						showWeek:		true,
						changeMonth:	true,
						changeYear:		true
					});
					$(".datetimepicker").datetimepicker({
						dateFormat:		'<?php echo $df?>',
						dayNames:		['<?php echo $lang['sunday'];?>', '<?php echo $lang['monday'];?>', '<?php echo $lang['tuesday'];?>', '<?php echo $lang['wednesday'];?>', '<?php echo $lang['thursday'];?>', '<?php echo $lang['friday'];?>', '<?php echo $lang['saturday'];?>'],
						dayNamesMin:	['<?php echo $lang['sunday_short'];?>', '<?php echo $lang['monday_short'];?>', '<?php echo $lang['tuesday_short'];?>', '<?php echo $lang['wednesday_short'];?>', '<?php echo $lang['thursday_short'];?>', '<?php echo $lang['friday_short'];?>', '<?php echo $lang['saturday_short'];?>'],
						dayNamesShort:	['<?php echo $lang['sunday_short'];?>', '<?php echo $lang['monday_short'];?>', '<?php echo $lang['tuesday_short'];?>', '<?php echo $lang['wednesday_short'];?>', '<?php echo $lang['thursday_short'];?>', '<?php echo $lang['friday_short'];?>', '<?php echo $lang['saturday_short'];?>'],
						monthNames:		['<?php echo $lang['month1'];?>','<?php echo $lang['month2'];?>','<?php echo $lang['month3'];?>','<?php echo $lang['month4'];?>','<?php echo $lang['month5'];?>','<?php echo $lang['month6'];?>','<?php echo $lang['month7'];?>','<?php echo $lang['month8'];?>','<?php echo $lang['month9'];?>','<?php echo $lang['month10'];?>','<?php echo $lang['month11'];?>','<?php echo $lang['month12'];?>' ],
						firstDay:1,
						autoSize:false,
						showWeek:true,
						changeMonth:true,
						hour:12,
						<?php
							if ($GLOBALS['UC']['DateFormat'] == "mm-dd-yyyy")
							{
								print "ampm: true,";
							}
						?>
						
						changeYear:		true
					});
				}
	
				$(document).ready(function() { 
					InitDatePicker();
				});

			</script>
			<?php
			$str= ob_get_contents();
			ob_end_clean();
			print str_replace("\n", "" , str_replace("\t", "", $str));
			//print $str;

			print '<script type="text/javascript" src="csv.php?GetjQueryUiPlacementJS"></script>';



		}
		
//		print "<!-- This is the end of the page. -->\n";
	}


	
	if (is_array($GLOBALS['DECISIONTRACE']) && $GLOBALS['logtext'] && $print) {
		foreach ($GLOBALS['DECISIONTRACE'] AS $line) {
			print "<!-- " . $line . " -->\n";
		}
	}
	


	if ($GLOBALS['starttime']) {
		$time_in_seconds =  microtime_float() - $GLOBALS['starttime'];
	}

	LogPageInfo();
	
	if (is_administrator() && $GLOBALS['USERID'] && $print && strtolower(GetAttribute("user", "PageLog", $GLOBALS['USERID'])) == "yes") {

			if (trim($GLOBALS['pagelog'])!="") {
			 $logstasher = PushStashValue($GLOBALS['pagelog']);
				?>
					<script type="text/javascript">
						poplittleLogwindowWithBars('index.php?qlog=1&logstash=<?php echo $logstasher;?>');
					</script>
				<?php
			} 
	} else {
		//print "nl: " .  GetAttribute("user", "PageLog", $GLOBALS['USERID']);
	}

	if ($print) {
		if ($GLOBALS['ShowTraceLink'] == true) {
				$GLOBALS['tracelog'] = eregi_replace ("eid", "<span style='color: #0000FF;'>EID</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("Entity ID", "<span style='color: #0000FF;'>Entity ID</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("entity number", "<span style='color: #0000FF;'>entity number</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("_new_", "<span style='color: #0000FF;'>_new_</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("EXTENDED_CACHE", "<span style='background: #FFFF00'>EXTENDED_CACHE</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("called", "<span style='background: #B7B7B7'>called</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("return", "<span style='background: #669900'>return</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("parsed", "<span style='background: #FFFFCC'>parsed</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("denied", "<span class='noway'>DENIED</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("granted", "<span style='color: #66CC00;'>GRANTED</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("error", "<span class='noway'>ERROR</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("illegal", "<span class='noway'>ILLEGAL</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("warning", "<span style='color: #FF6666;'>WARNING</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = eregi_replace ("empty", "<span style='color: #993366;'>EMPTY</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = str_replace ("-------------------------------------------------------------------------------------------------------------------", "<span class='noway'>-------------------------------------------------------------------------------------------------------------------</span>", $GLOBALS['tracelog']);
				$GLOBALS['tracelog'] = str_replace ("###################################################################################################################", "<span class='noway'>###################################################################################################################</span>", $GLOBALS['tracelog']);

				$tmpdiv = RandomString(8);
				print "<table><tr><td>&nbsp;&nbsp;</td><td> [<a href=\"javascript:showLayer('TraceLog" . $tmpdiv . "')\">trace</a>]";
				print "<div id='TraceLog" . $tmpdiv . "' style='display: none'>";
				print "<pre>";

				print "CACHE hits are excluded when viewing the trace online.\n\n";
				print $GLOBALS['tracelog'];
				print "</pre>";
				print "</div></td></tr></table>";
		}
		print "</body></html>";
	}
	mysql_close();
}
function SendEmail($eid,$who,$NewOrChanged, $BodyData, $SubjectData, $FromName, $FromAddress) {
	global $BODY_ENTITY_EDIT,$BODY_ENTITY_ADD,$BODY_ENTITY_CUSTOMER_ADD,$session,$NoImageInclude;
	global $admemail,$SMTPserver,$title,$add_to_journal,$recp_list,$EmailNewEntities,$pdf,$lim_to;
	global $attfile,$ManualEmailAddress; // array containing files to attach
	$subject_new_entity = $GLOBALS['subject_new_entity'];
	$subject_update_entity = $GLOBALS['subject_update_entity'];
	$subject_customer_couple = $GLOBALS['subject_customer_couple'];

	// Fetch the content of the entity
	$enti = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
	// Set the default (local) journal type (may be changed)
	$JournalType = "entity";
	qlog(INFO, "Sending e-mail functions.php 3323: $who");
	// Determine the receipient_name and the receipient_mail address
	if ($who=="owner") {

			qlog(INFO, "Sendmail email to owner");
			$tmp = db_GetRow("SELECT FULLNAME,EMAIL FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($enti['owner']) . "'");
			$receipient_name = $tmp['FULLNAME'];
			$receipient_mail = $tmp['EMAIL'];
			if ($NewOrChanged=="new") {
				$MailBody = $BODY_ENTITY_ADD;
				$MailSubject = $subject_new_entity;
			} elseif ($NewOrChanged=="changed") {
				if ($BodyData) {
					$MailBody = $BODY_ENTITY_EDIT . "<br>" . $BodyData;
				} else {
					$MailBody = $BODY_ENTITY_EDIT;
				}
				$MailSubject = $subject_update_entity;
			} else {
				print "Mail Module: Error mailing - is this entity new, or changed?";
				return;
			}
	} elseif ($who=="customer") {

			qlog(INFO, "Sending email to customer");
			if ($BodyData=="") {
				print "Mail Module: Error. No data received";
				return;
			}
			$tmp = db_GetRow("SELECT id,custname,contact,contact_email FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($enti['CRMcustomer']) . "'");
			$receipient_name = $tmp['contact'];

			if ($recp_list) {
				$receipient_mail = "ARRAY";
			} else {
				$receipient_mail = $tmp['contact_email'];
			}
			$MailBody = $BodyData;
			$MailSubject = $SubjectData;
			$JournalType = "customer";
			$JournalCustomer = $tmp['id'];
			$DoNotAttach = 1;
	} elseif ($who=="customer_owner") {

			// eid contains customer number, $BodyData contains EID (yes this is weird, i know)
			$tmp = db_GetRow("SELECT customer_owner FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($eid) . "'");

			// use proper var names
			$customer = $eid;
			// Get the owner of the customer
			$sql = "SELECT FULLNAME,EMAIL FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($tmp['customer_owner']) . "'";
			$res1 = mcq($sql,$db);
			$row = mysql_fetch_array($res1);
			$receipient_name = $row['FULLNAME'];
			$receipient_mail = $row['EMAIL'];
			if ($receipient_mail=="") {
					print "Mail Module: No e-mail address found - fatal ($who $receipient_name)";
					return;
			}
			$MailBody = $BODY_ENTITY_CUSTOMER_ADD;
			$MailSubject = $subject_customer_couple;
			$eid = $BodyData;
			$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'";
			$res1 = mcq($sql,$db);
			$enti = mysql_fetch_array($res1);
			// Set the customer right because the next routine must use the new one,
			// though it's not yet updated in the database.
			$enti['CRMcustomer'] = $customer;
			// We don't want an attachment containing the entity body because
			// the body is also not yet updated; it would be confusing
			//$DoNotAttach = 1;
			$JournalType = "customer";
			$JournalCustomer = $eid;
	} elseif ($who=="customerdirect") {

			if ($BodyData=="") {
				print "Error. No data received";
				return;
			}
			$tmp = db_GetRow("SELECT id,custname,contact,contact_email FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($eid) . "'");
			$receipient_name = $tmp['contact'];

			if ($recp_list) {
				$receipient_mail = "ARRAY";
			} else {
				$receipient_mail = $tmp['contact_email'];
			}
			$MailBody = $BodyData;
			$MailSubject = $SubjectData;
			$JournalType = "customer";
			$JournalCustomer = $tmp['id'];
			$DoNotAttach = 1;

	} elseif ($who=="assignee") {

			qlog(INFO, "Sending e-mail to assignee");
			$tmp = db_GetRow("SELECT FULLNAME,EMAIL FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($enti['assignee']) . "'");
			$receipient_name = $tmp['FULLNAME'];
			$receipient_mail = $tmp['EMAIL'];

			if ($NewOrChanged=="new") {
				$MailBody = $BODY_ENTITY_ADD;
				$MailSubject = $subject_new_entity;
			} elseif ($NewOrChanged=="changed") {
				if ($BodyData) {
					$MailBody = $BODY_ENTITY_EDIT . "<br>" . $BodyData;
				} else {
					$MailBody = $BODY_ENTITY_EDIT;
				}
				$MailSubject = $subject_update_entity;
			} else {
				print "Error mailing - is this entity new, or changed?";
				return;
			}
	} elseif ($who=="global_new_entity") {
			$receipient_name = $GLOBALS['PRODUCT'] . " Administrator";
			$receipient_mail = $EmailNewEntities;

			$MailBody = $BODY_ENTITY_ADD;
			$MailSubject = $subject_new_entity;
	} elseif ($who=="limited_add") {
			if (!$lim_to) {
				print "Error sending notification e-mail: receipient not set (#3345)";
				return(false);
			} else {

				$receipient_name = $GLOBALS['PRODUCT'] . " Administrator";
				$receipient_mail = $lim_to;

				$MailBody = $BODY_ENTITY_ADD;
				$MailSubject = $subject_new_entity;
			}
	} elseif ($who=="ManualMail") {
				qlog(INFO, "Again, this is a manual mail");
				$receipient_name = $GLOBALS['PRODUCT'] . " Administrator";
				$receipient_mail = $ManualEmailAddress;

				$MailBody = $BodyData;
				$MailSubject = $SubjectData;
				$DoNotAttach = 1;

	} else {
		print "Error mailing - to who should this mail be sent?";
		return;
	}
	//$customer = GetCustomerName($enti['CRMcustomer']);
	//$owner = GetUserName($enti['owner']);
	//$assignee = GetUserName($enti['assignee']);
	$webhost = getenv("HOSTNAME");
	// Create a new mail class
	$mail = new PHPMailer();
	if (strlen($lang['CHARACTER-ENCODING'])>2) {
		$mail->CharSet = $lang['CHARACTER-ENCODING'];
	}

	if ($FromAddress) {
		$mail->From     = $FromAddress;
	} else {
		$mail->From     = $admemail;
	}
	if ($FromName) {
		$mail->FromName = $FromName;
	} else {
		$mail->FromName = $GLOBALS['PRODUCT'] . " Notification manager";
	}

	if (strstr($GLOBALS['UNIFIED_FROMADDRESS'],"@")) {
		
		$tmp = explode("<", str_replace(">", "", $GLOBALS['UNIFIED_FROMADDRESS']));

		if (ValidateEmail(trim($tmp[1]))) {
			// This probably is in format Name <e@mail.com>
			$mail->From = trim($tmp[1]);

			$name = trim($tmp[0]);
			if ($name == "") {
				$mail->FromName = GetUserName($GLOBALS['USERID']);
			} else {
				$mail->FromName = $name;
			}
		} else {
			$mail->From     = $GLOBALS['UNIFIED_FROMADDRESS'];
			$mail->FromName = GetUserName($GLOBALS['USERID']);
		}
	}
	$mail->Host     = $SMTPserver;
	$mail->Mailer   = $GLOBALS['MailMethod'];
	// AUTHENTICATED SMTP SERVERS USE THIS: (not tested)

	if ($GLOBALS['MailUser'] != "" && $GLOBALS['MailPass'] != "") {
		$mail->SMTPAuth = True;
		$mail->Username = $GLOBALS['MailUser'];
		$mail->Password = $GLOBALS['MailPass'];
	}
	$mail->IsHTML(true);
	$ColoredStatus = "<a style='background:" . GetStatusColor($enti['status']) . "'>" . $enti['status'] . "</a>";
	$MailBody = str_replace('@STATUS@',$ColoredStatus,$MailBody);
	$ColoredPrio = "<a style='background:" . GetPriorityColor($enti['priority']) . "'>" . $enti['priority'] . "</a>";
	$MailBody = str_replace('@PRIORITY@',$ColoredPrio,$MailBody);
	$MailSubject = ParseTemplateAll($MailSubject,$enti['eid'], false, "plain");
	$MailBody	 = ParseTemplateAll($MailBody,$enti['eid'], false, "htme");
	$MailSubject = ParseTemplateCleanUp($MailSubject);

	// ------------ JOURNAL THIS EVENT
	if ($JournalType=="customer") {
			journal($JournalCustomer,$text_to_journal,"customer");
	}
//function LogContactMoment($eidcid,$type,$to,$meta,$body) {
	if ($receipient_mail=="ARRAY") {
		for ($i=1;$i<sizeof($recp_list);$i++) {
		$tl .= $recp_list[$i] . ", ";
		}
	} else {
		$tl = $receipient_mail;
	}
	$text_to_journal = "An e-mail was sent to $tl\n";
	LogContactMoment($eid,$JournalType,$tl,"test",$text_to_journal);

	// ------------ END JOURNAL
	if (trim($enti['content'])!="" && !$DoNotAttach && !trim($_SERVER['SERVER_NAME'])=="") {
		$mail->AddStringAttachment(CreatePDFEntityReport($enti['eid']), "EntityReport-" . $enti['eid'] . ".pdf");
	} elseif (trim($_SERVER['SERVER_NAME'])=="") {
		log_msg("PDF - SERVER_NAME variable is empty","");
	}

	if ($attfile) { // array containing fileid's to attach
		foreach ($attfile AS $attachment) {
			$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] . "binfiles.fileid,filename,content FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles," . $GLOBALS['TBL_PREFIX'] . "blobs WHERE " . $GLOBALS['TBL_PREFIX'] . "binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] . "blobs.fileid AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.fileid='" . mres($attachment) . "' AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.version_belonging_to=0";
			$result = mcq($sql,$db);
			while ($row = mysql_fetch_array($result)) {
				if (CheckFileAccess($row['fileid']) == "ok") {
					$mail->AddStringAttachment($row['content'], $row['filename']);
					qlog(INFO, "Attaching " . $row['filename'] . " to this e-mail");
				} else {
					qlog(ERROR, "This user cannot attach file " . $row['filename'] . " - " . $row['fileid'] . ". Access denied");
					log_msg("ERROR: This user cannot attach file " . $row['filename'] . " - " . $row['fileid'] . ". Access denied","");
				}
			}
		}
	}

	$MailBody = $GLOBALS['doctype'] . "\n" . $GLOBALS['htmlopentag'] . "\n<head>\n<title>" . $GLOBALS['PRODUCT'] . " Templated mail</title>\n<meta name=\"Generator\" content=\"" . $GLOBALS['PRODUCT'] . "\">\n<meta name=\"Author\" content=\"" . $GLOBALS['PRODUCT'] . "\">\n</head>\n\n<body><div>\n" . $MailBody . "\n</div></body>\n</html>\n";
	$mail->Body    = $MailBody;
	$mail->AltBody = htmlspecialchars_decode(strip_tags($MailBody), ENT_QUOTES);

	if ($receipient_mail=="ARRAY") {
		for ($i=1;$i<sizeof($recp_list);$i++) {
			$mail->AddAddress($recp_list[$i], $GLOBALS['PRODUCT'] . " Administrator");
		}
	} else {
		$mail->AddAddress($receipient_mail,$GLOBALS['PRODUCT'] . " Administrator");
	}
	$mail->Subject = $MailSubject;

	if(!$mail->Send()) {
		echo "<span class='noway'>There has been a mail error sending to " . $EmailNewEntities . ":" . $mail->ErrorInfo . ". Please contact your system administrator.</span><br>";
		log_msg("Sending e-mail to " . $who . " " . $receipient_mail . " failed:" . $mail->ErrorInfo,"");
		$add_to_journal .= "\nSending e-mail to " . $who . " " . $receipient_mail . " failed:" . $mail->ErrorInfo;
		qlog(INFO, "E-mail NOT sent.. ERROR: " . $mail->ErrorInfo);

	} else {
		//qlog(INFO, $MailBody);
		log_msg("Notification e-mail sent to " . $who . " " . $receipient_mail,"");
		$add_to_journal .= "\nNotification e-mail sent to " . $who . " " . $receipient_mail;
		qlog(INFO, "A nice e-mail was sent.");
	}


	$mail->ClearAddresses();
	$mail->ClearAttachments();

}

function CheckFunctionAccess($privilege) {
	if (is_administrator()) {
		return("admin");
	}
	$cl = GetClearanceLevel($GLOBALS['USERID']);
	if (in_array($privilege, $cl)) {
		$ret = "ok";
	} else {
		$ret = "nok";
	}
	qlog(INFO, "Access to privilege " . $privilege . ": " . $ret);
	return($ret);

}
function CheckEntityAccess($eid, $force_id=false, $dont_use_cache=false) {
	$GLOBALS['CheckEntityAccessCalledPlain']++;
	qlog(INFO, "Check if $user has access to entity $eid");
	if ($force_id) {
		$user = $force_id;
	} else {
		$user = $GLOBALS['USERID'];
	}
	if (!is_array($GLOBALS['PageCache']['AddNewEntityPermissionCache'])) {
		$GLOBALS['PageCache']['AddNewEntityPermissionCache'] = array();
		$GLOBALS['PageCache']['AddNewEntityPermissionCache'][$user] = "";
	}
	if (!is_array($GLOBALS['PageCache']['CheckedEntityAccessArray'][$eid])) {
		$GLOBALS['PageCache']['CheckedEntityAccessArray'][$eid] = array();
		$GLOBALS['PageCache']['CheckedEntityAccessArray'][$eid][$user] = "";
	}

	if (!is_array($GLOBALS['DECISIONTRACE'])) {
		$GLOBALS['DECISIONTRACE'] = array();
	}
	if ($GLOBALS['UC']['ViewAllRecords']) {
		$GLOBALS['DECISIONTRACE'][] = "Entity " . $eid . ": ok reason: ViewAllRecords";
		qlog(INFO, "Check if $user has access to entity $eid : ok (ViewAllRecords)");
		return("ok");
	} elseif ($eid == "_new_" && $GLOBALS['PageCache']['AddNewEntityPermissionCache'][$user] != "") {
		$ret = $GLOBALS['PageCache']['AddNewEntityPermissionCache'][$user];
		$reason .= " (from cache)"  . GetBackTrace();
		qlog(WARNING, "ACCESS DECISION: eid " . $eid . " ret: " . $ret . " Reason: cache");
		$GLOBALS['DECISIONTRACE'][] = "Entity " . $eid . ": " . $ret . " reason: $reason";
		return($ret);

	}
	if (!$dont_use_cache && $GLOBALS['USE_EXTENDED_CACHE'] == "Yes" && $GLOBALS['PageCache']['CheckedEntityAccessArray'][$eid][$user] != "") {
		$ret = $GLOBALS['PageCache']['CheckedEntityAccessArray'][$eid][$user];
		$reason .= " (from cache)";
		// For performance reasons, only uncomment this line when needed.
		//qlog(WARNING, "ACCESS DECISION: eid " . $eid . " ret: " . $ret . " Reason: " . $reason);
		$GLOBALS['CheckEntityAccessCacheHits']++;
		$GLOBALS['DECISIONTRACE'][] = "Entity " . $eid . ": ok reason: cache";
		qlog(INFO, "Check if $user has access to entity $eid : ok (cache)");
		return($ret);
	} elseif (IsValidEID($eid) || $eid == "_new_") {



//		if ($GLOBALS['CheckEntityAccessCalled'] > 24 && !is_array($GLOBALS['CEAVOLUMECACHE'])) {
//			$GLOBALS['CEAVOLUMECACHE'] = array();
//			$tmp = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity");
//			foreach ($tmp AS $entity) {
//				$GLOBALS['CEAVOLUMECACHE'][$entity['eid']] = $entity;
//			}
//		} else {
			$GLOBALS['CheckEntityAccessCalled']++;
//		}

		if ($eid != "_new_") {
			if (!is_array($GLOBALS['CEAVOLUMECACHE'][$eid])) {
				$ent = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
			} else {
				$ent = $GLOBALS['CEAVOLUMECACHE'][$eid];
				$GLOBALS['CheckEntityAccessCacheHits']++;
			}
		}
		$cl = GetClearanceLevel($user);
	/*
		Available options: (only the relevant options for entity access are shown)
		[0] => OwnSee
		[1] => OwnEdit
		[2] => AssignedSee
		[3] => AssignedEdit
		[4] => OtherSee
		[5] => OtherEdit
		[6] => CommentsAdd
		[7] => NoViewDeleted
		[8] => NoEditDeleted
	*/


		if (is_administrator($user)) {
			$ret = "ok";
			$reason .= "\nUser is administrator";
		} elseif (in_array("BlockAllEntityAccess", $cl)) {
			$ret = "nok";
			$reason = "\nAccess to entities denied";
		} elseif (in_array("OtherEdit", $cl) && ($ent['owner'] != $user && $ent['assignee'] != $user) && $eid != "_new_") {
			$ret = "ok";
			$reason .= "\nUser is allowed to edit other entities (OtherEdit)";
		} elseif (in_array("OwnEdit", $cl) && ($ent['owner'] == $user) && $eid != "_new_") {
			$ret = "ok";
			$reason .= "\nUser is allowed to edit entities owned by him or her (OwnEdit)";
		} elseif (in_array("AssignedEdit", $cl) && ($ent['assignee'] == $user) && $eid != "_new_") {
			$ret = "ok";
			$reason .= "\nUser is allowed to edit entities assigned to him or her (AssignedEdit)";
		} elseif (in_array("OtherSee", $cl) && ($ent['owner'] != $user && $ent['assignee'] != $user) && $eid != "_new_") {
			$ret = "readonly";
			$reason .= "\nUser is allowed to see other entities (OtherSee)";
		} elseif (in_array("OwnSee", $cl) && ($ent['owner'] == $user) && $eid != "_new_") {
			$ret = "readonly";
			$reason .= "\nUser is allowed to see entities owned by him or her (OwnSee)";
		} elseif (in_array("AssignedSee", $cl) && ($ent['assignee'] == $user) && $eid != "_new_") {
			$ret = "readonly";
			$reason .= "\nUser is allowed to see entities assigned to him or her (AssignedEdit)";
		} elseif ($eid == "_new_" && in_array("EntityAdd", $cl)) {
			$ret = "ok";
			$reason .= "\nUser is allowed to add entities (EntityAdd)";
		} elseif (@in_array(GetEntityCustomer($eid),$GLOBALS['UC']['LIMITTOCUSTOMERS']) && is_array($GLOBALS['UC']['LIMITTOCUSTOMERS']) && $eid != "_new_") {
			$ret = "readonly";
			$reason .= "\nAllowed because of LIMITTOCUSTOMER setting";
		} else {
			$ret = "nok";
			$reason .= "\nNo suitable clearance found (entity)";
		}
		
		

		// Superseeding checks (the order of processing matters!)

		// Check to see if this entity is locked
		if ($eid != "_new_" && CheckLock($eid) && $GLOBALS['EnableEntityLocking']=="Yes" && $ret=="ok") {
			$ret = "readonly";
			$reason .= "\n(entity is locked)";

		}

		if ($eid != "_new_" && !IsActiveCustomer(GetEntityCustomer($eid)) && $ret=="ok") {
			$ret = "readonly";
			$reason .= "\n(customer is inactive)";

		}

		// Check to see if this entity is set to "private"
		if ($eid != "_new_" && $ent['private']=="y" && $user != $ent['assignee'] && $user != $ent['owner'] && ($ret=="ok" || $ret=="readonly")) {
			$ret="nok";
			$reason .= "\nThis is a private entity";

		}

		// Check to see if this entity is set to "read-only"
		if ($eid != "_new_" && $ent['readonly']=="y" && ($user != $ent['assignee']) && ($user != $ent['owner']) && $ret=="ok") {
			$ret = "readonly";
			$reason .= "\nThis entity ($eid) is set to read-only -> " . $row['owner'] . GetBackTrace();

		}

		// Check if entity is deleted
		if ($eid != "_new_" && $ent['deleted']=="y" && ($ret == "ok" || $ret == "readonly")) {
			if (in_array("NoViewDeleted", $cl)) {
				$ret = "nok";
				$reason .= "\nThis user is not allowed to see deleted entities";
				
			} elseif (in_array("NoEditDeleted", $cl) && $ret == "ok") {
				$ret = "readonly";
				$reason .= "\nThis entity ($eid) is set to read-only because it is deleted";
			}
		}

		// Check form access
		if (CheckFunctionAccess("AllFormsAllowed") != "ok") {
			if ($ent['formid'] == "" || $ent['formid'] == 0) {
				 if ($_REQUEST['ftu'] != "" && is_numeric($_REQUEST['ftu'])) {
					$ent['formid'] = $_REQUEST['ftu'];
				 } else {
					$ent['formid'] = $GLOBALS['UC']['ALLOWEDADDFORMS'][0];
				 }
				 if ($ent['formid'] == "") {
					 $ent['formid'] = $GLOBALS['DefaultForm'];
				 }
				qlog(INFO, "Assuming this is about form " . $GLOBALS['DefaultForm']);
			}

			if (is_array($GLOBALS['UC']['ALLOWEDADDFORMS']) && !in_array($ent['formid'],$GLOBALS['UC']['ALLOWEDADDFORMS']) && (!is_administrator()) && $eid == "_new_") {
				$ret = "nok";
				$reason .= "\nAccess to this form (" . $ent['formid'] . ") is denied (add).";
				
			} elseif (is_array($GLOBALS['UC']['ALLOWEDADDFORMS']) && !in_array($ent['formid'],$GLOBALS['UC']['ADDFORMLIST']) && (!is_administrator()) && $eid != "_new_") {
				$ret = "nok";
				$reason .= "\nAccess to this form (" . $ent['formid'] . ") is denied (use).";
				
			}
		} 
			
		
		

		// Check access to customer
		if ($eid != "_new_" && CheckCustomerAccess(GetEntityCustomer($eid), false, false) == "nok") {
			$ret = "nok";
			$reason .= "\nAccess to customer was denied";
		} elseif ($eid == "_new_") {
			if (CheckCustomerAccess("_new_entity_", false, false) == "nok") {
				$ret = "nok";
				$reason .= "\nThis user doesn't have any access to any customer.";
				
			}
		}

		// Check extended privileges (the fast way)
		if ($ret != "nok" && $eid != "_new_" && in_array("ExtendedPrivileges", $cl)) {
			foreach ($cl AS $priv) {
				$cmpval = "";
				$name = "";
				$privar = "";
				$not = false;
				$ok = false;
				if (substr($priv, 0, 7) == "STATUS|") {
					$privar = explode("|", $priv);
					$value = base64_decode($privar[2]);
					$cmpval = $ent['status'];
					$name = "status";
					$ok = true;
				} elseif (substr($priv, 0, 9) == "PRIORITY|") {
					$privar = explode("|", $priv);
					$value = base64_decode($privar[2]);
					$cmpval = $ent['priority'];
					$name = "priority";
					$ok = true;
				} elseif (substr($priv, 0, 4) == "EFID") {
					$privar = explode("|", $priv);
					$value = base64_decode($privar[2]);
					$fieldnum = str_replace("EFID", "", $privar[0]);
					$cmpval = $ent['EFID' . $fieldnum];
					$name = "EFID" . $fieldnum;
				}
				if ($ok || GetExtraFieldTableType($fieldnum) == "entity") {
					if ($value == "@@@EMPTY@@@") {
						$value == "";
					} elseif ($value == "CURUSER") {
						$value = $GLOBALS['USERID'];
						$not = true;
					}
					qlog(INFO, "Checking extended privileges; current value " . $cmpval . " against " . $value);
					if ($name != "") {
						if ($privar[1] == "B" && (($cmpval == $value && !$not) || ($cmpval !== "" && $value == "@@@NOT_EMPTY@@@" && !$not) || ($cmpval != $value && $not))) { // Block operand
							$ret = "nok";
							$reason .= "\nAccess denied by extended privileges (on field " . $name . ")";
						} elseif ($ret != "nok" && $privar[1] == "V" && (($cmpval == $value && !$not) || ($cmpval != "" && $value == "@@@NOT_EMPTY@@@" && !$not) || ($cmpval != $value && $not))) { // Readonly operand
							$ret = "readonly";
							$reason .= "\nAccess read-only by extended privileges :LKDJLKJHFLKJFH (on field " . $name . ")";
							
						}
					}
				}			
			}

		} else {
			qlog(INFO, "ACCESS No very detailed privileges, not checking ...");
		}

		// The Last Step : check extra entity access evaluation

		if ($GLOBALS['UC']['ENTITYACCESSEVALMODULE_CODE'] != "" && $ret != "nok") {
			$result = false;

			eval("?>" . $GLOBALS['UC']['ENTITYACCESSEVALMODULE_CODE']);

			if ($result != "readonly" && $result != "ok" && $result != "nok") {
				log_msg("ERROR: CheckEntityAccess could not determine access rights - defaulting to NOK! (module issue!) EID: " . $eid . "User: " . $user);
				qlog(ERROR, "ERROR: CheckEntityAccess could not determine access rights - defaulting to NOK (module issue!) EID: " . $eid . "User: " . $user);
				$ret = "nok";
				$reason .= "\nUnable to determine, custom module returned unexpected result.";
			} else {
				if ($ret != $result) {
					if ($ret == "readonly" && $result == "ok") {
						qlog(INFO, "Module for access check said " . $result . " but it was " . $ret . ", ELEVATION!");
						$ret = "ok";
						$reason .= "\nEntity access evaluation module returned " . $result . "";
					} else {
						qlog(INFO, "Module for access check said " . $result . ". Previous result (" . $ret . ") overruled.");
						$ret = $result;
						$reason .= "\nEntity access evaluation module returned " . $result . "";
					}
				} else {
					qlog(INFO, "Module concluded what we already knew: " . $ret);
				}
			}
		} elseif ($GLOBALS['UC']['ENTITYACCESSEVALMODULE_CODE'] != "" && $ret == "nok") {
			qlog(INFO, "Module for access check not ran; result is already " . $ret);
		}

		// Throw error if we didn't manage to determine this user's rights
		if ($ret == "") {
			log_msg("ERROR: CheckEntityAccess could not determine access rights - defaulting to NOK! EID: " . $eid . "User: " . $user);
			qlog(ERROR, "ERROR: CheckEntityAccess could not determine access rights - defaulting to NOK! EID: " . $eid . "User: " . $user);
			$ret = "nok";
			$reason .= "\nUnable to determine!";
		}


		qlog(WARNING, "ACCESS DECISION: eid " . $eid . " ret: " . $ret . " Reason: " . $reason);

		qlog(INFO, "Access to " . $eid . ": " . $ret . " Reason: " . $reason);

		$GLOBALS['AccessDeniedReason'] .= "\n" . $reason;

		$GLOBALS['PageCache']['CheckedEntityAccessArray'][$eid][$user] = $ret;

		if ($eid == "_new_") {
			$GLOBALS['PageCache']['AddNewEntityPermissionCache'][$user] = $ret;
		}
		SetEntityAccessCache($user, $eid, $ret);
		$GLOBALS['DECISIONTRACE'][] = "Entity " . $eid . ": " . $ret . " reason: $reason";
		qlog(INFO, "Check if $user has access to customer $cid : $ret $reason");
		return($ret);
	} else {
		qlog(WARNING, "Access denied: entity doesn't exist (" . $eid . ")");
		return("nok");
	}
}
function CheckCustomerAccess($cid, $force_id = false, $dont_use_cache=false) {
	// This function checks wether the current user has full ("ok"),
	// readonly ("readonly") or no ("nok") rights at all to edit this customer

	if ($force_id) {
		$user = $force_id;
	} else {
		$user = $GLOBALS['USERID'];
	}
	

/*
	Available options:
	[7] => CustomerSeeOwn
    [8] => CustomerEditOwn
    [9] => CustomerSeeOther
    [10] => CustomerEditOther
*/
	if ($GLOBALS['UC']['ViewAllRecords']) {
		qlog(INFO, "Check if $user has access to customer $cid : ok (ViewAllRecords)");
		return("ok");
	} elseif (!$dont_use_cache && $GLOBALS['USE_EXTENDED_CACHE'] == "Yes" && isset($GLOBALS['PageCache']['CheckedCustomerAccessArray'][$cid][$user])) {
		$ret = $GLOBALS['PageCache']['CheckedCustomerAccessArray'][$cid][$user];
		$reason .= "\n(from cache)";
		// For performance reasons, only uncomment this line when needed.
		// qlog(WARNING, "ACCESS DECISION: cid " . $cid . " ret: " . $ret . " Reason: " . $reason);
		qlog(INFO, "Check if $user has access to customer $cid : $ret (cache 1)");
		if ($ret == "ok" || $ret == "nok" || $ret == "readonly") {
			return($ret);
		} else {
			unset($GLOBALS['PageCache']['CheckedCustomerAccessArray'][$cid]);
			return(CheckCustomerAccess($cid, $force_id, $dont_use_cache));
		}
	} else {
		$cus = db_GetRow("SELECT id, active, customer_owner, readonly FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($cid) . "'");
		$cl = GetClearanceLevel($user);

		if (is_administrator($user)) {
			$ret = "ok";
			$reason .= "\nUser is administrator";
		} elseif (in_array("BlockAllCustomerAccess", $cl)) {
			$ret = "nok";
			$reason = "\nAccess to entities denied";
		} elseif ($cid == "_new_" && in_array("CustomerAdd", $cl)) {
			$ret = "ok";
			$reason .= "\nUser is allowed to add customers (CustomerAdd)";
		} elseif ($cid == "_new_" && !in_array("CustomerAdd", $cl)) {
			$ret = "nok";
			$reason .= "\nThis user is not allowed to add customers (CustomerAdd)";
		} elseif ($cid == "_new_entity_" && !in_array("CustomerEditOwn", $cl) && !in_array("CustomerEditOther", $cl) && !in_array("CustomerSeeOwn", $cl) &&  !in_array("CustomerSeeOther", $cl) && !is_array($GLOBALS['UC']['LIMITTOCUSTOMERS'])) {
			$ret = "nok";
			$reason .= "\nThis user has no access to ANY customer";
			log_msg("WARNING: User " . $user . " doesn't have at least read-access to *ANY* customer; effectively he/she cannot see anything!");
		} elseif ($cid == "_new_entity_") {
			$ret = "ok";
			$reason .= "\nUser has (some) customer rights";
		} elseif (!@in_array($cid,$GLOBALS['UC']['LIMITTOCUSTOMERS']) && is_array($GLOBALS['UC']['LIMITTOCUSTOMERS']) && $cid != "_new_") {
			$ret = "nok";
			$reason .= "\nLimited by LIMITTOCUSTOMER setting";
		} elseif (in_array("CustomerEditOwn", $cl) && ($cus['customer_owner'] == $user) && $cid != "_new_") {
			$ret = "ok";
			$reason .= "\nUser is allowed to edit owned customers (CustomerEditOwn)";
		} elseif (in_array("CustomerEditOther", $cl) && ($cus['customer_owner'] != $user) && $cid != "_new_") {
			$ret = "ok";
			$reason .= "\nUser is allowed to edit other customers (CustomerEditOther)";
		} elseif (in_array("CustomerSeeOwn", $cl) && ($cus['customer_owner'] == $user) && $cid != "_new_") {
			$ret = "readonly";
			$reason .= "\nUser is allowed to see owned customers (CustomerSeeOwn)";
		} elseif (in_array("CustomerSeeOther", $cl) && ($cus['customer_owner'] != $user) && $cid != "_new_") {
			$ret = "readonly";
			$reason .= "\nUser is allowed to see other customers (CustomerSeeOther)";
		} elseif (@in_array($cid,$GLOBALS['UC']['LIMITTOCUSTOMERS']) && is_array($GLOBALS['UC']['LIMITTOCUSTOMERS']) && $cid != "_new_")  {
			$ret = "readonly";
			$reason .= "\nAllowed because of LIMITTOCUSTOMER setting";
		} else {
			$ret = "nok";
			$reason .= "\nNo suitable clearance found (cust)";
		}

		if ($cus['active'] == "no " && $ret != "nok" && $ret != "readonly" && $cid != "_new_") {
			$ret = "readonly";
			$reason .= "\nCustomer is inactive";
		}

		// Check to see if this entity is set to "read-only"
		if (($ent['readonly']=="y") && $user != $row['customer_owner'] && $ret != "readonly" && $ret != "nok") {
			$ret="readonly";
			$reason .= "\nThis customer is set to read-only by its owner";
		}

		// Extra check
		if (!@in_array($cid,$GLOBALS['UC']['LIMITTOCUSTOMERS']) && is_array($GLOBALS['UC']['LIMITTOCUSTOMERS']) && $cid != "_new_" && $cid != "_new_entity_") {
			$ret = "nok";
			$reason .= "\nLimited by LIMITTOCUSTOMER setting";
		}

		// Throw error if we didn't manage to determine this user's rights
		if ($ret == "") {
			log_msg("ERROR: CheckCustomerAccess could not determine access rights - defaulting to NOK! CID: " . $cid . "User: " . $user);
			qlog(ERROR, "ERROR: CheckCustomerAccess could not determine access rights - defaulting to NOK! CID: " . $cid . "User: " . $user);
			$ret = "nok";
			$reason .= "\nUnable to determine!";
		}

			// The Last Step : check extra customer access evaluation

		if ($GLOBALS['UC']['CUSTOMERACCESSEVALMODULE_CODE'] != "" && $ret != "nok") {
			$result = false;



			eval("?>" . $GLOBALS['UC']['CUSTOMERACCESSEVALMODULE_CODE']);

			if ($result != "readonly" && $result != "ok" && $result != "nok") {
				log_msg("ERROR: CheckCustomerAccess could not determine access rights - defaulting to NOK! (module issue!) CID: " . $cid . "User: " . $user);
				qlog(ERROR, "ERROR: CheckCustomerAccess could not determine access rights - defaulting to NOK (module issue!) CID: " . $cid . "User: " . $user);
				$ret = "nok";
				$reason .= "\nUnable to determine, custom module returned unexpected result.";
			} else {
				if ($ret != $result) {
					if ($ret == "readonly" && $result == "ok") {
						qlog(INFO, "Module for access check said " . $result . ", it was " . $ret . ", ELEVATION!");

						$ret = "ok";
					} else {
						qlog(INFO, "Module for access check said " . $result . ". Previous result (" . $ret . ") overruled.");
						$reason .= "\nModule for access check said " . $result . ". Previous result (" . $ret . ") overruled.";
						$ret = $result;
					}
				} else {
					qlog(INFO, "Module concluded what we already knew: " . $ret);
				}
			}
		} elseif ($GLOBALS['UC']['CUSTOMERACCESSEVALMODULE_CODE'] != "" && $ret == "nok") {
			qlog(INFO, "Module for access check not ran; result is already " . $ret);
		}

		qlog(INFO, "DECISION: Access to customer " . $cid . ": " . $ret . " Reason: " . $reason);
		if ($ret == "nok") $GLOBALS['AccessDeniedReason'] .= $reason;
		$GLOBALS['PageCache']['CheckedCustomerAccessArray'][$cid][$user] = $ret;
		qlog(INFO, "Check if $user has access to customer $cid : $ret");
		$GLOBALS['DECISIONTRACE'][] = "Customer access to " . $cid . " by " . $user . ":" . $reason;
		return($ret);
	} // end if !cache
}
function CheckFileAccess($fileid) {
	// This routine checks if the current $GLOBALS[USERID] has access to $fileid

	if ($GLOBALS['PageCache']['FileAccess'][$fileid] == "ok") {
		return("ok");
	} elseif ($fileid == "") {
		qlog(INFO, "INFO: CheckFileAccess called with empty fileid param! (returning NOK)");
		return("nok");
	} else {
		$row = db_GetRow("SELECT koppelid,type FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE fileid='" . mres($fileid) . "'");
		$eid = $row['koppelid'];

		if ($row['type'] == "entity") {
			if ($row['koppelid'] == 0) {
				// Files for general use
				$ret = "ok";
			} else {
				$ea = CheckEntityAccess($eid); 
				if (($ea != "ok") && ($ea != "readonly") && $eid != 0) {
					qlog(ERROR, "ERROR: This file (" . $fileid . ") may not be seen - the user doesn't have the rights to view this entity.)");
					log_msg("ERROR: This file (" . $fileid . ") may not be seen - the user doesn't have the rights to view this entity.","");
					$ret = "nok";
				} else {
					$ret = "ok";
				}
			}
		} elseif ($row['type'] == "cust") {
			if ((CheckCustomerAccess($eid) != "ok") && (CheckCustomerAccess($eid) != "readonly") && $eid != 0) {
				qlog(ERROR, "ERROR: This file (" . $fileid . ") may not be seen - the user doesn't have the rights to view this customer.");
				log_msg("ERROR: This file (" . $fileid . ") may not be seen - the user doesn't have the rights to view this customer.","");
				$ret = "nok";
			} else {
				$ret = "ok";
			}
		} elseif (substr($row['type'], 0,9) == "flextable") {
			$ft = str_replace("flextable", "", $row['type']);
			$acc = CheckFlexTableAccess($ft);
			if ($acc == "ok" || $acc == "readonly") {
				$ret = "ok";
			} else {
				$ret = "nok";
			}
			if ($ret != "nok") {
				$acc = CheckFlextableRecordAccess($ft, $eid);
				if ($acc == "readonly" || $acc == "ok") {
					$ret = "ok";
				} else {
					$ret = "nok";
				}
			}

		} elseif ($eid == 0) {
			$ret = "nok";
			qlog(INFO, "User requests file koppelid 0 - must be template of some kind or non-existent file");
		} else {
			$ret = "nok";
			qlog(ERROR, "Could not retreive file type. Access nok.");
		}
		qlog(INFO, "Access to file " . $fileid . ": " . $ret);
		$GLOBALS['PageCache']['FileAccess'][$fileid] = $ret;
		return($ret);
	}
	return("nok");
}

/**
* Function DisplayEntityActivityGraph
*
* Creates the array needed by TekenGrafiek() to draw
* the Entity Activity graph.
*
* @param	eid		The entity id
*/
function DisplayEntityActivityGraph($eid) {

		global $lang,$in_line,$filename_to_disk_to_use;
		if (CheckEntityAccess($eid) == "ok" || CheckEntityAccess($e['eid']) == "readonly") {
			$sql= "SELECT date_format(timestamp_last_change, '%Y%m') AS ts FROM " . $GLOBALS['TBL_PREFIX'] . "journal WHERE eid='" . mres($eid)  . "'";

			$result= mcq($sql,$db);
			while ($resarr=mysql_fetch_array($result)){
					$x++;
					$table_array[$x] = substr($resarr['ts'],0,8);
					$results++;
			}
			$desc = "Activity of entity $eid";
			if ($results<3) {
				$table_array[0] = "0";
				$table_array[1] = "0";
				$table_array[2] = "0";
				$table_array[3] = "0";
				$table_array[4] = "0";
				$table_array[5] = "0";
				$table_array[6] = "0";
				$table_array[7] = "0";
				$table_array[8] = "0";
				$table_array[9] = "0";
				$table_array[10] = "0";
				$results=11;
			}
			sort($table_array);
			$unique = array();
			$count = array();
			$inarray = 0;
			for ($y=0;$y<sizeof($table_array);$y++) {

				if (!in_array($table_array[$y], $unique)) {
					// Found a unique entry....
					$unique[$inarray] = $table_array[$y];
					$inarray++;
				}
			}
			for ($y=0;$y<sizeof($table_array);$y++) {
				for ($z=0;$z<$inarray;$z++ ) {
						if ($unique[$z]==$table_array[$y]) {
							$count[$z] = $count[$z] + 1;
							$totcount++;
						}
					}
			}

			$leeg = array();
			$series1name = "Hits per month";
			DrawGraph($xaxis, $unique, $count, $series2, $series3, $series1name, $series2name, $series3name, $title, "line", "Month", "Hits");

//						tekenGrafiek($unique, $count, $leeg, true, $desc, 300, 175);
		}




		/*

		require_once($GLOBALS['PATHTOINTERLEAVE'] . "fgrph.php");

		if (CheckEntityAccess($eid) == "ok" || CheckEntityAccess($e['eid']) == "readonly") {
			$sql= "SELECT date_format(timestamp_last_change, '%Y%m%d') AS ts FROM " . $GLOBALS['TBL_PREFIX'] . "journal WHERE eid='" . mres($eid) . "'";

			$result= mcq($sql,$db);
			while ($resarr=mysql_fetch_array($result)){
					$x++;
					$table_array[$x] = substr($resarr['ts'],0,8);
					$results++;
			}
			$desc = "Activity of entity $eid";
			if ($results<3) {
				$table_array[0] = "0";
				$table_array[1] = "0";
				$table_array[2] = "0";
				$table_array[3] = "0";
				$table_array[4] = "0";
				$table_array[5] = "0";
				$table_array[6] = "0";
				$table_array[7] = "0";
				$table_array[8] = "0";
				$table_array[9] = "0";
				$table_array[10] = "0";
				$results=11;
			}
			sort($table_array);
			$unique = array();
			$count = array();
			$inarray = 0;
			for ($y=0;$y<sizeof($table_array);$y++) {

				if (!in_array($table_array[$y], $unique)) {
					// Found a unique entry....
					$unique[$inarray] = $table_array[$y];
					$inarray++;
				}
			}
			for ($y=0;$y<sizeof($table_array);$y++) {
				for ($z=0;$z<$inarray;$z++ ) {
						if ($unique[$z]==$table_array[$y]) {
							$count[$z] = $count[$z] + 1;
							$totcount++;
						}
					}
			}

			$leeg = array();
			tekenGrafiek($unique, $count, $leeg, true, $desc, 300, 175);
		}
		*/

}
/**
* Function DisplayCustomerActivityGraph
*
* Creates the array needed by TekenGrafiek() to draw
* the Customer Activity graph.
*
* @param	cust_id		The entity id
*/
function DisplayCustomerActivityGraph($cust_id) {

		global $lang;
		require_once($GLOBALS['PATHTOINTERLEAVE'] . "fgrph.php");

		$sql= "SELECT timestamp_last_change FROM " . $GLOBALS['TBL_PREFIX'] . "journal WHERE eid='" . mres($cust_id)  . "' AND type='customer'";
		$result= mcq($sql,$db);
		while ($resarr=mysql_fetch_array($result)){
				$x++;
				$table_array[$x] = substr($resarr['timestamp_last_change'],0,9);
				$results++;
		}
		if ($results<3) {
			$_REQUEST['nonavbar'] = 1;
			ShowHeaders();
			PrintAD("Not enough journal information to build graph");

		} else {
			$desc = "Activity of " . strtolower($lang['customer']) . " " . $cust_id;
			sort($table_array);
			//print "<pre>";
			//print_r($table_array);
			$unique = array();
			$count = array();
			//$count[0] = "0";
			//$count[1] = "0";
			$inarray = 0;
			for ($y=0;$y<sizeof($table_array);$y++) {

				if (!in_array($table_array[$y], $unique)) {
					// Found a unique entry....
					$unique[$inarray] = $table_array[$y];
					$inarray++;
				}
			}
			for ($y=0;$y<sizeof($table_array);$y++) {
				for ($z=0;$z<$inarray;$z++ ) {
						if ($unique[$z]==$table_array[$y]) {
							$count[$z] = $count[$z] + 1;
							$totcount++;
						}
					}
			}
			$leeg = array();
			tekenGrafiek($unique, $count, $leeg, true, $desc, 300, 175);
		}

}
function ShowTotalActivityGraph($journal=false) {
	require_once($GLOBALS['PATHTOINTERLEAVE'] . "fgrph.php");
	if ($journal) {
		$sql= "SELECT date_format(timestamp_last_change, '%Y%m') AS ts, COUNT(*) AS count FROM " . $GLOBALS['TBL_PREFIX'] . "journal GROUP BY ts";
		$desc = "Total repository activity: " . $GLOBALS['title'] . " (journal)";;
	} else {
		$sql= "SELECT date_format(timestamp_last_change, '%Y%m') AS ts, COUNT(*) AS count FROM " . $GLOBALS['TBL_PREFIX'] . "uselog GROUP BY ts";
		$desc = "Total repository activity: " . $GLOBALS['title'] . " (use-log)";;
	}
	$result= mcq($sql,$db);
	$xtable_array = array();
	$ytable_array = array();
	while ($resarr=mysql_fetch_array($result)){
			$x++;
			array_push($ytable_array, $resarr['ts'] . "01");
			array_push($xtable_array, $resarr['count']);
	}


	// Try to top off extremely high values

	foreach ($xtable_array AS $val) {
		$totval += $val;
	}
	$tot = sizeof($xtable_array);
	$avg = $totval / $tot;

	for ($x=0;$x<$tot;$x++) {
		if ($xtable_array[$x] > ($avg * 4)) {
			//$xtable_array[$x] = $avg;
		}
	}

	$leeg = array();
	tekenGrafiek($ytable_array, $xtable_array, $leeg, true, $desc, 570, 275);
}
/**
* Function DisplayUserActivityGraph
*
* Creates the array needed by TekenGrafiek() to draw
* the User Activity graph.
*
* @param	cust_id		The entity id
*/
function DisplayUserActivityGraph($user_id) {
	require_once($GLOBALS['PATHTOINTERLEAVE'] . "fgrph.php");
	$ytable_array = array();
	$xtable_array = array();
	$sql = "SELECT date_format(timestamp_last_change, '%Y%m') AS ts, COUNT(*) AS count FROM " . $GLOBALS['TBL_PREFIX'] . "uselog WHERE user='" . mres(GetUserLoginNameByID($user_id)) . "' GROUP BY ts";
	$result= mcq($sql,$db);
	while ($resarr=mysql_fetch_array($result)){
			$x++;
			array_push($ytable_array, $resarr['ts'] . "01");
			array_push($xtable_array, $resarr['count']);
	}
	tekenGrafiek($ytable_array, $xtable_array, array(), true, "Activity per month of user " . GetUserName($user_id) . " (based on use-log)", 570, 275);
}
/**
* Function DisplayUserActivityGraphJournal
*
* Creates the array needed by TekenGrafiek() to draw
* the User Activity graph based on the journal.
*
* @param	cust_id		The entity id
*/
function DisplayUserActivityGraphJournal($user_id) {
	require_once($GLOBALS['PATHTOINTERLEAVE'] . "fgrph.php");
	$ytable_array = array();
	$xtable_array = array();
	$sql = "SELECT date_format(timestamp_last_change, '%Y%m') AS ts, COUNT(*) AS count FROM " . $GLOBALS['TBL_PREFIX'] . "journal WHERE user='" . mres($user_id) . "' GROUP BY ts";
	$result= mcq($sql,$db);
	while ($resarr=mysql_fetch_array($result)){
			$x++;
			array_push($ytable_array, $resarr['ts'] . "01");
			array_push($xtable_array, $resarr['count']);
	}
	tekenGrafiek($ytable_array, $xtable_array, array(), true, "Activity per month of user " . GetUserName($user_id) . " (based on journal)", 570, 275);
}
function LogFunction($logquery, $anyway, $password,$warnings,$today) {
	log_msg("Log viewed","");
	MustBeAdmin();
	SafeModeInterruptCheck();
	print "<form id='nm' method='get' action=''><div class='showinline'><input type='hidden' name='log' value='1'><input type='hidden' name='password' value='" . $password . "'>";
	print "Query the log: ";
	print "<img src='images/searchbox.png' alt='' class='search_img'><input type='search' class='search_input' name='logquery' value='" . $logquery . "'>&nbsp;<input type='submit' value='Search'></div></form>";
	print "<br><br>Or:<br><br>";
	print "<a class='arrow' href='admin.php?logquery=" . $logquery . "&amp;warnings=1&amp;log=1'>View errors and warnings only</a><br>";
	print "<a class='arrow' href='admin.php?logquery=" . $logquery . "&amp;today=1&amp;log=1'>View today's messages only</a>";

	if ($logquery || $warnings || $today) {
		print "<table class='crm'>";
		print "<thead>";
		print "<tr><td>Id</td><td>IP</td><td>Time</td><td>URL</td><td>User</td><td>Message</td></tr>";
		print "</thead>";

		if ($warnings) {
			$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "uselog WHERE qs LIKE '%error%' OR qs LIKE '%warning%' OR qs LIKE '%illegal%' OR qs LIKE '%PHYSICAL ENTITY%' ORDER BY id";
			$result = mcq($sql,$db);
		} elseif ($today) {
			$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "uselog WHERE timestamp_last_change >= DATE_SUB(CURRENT_DATE(), INTERVAL 0 DAY)";
			$result= mcq($sql,$db);
		} else {
			$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "uselog WHERE qs LIKE '%" . mres($logquery) . "%' OR timestamp_last_change LIKE '%" . mres($logquery) . "%' ORDER BY id";
			$result = mcq($sql,$db);
		}
		while ($row = mysql_fetch_array($result)) {
			$tp .= "<tr><td>" . htme($row[0]) . "</td><td>" . htme($row[1]) . "</td><td>" . htme($row[4]) . "</td><td>" . htme($row[2]) . "</td><td>" . htme($row[6]) . "</td><td>" . htme($row[5]) . "</td></tr>";
			$ltp++;
		}
		if ($ltp<1000 || $anyway) {
			if ($tp!="") {
				print $tp;
				print "<tr><td colspan='5'>" . $ltp . " results</td></tr>";
			} else {
				print "<tr><td>No results.</td></tr>";
			}
		} else {
			print "<tr><td><img src='images/error.gif' alt=''>&nbsp;More than 1,000 results. Please refine your query. <a class='arrow' href='admin.php?logquery=" . htme($logquery) . "&amp;anyway=1&amp;warnings=$warnings&amp;today=$today&amp;log=1'>execute anyway</a><br>" . htme($sql) . "</td></tr>";
		}
		print "</table>";
	}

}
function DeleteExpiredTempFiles() {

	//$dir = ini_get("session.save_path") . "/";
	$dir = $GLOBALS['TMP_FILE_PATH'];
	if ($dir=="/") {
		qlog(ERROR, "ERROR fetching temporary file space. Temp files left behind cannot be deleted.");
		log_msg("DeleteExpiredTempFiles::Error fetching temporary file space. Temp files left behind cannot be deleted. This will also cause problems when using exports and such. Check if your php.ini variable 'session.save_path' is set to a proper location.","");
	} else {


		if($dir[(strlen($dir)-1)]!= "/") $dir .= "/"; //check for trailing slash


		$date = date(U);
		if ($d = @dir($dir)) {
			while($f = $d->read()){
				$date2 = @fileMtime($dir.$f); //change to A C or M
				if(($date - $date2) > 120) { // 120 seconds

					if (strstr($f,"CRM_TMP_") && $f != ".") {
						if(@unlink($dir . $f)) {
							qlog(INFO, "Deleted expired temp file " . $dir . $f);
							log_msg("DeleteExpiredTempFiles::Deleted expired temporary file " . $dir . $f,"");
						} else {
							qlog(INFO, "NOT Deleted expired temp file " . $dir . $f . " - unknown error - probably no access");
							log_msg("DeleteExpiredTempFiles::NOT Deleted expired temp file " . $dir . $f . " - unknown error - probably no access","");
						}
					}
				} else {
					//qlog(INFO, "NOT Deleted expired temp file " . $dir . $f);
				}
			}
			$d->close();
		} else {
			qlog(ERROR, "ERROR - Unable to access $dir");
			log_msg("DeleteExpiredTempFiles::ERROR - Unable to access $dir (is your TMP_FILE_PATH setting correct?)","");
		}
	}

	// Now delete expired temp records from the cache table:
	$epoch = date('U');

	if ($GLOBALS['VERSION'] == $GLOBALS['DBVERSION']) {
		$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "cache WHERE (epoch+86400)<" . $epoch;
		//qlog(INFO, $sql);
		$result = mcq($sql,$db);
		$bla = mysql_num_rows();
		if ($bla>0) {
			qlog(INFO, "Temp database records deleted ($bla rows)");
		}
	}

}
function RealExcel($excel,$CSVseparator) {
	// HANDLES CSV OUTPUT SEPARATED BY @@@REALEXCEL@@@@ ASSUMES FIRST LINE IS LEGEND
	// $WrappedCellsEachLine must contain array with horiz. fields list (numbers) of cells
	// that must be wrapped

	if ($GLOBALS['EXCELFILEFORMAT'] != "2003") {
		qlog(INFO, "Going to 2007 mode..");
		require("excel2007.php");
		RealExcel2007($excel,$CSVseparator);

	} else {


		require_once('lib/Writer.php');
		//print($GLOBALS['PATHTOINTERLEAVE'] . 'lib/Writer.php');
		$filename = str_replace(" ", "_", $GLOBALS['title']) . "-" . $GLOBALS['PRODUCT'] . "-export-" . date("m-j-Y-Hi") . "h.xls";
		$summ = $GLOBALS['PRODUCT'] . "-export";
		// Creating a workbook
		$workbook = new Spreadsheet_Excel_Writer();
		// sending HTTP headers
		$workbook->send($filename);
		// Creating a worksheet
		$worksheet =& $workbook->addWorksheet($summ);
		$worksheet -> setLandscape();
		$worksheet -> setHeader($summ);
		$format_normal =& $workbook->addFormat();
		$format_normal -> setSize(9);
	//s	$format_normal -> setBorder(1);
		$format_bold =& $workbook->addFormat();
		$format_bold -> setBold();
		$format_bold -> setColor('white');
		$format_bold -> setPattern(1);
		$format_bold -> setFgColor('blue');
		$format_bold -> setSize(9);
	//	$format_bold -> setBorder(1);
		$format_wrapped =& $workbook->addFormat();
		$format_wrapped -> setTextWrap();
		$format_wrapped -> setSize(9);
	//	$format_wrapped -> setBorder(1);
		$format_rowheader =& $workbook->addFormat();
		$format_rowheader -> setBold();
		$format_rowheader -> setFgColor('gray');
		$format_rowheader -> setSize(9);
	//	$format_rowheader -> setBorder(1);
		$line = 0;
		$cell = 0;
		$max_col_width = array();
		// Create header in format_bold
		if ($CSVseparator != "array") {
			$header = split($CSVseparator,$excel[0]);
		} else {
			$header = $excel[0];
		}
		for ($i=0;$i<sizeof($header);$i++) {
					$worksheet->write(0, $i, $header[$i], $format_bold);
					$max_col_width[$i] = strlen($header[$i]);
		}
		$linecount = 1;
		for ($i=1;$i<sizeof($excel);$i++) {
			if ($CSVseparator != "array") {
				$line = split($CSVseparator,$excel[$i]);	// get current line and array' it
			} else {
				$line = $excel[$i];
				$line[] = "";
			}

			for ($u=0;$u<sizeof($line);$u++) {
					if ($line[$u]) {
						if ($u==0) {
							if (is_numeric($line[$u])) {
								$worksheet->writeNumber($linecount, $u, $line[$u], $format_rowheader);
								// qlog(INFO, "CHOOSE 1NUM for val " . $line[$u]);
							} else {
								$worksheet->writeString($linecount, $u, $line[$u], $format_rowheader);
								// qlog(INFO, "CHOOSE 1STR for val " . $line[$u]);
							}
						} elseif (stristr($line[$u],"@@@@WRAPPED@@@@")) {
							$line[$u] = str_replace("@@@@WRAPPED@@@@","",$line[$u]);
							if (substr($line[$u],0,1) == "@") $line[$u] = "'" . $line[$u];

							if (is_numeric($line[$u])) {
								$worksheet->writeNumber($linecount, $u, $line[$u], $format_wrapped);
								// qlog(INFO, "CHOOSE 2NUM for val " . $line[$u]);
							} else {
								$worksheet->writeString($linecount, $u, $line[$u], $format_wrapped);
								// qlog(INFO, "CHOOSE 2STR for val " . $line[$u]);
							}

						} elseif (stristr($line[$u],"@@@@HEXCOLOR")) {
							$tmp = split("@@@@HEXCOLOR",$line[$u]);

							$hex = ltrim($tmp[1],"#");
							$tmpvar = "format_" . $hex;

							if (!$$tmpvar) {
								$$tmpvar =& $workbook->addFormat();
							}
							$ExcelColor = GetExcelColorName($hex);
							$$tmpvar -> setSize(9);
							$$tmpvar -> setBorder(1);
							$$tmpvar -> setFgColor($ExcelColor);
							if (substr($line[$u],0,1) == "@") $line[$u] = "'" . $line[$u];
							if (is_numeric($tmp[2])) {
								$worksheet->writeNumber($linecount, $u, $tmp[2], $$tmpvar);
								// qlog(INFO, "CHOOSE 3NUM for val " . $tmp[2]);
							} else {
								$worksheet->writeString($linecount, $u, $tmp[2], $$tmpvar);
								// qlog(INFO, "CHOOSE 3STR for val " . $tmp[2]);
							}

						} else {
							if (substr($line[$u],0,1) == "@") $line[$u] = "'" . $line[$u];
							if (is_numeric($line[$u])) {
								$worksheet->writeNumber($linecount, $u, $line[$u], $format_normal);
								// qlog(INFO, "CHOOSE 4NUM for val " . $line[$u]);
							} else {
								$worksheet->writeString($linecount, $u, $line[$u], $format_normal);
								// qlog(INFO, "CHOOSE 4STR for val " . $line[$u]);
							}
						}
						if ($max_col_width[$u] < strlen($header[$u])) {
								$max_col_width[$u] = strlen($header[$u]);
						}
					}
			}
			$linecount++;
		}

		// Now adjust the cell width
		for ($i=0;$i<sizeof($max_col_width);$i++) {
			if ($max_col_width[$i]) {
				$worksheet -> setColumn($i, $i, ($max_col_width[$i]*2));
			}
		}
		// Let's send the file
		$workbook->close();
	}
}
function GetExcelColorName($hex) {
	// array met excel kleuren
		$color = array();
	   array_push($color,array('00','00','00',8));  // 8
	   array_push($color,array('ff','ff','ff',9));   // 9
	   array_push($color,array('ff','00','00',10)); // 10
	   array_push($color,array('00','ff','00',11)); // 11
	   array_push($color,array('00','00','ff',12)); // 12
	   array_push($color,array('ff','ff','00',13)); // 13
	   array_push($color,array('ff','00','ff',14)); // 14
	   array_push($color,array('00','ff','ff',15)); // 15
	   array_push($color,array('80','00','00',16)); // 16
	   array_push($color,array('00','80','00',17)); // 17
	   array_push($color,array('00','00','80',18)); // 18
	   array_push($color,array('80','80','00',19)); // 19
	   array_push($color,array('80','00','80',20)); // 20
	   array_push($color,array('00','80','80',21)); // 21
	   array_push($color,array('c0','c0','c0',22)); // 22
	   array_push($color,array('80','80','80',23)); // 23
	   array_push($color,array('99','99','ff',24)); // 24
	   array_push($color,array('99','33','66',25)); // 25
	   array_push($color,array('ff','ff','cc',26)); // 26
	   array_push($color,array('cc','ff','ff',27)); // 27
	   array_push($color,array('66','00','66',28)); // 28
	   array_push($color,array('ff','80','80',29)); // 29
	   array_push($color,array('00','66','cc',30)); // 30
	   array_push($color,array('cc','cc','ff',31)); // 31
	   array_push($color,array('00','00','80',32)); // 32
	   array_push($color,array('ff','00','ff',33)); // 33
	   array_push($color,array('ff','ff','00',34)); // 34
	   array_push($color,array('00','ff','ff',35)); // 35
	   array_push($color,array('80','00','80',36)); // 36
	   array_push($color,array('80','00','00',37)); // 37
	   array_push($color,array('00','80','80',38)); // 38
	   array_push($color,array('00','00','ff',39)); // 39
	   array_push($color,array('00','cc','ff',40)); // 40
	   array_push($color,array('cc','ff','ff',41)); // 41
	   array_push($color,array('cc','ff','cc',42)); // 42
	   array_push($color,array('ff','ff','99',43)); // 43
	   array_push($color,array('99','cc','ff',44)); // 44
	   array_push($color,array('ff','99','cc',45)); // 45
	   array_push($color,array('cc','99','ff',46)); // 46
	   array_push($color,array('ff','cc','99',47)); // 47
	   array_push($color,array('33','66','ff',48)); // 48
	   array_push($color,array('33','cc','cc',49)); // 49
	   array_push($color,array('99','cc','00',50)); // 50
	   array_push($color,array('ff','cc','00',51)); // 51
	   array_push($color,array('ff','99','00',52)); // 52
	   array_push($color,array('ff','66','00',53)); // 53
	   array_push($color,array('66','66','99',54)); // 54
	   array_push($color,array('96','96','96',55)); // 55
	   array_push($color,array('00','33','66',56)); // 56
	   array_push($color,array('33','99','66',57)); // 57
	   array_push($color,array('00','33','00',58)); // 58
	   array_push($color,array('33','33','00',59)); // 59
	   array_push($color,array('99','33','00',60)); // 60
	   array_push($color,array('99','33','66',61)); // 61
	   array_push($color,array('33','33','99',62)); // 62
	   array_push($color,array('33','33','33',63)); // 63
	$ir = hexdec(substr($hex,0,2));
	$ig = hexdec(substr($hex,2,2));
	$ib = hexdec(substr($hex,4,2));
	$currnaast = 255*255*255; // max wat naast is
	$currkleurnaam = "fout!";
	$currrgb = "fout";
	for ($i=0;$i<sizeof($color);$i++) {
		$r = $color[$i][0];
		$g = $color[$i][1];
		$b = $color[$i][2];
		$kleurnaam = $color[$i][3];
		$tmpnaast = (abs($ir - hexdec($r)) + abs($ig - hexdec($g)) + abs($ib - hexdec($b)));
		if ($tmpnaast < $currnaast) {
			$currkleurnaam = $kleurnaam;
			$currrgb =  $r . $g . $b;
			$currnaast = $tmpnaast;
		}
	}
	return $currkleurnaam;
}
function SendPersonificatedDailyOverviewMail($body=false,$subject=false) {
	global $reposnr,$title,$webhost,$lang,$force;
	$output = "SendPersonificatedDailyOverviewMail:\n\n";

	$sql = "SELECT id,name,EMAIL,RECEIVEDAILYMAIL,FULLNAME,PROFILE FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user_%'";
	$result = mcq($sql,$db);

	while ($row = mysql_fetch_array($result)) {
			if (is_numeric($row['PROFILE'])) {
					$t = db_GetRow("SELECT RECEIVEDAILYMAIL FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . mres($row['PROFILE']) . "'");
					$row['RECEIVEDAILYMAIL'] = $t['RECEIVEDAILYMAIL'];
					qlog(INFO, "RECEIVEDAILYMAIL Overrule by profile in effect");
			}

			if ($row['RECEIVEDAILYMAIL']=="Yes" || $force) {
				unset($html);

				$del_str = " " . $GLOBALS['TBL_PREFIX'] . "entity.deleted!='y' AND ";

				$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] . "entity.eid, " . $GLOBALS['TBL_PREFIX'] . "entity.category AS category, " . $GLOBALS['TBL_PREFIX'] . "entity.duedate, " . $GLOBALS['TBL_PREFIX'] . "entity.owner AS owner," . $GLOBALS['TBL_PREFIX'] . "customer.custname AS custname," . $GLOBALS['TBL_PREFIX'] . "entity.status AS status ," . $GLOBALS['TBL_PREFIX'] . "entity.priority AS prio, " . $GLOBALS['TBL_PREFIX'] . "loginusers.FULLNAME AS assignee FROM " . $GLOBALS['TBL_PREFIX'] . "entity," . $GLOBALS['TBL_PREFIX'] . "customer," . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE " . $GLOBALS['TBL_PREFIX'] . "entity.assignee='" . $row['id'] . "' AND " . $GLOBALS['TBL_PREFIX'] . "entity.assignee=" . $GLOBALS['TBL_PREFIX'] . "loginusers.id AND " . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer=" . $GLOBALS['TBL_PREFIX'] . "customer.id AND " . $del_str . " " . $GLOBALS['TBL_PREFIX'] . "entity.assignee!='2147483647' AND " . $GLOBALS['TBL_PREFIX'] . "entity.owner!='2147483647' ORDER BY " . $GLOBALS['TBL_PREFIX'] . "entity.status," . $GLOBALS['TBL_PREFIX'] . "entity.priority," . $GLOBALS['TBL_PREFIX'] . "entity.duedate, " . $GLOBALS['TBL_PREFIX'] . "entity.eid";
				$result1 = mcq($sql,$db);
				$html = "<table border='1' class='crm'>";
				$html .= "<tr><td>EID</td><td>" . $lang['customer'] . "</td><td>" . $lang['assignee'] . "</td><td>" . $lang['owner'] . "</td><td>" . $lang['status'] . "</td><td>" . $lang['priority'] . "</td><td>" . $lang['category'] . "</td><td>" . $lang['duedate'] . "</td></tr>";
				$count = 0;
				while ($row2 = mysql_fetch_array($result1)) {

					$html .= "<tr><td>" . $row2['eid'] . "</td><td>" . $row2['custname'] . "</td><td>" . $row2['assignee'] . "</td><td>" . GetUserName($row2['owner']) . "</td><td style='background-color: " . GetStatusColor($row2['status']) . ";'>" . $row2['status'] . "</td><td style='background-color: " . GetPriorityColor($row2['priority']) . ";'>" . $row2['prio'] . "</td><td>" . $row2['category'] . "</td><td>" . TransformDate($row2['duedate']) . "&nbsp;</td></tr>";

					$count++;

				}
				$html .= "</table>";

				$mail = new PHPMailer();
				if (strlen($lang['CHARACTER-ENCODING'])>2) {
					$mail->CharSet = $lang['CHARACTER-ENCODING'];
				}

				$mail->From     = $GLOBALS['admemail'];
				$mail->FromName = $GLOBALS['PRODUCT'] . " Notification manager";

				if (strstr($GLOBALS['UNIFIED_FROMADDRESS'],"@")) {
					
					$tmp = explode("<", str_replace(">", "", $GLOBALS['UNIFIED_FROMADDRESS']));

					if (ValidateEmail(trim($tmp[1]))) {
						// This probably is in format Name <e@mail.com>
						$mail->From = trim($tmp[1]);

						$name = trim($tmp[0]);
						if ($name == "") {
							$mail->FromName = $GLOBALS['PRODUCT'] . " Notification manager";
						} else {
							$mail->FromName = $name;
						}
					} else {
						$mail->From     = $GLOBALS['UNIFIED_FROMADDRESS'];
						$mail->FromName = $GLOBALS['PRODUCT'] . " Notification manager";
					}
				}



				$mail->Host     = $GLOBALS['SMTPserver'];
				$mail->Mailer   = $GLOBALS['MailMethod'];
				if ($GLOBALS['MailUser'] != "" && $GLOBALS['MailPass'] != "") {
					$mail->Username = $GLOBALS['MailUser'];
					$mail->Password = $GLOBALS['MailPass'];
				}
				$mail->IsHTML(true);
				if ($body) {
						$body2b = str_replace("@LIST@",$html,$body);
						$plainhtml2b = $body2b;
						$html = $GLOBALS['doctype'] . "\n" . $GLOBALS['htmlopentag'] . "\n<head><title>" . $GLOBALS['PRODUCT'] . "</title></head><body><div>" . $body2b . "</div></body></html>";
				} else {
						$plainhtml2b = $html;
						$html = $GLOBALS['doctype'] . "\n" . $GLOBALS['htmlopentag'] . "\n<head><title>" . $GLOBALS['PRODUCT'] . "</title></head><body><div>" . $html . "</div></body></html>";
				}
				$html = ParseTemplateGeneric($html);
				$mail->Body    = $html;

				$mail->AltBody = htmlspecialchars_decode(strip_tags($html), ENT_QUOTES);

				$mail->AddAddress($row['EMAIL'],$row['FULLNAME']);
				if ($subject) {
					$mail->Subject = ParseTemplateGeneric($subject, "plain");
				} else {
					$mail->Subject = $row['FULLNAME'] . "'s " . $lang['entities'] . " ($title)";
				}

				if (!trim($row['EMAIL']=="") && $count>0) {
	    			qlog(INFO, "Sending daily entity overview to " . $row['name'] . " (" . $row['EMAIL'] . ") - $count");
					print "Sending entity overview to " . $row['FULLNAME'] . " ($count entities)\n";
					if(!$mail->Send()) {
						echo "<span class='noway'>There has been a mail error sending to ". $row['EMAIL'] . ":" . $mail->ErrorInfo . ". Please contact your system administrator.</span><br>";
						//log_msg("Sending e-mail to " . $who . " " . $receipient_mail . " failed:" . $mail->ErrorInfo,"");
						$add_to_journal .= "\nSending e-mail to " . $who . " " . $receipient_mail . " failed:" . $mail->ErrorInfo;
						qlog(INFO, "E-mail NOT sent.. ERROR: " . $mail->ErrorInfo);
						log_msg("ERROR: Sending e-mail failed " . $mail->ErrorInfo);
					} else {
						//log_msg("Notification e-mail sent to $who $receipient_mail","");
						$add_to_journal .= "\nNotification e-mail sent to " . $who . " " . $receipient_mail;
					}
				}

				$mail->ClearAddresses();
				$mail->ClearAttachments();
				qlog(INFO, "User " . $row['name'] . " got an update.");
				$output .= "User " . $row['name'] . " got an update.\n";
			} else {
				//qlog(INFO, "User " . $row['name'] . " doesn't want this update.");
				//$output .= "User " . $row['name'] . " doesn't want this update.\n";
			}
	}

	return($output);
}
function check_config($tbl) {
	global $lang;

	$p = array();
	$sql= "SELECT * FROM " . $tbl . "settings";
	$result= mcq($sql,$db);
	while ($resarr=mysql_fetch_array($result)){
		if (in_array($resarr['setting'],$p)) {
			print fillout($GLOBALS['title'],60) . ": Double config entry for " . $resarr['setting'] . " found - fixed by deleting the last one.\n";
			$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE settingid='" . mres($resarr['settingid']) . "'";
			mcq($sql,$db);
			$fixed = 1;
			//printbox($sql);
		}
		$p[$t] = $resarr[setting];
		$t++;
	}
	if (!$fixed) {
		print(fillout($GLOBALS['title'],60) . ": the configuration is consistant, no double entries found.\n");
	}

}
function ViewJournal($VJ)
{
	if ($VJ=="") {
		// Show select box
		// but first, show nice stats
		$sql = "SELECT COUNT(*) AS bla FROM " . $GLOBALS['TBL_PREFIX'] . "journal";
		$result= mcq($sql,$db);
		$r=mysql_fetch_array($result);
		
		print "The journal contains $r[bla] entries.<br>";
		print "Please enter the ID of the entity<br>";
		print "<form id='fd' method='get' action=''><div class='showinline'><input type='hidden' name='ViewJournal' value='1'><input type='hidden' name='password' value='" . $password . "'>";
		print "<input type='text' size='3' name='VJ'>&nbsp;&nbsp;<input type='submit' name='knopje' value='View journal by eID'></div></form><br>";
		print "<br>Search in all journal entries:<br><form id='nm2' method='get' action=''><div class='showinline'><input type='hidden' name='ViewJournal' value='1'><input type='hidden' name='password' value='" . $password . "'><input type='text' name='logquery' value='" . htme($logquery) . "'>&nbsp;&nbsp;<input type='submit'></div></form><br>";
		print "<br>Select the entity in the drop-down box:";
		print "<form id='ViewJournalForm' method='get' action=''><div class='showinline'><input type='hidden' name='ViewJournal' value='1'><input type='hidden' name='password' value='" . $password . "'><br>";
		print "<select name='VJ' id='JS_VJ'>";
		$sql = "SELECT category,eid,CRMcustomer FROM " . $GLOBALS['TBL_PREFIX'] . "entity ORDER BY " . $GLOBALS['TBL_PREFIX'] . "entity.eid";
		$result= mcq($sql,$db);
		while ($r=mysql_fetch_array($result)){
			print "<option value='" . $r['eid'] . "'>" . $r['eid'] . ":" . htme(GetCustomerName($r['CRMcustomer'])) . ":" . htme($r['category']) . "</option>";
		}
		print "</select>&nbsp;" . ReturnDropDownSearchField("JS_VJ");
		print "<br><br><input type='submit' name='knopje' value='View journal by dropdown box'></div></form>";

		EndHTML();
		exit;

	} else {
		// EID is in $VJ
		// First check if this is legal
		$eid = $VJ;


		print "Journal for entity #$eid<br>&nbsp;<a class='arrow' href='admin.php?&amp;ViewJournal=1'>back to journal page</a><br>";
		print "<table cellpadding='2' cellspacing='4' border='0' width='100%' class='mnspc'><tr valign=\"top\"><td valign=\"top\"><strong>Time</strong></td><td valign='top'><strong>User</strong></td><td><strong>Action</strong></td></tr>";
		print "<tr><td colspan='3'></td></tr>";
		$sql = "SELECT user,message,date_format(timestamp_last_change, '%a %M %e, %Y %H:%i') AS ts FROM " . $GLOBALS['TBL_PREFIX'] . "journal WHERE eid='" . mres($eid) . "' ORDER BY timestamp_last_change DESC";
		$result= mcq($sql,$db);
		while ($jn= mysql_fetch_array($result)) {
			print "<tr valign='top'><td>" . htme($jn[ts]) . "</td><td>" . htme(GetUserName($jn[user])) . "</td><td>" . nl2br(htme($jn['message'])) . "</td></tr>";
		}
		print "</table>";

	}
	
	
}

function MustBeAdmin() {
	if (!is_administrator($GLOBALS['USERID'])) {
		PrintAdminError();
		EndHTML();
		exit;
		// Yes, i know this is dirty.
	}
}
function MustBeAdminUser() {
	if (!is_administrator($GLOBALS['USERID'])) {
		PrintAdminError();
		EndHTML();
		exit;
		// Yes, i know this is dirty.
	}
}
function printAdminFormChanger($eid) {

	if (is_administrator() && $eid!="_new_" && $_COOKIE['online_development_mode'] == "y") {
		qlog(INFO, "Printing Administrator-only form changer");
		$curform = GetEntityFormID($eid);

		$outp .= "<script type=\"text/javascript\" src=\"js/functions.js?" . date('U') . "\"></script><table><tr><td valign='top'><fieldset><legend><img src='images/lock.png' alt='This is visible for administrators only'> Change the form this entity is using</legend><br><form id='FC' method='post' action='edit.php'><div class='showinline'>";
		$outp .= "<select name='newform'>";
			if ($curform == 0) {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
		//$outp .= "<option " . $ins . " value='default'>Default form</option>";
		$sql = "SELECT templateid, templatename, template_subject FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='TEMPLATE_HTML_FORM'";
		$result = mcq($sql, $db);
		while ($row = mysql_fetch_array($result)) {
			if ($row['templateid'] == $curform) {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			$x++;
			$outp .="<option " . $ins . " value='" . $row['templateid'] . "'>" . $row['templatename'] . " (" . $row['template_subject'] . ")</option>";
		}
		$outp .="</select><br><br>";
		$outp .="<input type='hidden' name='entity' value='" . $eid . "'><input type='submit' name='sb' value='Change form'> &nbsp; (other changes will be lost)";
		$outp .="</div></form></fieldset></td>";

		$outp .= "<td valign='top'><fieldset><legend>Administrative actions</legend><ul><li><a href='admin.php?templates=1&amp;editHTMLtemplate=" . $curform . "&amp;fromlist=" . base64_encode($_SERVER['REQUEST_URI']) . "'>Edit current form</a></li><li><a href='admin.php?templates=1&amp;editHTMLtemplate=" . $curform . "'>Edit current form (new window)</a></li><li><a href='admin.php?EditVars=1&amp;WhatVar=stat'>Edit status/prio values</a></li><li><a onclick=\"setCookie('online_development_mode','n');setCookie('ef_inline_edit','');alert('You left online development mode.');\" " . PrintToolTipCode("Leave development mode") . ">Leave online development mode</a></li></ul></fieldset></td>";
		$outp .= "</tr></table>";
		print $outp;
	} else {
		qlog(INFO, "NOT printing Administrator-only form changer");
	}
}
function PrintAdminError() {
	
	PrintAD("You do not have the required clearance level to access this page/function.");
}


function StatusVars() {
			global $lang;
			if ($_REQUEST['deletestatusvar']) {
						$deletestatusvar = base64_decode($_REQUEST['deletestatusvar']);
						$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars WHERE id='" . mres($deletestatusvar) . "'";
						mcq($sql,$db);
						log_msg("Status var $deletestatusvar deleted","");
			}

			if ($_REQUEST['colsubmitted']) {
				if ($_REQUEST['isnew']) {
						$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "statusvars(varname,color,listorder) VALUES('" . mres(trim($_REQUEST['varname'])) . "','" . mres($_REQUEST['varcolor']) . "','" . mres($_REQUEST['listorder']) . "')";
						mcq($sql,$db);
						$added=1;
						log_msg("Status var $varname added","");
				}
				if (!$_REQUEST['added']) {
					if ($_REQUEST['varname'] != $_REQUEST['oldvarname']) {
							$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET status='" . mres(trim($_REQUEST['varname'])) . "', timestamp_last_change=timestamp_last_change WHERE status='" . mres($_REQUEST['oldvarname']) . "'";
							mcq($sql,$db);
							$add = "All entities with status '" . $_REQUEST['oldvarname'] . "' were updated to status '" . trim($_REQUEST['varname']) . "'.";

							$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "triggers SET to_value='" . mres(trim($_REQUEST['varname'])) . "' WHERE onchange='status' and to_value='" . mres($_REQUEST['oldvarname']) . "'";
							mcq($sql, $db);
					}
					$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "statusvars SET varname='" . mres(trim($_REQUEST['varname'])) . "',color='" . mres($_REQUEST['varcolor']) . "', listorder='" . mres($_REQUEST['listorder']) . "' WHERE id='" . mres($_REQUEST['var_id']) . "'";
					//print $sql;
					mcq($sql,$db);
				}
				log_msg("Saving " . mres($_REQUEST['varname']) . " with color " . mres($_REQUEST['varcolor']) . " ". $add,"");
			}


			$printbox_size = "100%";
			if (!$_REQUEST['statusvar']) {
				$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
				$result= mcq($sql,$db);
				$a = "Please choose the status variable you want to edit or delete:<br><br>&nbsp;&nbsp;&nbsp;<table class='crm'>";
				$a .= "<thead><tr><td>Name</td><td>List order</td><td>Delete</td></tr></thead>";
				while ($result1= mysql_fetch_array($result)) {
					$a .=  "<tr><td class='pointer' style='background-color: " . htme($result1['color']) . ";' onclick='document.location=\"admin.php?&amp;statusvar=" . base64_encode($result1['id']) . "&amp;StatusVars=1\"'>";
					$a .= "<a href='admin.php?statusvar=" . base64_encode($result1['id']) . "&amp;StatusVars=1'><span class=\"" . ReturnClassnameForTextColorBasedOnBackgroundColor(GetStatusColor($result1['varname'])) . "\">" . htme($result1['varname']) . "</span></a></td><td>" . $result1['listorder'] . "</td><td><a href='admin.php?deletestatusvar=" . base64_encode($result1['id']) . "&amp;StatusVars=1'><img src='images/delete.gif' alt=''></a></td></tr>";
				}

				$a .=  "</table>";

				print $a;

			} else {

				$statusvar = base64_decode($_REQUEST['statusvar']);

				$a = "<form id='statvars' method='get' action=''><div class='showinline'>";
				if ($statusvar=="_new_") {
					$legend = "Add a new status variable&nbsp;";
					$a .= "<input type='hidden' name='isnew' value='_new_'>";
					$a .= "<table class='crm'><thead><tr><td>Name</td><td>List order</td><td>Color</td></tr></thead>";
				} else {
					$legend ="Editing status variable \"" . $_REQUEST['statusvar'] . "\"&nbsp;";
					$a .= "<table class='crm'><thead><tr><td>Name</td><td>List order</td><td>Color</td></tr></thead>";
					$sql = "SELECT varname,color,listorder,id FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars WHERE id='" . mres($statusvar) . "'";
					$result= mcq($sql,$db);
					$result1= mysql_fetch_array($result);
					$add1 = "<br>Warning: If you edit the variable name, the<br>status of all entities carrying this status will<br>be updated to your new variable name!<br><br>Also, triggers depending on this status will be updated.<br><br>";
				}

				$a .= "<tr><td><input type='text' name='varname' value='" . htme($result1['varname']) . "'><input type='hidden' name='oldvarname' value='" . htme($result1['varname']) . "'></td><td><input type='text' name='listorder' size='2' value='" . htme($result1['listorder']) . "'></td><td><input type='text' name='varcolor' value='" . htme($result1['color']) . "' id='JS_varcolor' class=\"ColorPickerField\"></td></tr>";
				$a .= "<tr><td colspan='3'><input type='hidden' name='StatusVars' value='1'><input type='hidden' name='var_id' value='" . $result1['id'] . "'><input type='hidden' name='colsubmitted' value='1'>";
				$a .= $add1;
				$a .= "<input type='submit' name='butt' value='Save'>&nbsp;<input type='button' name='butt1' value='Cancel' onclick='history.back(-1);'></td></tr>";
				$a .= "</table>";
				$a .= "</div></form>";
				print $a;
			}
			EndHTML();
			exit;
}
function PriorityVars() {
			global $lang;
			if ($_REQUEST['deletepriorityvar']) {
						$deletepriorityvar = base64_decode($_REQUEST['deletepriorityvar']);
						$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars WHERE id='" . mres($deletepriorityvar) . "'";
						mcq($sql,$db);
						log_msg("priority var $deletepriorityvar deleted","");
			}

			if ($_REQUEST['colsubmitted']) {
				if ($_REQUEST['isnew']) {
						$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "priorityvars(varname,color,listorder) VALUES('" . mres(trim($_REQUEST['varname'])) . "','" . mres($_REQUEST['varcolor']) . "','" . mres($_REQUEST['listorder']) . "')";
						mcq($sql,$db);
						$added=1;
						log_msg("priority var $varname added","");
				}
				if (!$_REQUEST['added']) {
					if ($_REQUEST['varname'] != $_REQUEST['oldvarname']) {
							$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET priority='" . mres(trim($_REQUEST['varname'])) . "', timestamp_last_change=timestamp_last_change WHERE priority='" . mres($_REQUEST['oldvarname']) . "'";
							mcq($sql,$db);
							$add = "All entities with priority '" . $_REQUEST['oldvarname'] . "' were updated to priority '" . trim($_REQUEST['varname']) . "'.";

							$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "triggers SET to_value='" . mres(trim($_REQUEST['varname'])) . "' WHERE onchange='priority' and to_value='" . mres($_REQUEST['oldvarname']) . "'";
							mcq($sql, $db);
					}
					$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "priorityvars SET varname='" . mres(trim($_REQUEST['varname'])) . "',color='" . mres($_REQUEST['varcolor']) . "', listorder='" . mres($_REQUEST['listorder']) . "' WHERE id='" . mres($_REQUEST['var_id']) . "'";
					//print $sql;
					mcq($sql,$db);
				}
				log_msg("Saving " . mres($_REQUEST['varname']) . " with color " . mres($_REQUEST['varcolor']) . " ". $add,"");
			}


			if (!$_REQUEST['priorityvar']) {
				$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars ORDER BY listorder, varname";
				$result= mcq($sql,$db);
				$a = "Please choose the priority variable you want to edit or delete:<br><br>&nbsp;&nbsp;&nbsp;<table class='crm'>";
				$a .= "<thead><tr><td>Name</td><td>List order</td><td>Delete</td></tr></thead>";
				while ($result1= mysql_fetch_array($result)) {
					$a .=  "<tr><td class='pointer' style='background-color: " . htme($result1['color']) . ";' onclick='document.location=\"admin.php?&amp;priorityvar=" . base64_encode($result1['id']) . "&amp;PriorityVars=1\"'>";
					$a .= "<a href='admin.php?priorityvar=" . base64_encode($result1['id']) . "&amp;PriorityVars=1'><span class=\"" . ReturnClassnameForTextColorBasedOnBackgroundColor(GetPriorityColor($result1['varname'])) . "\">" . htme($result1['varname']) . "</span></a></td><td>" . htme($result1['listorder']) . "</td><td><a href='admin.php?&amp;deletepriorityvar=" . base64_encode($result1['id']) . "&amp;PriorityVars=1'><img src='images/delete.gif' alt=''></a></td></tr>";
				}

				$a .=  "</table>";

				print $a;
			} else {

				$priorityvar = base64_decode($_REQUEST['priorityvar']);

				$a = "<form id='statvars' method='get' action=''><div class='showinline'>";
				if ($priorityvar=="_new_") {
					$legend = "Add a new priority variable&nbsp;";
					$a .= "<input type='hidden' name='isnew' value='_new_'>";
					$a .= "<table class='crm'><thead><tr><td>Name</td><td>List order</td><td>Color</td></tr></thead>";
				} else {
					$legend ="Editing priority variable \"" . $_REQUEST['priorityvar'] . "\"&nbsp;";
					$a .= "<table class='crm'><thead><tr><td>Name</td><td>List order</td><td>Color</td></tr></thead>";
					$sql = "SELECT varname,color,listorder,id FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars WHERE id='" . mres($priorityvar) . "'";
					$result= mcq($sql,$db);
					$result1= mysql_fetch_array($result);
					$add1 = "<br>Warning: If you edit the variable name, the<br>priority of all entities carrying this priority will<br>be updated to your new variable name!<br><br>Also, triggers depending on this priority will be updated.<br><br>";
				}

				$a .= "<tr><td><input type='text' name='varname' value='" . htme($result1['varname']) . "'><input type='hidden' name='oldvarname' value='" . htme($result1['varname']) . "'></td><td><input type='text' name='listorder' size='2' value='" . $result1['listorder'] . "'></td><td><input type='text' name='varcolor' value='" . $result1['color'] . "' id='JS_varcolor' class=\"ColorPickerField\"></td></tr>";
				$a .= "<tr><td colspan='3'><input type='hidden' name='PriorityVars' value='1'><input type='hidden' name='var_id' value='" . $result1['id'] . "'><input type='hidden' name='colsubmitted' value='1'>";
				$a .= $add1;
				$a .= "<input type='submit' name='butt' value='Save'>&nbsp;<input type='button' name='butt1' value='Cancel' onclick='history.back(-1);'></td></tr>";
				$a .= "</table>";
				$a .= "</form>";
				print $a;
			}
			EndHTML();
			exit;
}

/**
 * Handles editing a sysvar
 */
function EditSysVar($id) {
	global $lang;

	$data = $_REQUEST['data'];
	$udated = $_REQUEST['udated'];
	$setting = $_REQUEST['setting'];
	$OldVar = $_REQUEST['OldVar'];
	$plain = $_REQUEST['plain'];
	$stdtext = $_REQUEST['stdtext'];
	$rssfeeds = $_REQUEST['rssfeeds'];
	$rssdescriptions = $_REQUEST['rssdescriptions'];

	if (strstr($setting,"COLOR")){
			$data = $_REQUEST['varcolor'];
	}
	if ($udated) {
		//	print "value $data received for variable $id";
			if ($setting=="EnableEntityJournaling") {
				// Journaling mode was updated. Maybe we have to add this to the journal?
				if ((strtoupper($OldVar)=="YES") && (strtoupper($data)!="YES")) {
					$sql = "SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity";
					$result1 = mcq($sql,$db);
					while ($result= mysql_fetch_array($result1)) {
						journal($result[eid],"[admin] Journaling disabled");
						$jcount++;
					}
				} // end if oldvar was yes
			} elseif ($setting=="EMAILINBOX") {

				$data = array();
				$data['popuser'] = $_REQUEST['popus'];
				$data['poppass'] = $_REQUEST['poppa'];
				$data['pophost'] = $_REQUEST['popho'];
				$data['popvisi'] = $_REQUEST['popvi'];
				$data = serialize($data);
			} elseif ($setting=="STANDARD_TEXT" || $setting=="ShowMainPageLinks") {
				foreach ($stdtext AS $row) {
					$data .= base64_encode($row) . ",";
				}
				$data = substr($data,0,strlen($data)-1);
				$data = str_replace(",,","",$data);
			} elseif ($setting=="RSS_FEEDS") {
				SafeModeInterruptCheck();
				$data = array();
				$y=0;
				for ($i=0;$i<sizeof($_REQUEST['rssfeeds']);$i++) {
					if (strlen($_REQUEST['rssfeeds'][$i])>1) {
						$data[$y] = array();
						$data[$y]['sql'] = base64_encode($_REQUEST['rssfeeds'][$i]);
						$data[$y]['description'] = base64_encode($_REQUEST['rssdescriptions'][$i]);
						$data[$y]['template'] = base64_encode($_REQUEST['rsstemplates'][$i]);

						$y++;
					}
				}
				$data = serialize($data);
			} elseif ($setting == "SMTPserver" || $setting == "MailMethod" || $setting == "DISABLE_BINARY_SEARCH" || $setting == "SAFE_MODE" || $setting == "PaginateMainEntityList" || $setting == "TMP_FILE_PATH" || $setting == "ENABLEINDEXEDSEARCHING" || $setting=="ALLOWEDIPADRESSES" || $setting=="CLIPLISTAT" || $setting=="DISABLEENTITYFORMCACHE" || $setting=="FILECOMPRESSIONLEVEL" || $setting=="MINIMUMPASSWORDSTRENGTH" || $setting=="UseMailQueue") {
				SafeModeInterruptCheck();
			}
			DataJournal($id, GetSetting($setting), $data, "settings");
			$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "settings SET value='" . mres($data) . "' WHERE settingid='" . mres($id) . "'";
		    mcq($sql,$db);
			if ($setting=="EnableEntityJournaling") {
				// Journaling mode was updated. Maybe we have to add this to the journal?
				if ((strtoupper($OldVar)!="YES") && (strtoupper($data)=="YES")) {
					$sql = "SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity";
					$result1 = mcq($sql,$db);
					while ($result= mysql_fetch_array($result1)) {
						journal($result[eid],"[admin] Journaling enabled");
						$jcount++;
					}
				} // end if oldvar was yes
			}

			?>
			<script type="text/javascript">
				document.location='admin.php?sysval=1';
			</script>
			<?php

	}
	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE settingid='" . mres($id) . "'";
	$result= mcq($sql,$db);
	$result1= mysql_fetch_array($result);
	if ($result1[setting] == "DBVERSION") {
		print "<span class='noway'>This value cannot be edited.</span>";
		print "<br><a class='arrow' href='javascript:history.back(-1)'>back</a>";
		EndHTML();
		exit;
	}

	if (strstr($result1['setting'],"COLOR")){
	    print "<form id='statvars' method='get' action=''><div class='showinline'>";
	} else {
	    print "<form id='composeform' method='post' action=''><div class='showinline'>";
	}
	print "<table class='nicetable'>";
	print "<tr><td colspan=\"3\">Editing global variable $id: " . strtoupper($result1[setting]) . "</td></tr>";
	print "<tr><td colspan=\"3\"><strong>Description:</strong><br><br>" . $result1['discription'] . "</td></tr>";
	print "<tr><td><strong>";
	if ($result1['setting']!="STANDARD_TEXT" && $result1['setting']!="ShowMainPageLinks" && $result1['setting']!="EMAILINBOX") {
		print "Value:";
	} else {
		print "Values:";
	}

	print "</strong><input type='hidden' name='EditSysVar' value='" . $id . "'><input type='hidden' name='OldVar' value='" . htme($result1['value']) . "'><input type='hidden' name='setting' value='" . htme($result1['setting']) . "'>";
	if (strstr($result1['setting'], "DFT_")) {
		print '<span class="noway">The use of these settings is deprecated. Please use CSS instead!</span>';
	}
	if ($result1['setting'] == "AutoLoginUserID"){
			print "</td><td><select name='data' id='JS_EditUser'>";
			print "<option value=''>Don't auto-login</option>";
			$sql= "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE active='yes' AND administrator!='yes' ORDER BY name";
			$result= mcq($sql,$db);
			while ($t= mysql_fetch_array($result)) {
				if ($result1['value'] == $t['id']) {
					$ins = "selected='selected'";
				} else {
					unset($ins);
				}

				print "<option " . $ins . " value='" . $t['id'] . "'>" . htme($t['name']) . " [" . htme($t['FULLNAME']) . "]</option>";
			}
			print "</select>";
			print ReturnDropDownSearchField("JS_EditUser");

	} elseif (strstr($result1['setting'],"COLOR")){
			print "</td><td><br><input type='text' size='10' name='varcolor' value=\"" . htme($result1['value']) . "\" id='JS_varcolor' class=\"ColorPickerField\">";

			if ($result1['setting']=="DFT_FOREGROUND_COLOR") {
				print "&nbsp;&nbsp;<a onclick=\"document.forms['statvars'].elements['varcolor'].value='#c60';\">[default]</a>";
			} elseif ($result1['setting']=="DFT_FORM_COLOR") {
				print "&nbsp;&nbsp;<a onclick=\"document.forms['statvars'].elements['varcolor'].value='#c60';\">[default]</a>";
			} elseif ($result1['setting']=="DFT_LEGEND_COLOR") {
				print "&nbsp;&nbsp;<a onclick=\"document.forms['statvars'].elements['varcolor'].value='#3366FF';\">[default]</a>";
			} elseif ($result1['setting']=="DFT_PLAIN_COLOR") {
				print "&nbsp;&nbsp;<a onclick=\"document.forms['statvars'].elements['varcolor'].value='#000000';\">[default]</a>";
			}
		print "</td></tr>";
	} elseif ($result1['setting']=="ENTITY_ADD_FORM" || $result1['setting']=="ENTITY_EDIT_FORM" || $result1['setting']=="ENTITY_LIMITED_ADD_FORM" || $result1['setting']=="ENTITY_LIMITED_EDIT_FORM") {
			$sql = "SELECT templateid,templatename,templatetype FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='TEMPLATE_HTML_FORM'";
			$result = mcq($sql,$db);
			print "&nbsp;&nbsp;&nbsp;<select name='data'><option value='Default'>Default</option>";
			while ($row = mysql_fetch_array($result)) {
				if ($result1['value'] == $row['fileid']) {
					$ins = 'selected="selected"';
				} else {
					unset($ins);
				}
				print "<option " . $ins . " value='" . $row['templateid'] . "'>" . $row['templatename'] . "</option>";
			}
			print "</select></td></tr>";
	} elseif ($result1['setting']=="SYSWIDECSS") {
			$sql = "SELECT templateid,templatename,templatetype FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='TEMPLATE_CSS'";
			$result = mcq($sql,$db);
			print "&nbsp;&nbsp;&nbsp;<select name='data'><option value=''>None</option>";
			while ($row = mysql_fetch_array($result)) {
				if ($result1['value'] == $row['templateid']) {
					$ins = 'selected="selected"';
				} else {
					unset($ins);
				}
				print "<option " . $ins . " value='" . $row['templateid'] . "'>" . $row['templatename'] . "</option>";
			}
			print "</select></td></tr>";

	} elseif ($result1['setting']=="EXCELFILEFORMAT") {
		print "&nbsp;&nbsp;&nbsp;<select name='data'>";
			if ($GLOBALS['EXCELFILEFORMAT'] == "2003") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='2003'>2003 (.XLS) File format</option>";
			if ($GLOBALS['EXCELFILEFORMAT'] == "2007") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='2007'>2007 (.XLSX) File format (true color, date support)</option>";
			print "</select></td></tr>";
	} elseif ($result1['setting']=="FILELISTSORTORDER") {
		print "&nbsp;&nbsp;&nbsp;<select name='data'>";
			if ($GLOBALS['FILELISTSORTORDER'] == "Date") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='Date'>Date added (oldest first)</option>";
			if ($GLOBALS['FILELISTSORTORDER'] == "Date DESC") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='Date DESC'>Date added (newest first)</option>";

			if ($GLOBALS['FILELISTSORTORDER'] == "Name") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='Name'>Name  (alphabetical)</option>";
			if ($GLOBALS['FILELISTSORTORDER'] == "Type") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='Type'>Filetype</option>";
			print "</select></td></tr>";
	} elseif ($result1['setting']=="MINIMUMPASSWORDSTRENGTH") {
		print "&nbsp;&nbsp;&nbsp;<select name='data'>";
			print "<option " . $ins . " value='1'>Weak (unsafe)</option>";
			if ($GLOBALS['MINIMUMPASSWORDSTRENGTH'] == "2") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='2'>Medium</option>";
			if ($GLOBALS['MINIMUMPASSWORDSTRENGTH'] == "3") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='3'>Strong</option>";
			print "</select></td></tr>";

	} elseif ($result1['setting']=="FILECOMPRESSIONLEVEL") {
			SafeModeInterruptCheck();
			print "&nbsp;&nbsp;&nbsp;<select name='data'>";
			if ($GLOBALS['FILECOMPRESSIONLEVEL'] == "A") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='A'>Don't compress at all (except old versions of files)</option>";
			if ($GLOBALS['FILECOMPRESSIONLEVEL'] == "B1") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='B1'>Compress files older than 1 year</option>";
			if ($GLOBALS['FILECOMPRESSIONLEVEL'] == "B2") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='B2'>Compress files older than 1 year and only if the entity is deleted</option>";
			if ($GLOBALS['FILECOMPRESSIONLEVEL'] == "C1") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='C1'>Compress files older than 6 months</option>";
			if ($GLOBALS['FILECOMPRESSIONLEVEL'] == "C2") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='C2'>Compress files older than 6 months and only if the entity is deleted</option>";
			if ($GLOBALS['FILECOMPRESSIONLEVEL'] == "D") {
				$ins = 'selected="selected"';
			} else {
				unset($ins);
			}
			print "<option " . $ins . " value='D'>Compress all files</option>";
			print "</select>";
			print "</td></tr><tr><td></td><td colspan='2'>Compression will be done by nightly cron job, or you can do it yourself by using the<br>";
			print "command-line interface (cmd.php) and issue 'exec db compress'. <br></td></tr>";
			$t1 = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "blobs");
			$t2 = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "blobs WHERE gz='y'");
			print "<tr><td></td><td>Current number of files: " . $t1[0] . "</td></tr>";
			$pc1 = $t1[0] / 100;
			$pc = $t2[0] / $pc1;
			print "<tr><td></td><td>Current number of compressed files: " . $t2[0] . " (~" . round($pc) . "%)</td></tr>";
	} elseif ($result1['setting']=="DASHBOARDTEMPLATE") {
			$sql = "SELECT templateid,templatename,templatetype FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype = 'TEMPLATE_DASHBOARD'";
			$result = mcq($sql,$db);
			print "&nbsp;&nbsp;&nbsp;</td><td><br><select name='data'><option value='Default'>Default (hard-coded) dashboard</option>";
			while ($row = mysql_fetch_array($result)) {
				if ($result1['value'] == $row['fileid']) {
					$ins = 'selected="selected"';
				} else {
					unset($ins);
				}
				print "<option " . $ins . " value='" . $row['templateid'] . "'>" . $row['templatename'] . "</option>";
			}
			print "</select></td></tr>";

	} elseif ($result1['setting']=="DFT_FONT") {
				print "</td><td><br><input type='text' size='10' name='data' value=\"" . $result1[value] . "\">";
				print "&nbsp;&nbsp;<a onclick=\"document.forms['composeform'].elements['data'].value='Tahoma';\">[default]</a></td></tr>";
	} elseif ($result1['setting']=="AUTH_TYPE") {
				print "</td><td><br>";
				if ($result1['value'] == "Interleave Only") {
					$ins = 'selected="selected"';
				} else {
					unset($ins);
					$ins2 = 'selected="selected"';
				}
				print "<select name='data'><option " . $ins . " value=\"Interleave only\">" . $GLOBALS['PRODUCT'] . " Only</option><option " . $ins2 . ">HTTP REALM</option><option " . $ins3 . ">LDAP</option></select></td></tr>";

	} elseif ($result1['setting']=="EMAILINBOX") {
					print "</td></tr>";
					$credentials = @unserialize($GLOBALS['EMAILINBOX']);
					$a = $credentials['popuser'];
					$b = $credentials['poppass'];
					$c = $credentials['pophost'];
					$d = $credentials['popvisi'];
					if ($d == "admin") {
						$e = 'selected="selected"';
					} else {
						$f = 'selected="selected"';
					}
					print "<tr><td></td><td>Username:</td><td><input type='text' size='70' name='popus' value='" . $a . "'></td></tr>";
					print "<tr><td></td><td>Password:</td><td><input type='password' size='70' name='poppa' value='" . $b . "'></td></tr>";
					print "<tr><td></td><td>Hostname:</td><td><input type='text' size='70' name='popho' value='" . $c . "'></td></tr>";
					print "<tr><td></td><td>Link visible for (will appear on main page):</td><td>";
					print "<select name='popvi'><option value='everyone' " . $f . ">Everyone</option><option value='admin' " . $e . ">Admins only</option></select><input type='hidden' name='udated' value='1'></td></tr>";
	} elseif (substr($result1[setting],0,4) == "BODY") {
		if ($plain) {
			print "<textarea name='data' rows='18' cols='100'>" . htme($result1['value']) . "</textarea>";
		} else {
				print "<textarea id='editor' rows='70' cols='140' name='data' class='mnspc'>" . htme($result1['value']) . "</textarea>";
				print make_html_editor("editor", true);
		}
		print "</td></tr>";
		print "<tr><td colspan='3'><input type='hidden' name='udated' value='1'><input type='submit' name='Send.x' value='" . $lang['save'] . "'>&nbsp;&nbsp;<input type='button' name='do' value='" . $lang['cancel'] . "' onclick=\"document.location='admin.php?sysval=1'\">&nbsp;";
		if (!$plain) {
			print "<input type='button' onclick=\"document.location='admin.php?EditSysVar=$id&amp;plain=1';\" value='Javascript not working?'>";
		}
		AvailableTags();
		print "</td></tr>";
	} elseif($result1[setting]=="STANDARD_TEXT") {
		$si = 1;
		if (strlen($GLOBALS['STANDARD_TEXT'])>1) {
				print "<br>";
				$arr = split(",",$GLOBALS['STANDARD_TEXT']);
				foreach ($arr AS $row) {
					print $si . ".&nbsp;<input type='text' size='70' name='stdtext[]' value='" . htme(base64_decode($row)) . "'><br>";
					$si++;
				}
			} else {
				print "<br>";
			}
		print $si . ".&nbsp;<input type='text' size='70' name='stdtext[]' value=''><br>";
		$si++;
		print $si . ".&nbsp;<input type='text' size='70' name='stdtext[]' value=''><br>";
		$si++;
		print $si . ".&nbsp;<input type='text' size='70' name='stdtext[]' value=''><br></td></tr>";
	} elseif($result1['setting']=="ShowMainPageLinks") {
		$si = 1;
		if (strlen($GLOBALS['ShowMainPageLinks'])>1) {
				print "<br>";
				$arr = split(",",$GLOBALS['ShowMainPageLinks']);
				foreach ($arr AS $row) {
					print $si . ".&nbsp;<input type='text' size='70' name='stdtext[]' value='" . htme(base64_decode($row)) . "'><br>";
					$si++;
				}
			} else {
				print "<br>";
			}
		print $si . ".&nbsp;<input type='text' size='70' name='stdtext[]' value=''><br>";
		$si++;
		print $si . ".&nbsp;<input type='text' size='70' name='stdtext[]' value=''><br>";
		$si++;
		print $si . ".&nbsp;<input type='text' size='70' name='stdtext[]' value=''><br></td></tr>";
	} elseif($result1[setting]=="RSS_FEEDS") {
		$si = 1;

		/*
		Entities owned by user
			SELECT * FROM $GLOBALS['TBL_PREFIX']entity WHERE owner=''
		Entities assigned to user
			SELECT * FROM $GLOBALS['TBL_PREFIX']entity WHERE assignee=''
		All entities a user may see
			SELECT * FROM $GLOBALS['TBL_PREFIX']entity
		All non-deleted entities a user may see
			SELECT * FROM $GLOBALS['TBL_PREFIX']entity WHERE deleted!='y'
		*/
		print "<table class='crm'><thead><tr><td>Query</td><td>Description</td><td>Summary HTML template</td></tr></thead>";
		if (strlen($GLOBALS['RSS_FEEDS'])>1) {
				$arr = @unserialize($GLOBALS['RSS_FEEDS']);
				foreach ($arr AS $row) {
					$templ = base64_decode($row['template']);
					print "<tr><td><input type='text' size='70' name='rssfeeds[]' value=\"" . base64_decode($row['sql']) . "\"></td><td><input type='text' size='70' name='rssdescriptions[]' value=\"" . base64_decode($row['description']) . "\">";
					print "</td><td><select style='width: 250px;' name='rsstemplates[]'>";
					$sql = "SELECT templateid,templatename,timestamp_last_change,username FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='TEMPLATE_HTML'";
					$result = mcq($sql,$db);
					while ($row = mysql_fetch_array($result)) {
						if ($templ==$row['templateid']) {
							$ins = 'selected="selected"';
						} else {
							unset($ins);
						}
						print "<option " . $ins . " value='" . $row['templateid'] ."'>" . $row['templatename'] . "</option>";
					}
					print "</select></td></tr>";
					//&nbsp;&nbsp;<input type='text' size='70' name='rsstemplates[]' value=\"" . base64_decode($row['description']) . "\"><br>";
					$si++;
				}
			} else {
				print "<br>";
			}
		print "<tr><td><input type='text' size='70' name='rssfeeds[]' value=\"\"></td><td><input type='text' size='70' name='rssdescriptions[]' value=\"\">";
		print "</td><td><select style='width: 250px;' name='rsstemplates[]'>";
		$sql = "SELECT templateid,templatename,timestamp_last_change,username FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='TEMPLATE_HTML'";
		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			print "<option $ins value = '" . $row['templateid'] ."'>" . $row['templatename'] . "</option>";
		}
		print "</select></td></tr></table><br>";
		print "<br>Examples: (click text to copy to clipboard) <br><br>";
		?>
		<table>
		<tr>
			<td>All entities a user may see</td>
			<td><a title='Click to copy to clipboard' onclick="CopyToClipboard('SELECT * FROM <?php echo $GLOBALS['TBL_PREFIX'];?>entity');">SELECT * FROM <?php echo $GLOBALS['TBL_PREFIX'];?>entity</a></td>
		</tr><tr>
			<td>All entities assigned to the viewing user</td>
			<td><a title='Click to copy to clipboard' onclick="CopyToClipboard('SELECT * FROM <?php echo $GLOBALS['TBL_PREFIX'];?>entity WHERE assignee=\'@CURUSER@\'');">SELECT * FROM <?php echo $GLOBALS['TBL_PREFIX'];?>entity WHERE assignee='@CURUSER@'</a></td>
		</tr><tr>
			<td>All entities owned by the viewing user</td>
			<td><a title='Click to copy to clipboard' onclick="CopyToClipboard('SELECT * FROM <?php echo $GLOBALS['TBL_PREFIX'];?>entity WHERE owner=\'@CURUSER@\'');">SELECT * FROM <?php echo $GLOBALS['TBL_PREFIX'];?>entity WHERE owner='@CURUSER@'</a></td>
		</tr><tr>
			<td>All entities attached to customer 1</td>
			<td><a title='Click to copy to clipboard' onclick="CopyToClipboard('SELECT * FROM <?php echo $GLOBALS['TBL_PREFIX'];?>entity WHERE CRMcustomer=\'1\'');">SELECT * FROM <?php echo $GLOBALS['TBL_PREFIX'];?>entity WHERE CRMcustomer='1'</a></td>
		</tr>
		<tr><td colspan="2"><br><br><strong>A link called "RSS Feeds" will appear on the main page.</strong></td></tr>
		</table></td></tr>
		<?php
	} elseif($result1[setting]=="EXTRAFIELDLOCATION") {

		if (strtoupper($result1[value])=="A") {
			$a = 'selected="selected"';
		} else {
			$b = 'selected="selected"';
		}
		print "</td><td><br><select name='data'>";
		print "<option value='A' " . $a . ">Just above text field</option><option value='B' " . $b . " " . $no . ">Just above file list</option></select></td></tr>";

	} else {
		if ((stristr($result1['setting'],"show") ||stristr($result1['setting'],"DISPLAYNUMSUMINMAINLIST")||stristr($result1['setting'],"CHECKFORDOUBLEADDS")||stristr($result1['setting'],"USE_EXTENDED_CACHE") || $result1['setting']=='UseMailQueue' || stristr($result1['setting'],"enable") || stristr($result1['setting'],"mass") || stristr($result1['setting'],"Nobars") || $result1['setting']=="DisplayNOToptioninfilters" ||$result1['setting']=="InputNumbersWithSeperators" || stristr($result1['setting'],"ALSO_PR") || stristr($result1['setting'],"auto") || stristr($result1['setting'],"CAL_USE") || stristr($result1['setting'],"BLOCK") || stristr($result1['setting'],"force") || stristr($result1['setting'],"letuser") || stristr($result1['setting'],"hide") || stristr($result1['setting'],"onemailpertrigger") || stristr($result1['setting'],"USEWAITINGANDDOESNTBELONGHERE") || stristr($result1['setting'],"FormFinity") || stristr($result1['setting'],"PDF") || stristr($result1['setting'],"langover") || stristr($result1['setting'],"DISABLE")) && !stristr($result1['setting'],"recentedit") && ($result1['setting']!="MonthsToShow") && ($result1['setting']!="SHOWTABLEHEADEREVERY") && ($result1['setting']!="FORCEDFIELDSTEXT")&& ($result1['setting']!="AutoLoginURIString")) {

			if (strtoupper($result1[value])=="YES") {
				$yes = 'selected="selected"';
			} elseif (strtoupper($result1[value])=="ADMIN") {
				$admin = 'selected="selected"';
			} else {
				$no = 'selected="selected"';
			}

			if ($result1['setting']=="EnableRepositorySwitcher") {
				$option_insert = "<option " . $admin . ">Admin</option>";
			}
			print "</td><td><br><select name='data'><option " . $yes . ">Yes</option><option " . $no . ">No</option>" . $option_insert . "</select></td></tr>";

		} elseif (stristr($result1['setting'],"dateformat")) {
			if (strtoupper($result1['value'])=="DD-MM-YYYY") {
				$yes = 'selected="selected"';
			} elseif ( strtoupper($result1['value'])=="MM-DD-YYYY"){
				$no = 'selected="selected"';
			} else {
				$maybe = 'selected="selected"';
			}
			print "</td><td><br><select name='data'><option " . $yes . ">dd-mm-yyyy</option><option " . $no . ">mm-dd-yyyy</option><option " . $maybe . ">yyyy-mm-dd</option></select></td></tr>";
		} elseif (stristr($result1['setting'],"navtype")) {
			if (strtoupper($result1[value])=="TABS") {
				$yes = 'selected="selected"';
			} elseif ($result1['value'] == "PULLDOWN") {
				$maybe = 'selected="selected"';
			} else {
				$no = 'selected="selected"';
			}
			print "</td><td><br><select name='data'><option " . $yes . ">TABS</option><option " . $no . ">NOTABS</option><option value='PULLDOWN' " . $maybe . ">Pulldown (expirimental)</option></select></td></tr>";
		} elseif (stristr($result1['setting'],"managementinter")) {
			if (strtoupper($result1[value])=="ON") {
				$yes = 'selected="selected"';
			} else {
				$no = 'selected="selected"';
			}
			print "</td><td><br><select name='data'><option " . $yes . ">On</option><option " . $no . ">Off</option></select></td></tr>";
		} else {
			print "</td><td><br><input type='text' size='70' name='data' value=\"" . $result1['value'] . "\"></td></tr>";
		}
	}
	print "<tr><td colspan='3'><br><input type='hidden' name='udated' value='1'><input type='submit' name='bt' value='" . $lang['save'] . "'>&nbsp;&nbsp;<input type='button' name='do' value='" . $lang['cancel'] . "' onclick=\"document.location='admin.php?sysval=1'\"></td></tr>";
	print "</table></div></form>";
	EndHTML();
	exit;
}

function fillout($var,$len, $nofill=false) {
		if (strlen($var) <= $len && !$nofill) {
			while (strlen($var)<$len) {
					$var = $var . " ";
			}
			if ($var=="____0") {
				$var="_____";
			}
		} elseif (strlen($var) >= $len) {
			$var = substr($var, 0, ($len-3)) . "...";
		}
	return $var;
}
function filloutnum($var,$len) {
		while (strlen($var)<$len) {
				$var = "0" . $var;
		}
	return $var;
}
function nav() {
	global $lang,$logo,$ShowDeletedViewOption,$EnableCustInsert;

	?>
	<table border="0" width="100%"><tr><td>
	<table border="0" width="100%" cellpadding="0" cellspacing="0"><tr><td valign="top">
	&nbsp;<a class='arrow'  title='<?php echo $lang['gotomainpage'];?>' href='index.php?<?php echo $epoch;?>'><?php echo $lang[main];?></a>
	&nbsp;<a class='arrow'  title='<?php echo $lang['addcust'];?>' href='edit.php?e=_new_&amp;<?php echo $epoch;?>'><?php echo $lang[add];?></a>
	&nbsp;<a class='arrow'  title='<?php echo $lang['viewbrief'];?>' href='index.php?ShowEntityList&amp;<?php echo $epoch;?>'><?php echo $lang[entities];?></a>
	&nbsp;<a class='arrow'  title='<?php echo $lang['vacc'];?>' href='customers.php?<?php echo $epoch;?>'><?php echo $lang[customers];?></a>
	&nbsp;<a class='arrow'  title='<?php echo $lang['dumpi'];?>' href='csv.php?<?php echo $epoch;?>'>CSV</a>
	&nbsp;<a class='arrow'  title='<?php echo $lang['sumverb'];?>' href='summary.php?<?php echo $epoch;?>'><?php echo $lang[summary];?></a>
	<?php
	if ($ShowDeletedViewOption=="yes" || $ShowDeletedViewOption=="Yes") {
		print "&nbsp;<a class='arrow'  title='$lang[delentities]>' href='index.php?ShowEntityList&amp;filter=viewdel&amp;tab=$x'>$lang[delentities]</a>";
	}
	if ($EnableCustInsert=="yes" || $EnableCustInsert=="Yes") {
		$sql= "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity," . $GLOBALS['TBL_PREFIX'] . "customer WHERE " . $GLOBALS['TBL_PREFIX'] . "customer.id=" . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer AND " . $GLOBALS['TBL_PREFIX'] . "entity.owner='2147483647' AND " . $GLOBALS['TBL_PREFIX'] . "entity.assignee='2147483647' AND deleted!='y'";
		$result= mcq($sql,$db);
		$e= mysql_fetch_array($result);
		print "&nbsp;<a class='arrow'  title='" . $lang['delentities'] . ">' href='index.php?ShowEntityList&amp;filter=custinsert&amp;tab=" . $x . "'>" . $lang['viewinsertedentities'] . "</a> (" . $e[0] . ")";
	}
	?>
	&nbsp;<a class='arrow'  title='<?php echo $lang[logout];?>' href='index.php?logout=1&amp;<?php echo $epoch;?>'><?php echo $lang[logout];?></a>
	&nbsp;&nbsp;&nbsp;&nbsp;
	<?php echo $lang[entity];?>:&nbsp;<form id='direct' action='edit.php' method='post'><div class='showinline'><input type='text' size='3' name='e' onchange="document.forms['direct'].submit()" value='' onfocus="document.forms['direct'].elements['e'].value=''"></div></form>&nbsp;
	<?php echo $lang[search];?>:
	<form id='direct2' action='index.php?ShowEntityList' method='post'><div class='showinline'>
	<input type='text' size='15' name='wildsearch' value='<?php echo $wildsearch; ?>' onchange="document.forms['direct2'].submit()" onfocus="document.forms['direct2'].elements['wildsearch'].value=''">
	</div></form>
	<br>
	<?php
	$today = date("F j, Y, H:i") . "h.";
	//$result[value]=0;
	$sql= "SELECT count(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE status='open'";
	$result= mcq($sql,$db);
	$result= mysql_fetch_array($result);
	if ($result[0]) {
		print $today . " " . $lang['thereare'] . " <strong>" . $result[0] . "</strong> " . $lang['openentities'] . ".";
		} else {
		print $today . " " . $lang['noopen'];
	}
	print "</td></tr></table>";
	print "</td></tr></table>";
	print "<table style='width: 75%;'>";
}
function StandAloneEntitySearchbox() {
	return("<form id='direct_dashform' action='index.php?ShowEntityList?tab=11&amp;1169041696' method='get'><div class='showinline'><img src='images/searchbox.png' alt='' class='search_img'><input class='search_input' type='search' name='fs' onchange=\"document.forms['direct_dashform'].submit()\" onfocus=\"document.forms['direct_dashform'].elements['fs'].value=''\"> <input type='hidden' name='owner' value='all'><input type='hidden' name='brief' value='1'><input type='hidden' name='assignee' value='all'><input type='hidden' name='CRMcustomer' value='all'><input type='hidden' name='duedate' value='all'><input type='hidden' name='status'><input type='hidden' name='prio'><input type='hidden' name='waiting'></div></form>");
}
function StandAloneCustomerSearchbox() {
	return("<form id='pb' method='get' action='index.php?ShowCustomerList'><div class='showinline'><img src='images/searchbox.png' alt='' class='search_img'><input type='hidden' name='ShowCustomerList'><input class='search_input' type='search' name='fs' value='' onchange=\"document.forms['pb'].submit()\"></div></form>");
}
function InterNav() {
		global $lang, $epoch;
		$ret = "<ul>";
		if (strtoupper($GLOBALS['LetUserEditOwnProfile'])=="YES") {
			$ret .= "<li><a title='' href='profile.php?" . $epoch . "'>" . GetUserName($GLOBALS['USERID']) . "'s Profile (" . strtolower($lang['password']) . "/email)</a></li>";
		}
		if (CheckFunctionAccess("UserAdmin") == "ok" && !is_administrator()) {
			$ret .= "<li><a title='' href='useradmin.php?cur=true'>Edit users</a></li>";
		}
		if (CheckFunctionAccess("ExtrafieldAdmin") == "ok" && !is_administrator()) {
			$ret .= "<li><a title='' href='extrafields.php?tabletype=entity&amp;ti=entity'>Add/modify fields</a></li>";
		}
		if (CheckFunctionAccess("TriggerAdmin") == "ok" && !is_administrator()) {
			$ret .= "<li><a title='' href='trigger.php'>Add/modify business rules (triggers)</a></li>";
		}
		if (CheckFunctionAccess("TemplateAdmin") == "ok" && !is_administrator()) {
			$ret .= "<li><a title='' href='admin.php?templates=1&amp;nav=all&amp;t1=all'>Add/modify templates</a></li>";
		}

		if (CheckFunctionAccess("StatusAndPrioAdmin") == "ok" && !is_administrator()) {
			$ret .= "<li><a title='' href='admin.php?EditVars=1&amp;WhatVar=stat'>Add/modify status and priority values</a></li>";
		}
		if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
			$ret .= "<li><a title='' href='stats.php'>" . $lang['maninfo'] . "</a></li>";
		}
		if (is_administrator()) {
			$ret .= "<li><a title='' href='admin.php?info=1&amp;$epoch'>" . $lang['administration'] . "</a></li>";
		}


		$credentials = @unserialize($GLOBALS['EMAILINBOX']);
		$GLOBALS['popuser'] = $credentials['popuser'];
		$GLOBALS['poppass'] = $credentials['poppass'];
		$GLOBALS['pophost'] = $credentials['pophost'];
		$GLOBALS['popvisi'] = $credentials['popvisi'];
		$personal_credentials = GetPersonaleMailCredentials($GLOBALS['USERID']);

		if (($GLOBALS['popuser'] && $GLOBALS['poppass'] && $GLOBALS['pophost']) || ($personal_credentials[0]['popuser'] && $personal_credentials[0]['poppass'] && $personal_credentials[0]['pophost'])) {
			if ($GLOBALS['popvisi'] == "everyone") {
				$ret .= "<li><a title='' href='wm.php?$epoch'>E-mail inbox</a>";
				if (isset($personal_credentials[0]['popuser'])) {
					$ret .= ", " . $personal_credentials[0]['popuser'] . "@" . $personal_credentials[0]['pophost'];
				}
				$ret .= "</li>";
			} elseif (($GLOBALS['popvisi'] == "admin" && is_administrator())) {

				if ($GLOBALS['pophost'] != "") {
					$ret .= "<li><a title='' href='wm.php?$epoch'>E-mail inbox</a>&nbsp;(";
					$ret .= $GLOBALS['popuser'] . "@" . $GLOBALS['pophost'];
					$ret .= ")</li>";
					$sys=1;
				}
				if (isset($personal_credentials[0]['popuser'])) {
					if ($sys) {
						$ret .= ", ";
					} else {
						$ret .= "<li><a title='' href='wm.php?popbox=pbox0&amp;$epoch'>E-mail inbox</a>&nbsp;(";
					}
					$ret .= $personal_credentials[0]['popuser'] . "@" . $personal_credentials[0]['pophost'];

				}
				$ret .= ")&nbsp;</li>";
			} elseif (isset($personal_credentials[0]['popuser'])) {
				$ret .= "<li><a title='' href='wm.php?popbox=pbox0&amp;$epoch'>E-mail inbox&nbsp;(" . $personal_credentials[0]['popuser'] . "@" . $personal_credentials[0]['pophost'] . ")</a></li>";
			}
		}

		if (strtoupper($GLOBALS['EnableEntityReporting'])=="YES") {
			//$ret .= "<li><a title='' href='entityreport.php?$epoch'>" . $lang['entreportverbose'] . "</a></li>";
		}
		if (trim($GLOBALS['RSS_FEEDS']) != "" && trim($GLOBALS['RSS_FEEDS']) != "a:0:{}") {
			$ret .= "<li><a href='rss.php?avail=1'>List of available RSS-feeds</a></li>";
		}
		$ret .= "</ul>";
		return($ret);
}

function ManagementInformationSummary($qid)
{
	global $sqlcounter,$maxU,$maxo,$maxE,$maxEo,$maxEc,$maxEa,$delE,$obsE,$maxC,$expE,$waiE,$maxEoNc,$lang;

	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
		if ($qid) {
			$q = PopStashValue($qid);
			$andstring = "AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
			foreach ($q AS $eid) {
					$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
			}
			$andstring .= $q[0] . ")";
			$wherestring = "WHERE 1=1 " . $andstring;
		}

		print "<table class='crm'><tr><td colspan='3'><h1>" . $lang['oqs'] . "</h1>";
		if ($qid) {
			print " <span class='noway'>(subset)</span>";
		}
		print "</td></tr>";

		print "<tr><td class=\"nwrp\" colspan=\"4\">" . $lang['allround'] . "</td></tr>";
		print "<tr><td class=\"nwrp\">" . $lang['entities'] . "</td><td class=\"nwrp\">" . $maxE . "</td></tr>";
		print "<tr><td class=\"nwrp\"><em>" . $lang['ofwhich'] . "</em></td></tr>";

		$tmp = db_GetRow("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y'");
		$maxEo = $tmp[0];
		$tmp = db_GetRow("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity");
		$maxE = $tmp[0];
		$tmp = db_GetRow("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted='y'");
		$delE = $tmp[0];

		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
		$result= mcq($sql,$db);


		while ($e= mysql_fetch_array($result)) {

				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE status='" . mres($e['varname']) . "' " . $andstring;
					//qlog(INFO, $sql);
				$result1= mcq($sql,$db);
				$maxU1 = mysql_fetch_array($result1);
				$bla = $maxU1[0];
				$pc1 = ($maxE/100); // dit is 1 procent

				$pc2 = ($maxEo/100); // dit is 1 procent van not [deleted]

				$apc = round($bla/$pc1); // dit is het percentage

				print "<tr><td class=\"nwrp\" style='background-color: " . $e['color'] . ";'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . htme($e['varname']) . "</td><td style=\"width: 20%;\">" . htme($bla) . "</td><td style=\"width: 20%;\">" . $apc . "%</td></tr>";
				$totaal=$totaal+$bla;
		}
//		if ($totaal!=$MaxE) {
//			$bla = $maxE - $totaal;
//			$apc = round($bla/$pc1); // dit is het percentage
//			print "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unknown</td><td class=\"nwrp\" width=\"20%\">$bla</td><td width=\"20%\">$apc%</td></tr>";
//		}
		$apc = round($delE/$pc1); // dit is het percentage
		print "<tr><td class=\"nwrp\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . $lang['deleted'] . " </td><td class=\"nwrp\">" . $delE . "</td><td>n/a</td></tr>";
		print "<tr><td>&nbsp;</td></tr>";
		$apc = round($expE/$pc1); // dit is het percentage
		if ($apc>30) {
			$a1 = "<span style='color: #ff0000';'>";
			$a2 = "</span>";
		} else {
			unset($a1);
			unset($a2);
		}

		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars ORDER BY listorder, varname";
		$result = mcq($sql,$db);
		while ($e = mysql_fetch_array($result)) {

				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE priority='" . mres($e['varname']) . "' " . $andstring;
				$result1= mcq($sql,$db);
				$maxU1 = mysql_fetch_array($result1);
				$bla = $maxU1[0];
				$pc1 = ($maxE/100); // dit is 1 procent

				$pc2 = ($maxEo/100); // dit is 1 procent van not [deleted]

				$apc = round($bla/$pc1); // dit is het percentage

				print "<tr><td style='background-color: " . $e['color'] . ";'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$e[varname]</td><td width=\"20%\">$bla</td><td width=\"20%\">$apc%</td></tr>";
				$totaal=$totaal+$bla;
		}
		print "<tr><td>&nbsp;</td></tr>";
		print "<tr><td>$lang[edd]</td><td>$expE</td><td>$a1$apc%$a2</td></tr>";

		$apc = round($obsE/$pc1); // dit is het percentage
		if ($apc>30) {
			$a1 = "<span style='color: #ff0000';'>";
			$a2 = "</span>";
		} else {
			unset($a1);
			unset($a2);
		}
		//print "<tr><td>$lang[dontbelonghere]</td><td>$obsE</td><td>$a1$apc%$a2</td></tr>";
		$apc = round($waiE/$pc1); // dit is het percentage
			if ($apc>30) {
			$a1 = "<span style='color: #ff0000';'>";
			$a2 = "</span>";
		} else {
			unset($a1);
			unset($a2);
		}
		//print "<tr><td>$lang[ewfsea]</td><td>$waiE</td><td>$a1$apc%$a2</td></tr>";
		print "<tr><td>&nbsp;</td></tr>";
		$weeknumber = date("W");
		$sqlcounter++;
		$sql = "SELECT eid,cdate FROM " . $GLOBALS['TBL_PREFIX'] . "entity";
		$result= mcq($sql,$db);
			while ($e= mysql_fetch_array($result)) {
					$t = $e[cdate];
					$tjaar = substr($t,0,4);
					$year = date("Y");
					if ($tjaar == $year) {
							$tmaand = substr($t,5,2);
							$tdag = substr($t,8,2);
							$tmp = date ("W", @mktime (0,0,0,$tmaand,$tdag,$tjaar));
							if ($weeknumber == $tmp) {
								$thisweek++;
							}
					}
			}
		if (!$thisweek) { $thisweek=0; }
		print "<tr><td class=\"nwrp\">" . $lang['eatw'] . " (" . $weeknumber . "):</td><td>" . $thisweek . "</td></tr>";
	// CLOSED THIS WEEK
		$sql = "SELECT closeepoch FROM " . $GLOBALS['TBL_PREFIX'] . "entity " . $wherestring;
		$result = mcq($sql,$db);

		  while ($e2 = mysql_fetch_array($result)) {

					if ($e2['closeepoch']!=0) {
						$c_week = date("W", $e2['closeepoch']);
						$c_month = date("m", $e2['closeepoch']);
						$t_week = date("W");
						$t_month = date("m");
						if ($c_month == $t_month) {
							$thisDELmonth++;
						}
						if ($c_week == $t_week) {
							$thisDELweek++;
						}
					}
			}
		if (!$thisDELweek) { $thisDELweek=0; }
		print "<tr><td class=\"nwrp\">" . $lang['ectw'] . " (" . $weeknumber . "):</td><td>" . $thisDELweek . "</td></tr>";
		$month = date("F");
		$sqlcounter++;
		$sql = "SELECT eid,cdate FROM " . $GLOBALS['TBL_PREFIX'] . "entity " . $wherestring;
		$result= mcq($sql,$db);
			while ($e= mysql_fetch_array($result)) {
					$t = $e[cdate];
					$tjaar = substr($t,0,4);
					$year = date("Y");
					if ($tjaar == $year) {
							$tmaand = substr($t,5,2);
							$tdag = substr($t,8,2);
							$tmp = date ("F", @mktime (0,0,0,$tmaand,$tdag,$tjaar));
			//				print $tmp;
							if ($month == $tmp) {
								$thismonth++;
							}
					}
			}
		if (!$thismonth) { $thismonth=0; }
		print "<tr><td class=\"nwrp\">$lang[eatm] ($month):</td><td class=\"nwrp\">$thismonth</td></tr>";
		$month = date("F");
		$sqlcounter++;

		if (!$thisDELmonth) { $thisDELmonth=0; }
		print "<tr><td class=\"nwrp\">$lang[ectm] ($month):</td><td>$thisDELmonth</td></tr>";
		print "<tr><td class=\"nwrp\"><a class='arrow' href='stats.php?&amp;summonth=1'>Whole year summary</a></tr>";
		$sqlcounter++;
		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE cdate!='0000-00-00' AND closedate!='0000-00-00' AND deleted='y' " . $andstring;
		$result= mcq($sql,$db);
			while ($e= mysql_fetch_array($result)) {
					$t = $e[closedate];
					$tjaar = substr($t,0,4);
					$tmaand = substr($t,5,2);
					$tdag = substr($t,8,2);
					$tmp = date ("U", @mktime (0,0,0,$tmaand,$tdag,$tjaar));
					$t = $e[cdate];
					$tjaar = substr($t,0,4);
					$tmaand = substr($t,5,2);
					$tdag = substr($t,8,2);
					$tmp2 = date ("U", @mktime (0,0,0,$tmaand,$tdag,$tjaar));
					$avg = $avg + round((($tmp-$tmp2)/86400));
					$avgc++;
		}
		print "<tr><td>&nbsp;</td></tr>";
		//print "<em>$lang[cuaeoay].</em></td></tr>";

		print "<tr><td>$lang[users]</td><td>$maxU</td></tr>";
		print "<tr><td>$lang[customers]</td><td>$maxC</td></tr>";
		print "<tr><td>&nbsp;</td></tr>";
		if (strtoupper($GLOBALS['ForceCategoryPulldown'])=="YES") {
		   print "<tr><td><strong>Category</strong></td></tr>";

		   $list = Getsetting("Category pulldown list");

		   $list = @explode(",",$list);              if (sizeof($list)>0 && $list[0]!="") {
				   for ($t=0;$t<sizeof($list);$t++) {
					   $option = $list[$t];
					   print "<td></td><td width=\"20%\">" . $option . "&nbsp;</td><td width=\"20%\">";
					   $sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE category='" . mres($option) . "' " . $andstring;
					   $result1= mcq($sql,$db);
					   $tmp2 = mysql_fetch_array($result1);
					   print $tmp2[0];
					   print "&nbsp;</td></tr>";                  }
			   }
		   print "<tr><td>&nbsp;</td></tr>";
	   }
	   if ($GLOBALS['FormFinity'] == "Yes") {
			print "<tr><td class=\"nwrp\"><strong>Form breakdown</strong></td></tr>";
				print "<tr><td></td><td class=\"nwrp\" width=\"20%\">Default&nbsp;</td><td style=\"width: 20%;\">";
				$num = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE formid=0 " . $andstring);
				print $num[0];
				$num[0] = 0;
				"</td></tr>";

			$res = mcq("SELECT templateid, templatename, template_subject FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='TEMPLATE_HTML_FORM'", $db);
			while ($row = mysql_fetch_array($res)) {
				print "<tr><td></td><td class=\"nwrp\" style=\"width: 20%\">" . $row['templatename'] . " (" . $row['template_subject'] . ")</td><td style=\"width: 20%;\">";
				$num = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE formid=" . $row['templateid'] . " " . $andstring);
				print $num[0];
				$num[0] = 0;
				"</td></tr>";
			}
			print "</td></tr>";
		}
//		print "<tr><td class=\"nwrp\"><strong>Extra entity drop-down fields breakdown</strong></td></tr>";
		$f_ar = GetExtraFields();
		foreach ($f_ar AS $field) {
			if ($field['fieldtype'] == "drop-down") {
				print "<tr><td colspan='4'>" . $field['name'] . "</td></tr>";
				$tmp = @unserialize($field['options']);
				foreach($tmp AS $option) {
					print "<td></td><td class=\"nwrp\" width=\"20%\">" . $option . "&nbsp;</td><td class=\"nwrp\" width=\"20%\">";

					$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE EFID" . $field['id'] . "='" . mres($option) . "' " . $andstring;
					$result1= mcq($sql,$db);
					$tmp2 = mysql_fetch_array($result1);
					print $tmp2[0];
					print "&nbsp;</td></tr>";
				}
				//<td width=\"20%\">" . $yt . "&nbsp;</td><td width=\"20%\">" . $yt . "&nbsp;</td></tr>";
			}
		}
		print "</tr>";

		print "</table>";
	} else {
		PrintAD("No access");
	}
} // end func
function entities_owned_by_users($qid) {
		global $sqlcounter,$maxU,$maxo,$maxE,$maxEo,$maxEc,$maxEa,$delE,$obsE,$maxC,$expE,$lang;
		if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
			$maxEo = db_GetValue("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y'");
			$maxE  = db_GetValue("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity");
			$delE  = db_GetValue("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted='y'");

			print "<table class='crm'><tr><td colspan='6'><h1>" . $lang['eobu'] . "</h1>";
			if ($qid) {
				print " <span class='noway'>(subset)</span>";
			}
			print "</td></tr>";

			print "<tr><td colspan='4'>" . $lang['zoilo'] . "]</td></tr>";

			print "<tr><td><strong>$lang[owner]</strong></td><td><strong>" . $lang['openentities'] . "<strong></td><td><strong>$lang[deleted]</strong></td><td><strong>$lang[total]</strong></td><td><strong>%</strong></td><td>% bar</td></tr>";

			if ($qid) {
			$q = PopStashValue($qid);
			$andstring = " AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
			foreach ($q AS $eid) {
					$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
			}
			$andstring .= $q[0] . ")";
			$wherestring = "WHERE 1=1 " . $andstring;
			}
			$sqlcounter++;
			$sql = "SELECT id,FULLNAME FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers ORDER BY name";
			$result= mcq($sql,$db);

			while ($id = mysql_fetch_array($result)) {
				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE owner='" . mres($id['id']) . "' " . $andstring;
				$pr1 = mcq($sql,$db);
				$pr = mysql_fetch_array($pr1);
				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE owner='" . mres($id['id']) . "' AND deleted='y'" . $andstring;
				$pr1 = mcq($sql,$db);
				$prD = mysql_fetch_array($pr1);
				$pc1 = ($maxE/100); // dit is 1 procent
				$apc = round($pr[0]/$pc1); // dit is het percentage
				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND owner='" . mres($id['id']) . "'" . $andstring;
				$resul1t= mcq($sql,$db);
				$maxU1 = mysql_fetch_array($resul1t);
				$open = $maxU1[0];
				if (!$pr[0]==0) {
				print "<tr><td>" . $id['FULLNAME'] . "</td><td>" . $open . "</td><td>" . $prD[0] . "</td><td>" . $pr[0] . "</td><td>" . $apc . "%</td><td width='100'><img src='images/pixel.gif' width='" . $apc . "' height='10' alt=''></td></tr>\n";}
		}
		print "</table></fieldset>";
	} else {
		PrintAD("No access");
	}
} // end func
function entities_assigned_to_users($qid)
{
   	global $sqlcounter,$maxU,$maxo,$maxE,$maxEo,$maxEc,$maxEa,$delE,$obsE,$maxC,$expE,$lang;
	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
		$tmp = db_GetRow("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y'");
		$maxEo = $tmp[0];
		$tmp = db_GetRow("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity");
		$maxE = $tmp[0];
		$tmp = db_GetRow("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted='y'");
		$delE = $tmp[0];
		if ($qid) {
		$q = PopStashValue($qid);
		$andstring = " AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		foreach ($q AS $eid) {
				$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		}
		$andstring .= $q[0] . ")";
		$wherestring = "WHERE 1=1 " . $andstring;
		}
		print "<table class='crm'><tr><td colspan='6'><h1>" . $lang['eatu'] . "</h1>";
		if ($qid) {
			print " <span class='noway'>(subset)</span>";
		}
		print "</td></tr>";

		print "<tr><td colspan='4'>$lang[zailo]</td></tr>";
		print "<tr><td><strong>$lang[assignee]</strong></td><td><strong>" . $lang['openentities'] . "<strong></td><td><strong>$lang[deleted]</strong></td><td><strong>$lang[total]</strong></td><td><strong>%</strong></td><td>% bar</td></tr>";
		$sqlcounter++;
		$sql = "SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers ORDER BY name";
		$result= mcq($sql,$db);

		while ($id = mysql_fetch_array($result)) {
			$sqlcounter++;
			$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE assignee='" . mres($id['id']) . "'" . $andstring;
			$pr1 = mcq($sql,$db);
			$pr = mysql_fetch_array($pr1);
			$sqlcounter++;
			$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE assignee='" . mres($id['id']) . "' AND deleted='y'" . $andstring;
			$pr1 = mcq($sql,$db);
			$prD = mysql_fetch_array($pr1);
			$pc1 = ($maxE/100); // dit is 1 procent
			$apc = round($pr[0]/$pc1);
			$sqlcounter++;
			$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND assignee='" . mres($id['id']) . "'" . $andstring;
			$resul1t= mcq($sql,$db);
			$maxU1 = mysql_fetch_array($resul1t);
			$open = $maxU1[0];
			if (!$pr[0]==0) {
				print "<tr><td>" . GetUserName($id['id']) . "</td><td>" . $open . "</td><td>" . $prD[0] . "</td><td>" . $pr[0] . "</td><td>" . $apc . "%</td><td style='width: 100px;'><img src='images/pixel.gif' width='" . $apc . "' height='10' alt=''></td></tr>\n";}
		}
		print "</table></td></tr></table></fieldset>";
	} else {
		PrintAD("No access");
	}
} // end func
function self_assigned($qid)
{
	global $sqlcounter,$maxU,$maxo,$maxE,$maxEo,$maxEc,$maxEa,$delE,$obsE,$maxC,$expE,$lang;
	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
		print "<table class='crm'><tr><td colspan='6'><h1>" . $lang['sae'] . "</h1>";
		if ($qid) {
			print " <span class='noway'>(subset)</span>";
		}
		print "</td></tr>";
		print "<tr><td colspan='4'>$lang[ombla]</td></tr>";

		print "<tr><td><strong>$lang[owner] (<strong>$lang[andassignee]</strong>)</td><td><strong>$lang[selfassig]</strong></td><td><strong>%</strong></td></tr>";
		if ($qid) {
		$q = PopStashValue($qid);
		$andstring = " AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		foreach ($q AS $eid) {
				$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		}
		$andstring .= $q[0] . ")";
		$wherestring = "WHERE 1=1 " . $andstring;
		}
		$sqlcounter++;
		$sql = "SELECT DISTINCT owner FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE " . $GLOBALS['TBL_PREFIX'] . "entity.owner=" . $GLOBALS['TBL_PREFIX'] . "entity.assignee AND deleted!='y' ORDER BY owner";
		$result= mcq($sql,$db);
			while ($id = mysql_fetch_array($result)) {
				$sqlcounter++;
				$name = GetUserName($id['owner']);
				if (trim($name)=="") {
						$name = $id[owner];
				}
				if ($name=="2147483647") {
						$name = "[unassigned]";
				}

				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND owner='" . mres($id['owner']) . "'" . $andstring;
				$resul1t= mcq($sql,$db);
				$maxU1 = mysql_fetch_array($resul1t);
				$top1 = $maxU1[0];
				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND owner='" . mres($id['owner']) . "' AND " . $GLOBALS['TBL_PREFIX'] . "entity.owner=" . $GLOBALS['TBL_PREFIX'] . "entity.assignee" . $andstring;
				$resul1t= mcq($sql,$db);
				$maxU1 = mysql_fetch_array($resul1t);
				$top2 = $maxU1[0];
				$top1pc = $top1 / 100;
				$top2pc = @round($top2 / $top1pc);
			if ($top2!=0 && $top1!=0){
				print "<tr><td>$name</td><td>$top2 out of $top1</td><td>$top2pc%</td></tr>";
			}
			}
		print "</table>";
		print "$lang[aohnsae]</fieldset>";
	} else {
		PrintAD("No access");
	}
} // end func
function overdue_per_assignee($qid)
{
	global $sqlcounter,$maxU,$maxo,$maxE,$maxEo,$maxEc,$maxEa,$delE,$obsE,$maxC,$expE,$cdate,$lang;
	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {

		print "<table class='crm'><tr><td colspan='3'><h1>" . $lang['oepa'] . "</h1>";
		if ($qid) {
			print " <span class='noway'>(subset)</span>";
		}
		print "</td></tr>";

		if ($qid) {
		$q = PopStashValue($qid);
		$andstring = " AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		foreach ($q AS $eid) {
				$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		}
		$andstring .= $q[0] . ")";
		$wherestring = "WHERE 1=1 " . $andstring;
		}
		print "<tr><td><strong>" . $lang['assignee'] . "</strong></td><td><strong>Overdue</strong></td><td><strong>%</strong></td></tr>";
		$sqlcounter++;
		$sql = "SELECT DISTINCT assignee FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE sqldate<'" . mres($cdate) . "' AND status!='close' AND deleted!='y' " . $andstring . " ORDER BY assignee";
		$result= mcq($sql,$db);
			while ($id = mysql_fetch_array($result)) {
				$name = GetUserName($id['assignee']);
				if ($name=="2147483647") {
						$name = "[unassigned]";
				}
				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND status!='close' AND assignee='" . mres($id['assignee']) . "'" . $andstring;
				$resul1t= mcq($sql,$db);
				$maxU1 = mysql_fetch_array($resul1t);
				$top1 = $maxU1[0];
				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND status!='close' AND assignee='" . mres($id['assignee']) . "' AND sqldate<'" . mres($cdate) . "'" . $andstring;
				$resul1t= mcq($sql,$db);
				$maxU1 = mysql_fetch_array($resul1t);
				$top2 = $maxU1[0];
				$top1pc = $top1 / 100;
				$top2pc = round($top2 / $top1pc);
			print "<tr><td>$name</td><td>$top2 out of $top1</td><td>$top2pc%</td></tr>";
			}
		print "</table>";
		$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE sqldate<'" . mres($cdate) . "' AND status!='close'" . $andstring;
		$resul1t= mcq($sql,$db);
		$maxU1 = mysql_fetch_array($resul1t);
		$top3 = $maxU1[0];
		$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE status!='close'" . $andstring;
		$result= mcq($sql,$db);
		$maxU1 = mysql_fetch_array($result);
		$maxNC = $maxU1[0];
			$tmp = $maxNC / 100;
			$prt = round($top3 / $tmp);
		print "<br>$lang[onavarage] $prt% of all entities is overdue.";
		print "Other assignees have no overdue entities.</fieldset>";
	} else {
		PrintAD("No access");
	}
} // end func

function Top20_Most_Slow($qid) {
	global $lang;
	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
		$now = date('U');
		if ($qid) {
		$q = PopStashValue($qid);
		$andstring = " AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		foreach ($q AS $eid) {
				$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		}
		$andstring .= $q[0] . ")";
		$wherestring = "WHERE 1=1 " . $andstring;
		}
		print "<table class='crm'><tr><td colspan='4'><h1>Top20 slow open " . $lang['entities'] . "</h1>";
		if ($qid) {
			print " <span class='noway'>(subset)</span>";
		}
		print "</td></tr>";

		print "<tr><td><strong>EID<strong></td><td><strong>" . $lang['customer'] ."<strong></td><td>" . $lang['category'] . "</td><td><strong>Age</td></tr>";

		$sql = "select eid," . $GLOBALS['TBL_PREFIX'] . "customer.custname AS customer,category AS cat,COUNT(*), (" . $now . "-openepoch) AS ep FROM " . $GLOBALS['TBL_PREFIX'] . "entity," . $GLOBALS['TBL_PREFIX'] . "customer WHERE " . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer=" . $GLOBALS['TBL_PREFIX'] . "customer.id AND deleted!='y' AND (" . $now . "-openepoch)>0 AND openepoch!='' " . $andstring . " GROUP BY ep ORDER BY ep DESC LIMIT 20";
		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			$auth = CheckEntityAccess($row['eid']);
			if ($auth == "ok" || $auth=="readonly") {
				// Calculate age
				$age_in_seconds = $row['ep'];
				if ($age_in_seconds>86400) {
					$age = round($age_in_seconds/86400,2) . " days";
				} elseif ($age_in_seconds>3600) {
					$age = round($age_in_seconds/3600,2) . " hours";
				} elseif ($age_in_seconds>60) {
					$age = round($age_in_seconds/60,2) . " minutes";
				} elseif ($age_in_seconds!=$nowepoch) {
					$age = round($age_in_seconds,0) . " seconds";
				}

				print "<tr><td>" . $row['eid'] . "</td><td>" . $row['customer'] . "</td><td><a href='edit.php?e=" . $row['eid'] . "'>" . $row['cat'] . "</a></td><td>" . $age . "</td></tr>";
			}
		}
		print "</table>";
	} else {
		PrintAD("No access");
	}
}
function Top20_Most_Slow_Deleted($qid) {
	global $lang;
	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
		if ($qid) {
		$q = PopStashValue($qid);
		$andstring = " AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		foreach ($q AS $eid) {
				$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		}
		$andstring .= $q[0] . ")";
		$wherestring = "WHERE 1=1 " . $andstring;
		}

		print "<table class='crm'><tr><td colspan='4'><h1>Top20 slow deleted " . $lang['entities'] . "</h1>";
		if ($qid) {
			print " <span class='noway'>(subset)</span>";
		}
		print "</td></tr>";
		print "<tr><td><strong>EID<strong></td><td><strong>" . $lang['customer'] ."<strong></td><td>" . $lang['category'] . "</td><td><strong>Duration</td></tr>";

		$sql = "select eid,category AS cat," . $GLOBALS['TBL_PREFIX'] . "customer.custname AS customer,COUNT(*), (closeepoch-openepoch) AS ep FROM " . $GLOBALS['TBL_PREFIX'] . "entity, " . $GLOBALS['TBL_PREFIX'] . "customer WHERE " . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer = " . $GLOBALS['TBL_PREFIX'] . "customer.id AND deleted='y' AND (closeepoch-openepoch)>0 " . $andstring . " GROUP BY ep ORDER BY ep DESC LIMIT 20";

	//	$sql = "select eid," . $GLOBALS['TBL_PREFIX'] . "customer.custname AS customer,category AS cat,COUNT(*), (closeepoch-openepoch) AS ep FROM " . $GLOBALS['TBL_PREFIX'] . "entity," . $GLOBALS['TBL_PREFIX'] . "customer WHERE " . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer = " . $GLOBALS['TBL_PREFIX'] . "customer.id AND deleted='y' AND (" . $now . "-openepoch)>0 AND openepoch!='' GROUP BY ep ORDER BY ep DESC LIMIT 20";
		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			$auth = CheckEntityAccess($row['eid']);
			if ($auth == "ok" || $auth=="readonly") {
				// Calculate age
				$age_in_seconds = $row['ep'];
				if ($age_in_seconds>86400) {
					$age = round($age_in_seconds/86400,2) . " days";
				} elseif ($age_in_seconds>3600) {
					$age = round($age_in_seconds/3600,2) . " hours";
				} elseif ($age_in_seconds>60) {
					$age = round($age_in_seconds/60,2) . " minutes";
				} elseif ($age_in_seconds!=$nowepoch) {
					$age = round($age_in_seconds,0) . " seconds";
				}

				print "<tr><td>" . $row['eid'] . "</td><td>" . $row['customer'] . "</td><td><a href='edit.php?e=" . $row['eid'] . "'>" . $row['cat'] . "</a></td><td>" . $age . "</td></tr>";
			}
		}
		print "</table>";
	} else {
		PrintAD("No access");
	}
}
function Top10_Most_active($qid) {
	global $lang;
	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
		if ($qid) {
		$q = PopStashValue($qid);
		$andstring = " AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		foreach ($q AS $eid) {
				$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		}
		$andstring .= $q[0] . ")";
		$wherestring = "WHERE 1=1 " . $andstring;
		}
	// This function calculates the 10 most active entities (based on the journal)
		$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "journal";
		$result = mcq($sql,$db);
		$result = mysql_fetch_array($result);
		$max = $result[0];

		print "<table class='crm'><tr><td colspan='6'><h1>Top20 " . $lang['entities'] . " (" . $max ." journals)</h1>";
		if ($qid) {
			print " <span class='noway'>(subset)</span>";
		}
		print "</td></tr>";

		print "<tr><td><strong>EID<strong></td><td><strong>" . $lang['customer'] ."<strong></td><td><strong>#</strong></td><td>" . $lang['category'] . "</td><td><strong>Activity %</strong></td><td>Activity % bar</td></tr>";

		$sql = "select " . $GLOBALS['TBL_PREFIX'] . "journal.eid," . $GLOBALS['TBL_PREFIX'] . "entity.category AS cat," . $GLOBALS['TBL_PREFIX'] . "customer.custname AS customer,COUNT(*) AS num from " . $GLOBALS['TBL_PREFIX'] . "journal," . $GLOBALS['TBL_PREFIX'] . "entity," . $GLOBALS['TBL_PREFIX'] . "customer WHERE " . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer=" . $GLOBALS['TBL_PREFIX'] . "customer.id AND " . $GLOBALS['TBL_PREFIX'] . "journal.eid=" . $GLOBALS['TBL_PREFIX'] . "entity.eid " . $andstring . " GROUP BY eid HAVING COUNT(*) > 1 ORDER BY num DESC LIMIT 20;";
		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			// Calculate percentage of total activity
			$auth = CheckEntityAccess($row['eid']);
			if ($auth == "ok" || $auth=="readonly") {

				$pc = round($row['num'] / ($max / 100));
				print "<tr><td>" . $row['eid'] . "</td><td>" . $row['customer'] . "</td><td>" . $row['num'] . "</td><td><a href='edit.php?e=" . $row['eid'] . "'>" . $row['cat'] . "</a></td><td>" . $pc . "%</td><td><img src='images/pixel.gif' width='" . $pc . "' height='10' alt=''></td></tr>";
			}
		}
		print "</table>";
	} else {
		PrintAD("No access");
	}
}
function Top10_Most_active_users() {
	global $lang;
	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
		if ($qid) {
		$q = PopStashValue($qid);
		$andstring = " AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		foreach ($q AS $eid) {
				$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		}
		$andstring .= $q[0] . ")";
		$wherestring = "WHERE 1=1 " . $andstring;
		}
	// This function calculates the 10 most active entities (based on the journal &amp; uselog)
		$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "journal";
		$result = mcq($sql,$db);
		$result = mysql_fetch_array($result);
		$max = $result[0];

		print "<table class='crm'><tr><td colspan='4'><h1>Top20 " . $lang['users'] . " (" . $max ." journals)</h1>";
		if ($qid) {
			print " <span class='noway'>(subset)</span>";
		}
		print "</td></tr>";
		print "<tr><td><strong>" . $lang['owner'] ."/" . $lang['assignee'] . "<strong></td><td><strong>Activity</strong></td><td><strong>Activity %</strong></td><td>Activity % bar</td></tr>";

		$sql = "select " . $GLOBALS['TBL_PREFIX'] . "journal.user," . $GLOBALS['TBL_PREFIX'] . "loginusers.id AS userid,COUNT(*) AS num from " . $GLOBALS['TBL_PREFIX'] . "journal," . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE " . $GLOBALS['TBL_PREFIX'] . "journal.user=" . $GLOBALS['TBL_PREFIX'] . "loginusers.id " . $andstring . " GROUP BY user HAVING COUNT(*) > 1 ORDER BY num DESC LIMIT 20;";
		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			// Calculate percentage of total activity

			$pc = round($row['num'] / ($max / 100));
			print "<tr><td>" . GetUserName($row['userid']) . "</td><td>" . $row['num'] . "</td><td>" . $pc . "%</td><td><img src='images/pixel.gif' width='" . $pc . "' height='10' alt=''></td></tr>";
		}
		print "</table>";
	} else {
		PrintAD("No access");
	}
}

function entities_per_customer($qid)
{
	global $sqlcounter,$maxU,$maxo,$maxE,$maxEo,$maxEc,$maxEa,$delE,$obsE,$maxC,$expE,$lang;
	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
				print "<table class='crm'><tr><td colspan='6'><h1>" . $lang['epc'] . "</h1>";
		if ($qid) {
			print " <span class='noway'>(subset)</span>";
		}
		print "</td></tr>";
		print "<tr><td><strong>$lang[customer]</strong></td><td><strong>" . $lang['openentities'] . "<strong></td><td><strong>$lang[deleted]</strong></td><td><strong>$lang[total]</strong></td><td><strong>%</strong></td><td>% bar</td></tr>";

		$tmp = db_GetRow("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y'");
		$maxEo = $tmp[0];

		  $tmp = db_GetRow("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity");
		           $maxE = $tmp[0];
		       $tmp = db_GetRow("SELECT COUNT(*) FROM  " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted='y'");
		       $delE = $tmp[0];
		   $sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
		   $result= mcq($sql,$db);
		if ($qid) {
		$q = PopStashValue($qid);
		$andstring = " AND (" . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		foreach ($q AS $eid) {
				$andstring .= $eid ." OR " . $GLOBALS['TBL_PREFIX'] . "entity.eid=";
		}
		$andstring .= $q[0] . ")";
		$wherestring = "WHERE 1=1 " . $andstring;
		}
		$sqlcounter++;
		$sql = "SELECT id,custname FROM " . $GLOBALS['TBL_PREFIX'] . "customer ORDER BY custname";
		$result= mcq($sql,$db);

		while ($id = mysql_fetch_array($result)) {
			$auth = CheckCustomerAccess($id['id']);
			if ($auth == "ok" || $auth == "readonly") {
				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE CRMcustomer='" . mres($id['id']) . "'" . $andstring;
				$pr1 = mcq($sql,$db);
				$pr = mysql_fetch_array($pr1);
				$pc1 = ($maxE/100); // dit is 1 procent
				$apc = round($pr[0]/$pc1);
				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE CRMcustomer='" . mres($id['id']) . "' AND deleted='y'" . $andstring;
				$pr1 = mcq($sql,$db);
				$prD = mysql_fetch_array($pr1);
				$sqlcounter++;
				$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND CRMcustomer='" . mres($id['id']) . "'" . $andstring;
				$resul1t= mcq($sql,$db);
				$maxU1 = mysql_fetch_array($resul1t);
				$open = $maxU1[0];
				print "<tr><td><a href='detailedcustomerstats.php?qid=$qid&amp;cid=" . $id['id'] . "'>" . $id[custname] . "</a></td><td>$open</td><td>$prD[0]</td><td>$pr[0]</td><td>$apc%</td><td width='100'><img src='images/pixel.gif' width='$apc' height='10' alt=''></td></tr>\n";
			}
		}
		print "</table>";
	} else {
		PrintAD("No access");
	}
} // end func
function summonth($qid) {
	if (CheckFunctionAccess("ManagementInfo") == "ok" || is_administrator()) {
		$sql = "SELECT SUBSTRING(sqlstartdate, 1,7) AS month ,COUNT(*) AS totaal FROM " . $GLOBALS['TBL_PREFIX'] . "entity GROUP BY SUBSTRING(sqlstartdate, 1,7) ORDER BY month";
		$result = mcq($sql,$db);
		$months = array();
		while ($row = mysql_fetch_array($result)) {
			if (!is_array($months[$row['month']])) {
				$months[$row['month']] = array();
			}
			$months[$row['month']]['opened'] = $row['totaal'];
		}
		$sql = "SELECT SUBSTRING(closedate, 1,7) AS month ,COUNT(*) AS totaal FROM " . $GLOBALS['TBL_PREFIX'] . "entity GROUP BY SUBSTRING(closedate, 1,7) ORDER BY month";
		$result = mcq($sql,$db);

		while ($row = mysql_fetch_array($result)) {
			if (!is_array($months[$row['month']])) {
				$months[$row['month']] = array();
			}
			$months[$row['month']]['closed'] = $row['totaal'];
		}

		print "<table class='crm'><tr><td>Year/Month</td><td>Added entities</td><td>Closed entities</td></tr>";
		krsort($months);
		foreach ($months AS $mo => $mon) {
			print "<tr><td>" . $mo . "</td><td>" . $mon['opened'] . "</td><td>" . $mon['closed'] . "</td></tr>";
		}
		print "</table>";
	} else {
		PrintAD("No access");
	}

}

function StartPDF() {
	global $pdf;
	$pdf=new PDF();
	$pdf->Open();
	$pdf->AliasNbPages();
	$pdf->AddPage();
	$pdf->SetFont('Times','',12);
	$pdf->SetFont('Arial','',8);
}
function StartPrintPDF() {
	global $pdf;
	$pdf=new PDF_AutoPrint();
	$pdf->Open();
	$pdf->AliasNbPages();
	$pdf->AddPage();
	$pdf->SetFont('Times','',12);
	$pdf->SetFont('Arial','',8);
	$pdf->AutoPrint(false);
}
function toc($pdfa) {
		global $pdf,$shell_status,$lang;
		return(0);
		if ($shell_status) {
				print "CreatePDFTOC: Creating TOC of " . sizeof($pdfa) . " entities\n";
				//print "|--------------------------------------------------| 100%\n[";
		}
		$pdf->SetFillColor(244,209,137);
		line();
		$pdf->SetFont('Arial','',18);

		$pdf->Cell(0,10, $pdf_title2 . " " . $lang[entsum],0,1,"C");
		line();
		$pdf->Ln(1);
		$pdf->SetFont('Arial','',8);
		$top = sizeof($pdfa);

		$sp = 50;
		if ($shell_status) {
			print "[";
		}
		for ($op=0;$op<$top;$op++) {
			if (!$pdfa[$op]=="") {
				if ($shell_status) {

					$pc1 = $top/100; // 1% van totaal
					$pc2 = round($op/$pc1);

					if ($pc2 > ($oldpc+1)) {
						$oldpc = $pc2;
						$tp .= "#";
						$sp--;
						print "\015[" . $tp;
						for ($tops=$sp;$tops>0;$tops--) {
							print " ";
						}
						print "] " . $oldpc . "%";
					}
				}
				if (CheckEntityAccess($pdfa[$op]) == "ok" || CheckEntityAccess($pdfa[$op]) == "readonly" ) {
					$sql = "SELECT category FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . $pdfa[$op] . "'";
					$result = mcq($sql,$db);
					$cat = mysql_fetch_array($result);
					$pdf->Write(5, "- ");
					$id = fillout($pdfa[$op],5);
					$pdf->SetTextColor(0,0,255);
					$$pdfa[$op]=$pdf->AddLink();
					$pdf->Write(5, $id . " : " . $cat[0] ,$op);
					$pdf->Ln(4);
					$pdf->SetTextColor(0);
				}
			}
		}
		if ($shell_status) {
			print "\n";
		}
		line();
		$pdf->Ln(1);
		$pdf->AddPage();
}
function CreatePDF($pdfa,$file='') {
	global $pdf,$in_line,$shell_status,$filename_to_disk;
	$data = array();
	$filename_to_disk_to_use = $filename_to_disk;
	if ($shell_status) { // if run on command line (command-line-utils/generate_total_pdf_summary.php)
				print "CreatePDF: Creating report of " . sizeof($pdfa) . " entities\n";
				//print "|--------------------------------------------------| 100%\n[";
	}


	$top = sizeof($pdfa);
	$sp=50;
	for ($op=0;$op<$top;$op++) {

		if (!$pdfa[$op]=="") {
			if ($shell_status) {

					$pc1 = $top/100; // 1% van totaal
					$pc2 = round($op/$pc1);

					if ($pc2 > ($oldpc+1)) {
						$oldpc = $pc2;
						$tp .= "#";
						$sp--;
						print "\015[" . $tp;
						for ($tops=$sp;$tops>0;$tops--) {
							print " ";
						}
						print "] " . $oldpc . "%";
					}
			}
			$pdf->SetLink($op);
			$pdf->AddLink();

			CreateIndividualPDFSummary($pdfa[$op]);
			$pdf->SetFont('','');
			$pdf->SetFont('Arial','B',8);
			$pdf->Ln(20);

			if ($op<(sizeof($pdfa)-1)) {
				$pdf->AddPage();
			}
		} else {
			if ($shell_status) {
				print "CreatePDF: error " . $op . " is empty.";
			}
		}
	}
	$date = date("F j, Y, H:i") . "h";
	$pdf->Output($file);
	if ($shell_status) {
		print "\n";
	}

	qlog(INFO, "PDF Summary generated - quit.");
}
function CreateIndividualPDFSummary($e) {
		global $a,$data,$pdf,$DateFormat,$NoImageInclude,$in_line,$internal_catsum_counter,$lang;
		global $tc,$lang,$pdf_title,$language,$session,$include,$filename_to_disk,$filename_to_disk_to_use;

		// Generates PDF report for 1 entity
		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($e) . "'";
		$result= mcq($sql,$db);
		$ea = mysql_fetch_array($result);
		$owner       = GetUserName($ea['owner']);
		$assignee    = GetUserName($ea['assignee']);
		$customer    = GetCustomerName($ea['CRMcustomer']);
		$Statuscolor = hex2rgb(GetStatusColor($ea[status]));
		$Priocolor   = hex2rgb(GetPriorityColor($ea[priority]));
		if (sizeof($Statuscolor)<2) {
			$Statuscolor = array(255,255,255);
		}
		if (sizeof($Priocolor)<2) {
			$Priocolor = array(255,255,255);
		}
		if ($ea['closeepoch']==0) {
			$nowepoch = date('U');
			$txt = "Age";
		} else {
			$nowepoch = $ea['closeepoch'];
			$txt = "Duration";
		}
		if ($ea['openepoch']==0) {
				$age = "";
		} else {
			$age_in_seconds = $nowepoch - $ea['openepoch'];

			if ($age_in_seconds>86400) {
				$age = "($txt: " . round($age_in_seconds/86400,2) . " days)";
			} elseif ($age_in_seconds>3600) {
				$age = "($txt: " . round($age_in_seconds/3600,2) . " hours)";
			} elseif ($age_in_seconds>60) {
				$age = "($txt: " . round($age_in_seconds/60,2) . " minutes)";
			} elseif ($age_in_seconds!=$nowepoch) {
				$age = "($txt: " . round($age_in_seconds,0) . " seconds)";
			}
		}
		$t = $ea['timestamp_last_change']; // timestamp last edit
		$t = str_replace("-","",$t);
		$t = str_replace(" ","",$t);
		$t = str_replace(":","",$t);
		$tp['jaar'] = substr($t,0,4);
		$tp['maand'] = substr($t,4,2);
		$tp['dag'] = substr($t,6,2);
		$tp['uur'] = substr($t,8,2);
		$tp['min'] = substr($t,10,2);
		$cdate = explode("-",$ea['cdate']);

		$t = $ea['duedate']; // due date
		$tpd['jaar'] = substr($t,6,4);
		$tpd['maand'] = substr($t,3,2);
		$tpd['dag'] = substr($t,0,2);
		// Add zero's ie. 2-7-2003 must become 02-07-2003
		if (strlen($cdate[0])==1) {
				$cdate[0] = "0" . $cdate[0];
		}
		if (strlen($duedate[1])==1) {
				$cdate[1] = "0" . $cdate[1];
		}
		$NoImageInclude = 1;
		if (!$NoImageInclude) {

			if (!$include) {
				$subdir = str_replace("sumpdf.php","",$_SERVER['SCRIPT_NAME']);
			} else {
				$subdir = str_replace("dump_to_disk.php","",$_SERVER['SCRIPT_NAME']);
			}
			if ($getset) {
				$subdir = str_replace("edit.php","",$_SERVER['SCRIPT_NAME']);
			}

			if (!$filename_to_disk) {
				$filename_to_disk_to_use = tempnam($GLOBALS['TMP_FILE_PATH'],"CRM_TMP_BIN_");
			} else {
				$internal_catsum_counter++;
				$filename_to_disk_to_use = $filename_to_disk . $internal_catsum_counter;
			}

			qlog(INFO, "Directing image output to $filename_to_disk_to_use");
			DisplayEntityActivityGraph($e);

			$pdf->Image($filename_to_disk_to_use,150,41,44,'','png','http://' . $_SERVER['SERVER_NAME'] . $subdir . 'edit.php?e=' . $e);
			unlink($filename_to_disk_to_use);
			unset($filename_to_disk_to_use);
		}
		$cdate = TransformDate($cdate[2] . "-" . $cdate[1] . "-" . $cdate[0]);
		$pdf->Bookmark($ea['category'] . " (" . $ea['eid'] . ")");
		$pdf->SetFont('Arial','',12);
	    $pdf->SetFillColor(128,0,0);
	    $pdf->SetTextColor(255);
		$pdf->Cell(0,6,$ea['category'],1,1,'L',1);
	    $pdf->SetTextColor(0);
		$pdf->SetFont('Arial','',6);
		$pdf->Cell(0,6,"$pdf_title",0,1);
	    line();
		$pdf->SetFont('Arial','',10);
		$pdf->Cell(0,4,"$lang[entity] $e $lang[ownedby] $owner, $lang[assignedto] $assignee.",0,1);
		$pdf->Cell(0,6,"$lang[created] $cdate, $lang[lastupdate] " . TransformDate("$tp[dag]-$tp[maand]-$tp[jaar]") . " $tp[uur]:$tp[min]h.". " " . $age,0,1);

		$pdf->Cell(0,6,"$lang[duedate] : " . TransformDate("$tpd[dag]-$tpd[maand]-$tpd[jaar]"),0,1);
		$pdf->SetFillColor($Statuscolor[0],$Statuscolor[1],$Statuscolor[2]);
		$a1 = "$lang[curstat]: $ea[status]";
		$bla1 = $pdf->GetStringWidth($a1)+6;
		$a2 = "$lang[priority]: $ea[priority]";
		$bla2 = $pdf->GetStringWidth($a2)+6;
		if ($bla1>$bla2) {
			$wdth = $bla1;
		} else {
			$wdth = $bla2;
		}
		$pdf->Cell(1,6,0,0,0,0,0);
		$pdf->Cell($wdth,6,$a1,1,0,1,1);
//		$pdf->Ln(1);
		$pdf->Cell(1,6,0,0,0,0,0);
	    $pdf->SetFillColor(128,0,0);
		$pdf->SetFillColor($Priocolor[0],$Priocolor[1],$Priocolor[2]);
		$pdf->Cell($wdth,6,$a2,1,1,1,1);
		$pdf->SetFillColor(128,0,0);
		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($ea['CRMcustomer']) . "'";
		$result = mcq($sql,$db);
		$cust_array = mysql_fetch_array($result);

		$pdf->SetFont('Arial','',8);
		$pdf->Cell(0,5,$lang['customer'] . ": $customer, " . $cust_array['cust_address'],0,1);
		$pdf->Cell(0,4,$lang['contact'] . ": " . $cust_array['contact'] . "," . $cust_array['contact_phone'] . ", " . $cust_array['contact_email'],0,1);
//		$pdf->Cell(0,5,"$lang[customer]: $customer",0,1);
		$pdf->SetFont('Arial','',8);

		line();
		if ($ea[content]=="") {
			$ea[content]="-";
		}
		$n = explode("\n",$ea[content]);
		for ($n1=0;$n1<sizeof($n);$n1++) {
				$nt = wordwrap($n[$n1], 120, "HOPS!", 1);
				$nta = explode("HOPS!",$nt);
				for ($i=0;$i<sizeof($nta);$i++) {
					$pdf->Cell(0,4,trim($nta[$i]),0,1);
				}
			}
		$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid='" . mres($ea['eid']) . "' AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.type='entity'";
		$result = mcq($sql,$db);
		$num = mysql_fetch_array($result);
		if ($num[0]>0) {
			line();
			$pdf->SetFont('Arial','',10);
			$pdf->Cell(0,10,"This entity has files attached:",0,1);
			$pdf->SetFont('Arial','',8);
			$data = array();
			$header=array("Creation date",'Size','User','Filename');
			$sql= "SELECT filename,timestamp_last_change,filesize,fileid,username,date_format(timestamp_last_change, '%m-%d-%Y %H:%i') AS dt FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid='" . mres($ea['eid']) . "' AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.version_belonging_to=0 ORDER BY filename";
			$result7= mcq($sql,$db);
			while ($files= mysql_fetch_array($result7)) {
				$ownert = GetUserNameByName($files[username]);
				$url = "http://" . $_SERVER['SERVER_NAME'] . "/" . $subdir . "/csv.php?fileid=" . $files['fileid'];
				array_push($data,array($files['dt'],round(($files[filesize]/1024)). "K",$ownert,$url,$files['filename']));
				$ftel++;
				$tel++;
			}
				$pdf->FancyTable4colSinglePDF($header,$data);

		}
		// Extra fields list
		$list = GetExtraFields();
		$sql110 = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($ea['eid']) . "'";
		$result1 = mcq($sql110,$db);
		$num = mysql_fetch_array($result1);

		// The extra field values can be printed in two ways: in a table, and each on a new line
		if (sizeof($list)>1 && $num[0]>0) {
			$pdf->Ln(6);
			line();

			if (strtoupper($GLOBALS['PDF-ExtraFieldsInTable'])!="YES") {
				$pdf->SetFont('Arial','',10);
				$pdf->Cell(0,10,"Custom fields:",0,1);
				$pdf->SetFont('Arial','',8);
			} else {
				$data = array();
				$header=array("Field","Value");
			}
			foreach ($list AS $field) {

					$val = GetExtraFieldValue($ea['eid'], $field['id'], false, false);

					if (strtoupper($GLOBALS['PDF-ExtraFieldsInTable'])!="YES") {
						$pdf->SetFont('Arial','',6);
						$pdf->SetFillColor(255,255,255);
						$pdf->SetTextColor(0);
						$pdf->Cell(0,3,(ParseTemplateEntity($field['name'],$ea['eid'],false,false,false,"pdf")),1,1,'L',1);
						$pdf->SetFont('Arial','',8);
						$pdf->SetFillColor(0,0,0);
						$pdf->SetTextColor(0);
						line();
					}


					if ($val=="") {
						$val="-";
					}
					$n = explode("\n",$val);
					for ($n1=0;$n1<sizeof($n);$n1++) {
						$nt = wordwrap($n[$n1], 120, "HOPS!", 1);
						$nta = explode("HOPS!",$nt);
						for ($i=0;$i<sizeof($nta);$i++) {
							if (strtoupper($GLOBALS['PDF-ExtraFieldsInTable'])!="YES") {
								$pdf->Cell(0,4,trim($nta[$i]),0,1);
							} else {
								$tpt .= trim($nta[$i]);
							}
						}
					}
				if (strtoupper($GLOBALS['PDF-ExtraFieldsInTable'])=="YES") {
						array_push($data,array($field['name'],$tpt));
						unset($tpt);
					}
			}
			if (strtoupper($GLOBALS['PDF-ExtraFieldsInTable'])=="YES") {
				$pdf->SetFont('Arial','',6);
				$pdf->FancyTable2col($header,$data);
			}
			unset($header);
			unset($data);
			unset($num);
			unset($list);
		}


		$pdf->Ln(8);

		line();

}

function TodaysEntities() {
	global $fullname, $lang, $user_id, $alreadyshowed, $date;
	$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] . "entity.eid AS id, " . $GLOBALS['TBL_PREFIX'] . "entity.category AS cat," . $GLOBALS['TBL_PREFIX'] . "loginusers.FULLNAME AS name, " . $GLOBALS['TBL_PREFIX'] . "customer.custname AS cust FROM " . $GLOBALS['TBL_PREFIX'] . "entity," . $GLOBALS['TBL_PREFIX'] . "customer," . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE duedate='$date' AND " . $GLOBALS['TBL_PREFIX'] . "customer.id=" . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer AND " . $GLOBALS['TBL_PREFIX'] . "loginusers.id=" . $GLOBALS['TBL_PREFIX'] . "entity.assignee AND " . $GLOBALS['TBL_PREFIX'] . "entity.deleted='n' ORDER BY " . $GLOBALS['TBL_PREFIX'] . "customer.custname";

	print "<tr><td class=\"nwrp\"><fieldset><legend>&nbsp;<img src='images/crmlogosmall.gif' alt=''>&nbsp;&nbsp;$lang[entities]&nbsp;</legend><table border='0' width='100%'>";
	$toprint0 = "<tr><td class=\"nwrp\" colspan=\"2\">" . $lang['entitiestoday'] . ":</td></tr>";
	$result= mcq($sql,$db);
	  while ($today= mysql_fetch_array($result)) {
			if (CheckEntityAccess($today['id']) == "ok" || CheckEntityAccess($today['id']) == "readonly") {
						$toprint1 .= "<tr><td class=\"nwrp\" width='10%'><strong>&nbsp;- $today[id]</td><td class=\"nwrp\"><a href='edit.php?e=$today[id]'>$today[cust]</a></td><td class=\"nwrp\"><a href='edit.php?e=$today[id]'>$today[cat] ($lang[assignedto] $today[name])</a></strong></td></tr>";
			}
					 }
	  if ($toprint1) {
		  print $toprint0 . $toprint1;
	  }   else {
			print "<tr><td class=\"nwrp\" colspan=\"2\">" . $lang['noentities'] . ".</td></tr>";
	  }
	  print "</table></fieldset></td></tr>";
}
function GetEntityAssignee($eid) {
	$tmp = db_GetRow("SELECT assignee FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
	return($tmp['assignee']);
}
function GetEntityOwner($eid) {
	$tmp = db_GetRow("SELECT owner FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
	return($tmp['owner']);
}
function GetEntityStatus($eid) {
	$tmp = db_GetRow("SELECT status FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
	return($tmp['status']);
}
function SetEntityStatus($eid, $status) {
	if (IsValidEID($eid)) {
		journal($eid, "Status updated from [" . GetEntityStatus($eid) . "] to " . $status, "entity");
		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET status='" . mres($status) . "' WHERE eid='" . mres($eid) . "'");
		ProcessTriggers("status",$eid,$status);
	}
}
function GetEntityPriority($eid) {
	$tmp = db_GetRow("SELECT priority FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
	return($tmp['priority']);
}

function SetEntityPriority($eid, $prio) {
	if (IsValidEID($eid)) {
		journal($eid, "Priority updated from [" . GetEntityPriority($eid) . "] to " . $prio, "entity");
		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET priority='" . mres($prio) . "' WHERE eid='" . mres($eid) . "'");
		ProcessTriggers("priority",$eid,$prio);
	}
}
function debug() {
		print "<!--Debug:DNGN-->\n";
}
function GetTimeFromSQLDateTime($datetime) {
	return(substr($datetime, 11, 5));
}
function GetDateFromSQLDateTime($datetime) {
	return(substr($datetime, 0, 10));
}
function FormattedDateToNLDate($date) {
	if (strlen($date) == 10) {
		$dates = explode("-",$date);
		if ($GLOBALS['UC']['DateFormat'] == "dd-mm-yyyy") {
			$d = $dates[0];
			$m = $dates[1];
			$y = $dates[2];
		} elseif ($GLOBALS['UC']['DateFormat'] == "mm-dd-yyyy") {
			$d = $dates[1];
			$m = $dates[0];
			$y = $dates[2];
		} elseif ($GLOBALS['UC']['DateFormat'] == "yyyy-mm-dd") {
			$d = $dates[2];
			$m = $dates[1];
			$y = $dates[0];
		}
		return($d . "-" . $m . "-" . $y);
	}
}
function FormattedTimeToSQLTime($time) {
	if (strlen($time) == 5) {
		$result = $time . ":00";
	} else {
		$ampm = substr($time, strlen($time)-2,2);

		$time = substr($time, 0, 5);

		if (strtoupper($ampm) == "PM") {
			$h = substr($time, 0, 2);
			$m = substr($time, 3, 2);
			$hh = ($h+12);
			if ($hh == 24) $hh = "12";
			$result = $hh . ":" . $m . ":00";
		} else {
			$h = substr($time, 0, 2);
			$m = substr($time, 3, 2);
			$result = $h . ":" . $m . ":00";
		}
	}
	return($result);
}
function SQLDateTimeToFormattedDateTime($datetime) {

	if ($datetime != "") {
		$valAr[0] = substr($datetime, 0, 10);
		$valAr[1] = substr($datetime, 11, 5);

		$valAr[0] = TransformDate(INTLDate2NLDate($valAr[0]));
		$valAr[1] = TransformTime($valAr[1]);

		$ret = $valAr[0] . " " . $valAr[1];
	} else {
		$ret = "";
	}
	return($ret);
}

function FormattedDateTimeToSQLDateTime($datetime) {
	

	$valAr = array();
	$valAr[0] = substr($datetime, 0, 10);
	$valAr[1] = substr($datetime, 11, strlen($datetime)-11);

	$valAr[0] = NLDate2INTLDate(FormattedDateToNLDate($valAr[0]));
	$valAr[1] = FormattedTimeToSQLTime($valAr[1]);

	$ret = $valAr[0] . " " . $valAr[1];

	if (strlen($ret) != 19) {
		return("");
	} else {
		return($ret);
	}
}
function IsDate($date=false)
{
		if (strlen($date) != 10) {
			return(false);
		}
    // $date is in format dd-mm-yyyy

        $dates = split("-",$date);
        // bool checkdate ( int month, int day, int year)
        if (@checkdate($dates[1],$dates[0],$dates[2])) {
            return true;
        } else {
            return false;
        }
} // end func

function IsFormattedDate($date=false)
{
    // $date is in format dd-mm-yyyy

	if (strlen($date) != 10) {
		return(false);
	}

	$dates = split("-",$date);

	if ($GLOBALS['UC']['DateFormat'] == "dd-mm-yyyy") {
		$d = $dates[0];
		$m = $dates[1];
		$y = $dates[2];
	} elseif ($GLOBALS['UC']['DateFormat'] == "mm-dd-yyyy") {
		$d = $dates[1];
		$m = $dates[0];
		$y = $dates[2];
	} elseif ($GLOBALS['UC']['DateFormat'] == "yyyy-mm-dd") {
		$d = $dates[2];
		$m = $dates[1];
		$y = $dates[0];
	}
	// bool checkdate ( int month, int day, int year)
	if (@checkdate($m,$d,$y)) {
	    return true;
	} else {
		return false;
	}
} // end func



function viewArray($arr)
{
	echo '<table cellpadding="0" cellspacing="0" border="1">';
	foreach ($arr as $key1 => $elem1) {
		echo '<tr>';
		echo '<td>'.$key1.'&nbsp;</td>';
		if (is_array($elem1)) { extArray($elem1); }
		else { echo '<td>'.$elem1.'&nbsp;</td>'; }
		echo '</tr>';
	}
	echo '</table>';
}
function extArray($arr)
{
	echo '<td>';
	echo '<table cellpadding="0" cellspacing="0" border="1">';
	foreach ($arr as $key => $elem) {
		echo '<tr>';
		echo '<td>'.$key.'&nbsp;</td>';
		if (is_array($elem)) { extArray($elem); }
		else { echo '<td>'.htme($elem).'&nbsp;</td>'; }
		echo '</tr>';
	}
	echo '</table>';
	echo '</td>';
}

function DisplayLoginForm($message) {
	?><script type="text/javascript">document.location = 'login.php?session=<?php echo urlencode(base64_encode($message));?>';</script><?php
	EndHTML();
	exit;
}
function DisplayInlineLoginForm($message, $post = "index.php", $urltogo=false) {
	global $lang;
	if ($GLOBALS['Overrides']['LoginPage'] != "") {
		
		?><script type="text/javascript">document.location = '<?php echo $GLOBALS['Overrides']['LoginPage'];?>';</script><?php

		EndHTML();
		exit;

	} else {

		if ($post = "") {
			$post = "index.php";
		}
		if ($GLOBALS['mobile///DISABLED']) {
			$formaction = "mobile.php";
			$method = "post";
		} else {
			$formaction = "index.php";
			$method = "post";
		}
		if ($message != "") {
			print "<h4 id=\"loginformheadermessage\">" . ($message) . "</h4>";
		}
		//setCookie('repository',document.forms['login'].elements['repository'][document.forms['login'].elements['repository'].selectedIndex].value);
		print "<form id='login' method='" . $method . "' action='" . $formaction . "'><div class='showinline'>";
		print "<input type='hidden' name='url_to_go' value='" . htme($urltogo) . "'>";
		print "<table class='logintable'>";
		print "<tr><td> " . $lang['username'] . "<br>";
		print "<input type=\"text\" name=\"username\" id=\"JS_username\" tabindex=\"1\">";
		print "</td></tr>";
		print "<tr><td style='width: 286px;' colspan='2'>";

		if ($_COOKIE['namebla'] != "") {
			$ins = "checked='checked' ";
		} else {
			unset($ins);
		}

		print "<input " . $ins . " type='checkbox' name='remember_username' value='yes' > ";
		print "<span class='sml'>" . $lang['saveusername'] . "</span>";


		print "</td></tr><tr><td style='width: 286px;' colspan='2'><br>" . $lang['password'] . "<br>";
		print "<input type=\"password\" name=\"password\" id=\"JS_password\" tabindex=\"2\">";
		print "</td> </tr> <tr><td style='width: 286px;' colspan='2'>";

		if ($_COOKIE['passwordbla'] != "") {
			$ins = "checked='checked' ";
		} else {
			unset($ins);
		}

		print "<input " . $ins . " type='checkbox' name='remember_password' value='yes' onclick='clearPwd();' > ";
		print "<span class='sml'>" . $lang['savepassword'] . "</span>";

		print "</td></tr><tr><td><div id=\"repositoryselector\"><br>";
		print "Repository<br>";
		print PrintReposOptions();
		print "</div></td></tr><tr><td><br><input type=\"submit\" tabindex=\"4\" value=\"Login\" name=\"knop\">";
		print "</td></tr></table></div></form>";
	}


}

function GenerateSecret ($name){
	if (!$name) {
		print "Fatal error: no hash.";
		exit;
	} else {
		if ($_SERVER['HTTPS'] == "on") {
			$_GLOBALS['SecureCookie'] = 1;
		} else {
			$_GLOBALS['SecureCookie'] = 0;
		}

		$exptime = date('U');
		//$md5str = MD5($exptime);
		$md5str = randomstring(32);
		setcookie("session",$md5str, 0, "", "", $_GLOBALS['SecureCookie'], ""); //Set Cookie

		$arg = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "sessions(temp,exptime,name) VALUES('" . mres($md5str) . "','" . mres($exptime) . "','" . mres($name) . "')";
		$row = mcq($arg,$db);

		log_msg("Login $name","");
		$GLOBALS['session_id'] = $md5str;
	}
}
function randomstring($length, $solelyalpha=false) {
	$randomstring = "";
	// volledige alfabet (zowel upper als lowercase); 62 karakters
	if ($solelyalpha) {
		$randomchars = array("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z");
	} else {
		$randomchars = array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z");
	}
	// alleen hexadecimale karakters; slechts 16 karakters en dus een stuk minder goed beveiligd
	// $randomchars = array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");
	$maxpos = count($randomchars) - 1;
	for ($x = 0; $x < $length; $x++)
	{
		$randomstring .= $randomchars[mt_rand(0, $maxpos)];
	}
	return $randomstring;
}
function setnewtime ($actuser, $session){
	qlog(INFO, "Setting new time for session " . $session);
	if ($_SERVER['HTTPS'] == "on") {
		$_GLOBALS['SecureCookie'] = 1;
	} else {
		$_GLOBALS['SecureCookie'] = 0;
	}
	setcookie("session",$session, 0, "", "", $_GLOBALS['SecureCookie'], ""); //Set Cookie

	$exptime = date('U');
	$arg = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "sessions SET exptime='" . $exptime . "' WHERE temp='" . mres($session) . "'";
	$row = mcq($arg,$db);
}

function CleanUpCacheTablesAfterSave() {
	return(DeleteExpiredTemplateCache() + DeleteExpiredAccessCache());
}

function DeleteExpiredTemplateCache() {

	$deleted = 0;

	mcq("DELETE " . $GLOBALS['TBL_PREFIX'] . "entityformcache FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache, " . $GLOBALS['TBL_PREFIX'] . "entity WHERE " . $GLOBALS['TBL_PREFIX'] . "entityformcache.eid = " . $GLOBALS['TBL_PREFIX'] . "entity.eid AND " . $GLOBALS['TBL_PREFIX'] . "entityformcache.tabletype = 'entity' AND " . $GLOBALS['TBL_PREFIX'] . "entityformcache.timestamp_last_change < " . $GLOBALS['TBL_PREFIX'] . "entity.timestamp_last_change", $db);

	$deleted += mysql_affected_rows();

	mcq("DELETE " . $GLOBALS['TBL_PREFIX'] . "entityformcache FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache, " . $GLOBALS['TBL_PREFIX'] . "customer WHERE " . $GLOBALS['TBL_PREFIX'] . "entityformcache.eid = " . $GLOBALS['TBL_PREFIX'] . "customer.id AND " . $GLOBALS['TBL_PREFIX'] . "entityformcache.tabletype = 'customer' AND " . $GLOBALS['TBL_PREFIX'] . "entityformcache.timestamp_last_change < " . $GLOBALS['TBL_PREFIX'] . "customer.timestamp_last_change", $db);

	$deleted += mysql_affected_rows();
	
	foreach (db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs") AS $ft) {

		mcq("DELETE " . $GLOBALS['TBL_PREFIX'] . "entityformcache FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache, " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . " WHERE " . $GLOBALS['TBL_PREFIX'] . "entityformcache.eid = " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".recordid AND (" . $GLOBALS['TBL_PREFIX'] . "entityformcache.tabletype = 'flextable" . $ft . "' OR " . $GLOBALS['TBL_PREFIX'] . "entityformcache.tabletype = 'flextable" . $ft . "ref') AND " . $GLOBALS['TBL_PREFIX'] . "entityformcache.timestamp_last_change < " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".timestamp_last_change", $db) ;
		$deleted += mysql_affected_rows();

	}

	return($deleted);
}

function DeleteExpiredAccessCache() {
	
	$deleted = 0;

	mcq("DELETE " . $GLOBALS['TBL_PREFIX'] . "accesscache FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache, " . $GLOBALS['TBL_PREFIX'] . "entity WHERE " . $GLOBALS['TBL_PREFIX'] . "accesscache.eidcid = " . $GLOBALS['TBL_PREFIX'] . "entity.eid AND " . $GLOBALS['TBL_PREFIX'] . "accesscache.type = 'e' AND " . $GLOBALS['TBL_PREFIX'] . "accesscache.timestamp_last_change < " . $GLOBALS['TBL_PREFIX'] . "entity.timestamp_last_change", $db);

	$deleted += mysql_affected_rows();	

	mcq("DELETE " . $GLOBALS['TBL_PREFIX'] . "accesscache FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache, " . $GLOBALS['TBL_PREFIX'] . "customer WHERE " . $GLOBALS['TBL_PREFIX'] . "accesscache.eidcid = " . $GLOBALS['TBL_PREFIX'] . "customer.id AND " . $GLOBALS['TBL_PREFIX'] . "accesscache.type = 'c' AND " . $GLOBALS['TBL_PREFIX'] . "accesscache.timestamp_last_change < " . $GLOBALS['TBL_PREFIX'] . "customer.timestamp_last_change", $db);
	
	$deleted += mysql_affected_rows();

	foreach (db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs") AS $ft) {

		mcq("DELETE " . $GLOBALS['TBL_PREFIX'] . "accesscache FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache, " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . " WHERE " . $GLOBALS['TBL_PREFIX'] . "accesscache.eidcid = " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".recordid AND " . $GLOBALS['TBL_PREFIX'] . "accesscache.type = 'ft" . $ft . "' AND " . $GLOBALS['TBL_PREFIX'] . "accesscache.timestamp_last_change < " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".timestamp_last_change", $db) ;
	
		$deleted += mysql_affected_rows();

	}

	return($deleted);

}


function DeleteExpiredSessions() {

	$timeout = GetSetting('timeout');

	// This function deletes sessions which are too old. It's always ran first.
	if ($timeout>0) {
		$temp = ($timeout * 60);
		$currenttime = date('U');
		$trash = ($currenttime - $temp);
		$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "sessions WHERE exptime < " . mres($trash) . "";
		mcq($sql,$db);
	}
}

//HTaccessREALMAuth();
// Following code supplied by Ria Marinussen (thanks!)
// When using LDAP authenticification, the name of the ldap server should be filled in.
// If the ldap_port is not filled in, the default non-secure port 389 is used.
// If the users are in a ldap-folder, the ldap_prefix should be filled in so the complete
// ldap path can be used, with for example path\username, the prefix to use in the webinterface
// is "path\\". (double backslash to escape the backslash) and that turns up in the webinterface as "path\".

//renamed by jens.hechtfisch@telegate.com

function AuthenticateWithLdap2($name, $password, $silent, $ldap_server, $ldap_prefix, $ldap_port) {
    $ldaprdn  = $ldap_prefix . $name;    // ldap rdn or dn
    $ldappass = $password;
    // connect to ldap server
    if ($ldap_port) {
       $ldapconn = ldap_connect($ldap_server, $ldap_port)
          or die("Could not connect to LDAP server.");
    } else {
       $ldapconn = ldap_connect($ldap_server, '389')
          or die("Could not connect to LDAP server.");
    }
    if ($ldapconn) {
       // binding to ldap server#
	// begin of changes by jens.hechtfisch@telegate.com
	// add some param
	ldap_set_option($ldapconn,LDAP_OPT_PROTOCOL_VERSION,3);
	ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);
	// end of changes by jens.hechtfisch@telegate.com

       $ldapbind = @ldap_bind($ldapconn, $ldaprdn, $ldappass);
       // verify binding
		if ($ldaprdn != '' and $ldappass != '' and $ldapbind) {
    		qlog(INFO, "Authentication type is LDAP and the webserver claims this user is " . $_SERVER['PHP_AUTH_USER']. ".");
			qlog(INFO, "User " . $name . " was successfully authenticated thru LDAP");
            return(AuthenticateUser3($name,$password,$silent,true));
       } else {
	    	qlog(INFO, "Authentication type is LDAP though user is not authenticated thru LDAP.");
            	return(AuthenticateUser3($name, $password, $silent, false));
       }
    }
}
function AuthenticateWithLdap($name, $password, $silent, $ldap_server, $ldap_prefix, $ldap_port) {
        $ldaprdn  = $ldap_prefix . $name;    // add prefix to username.
        $ldappass = $password;
        // connect to ldap server
        if ($ldap_port) {
                $ldapconn = ldap_connect($ldap_server, $ldap_port)
                or die("Could not connect to LDAP server.");
        } else {
                $ldapconn = ldap_connect($ldap_server, '389')
                or die("Could not connect to LDAP server.");
        }
        if ($ldapconn) {

                $bind_user = $GLOBALS['LDAP_BIND_USERNAME'];
                $bind_pass = $GLOBALS['LDAP_BIND_PASSWORD'];
                $base_dn   = $GLOBALS['LDAP_BASE_DN'];
				$bind_att  = GetSetting("LDAP_LOGIN_ATTRIBUTE");
	
                if ($bind_user && $bind_pass) {

                           //try to do binding with bind_user / bind_pass

                        if ($ldapbind = @ldap_bind($ldapconn, $bind_user, $bind_pass)) {

                                //IMPORTANT make sure username and password aren't empty or lda_bind will bind anonymously and give a false pass
                                if ($name != '' and $ldappass != '') {

                                        //Search for the user in LDAP
                                        $sr = ldap_search($ldapconn,$base_dn,$ldaprdn,array($bind_att)); //sAMAccountName is standard for Active Directory
                                        $info = ldap_get_entries($ldapconn,$sr);
                                        $cn = $info[0][strtolower($bind_att)][0];
                                        if ($cn == '') {
                                                qlog(ERROR, "Authentication type is LDAP though user is not authenticated thru LDAP.  User could not be foudn in LDAP");
                                                return(AuthenticateUser3($name, $password, $silent, false));
                                        } else if (@ldap_bind($ldapconn,$cn,$ldappass)) {
                                                qlog(INFO, "Authentication type is LDAP and the webserver claims this user is " . $_SERVER['PHP_AUTH_USER']. ".");
                                                qlog(INFO, "User " . $name . " was successfully authenticated thru LDAP with" . $cn);
                                                return(AuthenticateUser3($name,'',$silent,true));
                                        } else {
                                                qlog(INFO, "Authentication type is LDAP and the webserver claims this user is " . $_SERVER['PHP_AUTH_USER']. ".");
                                                qlog(ERROR, "User " . $name . " failed to authenticate thru LDAP with " . $cn);

                                                if (!$silent) {
                                                        $GLOBALS['LogonPageServiceMessage'] = "Invalid username or password. Please try again.";
                                                        $_REQUEST['username'] = "";
                                                        $_REQUEST['password'] = "";
                                                        require("login.php");
                                                        exit;
                                                }

                                                return(false);
                                        }
                                } else {
                                        if (!$silent) {
						qlog(ERROR, "User " . $name . " failed to authenticate thru LDAP with, No username or password was given");
                                                $GLOBALS['LogonPageServiceMessage'] = "Invalid username or password. Please try again.";
                                                $_REQUEST['username'] = "";
                                                $_REQUEST['password'] = "";
                                                require("login.php");
                                                exit;
                                        }
                                        return(false);
                                }
                        } else {
                                // Could not bind with given credentials.  Use normal method and log error
                                return(AuthenticateUser3($name, $password, $silent, false));
                                qlog(ERROR, "Authentication type is LDAP, but could not bind with LDAP. The user is not authenticated thru LDAP.");
                        }
                } else {
                        qlog(ERROR, "Authentication type is LDAP though user is not authenticated thru LDAP. LDAP username and/or password are not set.");
                        return(AuthenticateUser3($name, $password, $silent, false));
                }
        }
}




function FetchUserLimits($force_id = false) {
	global $lang, $nonavbar;
	
}
function AuthenticateUser($name, $password, $silent) {
//	debug_print_backtrace();
//	exit;
	if ($GLOBALS['AUTH_TYPE'] == "HTTP REALM" && $_SERVER['PHP_AUTH_USER']!="") {
		qlog(INFO, "Authentication type is HTTP REALM and the webserver claims this user is " . $_SERVER['PHP_AUTH_USER']. ". Bypassing login screen");
		return(AuthenticateUser3($_SERVER['PHP_AUTH_USER'],"",$silent,true));
	} elseif ($GLOBALS['AUTH_TYPE'] == "LDAP") {
        $ldap_server = $GLOBALS['LDAP_SERVER'];
        $ldap_prefix = $GLOBALS['LDAP_PREFIX'];
        $ldap_port = $GLOBALS['LDAP_PORT'];
        return(AuthenticateWithLdap($name, $password, $silent, $ldap_server, $ldap_prefix, $ldap_port));
	} else {
		qlog(INFO, "Authentication type is HTTP REALM though user is not authenticated against the webserver.");
		return(AuthenticateUser3($name, $password, $silent, false));
	}


}
function OnlyAuth($name, $password) {

		$arg = DB_GetRow("SELECT password, 1 AS auth, active, id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($name) . "' AND password=PASSWORD('" . mres($password) . "')");
		if ($arg['auth']) {
			return(true);
		} else {
			return(false);
		}
}
function AuthenticateUser3($name, $password, $silent, $np=false){
	global $thiswasalogin, $logon, $title,$lang;

	if ($fp = @fopen($GLOBALS['PATH_TO_BASE'] . "logins.txt","a")) {
		$now = date('U');
		$then = $now - 600;
		$t = tail_file($GLOBALS['PATH_TO_BASE'] . "logins.txt", 500);
		foreach ($t AS $line) {
			$logline = explode("::", $line);
			if (trim($logline[0]) == trim($_SERVER['REMOTE_ADDR']) && ($logline[1] > $then) && trim($logline[3]) == "false") {
				$hackcounter++;
			} elseif (trim($logline[0]) == trim($_SERVER['REMOTE_ADDR']) && ($logline[1] > $then) && trim($logline[3]) == "true") {
				$hackcounter = 0;
			}
		}
		fclose($fp);

		if ($hackcounter > 10) {
			print $GLOBALS['doctype'];
			print $GLOBALS['htmlopentag'];
			if (ValidateEmail($GLOBALS['LoginTryCountNotifyTo'])) {
				$fp = "Warning; safety block in effect for IP " . $_SERVER['REMOTE_ADDR'] . ", current user " . $name;				
				mail($GLOBALS['LoginTryCountNotifyTo'], 'Safety block in effect', $fp, "From: " . $GLOBALS['PRODUCT'] . " Notification Manager <info@interleave.nl>");
			}

			print '<head><meta charset="UTF-8">';
			print "<title>Safety restriction in effect</title>";

			PrintUnauthenticatedHeaderJavascript();
			
			print '</head><body><div><div id="page"><h1 id="title">' . $GLOBALS['PRODUCT'] . '</h1><h2>Safety restriction in effect</h2>';
			print '<p>You tried to log in many times but failed every time. For security reasons, this incident has been reported along with your computer\'s IP-address.</p>';
			print '<p>If you just forgot your password, you can <a href="forgotpasswd.php">request a new one</a>.</p>';
			print '<p>If you would like an account please contact this site\'s administrator (name/email not mentioned intentionally).</p>';
			print '<br><br>	<div class="centered">';
			if ($GLOBALS['Overrides']['Logo'] != "") {
				print "<img src='" . htme($GLOBALS['Overrides']['Logo']) . "' alt=''>";
			} else {
				print "<img src='images/crm.gif' alt=''>";
			}
			print '</div></div></div></body></html>';
						
			exit;
		}
	}

	if ($np) {
		$arg = "SELECT password, 1 AS auth, active, id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($name) . "'";
	} else {
		$arg = "SELECT password, 1 AS auth, active, id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($name) . "' AND password=PASSWORD('" . mres($password) . "')";
	}
	$result = mcq($arg,$db);
	$row = mysql_fetch_array($result);

	if ($row['auth']){

		if ($row['active']=="no") {
			log_msg("Disabled account","");
			
			unset($_REQUEST['tblogin']);
			if (!$silent) {
					$_REQUEST['session'] = base64_encode("This account is disabled");
					require("login.php");
					exit;
			}
			return(false);
		} else {
			if ($fp = @fopen($GLOBALS['PATH_TO_BASE'] . "logins.txt","a")) {
				$t = $_SERVER['REMOTE_ADDR'] . "::" . date('U') . "::" . $_REQUEST['username'] . "::true";
				fputs($fp, $t . "\n");
				fclose($fp);
			}

			GenerateSecret($name);
			$GLOBALS['USERID'] = $row['id'];
			$GLOBALS['USERNAME'] = $name;
			return(true);
		}
	} else {
		
		if (!$silent) {
			log_msg("invalid","");
			log_msg("WARNING: Invalid user/pass combination on login to repos " . $title . ": user " . $name . " -> access denied","");
		}



		qlog(WARNING, "WARNING: Invalid user/pass combination on login to repos " . $title . ": user " . $name . " -> access denied");

		unset($_REQUEST['tblogin']);
	
		if ($fp = @fopen($GLOBALS['PATH_TO_BASE'] . "logins.txt","a")) {
			$t = $_SERVER['REMOTE_ADDR'] . "::" . date('U') . "::" . $_REQUEST['username'] . "::false";
			fputs($fp, $t . "\n");
			fclose($fp);
		}

		if (!$silent) {
			$GLOBALS['LogonPageServiceMessage'] = "Invalid username or password. Please try again.";
			$_REQUEST['username'] = "";
			$_REQUEST['password'] = "";
			require("login.php");
			exit;
		}
		
		
		return(false); 
	}
}
function AuthenticateUserByEncryptedPassword ($name, $password, $silent){
	global $thiswasalogin, $logon, $title,$lang;

	$arg = "SELECT password, 1 AS auth, active, id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($name) . "' AND password='" . mres($password) . "'";
	$result = mcq($arg,$db);
	$row = mysql_fetch_array($result);

	if ($row[auth]){
		if ($row[active]=="no") {
			log_msg("Disabled account","");
			DisplayLoginForm("This account is disabled");
			qlog(INFO, "This account is disabled");
		}
		GenerateSecret($name);
		$GLOBALS[USERID] = $row[id];
		$GLOBALS[USERNAME] = $name;
	}
	else {
		log_msg("invalid","");
		if ($silent!=yes){

			DisplayLoginForm("Invalid username or password. Please try again.");
			qlog(INFO, "Invalid userid or password");
		}
		else{
			$thiswasalogin=0;
			$logon=yes;
			log_msg("login $username","login $username");
			qlog(INFO, "Login: $username");
			InitUser();
		}
	}

}
function ActiveUser ($session, $silent=false) {

	$ses = db_GetRow("SELECT name, temp, exptime, noexp FROM " . $GLOBALS['TBL_PREFIX'] . "sessions WHERE temp='" . mres($session) . "'");

	// Check times
	$currenttime = date('U');   // Current epoch
	$settime = $ses['exptime']; // Expiration epoch value from session

	// Global session timeout setting
	$diff = $GLOBALS['timeout'] * 60; // global setting is in minutes

	// Max time b4 expire
	$maxtime = $currenttime + $diff;

	if (($maxtime < $settime) || ($ses['temp'] != $session)){ // Session expired OR not available at all

		// Delete session
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "sessions WHERE temp='" . mres($session) . "'", $db);
		// Log expire
		log_msg("expire","");
		// Unset cookie
		if ($_SERVER['HTTPS'] == "on") {
			$_GLOBALS['SecureCookie'] = 1;
		} else {
			$_GLOBALS['SecureCookie'] = 0;
		}
		SetCookie("session","",date('U')-500, "", "", $_GLOBALS['SecureCookie'], "");
		return(false);

	} else {

		// Set global username and id
		$GLOBALS['USERID'] = GetUserID($ses['name']);
		$GLOBALS['USERNAME'] = $ses['name'];
		$GLOBALS['session'] = $session;
		$GLOBALS['session_id'] = $session;

		// Set new expiration time
		setnewtime ($ses['name'], $session);
		// Fetch user specific credentials
		InitUser();
		// Log last activity
		SetAttribute("user", "LastActivity", date('U'), $GLOBALS['USERID']);
		// Check IP source (when applicable)
		CheckIPSourceSecurity();
		// Return the username
		return $ses['name'];
	}
	return(false);
}
function printstepheader($step)
{
	?>

	    <center><table border='1' width='40%' cellspacing='0' cellpadding='4'>
		<tr><td colspan='2'><?php echo $step;?></td></tr>
		</table></center>
		<br>
	<?php
}
function PrintFooter() {
}

// repository switcher
function ReturnRepositorySwitcher($post_to,$post_to_parent="") {
	global $host,$pass,$database,$table_prefix,$user,$swrepos,$EnableRepositorySwitcher,$lang,$postto, $session;
	ob_start();
	ShowRepositorySwitcher($post_to,$post_to_parent="");
	$ret = ob_get_contents();
	ob_end_clean();
	return($ret);
}
function ShowRepositorySwitcher($post_to,$post_to_parent="") {
	global $host,$pass,$database,$table_prefix,$user,$swrepos,$EnableRepositorySwitcher,$lang,$postto, $session;
	include($GLOBALS['CONFIGFILE']);
	$GLOBALS['ONLY_LOCAL'] = true;

	qlog(INFO, "ShowRepositorySwitcher called");

	if (strtoupper($EnableRepositorySwitcher)!="YES") {
		if (strtoupper($EnableRepositorySwitcher)=="ADMIN" && is_administrator()==true) {
			// access allowed
		} else {
			$no_access= true;
		}
	}

	if ($no_access) {
		// nothing
	} else {

		if (sizeof($host)>1) {

			if ($_REQUEST['swrepos']) {

				$r = str_replace("a-","",$_REQUEST['switchreposto']);
				$sql = "SELECT password FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . $GLOBALS['USERNAME'] . "'";
				$result= mcq($sql,$db);
				$result1= mysql_fetch_array($result);
				$curpassword = $result1['password'];

				mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "sessions WHERE temp='" . mres($_COOKIE['session']) . "'");

				qlog(INFO, "Switching this user to repository $r");
				log_msg("Switching this user to repository $r","");
				DB_Connect($r, false);
				$GLOBALS['DBNAME'] = $database[$r];
				$GLOBALS['DBUSER'] = $user[$r];
				$GLOBALS['DBPASS'] = $pass[$r];
				$GLOBALS['DBHOST'] = $host[$r];
				$GLOBALS['TBL_PREFIX'] = $table_prefix[$r];


				//$actuser = ActiveUser($_COOKIE['session']);


				$t = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "sessions WHERE name='" . mres($GLOBALS['username']) . "' AND temp='" . mres($_COOKIE['session']) . "'");

				qlog(INFO, "session " . $_COOKIE['session'] . " Exists: " . $t['temp']);
				if ($t['id']) {
					qlog(INFO, "This user already had a session in this repository");
					$username = ActiveUser($_COOKIE['session']);
				} else {
					qlog(INFO, "Creating new session for this user in this repository: " . $_COOKIE['session']);
				}

				$tit = db_GetRow("SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='title'");


				qlog(INFO, "DB Switched to $r (came from " . $GLOBALS['repository_nr'] . ") - reloading");
				log_msg("This user switched to this repository from repository " . $GLOBALS['repository_nr'],"");
				setCookie('repository',$r, 0, "", "", $_GLOBALS['SecureCookie'], "");
				$GLOBALS['REPOSID'] = $r;
				$GLOBALS['repository_nr'] = $r;
				AuthenticateUserByEncryptedPassword ($GLOBALS['USERNAME'], $curpassword, "1");

				if ($_REQUEST['req_url']) {
					qlog(INFO, "Req_URL received");
					$postto = "index.php";
				} elseif (trim($postto) == "") {
					$postto = "index.php";
				}
				$res = db_GetRow("SELECT value FROM " .  $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='USE_EXTENDED_CACHE'");
				$GLOBALS['USE_EXTENDED_CACHE'] = $res['value'];
				$res = db_GetRow("SELECT value FROM " .  $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='NOBARSWINDOW'");
				if ($res['value'] == "Yes") {
					$postto .= "?&&SFS=1";
				}

				if ($GLOBALS['USE_EXTENDED_CACHE'] == "Yes") {
					$uri = $postto;
					print $GLOBALS['doctype'];
					print $GLOBALS['htmlopentag'];


					print '<head><meta charset="UTF-8">';
					print "<title>" . htme($GLOBALS['PRODUCT']) . "</title>";

					PrintUnauthenticatedHeaderJavascript();
					
					print '<div id="page2"><br>';

					if ($GLOBALS['Overrides']['Logo'] != "") {
						print "<img src='" . htme($GLOBALS['Overrides']['Logo']) . "' alt=''>";
					} else {
						print "<img src='images/crm.gif' alt=''>";
					}

					print "<br><br><img src='images/movingbar.png' style='border: 1px;' alt=''><br><br>Interleave Business Process Management<br>Visit <a href='http://www.interleave.nl/'>www.interleave.nl</a> for more information.";
					print '<br>' . $tit[0];
					print '</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><object id="UpdatecacheTables" height="1" width="1" type="text/html" data="index.php?UpdateCacheTables=do&amp;urltogo=<?php echo $uri;?>"></object>';
					print '<script type="text/javascript"> setTimeout("doso()", 500);	function doso() {document.location = "' . $postto . '"}</script>';
		
					EndHTML();
					exit;
				}
				if (!$postto) {
					$postto = "index.php";
					qlog(INFO, "postto var defaulted");
				}
				if ($post_to_parent) {
					?>
					<script type="text/javascript">
						parent.location='<?php echo $postto;?>';
						window.close();
					</script>
					<?php
				} else {
					?>
					<script type="text/javascript">
						document.location='<?php echo $postto;?>';
					</script>
					<?php
				}
			} else {

				$count = 0;
				$sql = "SELECT password FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($GLOBALS['USERNAME']) . "'";
				$result= mcq($sql,$db);
				$result1= mysql_fetch_array($result);
				$curpassword = $result1['password'];

				$outp = "<img src='images/reposwhite.jpg' alt=''> <form id='switchrepos' method='get' action='index.php'><div class='showinline'><input type='hidden' name='swrepos' value='1'><input type='hidden' name='postto' value='" . $post_to . "'><input type='hidden' name='post_to_parent' value='" . $post_to_parent . "'><select name='switchreposto' onchange=\"document.forms['switchrepos'].submit();\">";
				include($GLOBALS['CONFIGFILE']);
				if (sizeof($pass)>0) {
						for ($r=0;$r<64;$r++) {
							if ($host[$r] && $database[$r] && $user[$r] && $pass[$r]) {
								if (DB_Connect($r, false)) {
										$tbl = $table_prefix[$r];
										if ($tbl=="") $tbl="CRM";
										$sql = "SELECT password FROM " . $tbl . "loginusers WHERE name='" . mres($GLOBALS['USERNAME']) . "'";
										$result = @mysql_query($sql);
										$result1= @mysql_fetch_array($result);
										$foreignpassword = $result1[password];
										if ($curpassword==$foreignpassword) {
											if ($GLOBALS['REPOSNR']==$r) {
												$ins = 'selected="selected"';
											} else {
												unset($ins);
											}
											$sql = "SELECT id FROM " . $tbl . "loginusers WHERE name='" . mres($GLOBALS['USERNAME']) . "'";
											$result= mcq($sql,$db);
											$id1= mysql_fetch_array($result);
											// DISABLED FOR PERFORMANCE
											//$sql = "SELECT COUNT(*) FROM " . $tbl . "entity WHERE deleted!='y' AND assignee='" . $id1[0] . "'";
											//$result = mcq($sql,$db);
											//$count = mysql_fetch_array($result);
											$sql = "SELECT value FROM " . $tbl . "settings WHERE setting='title'";
											$result = mcq($sql,$db);
											$result = mysql_fetch_array($result);
											$outp .= "<option " . $ins . " value='a-" . $r . "'>" . $result['value'] . "</option>";
											$county++;
										} else {
											//print "<option>denied</option>";
										}

								} else {
									 //print "<option>host not found</option>";
								}
							} else {
								// print "SKIP $r";
							}
							}

					$outp .= "</select></div></form>";

					if ($county>1) {
						print $outp;
					}
				} else {
					PrintAD("Configuration not loaded / found / available");
				}
			}
		}

	}
//	$db = DB_Connect($host[$GLOBALS['repository_nr']], $user[$GLOBALS['repository_nr']], $pass[$GLOBALS['repository_nr']]);
//	@mysql_select_db($database[$GLOBALS['repository_nr']],$db);
	SwitchToRepos($GLOBALS['repository_nr']);
	$GLOBALS['ONLY_LOCAL'] = false;
}
function EmailTriggerForOwnerSet($e_id) {
	$sql = "SELECT notify_owner FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($e_id) . "'";
	$result = mcq($sql,$db);
	$result = mysql_fetch_array($result);
	if ($result[0] == "y") {
		return(true);
	} else {
		return(false);
	}
}
function EmailTriggerForAssigneeSet($e_id) {
	$sql = "SELECT notify_assignee FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($e_id) . "'";
	$result = mcq($sql,$db);
	$result = mysql_fetch_array($result);
	if ($result[0] == "y") {
		return(true);
	} else {
		return(false);
	}
}
function EmailTriggerForCustomerOwnerSet($c_id) {
	$sqlt = "SELECT customer_owner,email_owner_upon_adds FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($c_id) . "'";
	$resultt= mcq($sqlt,$db);
	$row= mysql_fetch_array($resultt);
	if ($row['email_owner_upon_adds']=="yes") {
		return(true);
	} else {
		return(false);
	}
}
function ExportUsers() {
	MustBeAdmin();

	qlog(INFO, "Exporting users");
	$sql = "SELECT name,password,type,active,exptime,noexp,FULLNAME,EMAIL,CLLEVEL,administrator,LASTFILTER,RECEIVEDAILYMAIL,RECEIVEALLOWNERUPDATES,RECEIVEALLASSIGNEEUPDATES,HIDEADDTAB,HIDECSVTAB,HIDESUMMARYTAB,HIDEENTITYTAB,HIDEPBTAB,SHOWDELETEDVIEWOPTION,HIDECUSTOMERTAB FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user_%' ";
	$result = mcq($sql,$db);
	while ($row = mysql_fetch_array($result)) {
		$outp .= base64_encode($row['name']) . "," . base64_encode($row['password']) . "," . base64_encode($row['type']) . "," . base64_encode($row['FULLNAME']) . "," . base64_encode($row['EMAIL']) . "," . base64_encode($row['CLLEVEL']) . "," . base64_encode($row['administrator']) . "," . base64_encode($row['LASTFILTER']) . "," . base64_encode($row['RECEIVEDAILYMAIL']) . "," . base64_encode($row['RECEIVEALLOWNERUPDATES']) . "," . base64_encode($row['RECEIVEALLASSIGNEEUPDATES']) . "," . base64_encode($row['HIDEADDTAB']) . "," . base64_encode($row['HIDECSVTAB']) . "," . base64_encode($row['HIDESUMMARYTAB']) . "," . base64_encode($row['HIDEENTITYTAB']) . "," . base64_encode($row['HIDEPBTAB']) . "," . base64_encode($row['SHOWDELETEDVIEWOPTION']) . "," . base64_encode($row['HIDECUSTOMERTAB']) . "\n";
	}

	$filename = "Exported_users_" . $GLOBALS['PRODUCT'] . "_" . urlencode($GLOBALS['title']) . "-" . date("Fj-Y-Hi") . ".crm";
	header("Content-Type: CSV");
	header("Content-Disposition: attachment; filename=$filename" );
	header("Content-Description: " . $GLOBALS['PRODUCT'] . " Generated Data" );
	header("Window-target: _top");
	print $outp;
}
function ImportCSVUsers() {
	MustBeAdmin();
	if ($_REQUEST['Sheet_Submit']) {
		$imp_arr = split("\n",$_REQUEST['Sheet_Submit']);
		print "<pre>";
		$impc = 0;
		foreach ($imp_arr AS $newuser) {
			$nua = split(";",$newuser);
			//print_r($nua);
//			name ; password ; administrator ; fullname ; email ; hideaddtab ; hidecsvtab ; hidesummarytab ; hideentitytab ; hidepbtab ; hidecustomertab
//			0      1          2               3          4       5            6            7                8               9           10
			if (sizeof($nua)==11) {
				$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "loginusers(name,password,administrator,FULLNAME,EMAIL,HIDEADDTAB,HIDECSVTAB,HIDESUMMARYTAB,HIDEENTITYTAB,HIDEPBTAB,HIDECUSTOMERTAB,CLLEVEL) VALUES ('" . mres($nua[0]) . "',PASSWORD('" . mres($nua[1]) . "'),'" . mres($nua[2]) . "','" . mres($nua[3]) . "','" . mres($nua[4]) . "','" . mres($nua[5]) . "','" . mres($nua[6]) . "','" . mres($nua[7]) . "','" . mres($nua[8]) . "','" . mres($nua[9]) . "','" . mres($nua[10]) . "','rw')";
				mcq($sql,$db);
				//print $sql;
				$impc ++;
			} else {
				print "Error - not the right field count\n";
			}
		}
		print "</pre>";
		print $impc . " accounts were imported.<br>";

	} else {
		?>
		<table><tr><td>&nbsp;&nbsp;&nbsp;</td><td>Import user-accounts using CSV values
		<br><br>Layout: <br><br><strong>name ; password ; administrator ; fullname ; email ; hideaddtab ; hidecsvtab ; hidesummarytab ; hideentitytab ; hidepbtab ; hidecustomertab</strong>
		<br>You must have all fields, allthough they may be empty.
		<br>
		<form id='ImpCSV' method='post' action=''><div class='showinline'>
		<textarea name='Sheet_Submit' rows='2' cols='90'>Paste your data here...</textarea>
		<br>
		<input type='submit' value='Import'>
		</div></form>
		<table>
		<tr><td>name</td><td>The user's account name (short)</td></tr>
		<tr><td>password</td><td>The password in plain readable text</td></tr>
		<tr><td>administrator</td><td>'yes' or 'no'</td></tr>
		<tr><td>fullname</td><td>The user's full name, like 'John Doe'</td></tr>
		<tr><td>email</td><td>The user's email address</td></tr>
		<tr><td>hideaddtab</td><td>y for a hidden add tab, else n</td></tr>
		<tr><td>hidecsvtab</td><td>y for a hidden CSV tab, else n</td></tr>
		<tr><td>hidesummarytab</td><td>y for a hidden summary tab, else n</td></tr>
		<tr><td>hideentitytab</td><td>y for a hidden entity list tab, else n</td></tr>
		<tr><td>hidecustomertab</td><td>y for a hidden customer tab, else n</td></tr>
		<tr><td colspan='2'><strong>All imported users will have a 'full-access' account.</strong></td></tr>
		<tr><td colspan='2'><strong>This function does NOT CHECK FOR DUPLICATE ACCOUNTS!</strong></td></tr>
		</table>
		<?php
		print "</td></tr></table>";
		}
}
function ImportUsers() {
	global $legend;
	MustBeAdmin();

	qlog(INFO, "Importing users");

	UserSectionTabs();

	$sarr = array();
	if ($_FILES['userfile']['tmp_name'] && $_FILES['userfile']['name']) {
		$fp=fopen($_FILES['userfile']['tmp_name'] ,"rb");
		$filecontent=fread($fp,filesize($_FILES['userfile']['tmp_name'] ));
		fclose($fp);
		$arr = split("\n",$filecontent);
		foreach ($arr AS $line) {
//			name,password,type,FULLNAME,EMAIL,CLLEVEL,administrator,LASTFILTER,LASTSORT,RECEIVEDAILYMAIL
			$element_count=0;
			$account = split(",",$line);

			$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "loginusers(name,password,type,FULLNAME,EMAIL,CLLEVEL,administrator,LASTFILTER,LASTSORT,RECEIVEDAILYMAIL,RECEIVEALLOWNERUPDATES,RECEIVEALLASSIGNEEUPDATES,HIDEADDTAB,HIDECSVTAB,HIDESUMMARYTAB,HIDEENTITYTAB,HIDEPBTAB,SHOWDELETEDVIEWOPTION,HIDECUSTOMERTAB,) VALUES (";
			foreach ($account AS $element) {
				$sql .= "'" . mres(base64_decode($element)) . "',";
				$element_count++;
			}
			$sql .= ")";
			$sql = str_replace(",)",")",$sql);
			if ($element_count==19) {
				// 1st element is the account name, and it may not already exist.
				if (GetUserNameByName(base64_decode($account[0]))!="n/a") {

					qlog(ERROR, "ERROR. Account " . base64_decode($account[0]) . " already exists (fullname " . GetUserNameByName(base64_decode($account[0])) . ")");
				} else {
					array_push($sarr,$sql);
				}
			} else {

				qlog(INFO, "Ignoring record with $element_count instead of 19 elements");
			}
		}


		if (sizeof($sarr)==0) {
				qlog(INFO, "No valid accounts to import found");
				$legend = "<img src='images/error.gif' alt=''>";
				print "No valid accounts to import found in this file.<br><br>";
		} else {
				qlog(INFO, "Importing " . sizeof($sarr) . " accounts");
				foreach ($sarr AS $query) {
					mcq($query,$db);
				}
				print sizeof($sarr) . " user-accounts imported.";
		}

	} else {
		print "Import users<br>";
		print "<p>Select file for upload: <form enctype='multipart/form-data' id='IU' method='post' action=''><div class='showinline'><input name='userfile' type='file'> <input type='submit' value='Upload'></div></form>";
		print "</p>";
	}

}
function ExportSettings() {
	MustBeAdmin();

	qlog(INFO, "Exporting settings");
	$sql = "SELECT setting,value,discription FROM " . $GLOBALS['TBL_PREFIX'] . "settings";
	$result = mcq($sql,$db);
	while ($row = mysql_fetch_array($result)) {
		$outp .= base64_encode($row['setting']) . "," . base64_encode($row['value']) . "," . base64_encode($row['discription']) . "\n";
	}

	$filename = "Exported_settings_" . $GLOBALS['PRODUCT'] . "_" . urlencode($GLOBALS['title']) . "-" . date("Fj-Y-Hi") . ".crm";
	header("Content-Type: CSV");
	header("Content-Disposition: attachment; filename=$filename" );
	header("Content-Description: " . $GLOBALS['PRODUCT'] . " Generated Data" );
	header("Window-target: _top");
	print $outp;
}
function ImportSettings() {
	global $legend;
	MustBeAdmin();

	qlog(INFO, "Importing users");
	$sarr = array();
	if ($_FILES['userfile']['tmp_name'] && $_FILES['userfile']['name']) {
		$fp=fopen($_FILES['userfile']['tmp_name'] ,"rb");
		$filecontent=fread($fp,filesize($_FILES['userfile']['tmp_name'] ));
		fclose($fp);
		$arr = split("\n",$filecontent);
		foreach ($arr AS $line) {
//			name,password,type,FULLNAME,EMAIL,CLLEVEL,administrator,LASTFILTER,LASTSORT,RECEIVEDAILYMAIL
			$element_count=0;
			$set_row = split(",",$line);

			$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "settings(setting,value,discription) VALUES (";
			foreach ($set_row AS $element) {
				$sql .= "'" . mres(base64_decode($element)) . "',";
				$element_count++;
			}
			$sql .= ")";
			$sql = str_replace(",)",")",$sql);
			if ($element_count==3) {
				// 1st element is the account name, and it may not already exist.
					array_push($sarr,$sql);

			} else {

				qlog(INFO, "Ignoring record with $element_count instead of 3 elements");
			}
		}

		if (sizeof($sarr)==0) {
				qlog(INFO, "No valid accounts to import found");
				$legend = "<img src='images/error.gif' alt=''>";
				print "No valid setting records to import found in this file.<br><br>";
		} else {
				qlog(INFO, "Importing " . sizeof($sarr) . " setting records");
				mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "settings",$db);
				foreach ($sarr AS $query) {
					mcq($query,$db);
				}
				print sizeof($sarr) . " setting records imported.";
				log_msg(sizeof($sarr) . " setting records imported.");
		}

	} else {
		print "<fieldset><legend>&nbsp;<img src='images/crmlogosmall.gif' alt=''>&nbsp;&nbsp;Import global settings (ALL CURRENT GLOBAL SETTNGS WILL BE REMOVED!)&nbsp;</legend>";
		print "Select file for upload:";
		print "<form enctype='multipart/form-data' id='IU' method='post' action=''><div class='showinline'><input name='userfile' type='file'>";
		print " <input type='submit' value='Upload'>";
		print "</div></form>";
		print "</fieldset>";
	}

}
function ExportExtraFields() {
	MustBeAdmin();

	qlog(INFO, "Exporting settings");
	$sql = "SELECT ordering,tabletype,hidden,fieldtype,name,options,location,deleted,forcing FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields";
	$result = mcq($sql,$db);
	while ($row = mysql_fetch_array($result)) {
		$outp .= base64_encode($row['ordering']) . "," . base64_encode($row['tabletype']) . "," . base64_encode($row['hidden']) . "," . base64_encode($row['fieldtype']) . "," . base64_encode($row['name']) . "," . base64_encode($row['options']) . "," . base64_encode($row['location']) . "," . base64_encode($row['deleted']) . "," . base64_encode($row['forcing']) . "\n";
	}

	$filename = "Exported_extra-field-definitions_" . $GLOBALS['PRODUCT'] . "_" . urlencode($GLOBALS['title']) . "-" . date("Fj-Y-Hi") . ".crm";
	header("Content-Type: CSV");
	header("Content-Disposition: attachment; filename=$filename" );
	header("Content-Description: " . $GLOBALS['PRODUCT'] . " Generated Data" );
	header("Window-target: _top");
	print $outp;
}
function ImportExtraFields() {
	MustBeAdmin();
	$sarr = array();

	if ($_POST['ef_import'] != "") {
		$sheet = explode("\n", $_POST['ef_import']);
		$ln = 0;
		$success = 0;

		$html = "";
		foreach ($sheet AS $line) {

			$ln++;
			
			$line = explode("\t" , $line);
			// FieldName	Listname	FieldType	OptionsCSV	Required-ny	Size	DefaultVal	ExcludeFromFilters-yn	Remarks	FieldnamePrefix

			if ($line[1] == "") {
				$line[1] = trim($line[0]);
			}

			if ($line[9] != "") { // Fieldnameprefix
				$line[0] = trim($line[9]) . trim($line[0]); 
			}
			if (count($line) == 10) {
				$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "extrafields(tabletype,name, displaylistname, fieldtype, options, forcing, size, defaultval, excludefromfilters, remarks) VALUES(";

				$sql .= "'" . mres($_POST['tt']) . "'";
				$cnt=0;
				foreach ($line AS $el) {
					if ($cnt == 3) $el = serialize(explode(",", $el)); // options
					if ($cnt < 9) $sql .= ",'" . mres(trim($el)) . "'";
					$cnt++;
				}

				$sql .= ")";

				mcq($sql, $db);
				$num = mysql_insert_id();
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "extrafields SET ordering='" . mres($num*10*1.234) . "' WHERE id=" . $num;
				mcq($sql, $db);
				$success++;
				$html .= "<tr><td>" . $line[0] . "</td><td>@EFID" . $num . "@</td></tr>\n";

				
			} else {
				print "Skipped line " . $ln . " because of wrong element count.<br>";
			}

		}
		if ($success > 0) { 
				print $success . " new extra field definitions added. Run the <a href=\"admin.php?checkdb=1&amp;web=1&amp;SkipMainNavigation&amp;CheckColumnsOnly\">database check utility</a> immediately to create the missing columns.<br>";
				print "<p>Some handy HTML....</p>";
				print "<textarea>" . htme($html) . "</textarea>";
				print "<textarea>" . htme(str_replace("@", "#", $html)) . "</textarea>";

				
		}

	} else {
		print "<h1>Import extra field definitions</h1><h2>Current definitions will stay</h2>";
		print "<form id='import_EF' method='post' action=''>";
		print "<p>Table: <select name=\"tt\" id=\"J_tt\"><option value=\"entity\">Entity</option><option value=\"customer\">Customer</option>";
		foreach (GetFlextableDefinitions() AS $ft) {
			print "<option value=\"" . $ft['recordid'] . "\">" . htme($ft['tablename']) . "</option>";
		}
		print "</select><br>";
		print "<textarea name=\"ef_import\" id=\"JS_ef_import\" cols=\"100\" rows=\"4\">FieldName	Listname	FieldType	OptionsCSV	Required-ny	Size	DefaultVal	ExcludeFromFilters-yn	Remarks	FieldnamePrefix\n</textarea>";
		print "<input type=\"submit\" value=\"Import!\"><br>";
		print "<p>This function assumes you know what you're doing. Your data is not validated before it is imported. Be careful!</p>";
		print "</p></form>";
		
	}

}

function GetEntityFormID($eid) {
	$row = db_GetRow("SELECT formid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
	return($row['formid']);
}
function GetAvgEntityAge($cid,$deleted=false) {
	if ($deleted=="not_del" && is_numeric($cid)) {
		$sql = "SELECT eid, openepoch FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE CRMcustomer='" . mres($cid) . "' AND deleted!='y'";
	} elseif ($deleted=="with_closedate" && is_numeric($cid)) {
		$sql = "SELECT eid, openepoch, closeepoch FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE CRMcustomer='" . mres($cid) . "' AND closedate!=''";
	} elseif ($deleted=="del" && is_numeric($cid)) {
		$sql = "SELECT eid, openepoch, closeepoch FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE CRMcustomer='" . mres($cid) . "' AND deleted='y'";
	} elseif (is_numeric($cid)){
		$sql = "SELECT eid, openepoch, closeepoch FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE CRMcustomer='" . mres($cid) . "'";
	} else {
		$sql = "SELECT eid, openepoch, closeepoch FROM " . $GLOBALS['TBL_PREFIX'] . "entity";
	}
	$num = 0;
	$now = date('U');
	$result= mcq($sql,$db);
	while ($row= mysql_fetch_array($result)) {
		if ($row['closeepoch']) {
			$ag = $row['closeepoch'] - $row['openepoch'];
		} else {
			$ag = $now - $row['openepoch'];
		}
		$ages += $ag;
		$num++;
	}
	@$age_in_seconds = $ages/$num;
	if ($age_in_seconds>86400) {
		$age = round($age_in_seconds/86400,0) . " days";
	} elseif ($age_in_seconds>3600) {
		$age = round($age_in_seconds/3600,0) . " hours";
	} elseif ($age_in_seconds>60) {
		$age = round($age_in_seconds/60,0) . " minutes";
	} elseif ($age_in_seconds!=$nowepoch) {
		$age = round($age_in_seconds,0) . " seconds";
	}
	$GLOBALS['avg_age'] = ceil($age_in_seconds);

	return($age);
}
function GetEntityCustomer($eid) {
	$tmp = db_GetRow("SELECT CRMcustomer FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
	return($tmp['CRMcustomer']);
}
function SetEntityCustomer($eid, $cid) {
	$curcust = GetEntityCustomer($eid);
	$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET CRMcustomer='" . mres($cid) . "' WHERE eid='" . mres($eid) . "'";
	mcq($sql,$db);
	ProcessTriggers("customer",$eid,$cid);
	journal($eid, "Customer set to " . $cid . " (SetEntityCustomer)");
	DataJournal($eid, $curcust, $cid, "CRMcustomer");
	return(true);
}

function GetEntityCategory($eid) {
	$sql = "SELECT category FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'";
	$result = mcq($sql,$db);
	$row = mysql_fetch_array($result);
	return($row['category']);
}
function GetUserBoss($userid) {

	$sql = "SELECT BOSS FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($userid) . "'";
	$result = mcq($sql,$db);
	$row = mysql_fetch_array($result);
	$boss = $row['BOSS'];

	if ($GLOBALS['USEINDIVIDUALBOSS'] != "Yes" || !is_numeric($boss)) {
		$sql = "SELECT BOSS FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($userid) . "'";
		$result = mcq($sql,$db);
		$row = mysql_fetch_array($result);
		if (is_numeric($row['BOSS'])) {
				$boss = $row['BOSS'];
		}
	}

	if (!is_numeric($boss)) {
		qlog(INFO, "Returning own ID because this user has no boss");
		return($GLOBALS['USERID']);
	} else {
		qlog(INFO, "The boss of this user is no. " . $boss);
		return($boss);
	}
}

function GetEntityDuedate($eid) {
	$sql = "SELECT duedate FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'";
	$result = mcq($sql,$db);
	$row = mysql_fetch_array($result);
	return($row['duedate']);
}

function ReturnEntityVincinityAjaxBox($eid) {
	$t = AjaxBox("PrintEntityVincinity", true, "&eid=" . $eid, false);
	return($t);
}
function PrintEntityVincinity($eid) {
	$x = $_POST['eid'];
	$eid = $_POST['eid'];
	//print "USED EID IS " . $x;
	$par = array();
	array_push($par, $x);
	while (GetEntityParent($x) != 0) {
		$x = GetEntityParent($x);
		array_push($par, $x);
	}
	for ($i = sizeof($par); $i>=0 ; $i--) {
		if ($par[$i] == $e) {
			$ib1 = "<span class='underln'>";
			$ib2 = "</span>";
		} else {
			unset($ib1);
			unset($ib2);
		}
		$nbsp .= "&nbsp;";
		if ($par[$i]) {
			if ($par[$i] != $_REQUEST['e']) {
				$link_ins = "<a onclick=\"document.forms['SuperForm'].elements['nolink'].value=1\" href='javascript:PopEditEntityWindow(" . $par[$i] . ");'><img src='images/entity_popup3.gif'  alt=''></a>";
				$link2_ins = " <a href='edit.php?e=" . $par[$i] . "'>";
				$link3_ins = " </a>";
			} else {
				unset($link_ins);
				unset($link2_ins);
				unset($link3_ins);
			}

			$parentbox .=  "<br>" . $nbsp . $par[$i] . " " . $link_ins . "&nbsp;" . $link2_ins . $ib1 . GetEntityCategory($par[$i]) . $ib2 . $link3_ins . "</a>";
		}
	}
	$tmp = $nbsp;
	$nbsp .= "&nbsp;&nbsp;&nbsp;&nbsp;";
	$parentbox .= PrintChilds($eid, $nbsp, true);
	$nbsp = $tmp;
	$parentbox .= PrintSisters($eid, $nbsp, true);
	print $parentbox;
}
function GetEntityParent($eid) {
	$sql = "SELECT parent FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'";
	$result = mcq($sql,$db);
	$row = mysql_fetch_array($result);
	if (CheckEntityAccess($row['parent'])=="ok" || CheckEntityAccess($row['parent'])=="readonly") {
		return($row['parent']);
	} else {
		return("denied");
	}
}
function PrintChilds($e, $nbsp, $ret=false, $int=false, $rv=false) {
	global $childcounter;
	if ($e=="_new_") {
		return(false);
	}
	$childs = GetEntityChilds($e);
	foreach ($childs AS $child) {
		qlog(INFO, "Processing $child");
		if (CheckEntityAccess($child)=="ok" || CheckEntityAccess($child)=="readonly") {
			$childcounter++;
			if ($ret) {
				$rv .= "<br>" . $nbsp . $child . "&nbsp;&nbsp;<a onclick=\"document.forms['SuperForm'].elements['nolink'].value=1\" href='javascript:PopEditEntityWindow(" . $child . ");'><img src='images/entity_popup3.gif'  alt=''></a> &nbsp;<a href='edit.php?e=" . $child . "'>" . GetEntityCategory($child) . "</a>";
				$rv = PrintChilds($child, $nbsp. "&nbsp;&nbsp;&nbsp;&nbsp;", $ret, true, $rv);
			} else {
				print "<br>" . $nbsp . $child . "&nbsp;&nbsp;<a onclick=\"document.forms['SuperForm'].elements['nolink'].value=1\" href='javascript:PopEditEntityWindow(" . $child . ");'><img src='images/entity_popup3.gif'  alt=''></a> &nbsp;<a href='edit.php?e=" . $child . "'>" . GetEntityCategory($child) . "</a>";
				PrintChilds($child, $nbsp. "&nbsp;&nbsp;&nbsp;&nbsp;", false, true);
			}
		}
	}
	if ($ret) {
		return($rv);
	}
}
function GetEntityFamily($eid) {
	// Returns *all* childs and grandchilds of an entity
	if (is_numeric($eid)) {
		$ret=array();
		$GLOBALS['ret_int'][0] = "bla";
		$sql = "SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE parent='" . mres($eid) . "'";
		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			if (!in_array($row['eid'], $GLOBALS['ret_int'])) {
				//if (CheckEntityAccess($row['eid'])=="ok" || CheckEntityAccess($row['eid'])=="read-only") {

					array_push($ret, $row['eid']);
					array_push($GLOBALS['ret_int'], $row['eid']);
					qlog(INFO, "Push " . $row['eid']);
				//}
				$ret = array_merge(GetEntityFamily($row['eid']), $ret);
			}
		}
		return($ret);
	} else {
		return(false);
	}
}
function PrintSisters($e, $nbsp, $ret=false) {
	if ((GetEntityParent($e) != 0) || ($e=="root")) {
		if ($e == "root") {
			$c = 0;
		} else {
			$c = GetEntityParent($e);
		}
		$childs = GetEntityChilds($c);
		foreach ($childs AS $child) {
			if ($e != $child) {
				if (CheckEntityAccess($child)=="ok" || CheckEntityAccess($child)=="readonly") {
					if ($ret) {
						$GLOBALS['returnval2'] .= "<br>" . $nbsp . $child . "&nbsp;&nbsp;<a onclick=\"document.forms['SuperForm'].elements['nolink'].value=1\" href='javascript:PopEditEntityWindow(" . $child . ");'><img src='images/entity_popup3.gif'  alt=''></a> &nbsp;<a href='edit.php?e=" . $child . "'>" . GetEntityCategory($child) . "</a>";
						$GLOBALS['returnval2'] .= PrintChilds($child, $nbsp. "&nbsp;&nbsp;&nbsp;&nbsp;", true, false);
					} else {
						print "<br>" . $nbsp . $child . "&nbsp;&nbsp;<a onclick=\"document.forms['SuperForm'].elements['nolink'].value=1\" href='javascript:PopEditEntityWindow(" . $child . ");'><img src='images/entity_popup3.gif'  alt=''></a> &nbsp;<a href='edit.php?e=" . $child . "'>" . GetEntityCategory($child) . "</a>";
						PrintChilds($child, $nbsp. "&nbsp;&nbsp;&nbsp;&nbsp;", false, false);
					}
				}
			}
			//$nbsp .= "&nbsp;&nbsp;&nbsp;&nbsp;";
		}
	} else {
		//print "ooops";
	}
	if ($ret) {
		return($GLOBALS['returnval2']);
	}
}
// This function checks if an entity can (may) be set as child to $parent
function ValidateParentalRights($parent, $eid) {

	qlog(INFO, "Validating if $eid can be child of $parent...");

	if ($parent == $eid) {
		log_msg("ERROR: Someone tried to make an entity its own parent, which is illegal!");
		qlog(ERROR, "ERROR: Someone tried to make an entity its own parent, which is illegal!");
		return(false);
	}

	$Earr = GetEntityArray($parent);
	if (is_numeric($Earr['eid']) && ($Earr['parent'] != $eid)) {
		$arr = GetEntityFamily($eid);
		if (!in_array($parent,$arr)) {
			qlog(INFO, "Approved: " . $Earr['eid']);
			return(true);
		} else {
			qlog(INFO, "Declined");
			return(false);
		}
	} else {
		qlog(INFO, "Declined");
		return(false);
	}
}
function GetEntityChilds($eid) {
	$ret=array();
	$sql = "SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE parent='" . mres($eid) . "' AND deleted!='y' ORDER BY category";
	$result = mcq($sql,$db);
	while ($row = mysql_fetch_array($result)) {
		if (CheckEntityAccess($row['eid'])=="ok" || CheckEntityAccess($row['eid'])=="readonly") {
			array_push($ret, $row['eid']);
		}
	}
	return($ret);
}
function GetEntityArray($eid) {
	return(mysql_fetch_array(mcq("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'", $db)));
}
function GetEntityAge($ent_id, $pure=false) {
	// Caching routine
	// Inlogtijd zonder cache:
	$nowepoch = date('U');
	$sql = "SELECT openepoch,closeepoch FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($ent_id) . "'";
	$result = mcq($sql,$db);
	$row = mysql_fetch_array($result);
	if ($row['closeepoch']==0) {
    	    $nowepoch = date('U');
            $txt = "Age";
	} else {
            $nowepoch = $row['closeepoch'];
            $txt = "Duration";
	}

	if ($row['openepoch']==0) {
		$age = "";
	} else {
		$age_in_seconds = $nowepoch - $row['openepoch'];
		if ($age_in_seconds>86400) {
			$age = "$txt: " . round($age_in_seconds/86400,2) . " days";
		} elseif ($age_in_seconds>3600) {
			$age = "$txt: " . round($age_in_seconds/3600,2) . " hours";
		} elseif ($age_in_seconds>60) {
			$age = "$txt: " . round($age_in_seconds/60,2) . " minutes";
		} elseif ($age_in_seconds!=$nowepoch) {
			$age = "$txt: " . round($age_in_seconds,0) . " seconds";
		}
	}
	if ($pure) {
		return(round($age_in_seconds,0));
	} else {
		return($age);
	}
}
function readln()
{
    # 4092 max on win32 fopen

    //$fp=fopen("php://stdin", "r");
    //$in=fgets($fp,4094);
    //fclose($fp);

	$in = fgets(STDIN);

    # strip newline
    (PHP_OS == "WINNT") ? ($read = str_replace("\r\n", "", $in)) : ($read = str_replace("\n", "", $in));

    return $read;
}
function AuthenticateUser2 ($name, $password, $silent) {
	global $noneedtobeadmin;
	if ($noneedtobeadmin) {
		$arg = "SELECT password, 1 AS auth, active, id, active FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($name) . "' AND password=PASSWORD('" . mres($password) . "')";
	} else {
		$arg = "SELECT password, 1 AS auth, active, id, active FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($name) . "' AND password=PASSWORD('" . mres($password) . "') AND administrator='yes'";
	}
	$result = mcq($arg,$db);
	$row = mysql_fetch_array($result);

	if ($row['auth']){
		if ($row['active']=="no") {
			qlog(INFO, "This account is not active");
			return false;
		} else {
			$GLOBALS['USERID'] = $row['id'];
			return true;
		}
	} else {
		qlog(INFO, "Authentication failed");
		return false;
		if ($silent!=yes){
			return false;
		} else {
			qlog(INFO, "Unknown exception");
			// Disabled this, seems dangerous!
			return(false);
			// $thiswasalogin=0;
			// $logon=yes;
			// $GLOBALS['USERID'] = $row[id];
			// return true;
		}
	}
}
function CommandlineLogin($username,$password,$repository) {
	global $repos,$pass,$host,$user,$database,$table_prefix,$silent,$noneedtobeadmin,$slave;
	$GLOBALS['ORIGINAL_REPOSITORY'] = "$repository";
	$repos = array();
	$count = 0;
	for ($r=0;$r<65;$r++) {
		if ($host[$r]) {
			if ($db = DB_Connect($r, false)) {
						// All ok
					} else {
						if ($slave[$r]) {
							$host[$r] = $slave[$r];
						} else {
							$host[$r] = $host[$r];
						}
			}

		}
	}
	if (!$password && !$username) {
		print "-------------------------------------------------------\n";
		print " Num   | Repository                                   |\n";
		print "-------------------------------------------------------\n";
	}
		if (sizeof($pass)>0) {
						for ($r=0;$r<65;$r++) {
							if ($host[$r]) {

								if (DB_Connect($r, false)) {
										$PRFX = $table_prefix[$r];
										// If no TBL_PREFIX is found, it ought to be "CRM"
										if ($PRFX=="") $PRFX="CRM";
										$sql = "SELECT value FROM " . $PRFX . "settings WHERE setting='title'";
										$result = @mysql_query($sql);
										$maxU1 = @mysql_fetch_array($result);
										$title = $maxU1[0];
										if (!$title=="") {
											if (!$password && !$username) {
												print "  " . fillout($r,4) . " | " . fillout($title,45) . "|\n";
											}
											$titles[$r] = $title;
											$repos[$r] = $title;
											$count++;
											SwitchToRepos($repository);
											if ($GLOBALS['VERSION'] <> $GLOBALS['DBVERSION'] && (!stristr($_SERVER['PHP_SELF'],"upgrade.php"))) {
												IntermediateDatabaseUpgrade();
											}

										}


								} elseif (DB_Connect($r, true)) {
										$PRFX = $table_prefix[$r];
										// If no TBL_PREFIX is found, it ought to be "CRM"
										if ($PRFX=="") $PRFX="CRM";
										$sql = "SELECT value FROM " . $PRFX . "settings WHERE setting='title'";
										$result = @mysql_query($sql);
										$maxU1 = @mysql_fetch_array($result);
										$title = $maxU1[0];
										if (!$title=="") {
											if (!$password && !$username) {
												print "  " . fillout($r,4) . " | " . fillout($title,45) . "|\n";
											}
											$titles[$r] = $title;
											$repos[$r] = $title;
											$count++;
										}

									}
							}


							}
			if (!$password && !$username) {
				print "-------------------------------------------------------\n";
				print "\nPlease select your repository to work with (0-" . (sizeof($pass)-1) . ")\n\n";
				print $GLOBALS['PRODUCT'] . " > ";
				$repository = readln();
				$repository = $repository * 1; // make it an integer
				$GLOBALS['TBL_PREFIX'] = $table_prefix[$repository];
			}
		} else {
			$PRFX = $table_prefix[0];
			$GLOBALS['TBL_PREFIX'] = $table_prefix[0];
			$repository = 0;
		}

	if (DB_Connect($repository, false)) {
		// all ok
		$GLOBALS['REPOSNR'] = $repository;
	} elseif (DB_Connect($repository, true)) {
		// all ok
		$GLOBALS['REPOSNR'] = $repository;
		$GLOBALS['CMDLINE'] = true;
	} else {
		print "Connection error. Fatal. Repos:$repository\n\n";
		exit;
	}
	$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='title'";
	$result =@mysql_query($sql);
	$maxU1 = @mysql_fetch_array($result);
	$title = $maxU1[0];
	//require_once($GLOBALS['PATHTOINTERLEAVE'] . "getset.php");
	if (!$username) {
		print "Please log in to " . htme($title) . ":\n\n";
		print("Username : ");
		$username = readln();
	}
	if (!$password) {
		if ($fpt=@fopen("/etc/passwd","r")) { // this is probably UNIX
			$is_unix = true;
			@fclose($fpt);
		}
		if ($is_unix) {
			$password = ReadText("Password : ",true);
		} else {
			print("Password (will be displayed in plain text): ");
			$password = readln();
		}
	}
	if ($password=="") {
			print "Received password was empty. Please enter it again.\n";
			print("Password (will be displayed in plain text): ");
			$password = readln();
	}
	$GLOBALS['TBL_PREFIX'] = $table_prefix[$repository];
	if (@AuthenticateUser2($username,$password,"n") == true) {
		if (!$silent) {
			print "You are connected to repository \"" . $title	 . "\"\n\n";
			SwitchToRepos($repository);
			$GLOBALS['CMDLINE'] = true;
			// Catch version having the wrong database version
		}
		$ret = true;
	} else {
		print "Authentication failed (user, password or not being admin error)\nBye!\n";
		$ret = false;
	}

	return($ret);
}
function ReadText($Prompt,$Silent=False){ // only for linux
   $Options="-er";
   If($Silent==True){
     $Options=$Options." -s";
   }
   $Returned=POpen("read $Options -p \"$Prompt\"; echo \$REPLY","r");
   $TextEntered=FGets($Returned,100);
   PClose($Returned);
   $TextEntered=SubStr($TextEntered,0,StrLen($TextEntered)-1);
   If($Silent==True){
     Print "\n";
     @OB_Flush();
     Flush();
   }
   Return $TextEntered;
  }
function CheckPageAccess($page) {


	if (!is_administrator()) {
		if ($page=="pb" && strtoupper($GLOBALS['UC']['HIDEPBTAB'])=="YES") {
				$denied = 1;
		}
		if ($page=="add" && strtoupper($GLOBALS['UC']['HIDEADDTAB'])=="YES") {
				$denied = 1;
		}
		if ($page=="csv" && strtoupper($GLOBALS['UC']['HIDECSVTAB'])=="YES") {
				$denied = 1;
		}
		if ($page=="entity" && strtoupper($GLOBALS['UC']['HIDEENTITYTAB'])=="YES") {
				$denied = 1;
		}
		if ($page=="summary" && strtoupper($GLOBALS['UC']['HIDESUMMARYTAB'])=="YES") {
				$denied = 1;
		}
		if ($page=="customer" && strtoupper($GLOBALS['UC']['HIDECUSTOMERTAB'])=="YES") {
				$denied = 1;
		}

		if ($denied) {

			qlog(INFO, "Access to page '" . $page . "' was denied.");

			PrintAD("Access to this page is denied by policy; group or personal ($page)");
			EndHTML();
			exit;
		} else {

			qlog(INFO, "Access to page '" . $page . "' was granted");
		}
	} else {

		qlog(INFO, "Access to page '" . $page . "' was granted (user is admin)");
	}

}
function CheckIfShell() {
	// This should NOT be run via the web!
	if ($_SERVER['REQUEST_URI']) {
			?>
			<script type="text/javascript">
				alert('You tried to access a shell (command-line) script through the web. Redirecting.');
				document.location='index.php';
			</script>
			<?php
			EndHTML();
			exit;
	}
}
function Author() {
	require_once($GLOBALS['PATHTOINTERLEAVE'] . "ath.php");
	exit;
}
function CleanExtraFieldName($fieldname) {
	// This function strips reserverd prefixes of off extra field names
	// Outdated function, calls need to be removed
	return($fieldname);
}
function PushStashValue($value) {
		// This function puts a stash (cache) value into the database and returns the reference number
		qlog(INFO, "Start pushing stash value " . $id);
		if (is_array($value)) {
			$value = serialize($value);
		}

		if (strlen($value)>0) {
			$epoch = date('U');
			$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "cache(value,epoch,session) VALUES('" . mres($value) . "','" . mres($epoch) . "', '" . mres($GLOBALS['session_id']) . "')";
			$result = mcq($sql,$db);
			$id = mysql_insert_id();
			qlog(INFO, "Pushed stash value " . $id);
		} else {
			qlog(ERROR, "ERROR - cannot push empty variable!");
			$id = "";
		}

		return($id);
}
function PopStashValue($stashid) {
		// This function retreives a stash (cache) value from the database and returns the contents of the record
		$val = db_GetValue("SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "cache WHERE stashid='" . mres($stashid) ."' AND session='" . mres($GLOBALS['session_id']) . "'");
		
		qlog(INFO, "Popped stash value " . $stashid);
		$ar = unserialize($val);
		if (is_array($ar)) {
			$val = $ar;
		}	
		return($val);
}
function DropStashValue($stashid) {
		// This function deletes a stash (cache) value from the database
		$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "cache WHERE stashid='" . mres($stashid) ."' AND session='" . mres($GLOBALS['session_id']) . "'";
		mcq($sql,$db);
		qlog(INFO, "Dropped stash value " . $stashid);
		return(true);
}
function UpdateStashValue($stashid, $value) {
		// This function deletes a stash (cache) value from the database
		if (is_array($value)) {
			$value = serialize($value);
		}
		$epoch = date('U');
		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "cache SET value='" . mres($value) . "',epoch='" . $epoch . "' WHERE stashid='" . mres($stashid) ."' AND session='" . mres($GLOBALS['session_id']) . "'";
		mcq($sql,$db);
		qlog(INFO, "Updated stash value " . $stashid);
		return(true);
}

function ParseTemplateAll($template, $eid, $pdf, $encode = "htme") {
		// This is only for plain HTML and text, NOT FORMS!
		$template = ParseDefaultValueTags($template);
		$template = ParseTemplateEntity($template,$eid, false, false, $pdf, $encode);
		$template = ParseTemplateCustomer($template,GetEntityCustomer($eid), false, $encode);
		$template = ParseTemplateLanguageTags($template);
		$template = ParseTemplateGeneric($template);
		$template = ParseTemplateCleanUp($template, $pdf);
		return($template);
}
function ParseTemplateDashboard($template) {

		if (stristr($template, "#FIRSTBOOT#")) {
			ob_start();
			FirstBoot();
			$t = ob_get_contents();
			ob_end_clean();
			$template = str_replace("#FIRSTBOOT#",$t, $template);
		}

		$x = GetModules();
		foreach ($x AS $module) {
			if (stristr($template, "@MODULE" . $module['mid'] . "@")) {
				$template = str_replace("@MODULE" . $module['mid'] . "@", RunModule($module['mid'], false, true), $template);
				qlog(INFO, "Module " . $module['mid'] . " was ran and included in this template");
			}
		}
		foreach (GetFlextableDefinitions() AS $ft) {
			if (strstr($template, "@FLEXTABLE" . $ft['recordid'] . "@")) {
				$template = str_replace("@FLEXTABLE" . $ft['recordid'] ."@", AjaxBox("ShowFlexTableContents", false, "&ft=" . $ft['recordid'], false), $template);
			}
		}

		if (strstr($template, "#PHOTO#")) $template = str_replace("#PHOTO#","<img src='" . $GLOBALS['USERPHOTO'] . "' alt=''>", $template);
		if (strstr($template, "#TODAY#")) $template = str_replace("#TODAY#",ShowTodaysEntities($dum), $template);
		if (strstr($template, "#RECENT#")) $template = str_replace("#RECENT#",ShowRecentEntities(), $template);
		if (strstr($template, "#OWNED#")) $template = str_replace("#OWNED#",ShowOwnedEntitiesList(), $template);
		if (strstr($template, "#ASSIGNED#")) $template = str_replace("#ASSIGNED#",ShowAssignedEntitiesList(), $template);

		if (strstr($template, "#MESSAGES#")) $template = str_replace("#MESSAGES#",AjaxBox("ShowMessagesList", true, false, false, "MessagesList"), $template);
		if (strstr($template, "#CALENDAR#")) $template = str_replace("#CALENDAR#",AjaxBox("ShowCalendar", true, "", false, false), $template);
		if (strstr($template, "#PERSSTATS#")) $template = str_replace("#PERSSTATS#",AjaxBox("ShowPersonalStats"), $template);
		if (strstr($template, "#REPOS#")) $template = str_replace("#REPOS#",AjaxBox("ReturnRepositorySwitcher"), $template);
		if (strstr($template, "#NAV#")) $template = str_replace("#NAV#",InterNav(), $template);
		if (strstr($template, "#ENTITYSEARCH#")) $template = str_replace("#ENTITYSEARCH#",StandAloneEntitySearchbox(), $template);
		if (strstr($template, "#CUSTOMERSEARCH#")) $template = str_replace("#CUSTOMERSEARCH#",StandAloneCustomerSearchbox(), $template);
		if (strstr($template, "#DASHBOARDOPTIONS#")) $template = str_replace("#DASHBOARDOPTIONS#",AjaxBox("ShowDashboardOptions"), $template);
		if (strstr($template, "#CLOCK#")) $template = str_replace("#CLOCK#",ShowClock(), $template);

		$template = ParseTemplateGeneric($template);
		$template = ParseTemplateCleanup($template);
		return($template);
}

function GetCustomTabMenuDefintitions($menu_id = false) {
	if ($menu_id) {
		return(db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "tabmenudefinitions WHERE id='" . mres($menu_id) . "'"));
	} else {
		return(db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "tabmenudefinitions"));
	}
}

function ParseTemplateInclusions($template) {
 $lus = 0;
 //init
 $count = 1;
 while (($count > 0) && ($lus < 5)) {
  //to prevent endless recursion
  $lus++;
	 $template = preg_replace('/\@TEMPLATE([0-9]+)\@/e', "GetTemplate('\\1')", $template, $count);
 }
 return($template);
}
function ParseTemplateInclusions_old($template) {
	preg_match_all('/\@TEMPLATE[0-9]+\@/', $template, $matches);
	foreach ($matches AS $tmp) {
		 $tmp = str_replace("@TEMPLATE", "", $tmp);
		 $tmp = str_replace("@", "", $tmp);
			$template = str_replace("@TEMPLATE" . $tmp[0] . "@", (GetTemplate($tmp[0])), $template);

	}
	return($template);
}

function ParseTemplateAliases($template) {
	
	$source = $template;
	static $eflist;

	preg_match_all('/(#|@|\[|%)[^\s^@^#]+(#|@|\]|%)/', $template, $matches);
	$list_of_tags = $matches[0];
	if (count($list_of_tags) > 0) {
		if (!is_array($eflist)) {
			$eflist = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE deleted='n'");
		}	
		foreach ($eflist AS $field) {
			$alias = strtoupper(str_replace(" ", "_", strip_tags($field['name'])));
			if (in_array("@" . $alias . "@", $list_of_tags)) {
				$template = str_replace("@" . $alias . "@", "@EFID" . $field['id'] . "@", $template);
			}
			if (in_array("#" . $alias . "#", $list_of_tags)) {
				$template = str_replace("#" . $alias . "#", "#EFID" . $field['id'] . "#", $template);
			}
			if (in_array("[" . $alias . "]", $list_of_tags)) {
				$template = str_replace("[" . $alias . "]", "[EFID" . $field['id'] . "]", $template);
			}
			if (in_array("%" . $alias . "%", $list_of_tags)) {
				$template = str_replace("[" . $alias . "]", "[EFID" . $field['id'] . "]", $template);
			}

		}
	}
	qlog(INFO, "Template parsed, aliases renamed.");
	return($template);
}

function ParseTemplateHTMLColors($template, $entity) {

	preg_match_all('/(@)[^\s^@]+(@)/', $template, $matches);
	$list_of_tags = $matches[0];

	$list_of_fields_with_color = db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE deleted !='y' AND (optioncolors != '' OR fieldtype LIKE '[copyfield%')");

	foreach ($list_of_tags AS $field) {

			$efid = str_replace("EFID", "", str_replace("@", "", $field));

			if (in_array($efid, $list_of_fields_with_color)) {
				$color = GetExtraFieldColor($efid, GetExtraFieldValue($entity, $efid, false, true));
				if ($color) {
					$textClass= ReturnClassnameForTextColorBasedOnBackgroundColor($color);
					$template = str_replace("@EFID" . $efid . "@", "<span style='background-color: " . $color . ";'><span class='" . $textClass . " showinline'>@EFID" . $efid . "@</span></span>", $template);
				}
			} else {

			}

	}

	
	return($template);
}
function GetBackTrace() {
	ob_start();
	debug_print_backtrace();
	$ret = ob_get_contents();
	ob_end_clean();
	return("\n\n" . $ret);
}
function pdf($imp) {
	// LEAVE IN PLACE
	return($imp);
}
function plain($imp) {
	// LEAVE IN PLACE
	return($imp);
}
function ParseTemplateEntity($template,$entity, $raw, $ref, $pdf, $encode, $DontEvaluatePHP=false) {
//	return(ParseTemplateEntity_Old($template,$entity, $raw, $ref, $pdf, $encode ));
	return(ParseTemplateEntity_New($template,$entity, $raw, $ref, $pdf, $encode, $DontEvaluatePHP));
}
function ParseTemplateEntity_New($template, $entity, $raw=false, $ref=false, $pdf=false, $encode=false, $DontEvaluatePHP=false) {

	if ($entity == "_new_" || $entity == "") {
		return($template);
	}

	

	if (!$encode) {
		$encode = "htme";
	} elseif ($encode != "FixRTF" && $encode != "htme" && $encode != "plain") {
		$encode = "htme";
	}

	if (!$raw && $encode != "plain") {
		$template = ParseTemplateHTMLColors($template, $entity);
	}


	if ($raw == "dontformatnumbers" && strlen($raw) == 17) {
		unset($raw);
		$dfn = "dontformatnumbers";
	}

	$formid = GetEntityFormID($entity);
	if ($ref) {
		$cache = GetFormCache($entity, $formid, "entityrefer");
		if ($cache != "") {
			if (stristr($cache['content'], "<?")) { // PHP exists in template
				$cache['content'] = EvaluateTemplatePHP($cache['content'], $entity);
			}

			return($cache['content']);
		}
	}

	// Find all tags
	preg_match_all('/(\@|\%)[A-Za-z0-9_\,]+(\@|\%)/', $template, $matches);
	$list_of_tags = $matches[0];

//	$template .= "<pre>" . str_replace("@", "**", string_r($list_of_tags)) . "</pre>";
//	$template .= "<pre>" . str_replace("@", "**", $template) . "</pre>";

	// All tags in the template are now in $list_of_tags. Start walking through the tags.
	if (count($list_of_tags > 0)) {
		// Fetch the entire entity

		$row = db_GetRow("SELECT *, date_format(" . $GLOBALS['TBL_PREFIX'] . "entity.timestamp_last_change, '%a %M %e, %Y %H:%i') AS tslc FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($entity) . "'");
		
		foreach ($list_of_tags AS $tag) {
			switch ($tag) {
		
				
				case "@CUSTOMER@":
					$template = str_replace($tag, $encode(GetCustomerName($row['CRMcustomer'])), $template);
				break;
				
				case "@ENTITYID@":
					$template = str_replace($tag,$encode($row['eid']),$template);
				break;
				
				case "@EID@":
					$template = str_replace($tag,$encode($row['eid']),$template);
				break;
				
				case "@CATEGORY@":
					$template = str_replace($tag,$encode($row['category']),$template);
				break;
				
				case "@CATEGORY_AUTOCHANGE@":
					$template = str_replace($tag,$encode($row['category']),$template);
				break;
				
				case "@OWNER@":
					$template = str_replace($tag,$encode(GetUserName($row['owner'])),$template);
				break;
				
				case "@ASSIGNEE@":
					$template = str_replace($tag,$encode(GetUserName($row['assignee'])),$template);
				break;
				
				case "@DUEDATE@":
					$template = str_replace($tag,$encode(TransformDate($row['duedate'])),$template);
				break;
				
				case "@STARTDATE@":
					$template = str_replace($tag,$encode(TransformDate($row['startdate'])),$template);
				break;
				
				case "@CLOSEDATE@":
					$template = str_replace($tag,$encode(INTLDate2NLDate($row['closedate'])),$template);
				break;
				
				case "@STATUS@":
					$template = str_replace($tag,$encode($row['status']),$template);
				break;
				
				case "@PRIORITY@":
					$template = str_replace($tag,$encode($row['priority']),$template);
				break;
				
				case "@CONTENTS@":
					if ($encode == "htme") {
						$template = str_replace($tag,nl2br($encode($row['content'])),$template);
					} else {
						$template = str_replace($tag,$encode($row['content']),$template);
					}
				break;
				
				case "@CID@":
					$template = str_replace('$tag',$encode($row['CRMcustomer']),$template);
				break;
				
				
				case "@KEY@":
					$template = str_replace($tag,$encode(GenerateUniqueEntityIdentifier($row['eid'])),$template);
				break;
				
				case ($tag == "@CREATIONDATE@" || $tag == "CREATIONMOMENT"):
					if ($row['openepoch'] > 0) {
						$template = str_replace($tag, $encode(TransformDate(INTLDate2NLDate($row['cdate'])) . " " . date('H:i', $row['openepoch'])), $template);
					} else {
						$template = str_replace($tag, $encode(TransformDate(INTLDate2NLDate($row['cdate']))), $template);
					}
				break;
				
				case "@LASTUPDATE@":
					$template = str_replace($tag, $encode($row['tslc']), $template);
				break;
				
				case "@LASTUPDATEBY@":
					if (is_numeric($row['lasteditby']) && $row['lasteditby'] != 0) {
						$lasteditby = GetUserName($row['lasteditby']);
					}
					$template = str_replace($tag, $encode($lasteditby), $template);
				break;
				
				case "@AGE@":	
					$template = str_replace($tag, $encode(GetEntityAge($row['eid'])), $template);
				break;
				
				case "@NUM_ATTM@":
					$template = str_replace($tag,db_GetValue("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid='" . mres($entity) . "' AND type='entity' AND version_belonging_to=0"),$template);
				break;
				
				case ($tag == "@JOURNAL@" && $encode == "html") :
					$template = str_replace($tag, "<div id='inline_journal'>" . ShowJournal($entity) . "</div>", $template);
				break;
		
				case (substr($tag, 0, 5) == "%EFID") :
					$tmp = str_replace("EFID", "", str_replace("%", "", $tag));
					$tt = GetExtraFieldTableType($tmp);
					if ($tt == "entity") {
						$template = str_replace($tag, GetExtraFieldValue($entity, $tmp, false, true, $row['EFID' . $tmp]), $template);
					} elseif ($tt == "customer") {
						$template = str_replace($tag, GetExtraFieldValue(GetEntityCustomer($entity), $tmp, false, true, $row['EFID' . $tmp]), $template);
					} else {
						// Don't parse flextable values here
					}

				break;

				case (substr($tag, 0, 5) == "@EFID" || substr($tag, 0, 7) == "@BREFID" || substr($tag, 0, 7) == "%BREFID") :

					$connecting_field="";
					$reference_via = "";

					//$template .= "WORKING ON " . str_replace("@", "**", $tag) . "<br>";

					if (substr($tag, 0, 7) == "@BREFID" || substr($tag, 0, 7) == "%BREFID") {
						// Reference to flextable via a specific blnd reference connection
						// Syntax: @BREFIDxx,yy@) where xx=fieldnum and yy = reference field
						
						if (substr($tag, 0, 7) == "%BREFID") {
							$raw = true;
						} else {
							$raw = false;
						}

						$tmp = str_replace("BREFID", "", str_replace("@", "", $tag));
						$tmp = str_replace("%", "", $tmp);

						$tmp2 = explode(",", $tmp);
						$field				= $tmp2[0];
						$reference_via		= $tmp2[1];
						$curval = $row['EFID' . $reference_via];
						$connecting_field = $reference_via;

					} else {
						$field = str_replace("EFID", "", str_replace("@", "", $tag));
						$curval = $row[$tag];

					}

					$fieldprop = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($field) . "'");
					$type = GetExtraFieldTableType($field);

					if (!$raw && $encode != "plain") {
						$html = true;
					} else {
						$html = false;
					}

					if ($type == "entity") {
						if ($fieldprop['israwhtml'] == "y" || $fieldprop['fieldtype'] == "diary") {
							$template = str_replace($tag, GetExtraFieldValue($entity, $field, $html, $raw . $dfn, $curval),$template);
						} else {
							$template = str_replace($tag,$encode(GetExtraFieldValue($entity, $field, $html, $raw . $dfn, $curval)),$template);
						}
					} elseif ($type == "customer") {
						if ($fieldprop['israwhtml'] == "y" || $fieldprop['fieldtype'] == "diary") {
							$template = str_replace($tag,GetExtraFieldValue(GetEntityCustomer($entity), $field, $html, $raw . $dfn),$template);
						} else {
							$template = str_replace($tag,$encode(GetExtraFieldValue(GetEntityCustomer($entity), $field, $html, $raw . $dfn)),$template);
						}
					} elseif (is_numeric($type)) {
						if (!$connecting_field) $connecting_field = GetReferencesToTable($type, "entity");
						if ($connecting_field) {
							$record = GetExtraFieldValue($entity, $connecting_field, false, true);
							qlog(INFO, "Parsing this template using flextable " . $type . " record " . $record);
							if ($fieldprop['israwhtml'] == "y" || $fieldprop['fieldtype'] == "diary") {
								$template = str_replace($tag,GetExtraFieldValue($record, $field, $html, $raw . $dfn),$template);
							} else {
								$template = str_replace($tag,$encode(GetExtraFieldValue($record, $field, $html, $raw . $dfn)) ,$template);
							}
						}
					} 				break;
				case (substr($tag, 0, 7) == "@MODULE") :
				
					$module = str_replace("MODULE", "", str_replace("@", "", $tag));
					$template = str_replace("@MODULE" . $module . "@", RunModule($module, $entity, true), $template);
					qlog(INFO, "Module " . $module['mid'] . " was ran and included in this template");

				break;
				case (substr($tag, 0, 10) == "@FLEXTABLE") :
					$flextable['recordid'] = str_replace("FLEXTABLE", "", str_replace("@", "", $tag));

					if (CheckFlexTableAccess($flextable['recordid']) == "ok" || CheckFlexTableAccess($flextable['recordid']) == "readonly") {
						qlog(INFO, "FLEXTABLE : " . $flextable['recordid'] . " found in template");
				
						$name = GetFlexTableNames($flextable['recordid']);

						if ($raw) {
							$tmparr = ShowFlexTableContents($flextable['recordid'], $entity, false, true, false, $pdf);
							
							// 1st row is header row
							// each array elemement is a line, split by @@@@REALEXCEL@@@@ signs
							
							for ($i=1;$i<sizeof($tmparr);$i++) {
								$rep .= $encode(str_replace('@@@@REALEXCEL@@@@', ",", trim($tmparr[$i])) . "\n");
							}
						} elseif ($pdf) {

												
							
							$rep .= ShowFlexTableContents($flextable['recordid'], $entity, false, false, false, true);
							

						} else {

							$rep .= AjaxBox("ShowFlexTableContents", false, "&ft=" . $flextable['recordid'] . "&eid=" . $entity . "&pdf=" . $pdf, false);
						
						}

						$template = str_replace($tag, $rep, $template);
						qlog(INFO, "FLEXPARSE: FLEXTABLE" . $flextable['recordid'] . ": added ajaxbox");

					} else {
						$res = CheckFlexTableAccess($flextable['recordid']);
						$template = str_replace($tag, "<!-- access to table denied -->", $template);
						qlog(INFO, "Flextable is in template but this user is not allowed to see it!");

					}
				

				break;
			}
		}
	}
	
	// Parse tags which refer to underlying flextables (syntax @FTx|ROWx|EFIDx@

	foreach (GetFlextableDefinitions() AS $ft) {
		
		if ($ft['orientation'] == "one_entity_to_many" && $ft['refers_to'] == "entity") {
			if (strstr($template, "@FT" . $ft['recordid'] . "|")) {

				$ExtraSelectCondition = GetAttribute("flextable", "ExtraSelectCondition", $ft['recordid']);
				$sql_ins = "";
				if ($ExtraSelectCondition != "" && $ExtraSelectCondition != "None") {
					$sql_ins = " AND " . $ExtraSelectCondition;
				}

				$records = db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid'] . " WHERE deleted!='y' AND refer=" . $entity . " " . $sql_ins);

				for ($i=0;$i<count($records);$i++) {
					if (CheckFlextableRecordAccess($ft['recordid'], $records[$i]) != "nok") {
						foreach (GetExtraFlextableFields($ft['recordid']) AS $field) {
							
							if (strstr($template, "@FT" . $ft['recordid'] . "|ROW" . ($i+1) . "|EFID" . $field['id'] . "@")) {
								$template = str_replace("@FT" . $ft['recordid'] . "|ROW" . ($i+1) . "|EFID" . $field['id'] . "@", GetExtraFieldValue($records[$i], $field['id'], true, false, false), $template);
							}
						}
					}
				}
			}
		}
	}

	
	$template = ParseTemplateFlexTableTags($row['eid'],$template,"entity", $encode);

	$template = ParseTemplateCustomer($template, GetEntityCustomer($entity), false, "htme", false);

	if ($ref) {
		SetFormCache($entity, $formid, "entityrefer", $template);
	}

	if (stristr($template, "<?") && !$DontEvaluatePHP) { // PHP exists in template
		$template = EvaluateTemplatePHP($template, $entity);
	}


	return($template);

}

function ParseTemplateEntity_Old($template,$entity, $raw=false, $ref=false, $pdf=false, $encode = false) {

	if (!$encode) {
		//log_msg("NOTICE: ParseTemplateEntity called without enconding function! Defaulting to HTML.");
		//qlog(INFO, "NOTICE: ParseTemplateEntity called without enconding function! Defaulting to HTML.");
		$encode = "htme";
	} elseif ($encode != "FixRTF" && $encode != "htme" && $encode != "plain") {
		$encode = "htme";
	}

	// Output can be either "htme" "FixRTF" or "plain"
	qlog(INFO, "Chosen encoding: " . $encode . "()");
	$formid = GetEntityFormID($entity);
	if ($ref) {
		$cache = GetFormCache($entity, $formid, "entityrefer");
		if ($cache != "") {
			return($cache['content']);
		}
	}
	// For quick markup, some dummy fields can exist in entity forms. Replace them with dummy form elements.

	if (strstr($template, "#DUMMY_")) {
		$template = str_replace("#DUMMY_CB#", "<input type='checkbox' name='dummy'>", $template);
		$template = str_replace("#DUMMY_TB#", "<input type='text' name='dummy'>", $template);
		$template = str_replace("#DUMMY_DD#", "<select name='dummy'><option> - </option><option>Dummy drop-down box</option></select>", $template);
	}



	if ($raw == "dontformatnumbers" && strlen($raw) == 17) {
		unset($raw);
		$dfn = "dontformatnumbers";
	}

	if (!$raw && $encode != "plain") {
		$template = ParseTemplateHTMLColors($template, $entity);
	}


	qlog(INFO, "Template parsing (entity) : $entity");
	if ($entity == "") {
		$entity = "_new_";
	}

	if (strlen($template)==0) {
		qlog(ERROR, "ERROR: Template is empty!");
		log_msg("ERROR::ParseTemplateEntity:Template to be parsed is empty!","");
		return("");
	}
	if ($entity > 0) {
		$GLOBALS['LAST_CALL_PTE'] = $entity;
		qlog(INFO, "Setting LCPTE: $entity");
	} elseif ($entity!="_new_") {
		qlog(ERROR, "ERROR - No Entity ID received ($entityid). (replacing with last called EID: " . $GLOBALS['LAST_CALL_PTE'] . ") (ouch!)");
		$entity = $GLOBALS['LAST_CALL_PTE'];
	} elseif ($entity == "_new_") {
		qlog(INFO, "Entity is new.");
	}

	if ($GLOBALS['UC']['DateFormat'] == 'dd-mm-yyyy') {
		$date = date('d-m-Y');
	} elseif ($GLOBALS['UC']['DateFormat'] == 'yyyy-mm-dd') {
		$date = date('Y-m-d');
	} else {
		$date = date('m-d-Y');
	}

	if ($entity!=0) {
		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($entity) . "'";
		$result = mcq($sql,$db);
		$row = mysql_fetch_array($result);
	} elseif ($entity!="_new_") {
		qlog(ERROR, "ERROR - No Entity ID received ($entityid). (replacing with last called EID: " . $GLOBALS['LAST_CALL_PTE'] . ")");
		//$template = ParseTemplateCleanUp($template);
		$entity = $GLOBALS['LAST_CALL_PTE'];
	}
		//$template = str_replace("&amp;","&amp;",$template);
		// Entity-specific replacements
		if (IsValidEID($row['eid'])) {
			$template = str_replace('@KEY@',$encode(GenerateUniqueEntityIdentifier($row['eid'])),$template);
		}

		$template = str_replace('@ENTITYID@',			$encode($row['eid']),							$template);
		$template = str_replace('@EID@',				$encode($row['eid']),							$template);
		$template = str_replace('@CATEGORY@',			$encode($row['category']),						$template);
		$template = str_replace('@CATEGORY_AUTOCHANGE@',$encode($row['category']),						$template);
		$template = str_replace('@OWNER@',				$encode(GetUserName($row['owner'])),			$template);
		$template = str_replace('@ASSIGNEE@',			$encode(GetUserName($row['assignee'])),			$template);
		$template = str_replace('@CUSTOMER@',			$encode(GetCustomerName($row['CRMcustomer'])),	$template);
		$template = str_replace('@DUEDATE@',			$encode(TransformDate($row['duedate'])),		$template);
		$template = str_replace('@STARTDATE@',			$encode(TransformDate($row['startdate'])),		$template);
		$template = str_replace('@CLOSEDATE@',			$encode(INTLDate2NLDate($row['closedate'])),	$template);
		$template = str_replace('@STATUS@',				$encode($row['status']),						$template);
		$template = str_replace('@PRIORITY@',			$encode($row['priority']),						$template);
		if ($encode == "htme") {
			$template = str_replace('@CONTENTS@',			nl2br($encode($row['content'])),			$template);
		} else {
			$template = str_replace('@CONTENTS@',			$encode($row['content']),					$template);
		}
		$template = str_replace('@CID@',				$encode($row['CRMcustomer']),					$template);


//		if ($row['assignee']) $tmp1 = md5(trim(GetUserEmail($row['assignee'])));
//		if ($row['owner'])    $tmp2 = md5(trim(GetUserEmail($row['owner'])));

		$t = $row['timestamp_last_change']; // timestamp last edit

		$t = str_replace("-","",$t);
		$t = str_replace(" ","",$t);
		$t = str_replace(":","",$t);
		$tp['jaar'] = substr($t,0,4);
		$tp['maand'] = substr($t,4,2);
		$tp['dag'] = substr($t,6,2);
		$tp['uur'] = substr($t,8,2);
		$tp['min'] = substr($t,10,2);

		$cdate = explode("-",$row['cdate']);
		
		if (strlen($cdate[0])==1) {
				$cdate[0] = "0" . $cdate[0];
		}
		if (strlen($duedate[1])==1) {
				$cdate[1] = "0" . $cdate[1];
		}

		$cdate = $cdate[2] . "-" . $cdate[1] . "-" . $cdate[0];
		if ($entity != "_new_") {
			if ($row['openepoch'] > 0) {
				$template = str_replace("@CREATIONMOMENT@", $encode(TransformDate($cdate) . " " . date('H:i', $row['openepoch'])), $template);
			} else {
				$template = str_replace("@CREATIONMOMENT@", $encode(TransformDate($cdate)), $template);
			}
			$template = str_replace("@CREATIONDATE@", $encode(TransformDate($cdate)), $template);

			$template = str_replace("@LASTUPDATE@", $encode(TransformDate("$tp[dag]-$tp[maand]-$tp[jaar]") . " " . $tp['uur'] . ":" . $tp['min'] . "h."), $template);
			if (is_numeric($row['lasteditby']) && $row['lasteditby'] != 0) {
				$lasteditby = GetUserName($row['lasteditby']);
			}
			$template = str_replace("@LASTUPDATEBY@", $encode($lasteditby), $template);
		} else {
			$template = str_replace("@CREATIONDATE@", "", $template);
			$template = str_replace("@CREATIONMOMENT@", "", $template);
			$template = str_replace("@LASTUPDATE@", "", $template);
			$template = str_replace("@LASTUPDATEBY@", "", $template);
		}

		$template = str_replace("@DATE@",$encode(TransformDate(date('d-m-Y'))),$template);
		$template = str_replace("@UNFORMATTED_DATE@",$encode(date('d-m-Y')),$template);

		$template = str_replace('@AGE@', $encode(GetEntityAge($row['eid'])), $template);
		if (strstr($template,"@NUM_ATTM@")) {
			$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid='" . mres($entity) . "' AND type='entity' AND version_belonging_to=0";
			$result = mcq($sql,$db);
			$row = mysql_fetch_array($result);
			$template = str_replace("@NUM_ATTM@",$row[0],$template);
		}

		if ($entity != "_new_" && strstr($template,"@JOURNAL@") && $encode == "html") {
				$template = str_replace("@JOURNAL@", "<div id='inline_journal'>" . ShowJournal($entity) . "</div>", $template);
		}

		$template = ParseTemplateFlexTableTags($row['eid'],$template,"entity", $encode);

		$eflist = GetExtraFields();
		$found_and_allowed = array();
		
		// First make a list of tags which are actually in the template
		
		
		$eflist = GetExtraFields();
		// First make a list of tags which are actually in the template
		$GLOBALS['eflist_filtered_entity'] = array();
		foreach($eflist AS $field) {
			if (strstr($template,"@EFID" . $field['id'] . "@") || strstr($template,"%EFID" . $field['id'] . "%")) {
				array_push($GLOBALS['eflist_filtered_entity'],$field);
			}
		}
		foreach ($GLOBALS['eflist_filtered_entity'] AS $field) {
			if ($encode == "plain") {
				$html = false;
			} else {
				$html = true;
			}
			$value = GetExtraFieldValue($entity, $field['id'], $html, $raw . $dfn);
			if ($field['israwhtml'] == "y" || $field['fieldtype'] == "diary") {
				$template = str_replace("@EFID" . $field['id'] . "@",$value,$template);
			} else {
				$template = str_replace("@EFID" . $field['id'] . "@",$encode($value),$template);
			}
			if (strstr($template,"0" . $field['id'] . "%")) {
				$template = str_replace("%EFID" . $field['id'] . "%", GetExtraFieldValue($entity, $field['id'], false, true, false), $template);
			}
		}



		// hier
		$list = GetFlexTableDefinitions(false, "one-to-many");
		foreach ($list AS $flextable) {
			if (strstr($template,"@FLEXTABLE" . $flextable['recordid'] . "@") ) {
				if ((CheckFlexTableAccess($flextable['recordid']) == "ok" || CheckFlexTableAccess($flextable['recordid']) == "readonly") && IsValidEID($entity)) {
					qlog(INFO, "FLEXTABLE : " . $flextable['recordid'] . " found in template");

					$name = GetFlexTableNames($flextable['recordid']);

					if ($raw) {
						$tmparr = ShowFlexTableContents($flextable['recordid'], $entity, false, true, false, $pdf);
						// 1st row is header row
						// each array elemement is a line, split by @@@@REALEXCEL@@@@ signs
						for ($i=1;$i<sizeof($tmparr);$i++) {
							$rep .= $encode(str_replace('@@@@REALEXCEL@@@@', ",", trim($tmparr[$i])) . "\n");
						}
					} elseif ($pdf) {
						$tmparr = ShowFlexTableContents($flextable['recordid'], $entity, false, fakse, false, true);
						// 1st row is header row
						// each array elemement is a line, split by @@@@REALEXCEL@@@@ signs
						$rep .= "<table border=\"0\">";
						for ($i=0;$i<sizeof($tmparr);$i++) {
							if (substr($tmparr[$i],strlen($tmparr[$i])-17,17) == "@@@@REALEXCEL@@@@") {
								$tmparr[$i] = substr($tmparr[$i],0,strlen($tmparr[$i])-17);
							}
							if ($i == 0) {
								$rep .= "<tr><td><strong>" . (str_replace('@@@@REALEXCEL@@@@', "</strong></td><td><strong>", trim($tmparr[$i])) . "") . "</strong></td></tr>";
							} else {
								$rep .= "<tr><td>" . (str_replace('@@@@REALEXCEL@@@@', "</td><td>", trim($tmparr[$i])) . "") . "</td></tr>";
							}

						}
						$rep .= "</table>";

					} else {

						// HIER AJAXBOX
						$rep .= AjaxBox("ShowFlexTableContents", false, "&ft=" . $flextable['recordid'] . "&eid=" . $entity . "&pdf=" . $pdf, false);

						//$rep .= ShowFlexTableContents($flextable['recordid'], $entity, false, false, false, $pdf);
					}

					$template = str_replace("@FLEXTABLE" . $flextable['recordid'] . "@", $rep, $template);
					qlog(INFO, "FLEXPARSE: FLEXTABLE" . $flextable['recordid'] . ": added ajaxbox");

				} else {
					$res = CheckFlexTableAccess($flextable['recordid']);
					$template = str_replace("@FLEXTABLE" . $flextable['recordid'] . "@", "<!-- access to table denied -->", $template);
					qlog(INFO, "Flextable is in template but this user is not allowed to see it!");

				}
			}
			unset($rep);
		}


		$x = GetModules();
		foreach ($x AS $module) {
			if (stristr($template, "@MODULE" . $module['mid'] . "@")) {
				  $template = str_replace("@MODULE" . $module['mid'] . "@", RunModule($module['mid'], $entity, true), $template);
				 qlog(INFO, "Module " . $module['mid'] . " was ran and included in this template");
			}
		}
	
	if ($ref) {
		SetFormCache($entity, $formid, "entityrefer", $template);
	}


	return($template);
}

function ParseTemplateFlextableValues($flextable, $record, $template, $encode = "htme") {
	$eflist = GetExtraFlexTableFields($flextable, false, false);
	foreach ($eflist AS $item_ft) {
		if (strstr($template, "@EFID" . $item_ft['id'] . "@")) {
			$val = GetExtraFieldValue($record, $item_ft['id'], true, false, false);
			$template = str_replace("@EFID" . $item_ft['id'] . "@", $encode($val), $template);
		}
	}
	return($template);
}

function ParseTemplateFlexTableTags($eid,$template,$reference, $encode = "htme") {
	static $nesting_level;
	$nesting_level++;

	if ($reference == "customer") {
		$eflist = GetExtraCustomerFields();
	} elseif ($reference == "entity") {
		$eflist = GetExtraFields();
	} else {
		$eflist = GetExtraFlexTableFields(str_replace("flextable", "", $reference), false, false);
//		$template = ParseTemplateFlextableValues(str_replace("flextable", "", $reference), $eid, $template, $encode);
	}
	// Replace all tags for FlexTables to which a reference exists
	foreach ($eflist AS $field) {
		if ($field['fieldtype'] == "Reference to FlexTable" && $nesting_level < 20) {
			$fval == "";
			if ($reference == "customer") {
				$fval = GetExtraCustomerFieldValue($eid, $field['id'], false, true);
			} elseif ($reference == "entity") {
				$fval = GetExtraFieldValue($eid, $field['id'],false,true);
			} else {
				//$fval = GetFlextableFieldValue($eid, $field['id'], str_replace("flextable", "", $reference), true);
				$fval = GetExtraFieldValue($eid, $field['id'],true,false, false);
			}
			$template = ParseTemplateFlextableValues($field['options'], $fval, $template, $encode);
			$template = ParseTemplateFlexTableTags($fval,$template,$field['options'], $encode = "htme");
		}
	}	
	$nesting_level = 0;
	return($template);
}

function ParseTemplateGeneric($template, $encode = "htme") {

	if (strlen($template)==0) {
		return("");
	}
	qlog(INFO, "Template parsed (generic, " . strlen($template) . " bytes)");

	$x = GetModules();
        foreach ($x AS $module) {
	        if (strstr($template, "@MODULE" . $module['mid'] . "@")) {
	                    $template = str_replace("@MODULE" . $module['mid'] . "@", RunModule($module['mid'], false, true), $template);
	                    qlog(INFO, "Module " . $module['mid'] . " was ran and included in this template");
	            }
	}

	if ($GLOBALS['UC']['DateFormat'] == 'dd-mm-yyyy') {
		$date = date('d-m-Y');
	} else {
		$date = date('m-d-Y');
	}
	$time = date('H:i:s');

	// Global variable replacements
	$template = ParseDefaultValueTags($template, $encode);
	

	if (strstr($template, "@CHAT@")) {

		$chat = "<div id='INTLV_ChatBody'>";
		$tmp = unserialize(GetSetting("CHAT_HISTORY"));
		$msg = "<span class='INTLV_ChatEnterName'>" . GetUserName($GLOBALS['USERID']) . " [entered chat]";
		if (!strstr($tmp[sizeof($tmp)-1], $msg)) {
			$tmp[] = $msg . " " . date("H:i") . "h</span><br>";
		} else {
			$tmp[sizeof($tmp)-1] = $msg . " " . date("H:i") . "h</span><br>";
		}
		UpdateSetting("CHAT_HISTORY", serialize($tmp));

		$chat .= "<em>Initializing chat...</em>";
		$chat .= "</div><input type='text' id='INTLV_ChatTextAdd' onkeyup=\"testChatEnter(event, this);\">";

		$template = str_replace("@CHAT@",$chat, $template);
	}


	$template = str_replace("@TIME@",$encode($time),$template);
	$template = str_replace("@USER@",$encode(GetUserName($GLOBALS['USERID'])),$template);
	$template = str_replace("@USERID@",$encode($GLOBALS['USERID']),$template);
	$template = str_replace("@USER_EMAIL@",$encode(GetUserEmail($GLOBALS['USERID'])),$template);

	if ($encode == "htme") {
		$template = str_replace("@INFO@", "<a title='", $template);
		$template = str_replace("@ENDINFO@", "' style='cursor: help'><img src='images/info.gif'></a>", $template);
	}
	if (strstr($template, "@CALENDARGROUP")) {
		$tmp = GetExtraFields();
		foreach ($tmp AS $field) {
			if ($field['fieldtype'] == "Calendar planning group" && strstr($template, "@CALENDARGROUP" . $field['id'] . "@")) {
				$fields = unserialize($field['options']);
				$calendar = ReturnPlanningGroup("noref", "entity", $fields, GetExtraFieldName($field['id']));
				$template = str_replace("@CALENDARGROUP" . $field['id'] . "@", $encode($calendar), $template);
			}
		}
		$tmp = GetExtraCustomerFields();
		foreach ($tmp AS $field) {
			if ($field['fieldtype'] == "Calendar planning group" && strstr($template, "@CALENDARGROUP" . $field['id'] . "@")) {
				$calendar = ReturnPlanning("noref", "customer", $field['id']);
				$template = str_replace("@CALENDARGROUP" . $field['id'] . "@", $encode($calendar), $template);
			}
		}
		$fts = GetFlexTableDefinitions();
		foreach ($fts AS $ft) {
			$tmp = GetExtraFlexTableFields($ft['recordid']);
			foreach ($tmp AS $field) {
				if ($field['fieldtype'] == "Calendar planning group" && strstr($template, "@CALENDARGROUP" . $field['id'] . "@")) {
					$calendar = ReturnPlanning("noref", "flextable" . $ft['recordid'], $field['id']);
					$template = str_replace("@CALENDARGROUP" . $field['id'] . "@", $encode($calendar), $template);
				}
			}
		}
	}
	if (strstr($template, "@CALENDAR")) {

		$tmp = GetExtraFields();
		foreach ($tmp AS $field) {
			if ($field['fieldtype'] == "Booking calendar" && strstr($template, "@CALENDAR" . $field['id'] . "@")) {
				$calendar = ReturnPlanning("noref", "entity", $field['id']);
				$template = str_replace("@CALENDAR" . $field['id'] . "@", $encode($calendar), $template);
			}
		}
		$tmp = GetExtraCustomerFields();
		foreach ($tmp AS $field) {
			if ($field['fieldtype'] == "Booking calendar" && strstr($template, "@CALENDAR" . $field['id'] . "@")) {
				$calendar = ReturnPlanning("noref", "customer", $field['id']);
				$template = str_replace("@CALENDAR" . $field['id'] . "@", $encode($calendar), $template);
			}
		}
		$fts = GetFlexTableDefinitions();
		foreach ($fts AS $ft) {
			$tmp = GetExtraFlexTableFields($ft['recordid']);
			foreach ($tmp AS $field) {
				if ($field['fieldtype'] == "Booking calendar" && strstr($template, "@CALENDAR" . $field['id'] . "@")) {
					$calendar = ReturnPlanning("noref", "flextable" . $ft['recordid'], $field['id']);
					$template = str_replace("@CALENDAR" . $field['id'] . "@", $encode($calendar), $template);
				}
			}
		}
	}

	return($template);
}
function ParseTemplateCustomer($template, $customerid, $raw=false, $encode="htme", $cache_id=false) {
//	DA("PTC");
	if (!$encode) {
		log_msg("NOTICE: ParseTemplateCustomer called without enconding function! Defaulting to HTML.");
		qlog(INFO, "NOTICE: ParseTemplateCustomer called without enconding function! Defaulting to HTML.");
		$encode = "htme";
	}

	if ($cache_id) {
		$ret = GetFormCache($customerid, "1", $cache_id . "ref");
		if ($ret['content']) {
			return($ret['content']);
		}

	}

	// Output can be either "htme" "FixRTF" or "plain"
	qlog(INFO, "Chosen encoding: " . $encode . "()");

		if ($raw == "dontformatnumbers" && strlen($raw) == 17) {
			$dfn = "dontformatnumbers";
			unset($raw);
		}

		$eid = $customerid;

		if (strlen($template)==0) {
			qlog(ERROR, "ERROR ------> template is empty!");
			//log_msg("ERROR::ParseTemplateCustomer:Template to be parsed is empty!","");
			return("");
		}

		if ($GLOBALS['UC']['DateFormat'] == 'dd-mm-yyyy') {
			$date = date('d-m-Y');
		} else {
			$date = date('m-d-Y');
		}


		$sql = "SELECT id,custname,contact,cust_address,contact_email,contact_title,contact_phone,cust_homepage,cust_remarks,customer_owner FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($customerid) . "'";
		$result = mcq($sql,$db);
		$customer = mysql_fetch_array($result);
		$template = str_replace("@CUSTOMER@",$encode($customer['custname']),$template);
		$template = str_replace("@CUSTOMER_CONTACT@",$encode($customer['contact']),$template);
		$template = str_replace("@CONTACT_EMAIL@",$encode($customer['contact_email']),$template);
		$template = str_replace("@CONTACT_TITLE@",$encode($customer['contact_title']),$template);
		$template = str_replace("@CONTACT_PHONE@",$encode($customer['contact_phone']),$template);
		$template = str_replace("@CUST_HOMEPAGE@",$encode($customer['cust_homepage']),$template);
		$template = str_replace("@CID@",$encode($customer['id']),$template);
		$template = str_replace("@CUST_REMARKS@",$encode($customer['cust_remarks']),$template);
		if ($customer['customer_owner']) {
			$co = GetUserName($customer['customer_owner']);
		}
		$template = str_replace("@CUST_OWNER@",$encode($co),$template);
		$template = str_replace("@CUSTOMER_OWNER@",$encode($co),$template);
		$template = str_replace("@CUSTOMER_ADDRESS@",$encode($customer['cust_address']),$template);

		$template = str_replace("@DATE@",$encode(TransformDate(date('d-m-Y'))),$template);
		$template = str_replace("@UNFORMATTED_DATE@",$encode(date('d-m-Y')),$template);


		// First make a list of tags which are actually in the template

		$eflist = GetExtraCustomerFields(false, true);
		$fields_in_template = array();

		foreach($eflist AS $field) {
			if (strstr($template,"@EFID" . $field['id'] . "@") || strstr($template,"%EFID" . $field['id'] . "%")) {
				array_push($fields_in_template,$field);
			}
		}
		for ($x=0;$x<sizeof($fields_in_template);$x++) {
			$field = $fields_in_template[$x];
			$value = GetExtraCustomerFieldValue($customerid, $field['id'], true, $raw . $dfn, false);
			
			if ($field['israwhtml'] != "y") {
				$value = $encode($value);
				if (GetExtraFieldType($field['id']) == "text area" && $encode == "htme") {
					$value = nl2br($value);
				}
			}
			$template = str_replace("@EFID" . $field['id'] . "@",$value,$template);
			if (strstr($template,"%EFID" . $field['id'] . "%")) {
				$template = str_replace("%EFID" . $field['id'] . "%", GetExtraCustomerFieldValue($customerid, $field['id'], false, true, false), $template);
			}
		}

		// Parse tags which refer to underlying flextables (syntax @FTx|ROWx|EFIDx@

		foreach (GetFlextableDefinitions() AS $ft) {

			if ($ft['orientation'] == "one_entity_to_many" && $ft['refers_to'] == "customer") {
			
				if (strstr($template, "@FT" . $ft['recordid'] . "|")) {

					$ExtraSelectCondition = GetAttribute("flextable", "ExtraSelectCondition", $ft['recordid']);
					$sql_ins = "";
					if ($ExtraSelectCondition != "" && $ExtraSelectCondition != "None") {
				
						$sql_ins = " AND " . $ExtraSelectCondition;
					
					}

					$records = db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid'] . " WHERE deleted!='y' AND refer=" . $recordid . " " . $sql_ins);

					for ($i=0;$i<count($records);$i++) {

						if (CheckFlextableRecordAccess($ft['recordid'], $records[$i]) != "nok") {
						
							foreach (GetExtraFlextableFields($ft['recordid']) AS $field) {
							
								if (strstr($template, "@FT" . $ft['recordid'] . "|ROW" . ($i+1) . "|EFID" . $field['id'] . "@")) {
								
									$template = str_replace("@FT" . $ft['recordid'] . "|ROW" . ($i+1) . "|EFID" . $field['id'] . "@", GetExtraFieldValue($records[$i], $field['id'], true, false, false), $template);
								
								}
							
							}
						
						}
					
					}
				
				}
			
			}
		}

		$template = ParseTemplateFlexTableTags($eid, $template, "customer", $encode);


		qlog(INFO, "Template parsed (customer)");

		if ($cache_id) {

			SetFormCache($customerid, "1", $cache_id . "ref", $template);
		}

		return($template);
}

function StripExistingOnlyTags($template) {
	qlog(INFO, "Tags only for existing entities stripped from template");
	$template = preg_replace ("/@XONLY@(.*?)@ENDXONLY@/s", "", $template);
	$template = str_replace("@XONLY@" , "", $template);
	$template = str_replace("@ENDXONLY@" , "", $template);
	$template = str_replace("@NEWONLY@" , "", $template);
	$template = str_replace("@ENDNEWONLY@" , "", $template);

	return($template);
}
function StripNewOnlyTags($template) {
	qlog(INFO, "Tags only for new entities stripped from template");
	$template = preg_replace ("/@NEWONLY@(.*?)@ENDNEWONLY@/s", "", $template);
	$template = str_replace("@NEWONLY@" , "", $template);
	$template = str_replace("@ENDNEWONLY@" , "", $template);
	$template = str_replace("@XONLY@" , "", $template);
	$template = str_replace("@ENDXONLY@" , "", $template);

	return($template);
}
function StripRWOnlyTags($template) {
	qlog(INFO, "Tags only for read-write entities stripped from template");
	$template = preg_replace ("/@RWONLY@(.*?)@ENDRWONLY@/s", "", $template);
	$template = str_replace("@RWONLY@" , "", $template);
	$template = str_replace("@ENDRWONLY@" , "", $template);
	$template = str_replace("@ROONLY@" , "", $template);
	$template = str_replace("@ENDROONLY@" , "", $template);

	return($template);
}
function StripROOnlyTags($template) {
	qlog(INFO, "Tags only for read-only entities stripped from template");
	$template = preg_replace ("/@ROONLY@(.*?)@ENDROONLY@/s", "", $template);
	$template = str_replace("@ROONLY@" , "", $template);
	$template = str_replace("@ENDROONLY@" , "", $template);
	$template = str_replace("@RWONLY@" , "", $template);
	$template = str_replace("@ENDRWONLY@" , "", $template);

	return($template);
}

function ParseTemplateLanguageTags($template, $encode="") {
	global $lang;
	qlog(INFO, "Start replace language tags in template");

	// Find all tags
	preg_match_all('/\[\[[A-Za-z0-9_]+\]\]/', $template, $matches);
	$list_of_tags = $matches[0];

	foreach ($list_of_tags AS $name) {
		$tag = $lang[str_replace("[[", "", str_replace("]]", "", $name))];
		if (function_exists($encode)) {
			$template = str_replace($name, $encode($tag), $template);
		} else {
			$template = str_replace($name, $tag, $template);
		}
	}
	qlog(INFO, "Done replace language tags in template");
	return($template);

}
function ParseTemplateCleanUp($template, $silent=false) {

	qlog(INFO, "Template cleaned up.");
	
	$template = RemoveTableRowFromTemplateByTag($template, "@CLEANUP_PLEASE_CLEAR_THIS_LINE@");

	if (!$silent) {
		$template = preg_replace("/(@|#|\$)([A-Z0-9_-|]+)\\1/", "<!-- Field $2 not found, deleted by parser (1) -->", $template);
		$template = preg_replace("/\\$\\$([A-Z0-9_ -|]+?)\\$\\$/", "<!-- Field $1 not found, deleted by parser (2) -->", $template);
	} else {
		$template = preg_replace("/(@|#|\$)([A-Z0-9_-|]+)\\1/", "", $template);
		$template = preg_replace("/\\$\\$([A-Z0-9_ -|]+?)\\$\\$/", "", $template);
	}
//	if (!$GLOBALS['logtext']) { // only when not debugging
		//$template = preg_replace('/<!--[^\[](.|\s)*?-->/', '', $template); // remove html comments
//	}

	return($template);
}
function FixRTF($text) {
	$text = str_replace("\\","\\\\",$text);
	$text = str_replace("{","\\{",$text);
	$text = str_replace("}","\\}",$text);
	$text = str_replace("\n","\\par ", $text);  # vertaald } naar \}
	$text = htmlspecialchars_decode($text, ENT_QUOTES);
	return($text);
}
function ParseTemplateForRTF($template) {
	$template = br2nl($template);
	$template = str_replace("\n","\\par",$template);
	$template = str_replace("\t","\\tab",$template);
	$template = str_ireplace("%PAGEBREAK%","\p",$template);
	return($template);
}

function GetStyleSheets($id = false) {
		if (is_numeric($id)) {
			return(db_GetArray("SELECT templateid, templatename, template_subject FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='TEMPLATE_CSS' AND templateid='" . mres($id) . "'"));
		} else {
			return(db_GetArray("SELECT templateid, templatename, template_subject FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='TEMPLATE_CSS'"));
		}
}
function GetExtraFieldAccessRestrictions($field_num) {
	if (!$field_num) {
		qlog(INFO, "INFO: GetExtraFieldAccessRestrictions called with empty param!");
	} else {
		if ($GLOBALS['PageCache']['ExtraFieldAccessRestrictions'][$field_num] != "") {
			return($GLOBALS['PageCache']['ExtraFieldAccessRestrictions'][$field_num]);
		} else {
			$row = db_GetRow("SELECT accessarray, fieldtype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($field_num) . "'",$db);
			if (strstr($row['fieldtype'], "[copyfield")) {
				$row = db_GetRow("SELECT accessarray, fieldtype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id=" . str_replace("]","",str_replace("[copyfield", "", $row['fieldtype'])),$db);
			}
			$accarr = unserialize($row['accessarray']);
			$GLOBALS['PageCache']['ExtraFieldAccessRestrictions'][$field_num]= $accarr;
			return($accarr);
		}
	}
}
function GetModuleAccessRestrictions($module_num) {
	if (!$module_num) {
		qlog(INFO, "INFO: GetModuleAccessRestrictions called with empty param!");
	} else {
		$row = db_GetRow("SELECT module_accessarray FROM " . $GLOBALS['TBL_PREFIX'] . "modules WHERE mid='" . mres($module_num) . "'",$db);
		$tmp = unserialize($row[0]);
		if (sizeof($tmp) > 0) {
			return($tmp);
		} else {
			return(false);
		}
	}
}

function GetFlexTableAccessRestrictions($table_num) {
	if (!$table_num) {
		qlog(INFO, "INFO: GetFlexTableAccessRestrictions called with empty param!");
	} else {
		if (isset($GLOBALS['PageCache']['FlexTableAccessRestrictions'][$table_num])) {
			return($GLOBALS['PageCache']['FlexTableAccessRestrictions'][$table_num]);
		} else {
			$row = db_GetRow("SELECT accessarray FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs WHERE recordid='" . mres($table_num) . "'",$db);
			$tmp = @unserialize($row[0]);
			if (count($tmp) > 0) {
				$GLOBALS['PageCache']['FlexTableAccessRestrictions'][$table_num] = $tmp;
				return($tmp);
			} else {
				return(false);
			}
		}
	}
	return(false);
}
function GetAllButtons($id = false) {
	if ($id) {
		return(db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype='Button' AND deleted='n' AND id='" . mres($id) . "'"));
	} else {
		return(db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype='Button' AND deleted='n'"));
	}
}
function GetButtons($id=false) {
	if (is_array($GLOBALS['PageCache']['Buttons'])) {
		return($GLOBALS['PageCache']['Buttons']);
	} else {
		$ret = array();
		$t = GetExtraFields(false, true);
		for ($x=0;$x<sizeof($t);$x++) {
			if ($t[$x]['fieldtype'] == "Button") {
				array_push($ret, $t[$x]);
				if ($t[$x]['id'] == $id && is_numeric($id)) {
					return($t[$x]);
				}
			}
		}
		$GLOBALS['PageCache']['Buttons'] = $ret;
		return($ret);
	}
}
function GetFlextableButtons($id=false, $flextable) {
	if (!$st && is_array($GLOBALS['PageCache']['FlextableButtons' . $flextable])) {
		return($GLOBALS['PageCache']['FlextableButtons' . $flextable]);
	}
	$ret = array();
	$t =  GetExtraFlexTableFields($flextable, $id, true, true);
	for ($x=0;$x<sizeof($t);$x++) {
		if ($t[$x]['fieldtype'] == "Button") {
			array_push($ret, $t[$x]);
			if ($t[$x]['id'] == $id && is_numeric($id)) {
				return($t[$x]);
			}
		}
	}
	if (!$st) {
		$GLOBALS['PageCache']['FlextableButtons' . $flextable] = $ret;
	}
	return($ret);
}
function GetCustomerButtons($id=false, $flextable) {
	$ret = array();
	$t = GetExtraCustomerFields(false, true);
	for ($x=0;$x<sizeof($t);$x++) {
		if ($t[$x]['fieldtype'] == "Button") {
			array_push($ret, $t[$x]);
			if ($t[$x]['id'] == $id && is_numeric($id)) {
				return($t[$x]);
			}
		}
	}
	return($ret);
}

function CheckFlexTableAccess($table_id, $userid=false) {
	qlog(INFO, "mark");

	if (!$userid) {
		$userid = $GLOBALS['USERID'];
	}
	if ($GLOBALS['UC']['ViewAllRecords']) {
		return("ok");
	} elseif (!$table_id) {
		qlog(INFO, "No table id given, no access!");
		return("nok");
	} elseif (is_administrator()) {
		qlog(INFO, "Ofcourse this is ok (user is admin)");
		return("ok");
	} else {
		if ($GLOBALS['PageCache']['FlexTableAccess'][$table_id] != "") {
			return($GLOBALS['PageCache']['FlexTableAccess'][$table_id]);
		} else {

			$ft = GetFlextableDefinitions($table_id);
			if (1==0) { //$ft[0]['skip_security'] == "y"
				return("ok");
			} else {
				$ret = "nok";
				$accarr = array();
				$accarr = GetFlexTableAccessRestrictions($table_id);
				if (is_array($accarr)) {
					qlog(INFO, "Flextable " . $table_id . " has detailed access restrictions");

						$urow = GetUserRow($userid);
						$prof = $urow['PROFILE'];
						if (is_numeric($prof)) {
							$id = "P" . $prof; // read_only
							$faid = "fa_P" . $prof; // read-write

							if (in_array($faid,$accarr)) {
								$ret = "ok";
								qlog(INFO, "table is read/write by group profile " . $prof);
								$GLOBALS['PageCache']['FlexTableAccess'][$table_id] = $ret;
								return($ret);
							} elseif (in_array($id,$accarr)) {
								$ret = "readonly";
								$GLOBALS['AccessDeniedReason'] .= "readonly by group profile";
								qlog(INFO, "table is read-only by group profile " . $prof);
							} else {
								qlog(INFO, "table access is denied by group profile ");
								$GLOBALS['AccessDeniedReason'] .= "denied by group profile";
							}
						}
						$id = "U" . $userid;
						$faid = "fa_U" . $userid;

						if (in_array($faid,$accarr)) {
							$ret = "ok";
							qlog(INFO, "table is (also) read/write by personal profile");
							$GLOBALS['PageCache']['FlexTableAccess'][$table_id] = $ret;
							return($ret);
						} elseif (in_array($id,$accarr)) {
							if ($ret != "ok") {
								$ret = "readonly";
								qlog(INFO, "table is read-only by personal profile");
								$GLOBALS['AccessDeniedReason'] .= "readonly by personal profile";

							}
						} 

						foreach ($accarr AS $accessrow) {
							if (substr($accessrow, 0, 2) == "EF") {
								$ar = explode("|", $accessrow);
								$field = str_replace("EF", "", $ar[0]);
								$valuetobe = $ar[1];
								$rule = $ar[2];
								if (strstr($ar[2], "P")) { // concerns profile
									$value = db_GetValue("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . $prof . "'");
									$idt = "P";
								} elseif (strstr($ar[2], "U")) { // concerns user
									$value = db_GetValue("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . $GLOBALS['USERID'] . "'");
									$idt = "U";
								}
								if ($value == $valuetobe) {
									if ($idt == "P") {
										if (substr($rule, 0, 1) == "P" && $ret != "ok") {
											$ret = "readonly";
											$GLOBALS['AccessDeniedReason'] .= "readonly by group field property";
										} elseif (substr($rule, 0, 4) == "fa_P") {
											$ret = "ok";
											$GLOBALS['PageCache']['FlexTableAccess'][$table_id] = $ret;
											return($ret);
											break;
										}
									} elseif ($idt == "U") {
										if (substr($rule, 0, 1) == "U" && $ret != "ok") {
											$ret = "readonly";
											$GLOBALS['AccessDeniedReason'] .= "readonly by user field property";
										} elseif (substr($rule, 0, 4) == "fa_U") {
											$ret = "ok";
											$GLOBALS['PageCache']['FlexTableAccess'][$table_id] = $ret;
											return($ret);
											break;
										}
									}
								}
							}
						}
				
				} else {
					qlog(INFO, "Extra table " . $table_id . " has no detailed access restrictions");
					$ret = "ok";
				}
			}
			$GLOBALS['PageCache']['FlexTableAccess'][$table_id] = $ret;

			return($ret);
		}
	}
}
function CheckModuleAccess($module_id, $userid=false) {
	if (!$userid) {
		$userid = $GLOBALS['USERID'];
	}
	if (is_administrator()) {
		return("ok");
	} else {
		$accarr = array();
		$accarr = GetModuleAccessRestrictions($module_id);
		if (is_array($accarr)) {
			$ret = "nok";

			qlog(INFO, "Module " . $module_id . " has detailed access restrictions");

			$urow = GetUserRow($userid);
			$prof = $urow['PROFILE'];
			
			$id = "P" . $prof; // read_only
			$faid = "fa_P" . $prof; // read-write
			if (in_array($id,$accarr) && in_array($faid,$accarr)) {
				$ret = "ok";
				qlog(INFO, "module is read/write by group profile");
			} elseif (in_array($id,$accarr)) {
				$ret = "ok";
				qlog(INFO, "module is read-only by group profile");
			} else {
				qlog(INFO, "module access is denied by group profile ");
				$ret = "nok";
			} 

			$id = "U" . $userid;
			$faid = "fa_U" . $userid;

			if (in_array($id,$accarr) && in_array($faid,$accarr)) {
				$ret = "ok";
				qlog(INFO, "module is (also) read/write by group profile");
			} elseif (in_array($id,$accarr)) {
				if ($ret!="ok") {
					$ret = "ok";
					qlog(INFO, "Module is read-only by personal profile");
				} else {
					qlog(INFO, "Module should be readonly by personal profile but is overridded to OK by group profile");
					$ret = "ok";
				}
			} 
			foreach ($accarr AS $accessrow) {
				if (substr($accessrow, 0, 2) == "EF") {
					$ar = explode("|", $accessrow);
					$field = str_replace("EF", "", $ar[0]);
					$valuetobe = $ar[1];
					$rule = $ar[2];
					if (strstr($ar[2], "P")) { // concerns profile
						$value = db_GetValue("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . $prof . "'");
						$idt = "P";
					} elseif (strstr($ar[2], "U")) { // concerns user
						$value = db_GetValue("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . $GLOBALS['USERID'] . "'");
						$idt = "U";
					}
					if ($value == $valuetobe) {
						if ($idt == "P") {
							if (substr($rule, 0, 1) == "P" && $ret != "ok") {
								$ret = "readonly";
								$GLOBALS['AccessDeniedReason'] .= "readonly by group field property";
							} elseif (substr($rule, 0, 4) == "fa_P") {
								$ret = "ok";
								break;
							}
						} elseif ($idt == "U") {
							if (substr($rule, 0, 1) == "U" && $ret != "ok") {
								$ret = "readonly";
								$GLOBALS['AccessDeniedReason'] .= "readonly by user field property";
							} elseif (substr($rule, 0, 4) == "fa_U") {
								$ret = "ok";
								break;
							}
						}
					}
				}
			}
		} else {
			qlog(INFO, "Module " . $module_id . " has no detailed access restrictions");
			$ret = "ok";
		}
		if ($ret == "readonly") {
			$ret = "nok";
		}
		return($ret);
	}
}
function CheckExtraFieldAccess($field_num, $userid=false, $eid=false) {
	if (!$userid) {
		$userid = $GLOBALS['USERID'];
	}
	if ($GLOBALS['UC']['ViewAllRecords']) {
		return("ok");
	} elseif (is_administrator()) {
		return("ok");
	} elseif ($GLOBALS['PageCache']['ExtraFieldAccess'][$field_num] && $userid == $GLOBALS['USERID']) {
		qlog(CACHE, "CACHE Extra field " . $field_num . ": " . $GLOBALS['PageCache']['ExtraFieldAccess'][$field_num]);
		return($GLOBALS['PageCache']['ExtraFieldAccess'][$field_num]);
	} else {
		$accarr = array();
		$accarr = GetExtraFieldAccessRestrictions($field_num);
		if (is_array($accarr)) {
			$ret = "nok";
			qlog(INFO, "Extra field " . $field_num . " has detailed access restrictions");

			$urow = GetUserRow($userid);
			$prof = $urow['PROFILE'];
			if (is_numeric($prof)) {
				$id = "P" . $prof; // read_only
				$faid = "fa_P" . $prof; // read-write
				if (in_array($id,$accarr) && in_array($faid,$accarr)) {
					$ret = "ok";
					qlog(INFO, "Field is read/write by group profile");
				} elseif (in_array($id,$accarr)) {
					$ret = "readonly";
					qlog(INFO, "Field is read-only by group profile");
				} else {
					qlog(INFO, "Field access is denied by group profile ");
					$ret = "nok";
				}
			}
			$id = "U" . $userid;
			$faid = "fa_U" . $userid;

			if (in_array($id,$accarr) && in_array($faid,$accarr)) {
				$ret = "ok";
				qlog(INFO, "Field is (also) read/write by group profile");
			} elseif (in_array($id,$accarr)) {
				if ($ret!="ok") {
					$ret = "readonly";
					qlog(INFO, "Field is read-only by personal profile");
				} else {
					qlog(INFO, "Field should be readonly by personal profile but is overridded to OK by group profile");
					$ret = "ok";
				}
			}
			foreach ($accarr AS $accessrow) {
				if (substr($accessrow, 0, 2) == "EF") {
					$ar = explode("|", $accessrow);
					$field = str_replace("EF", "", $ar[0]);
					$valuetobe = $ar[1];
					$rule = $ar[2];
					if (strstr($ar[2], "P")) { // concerns profile
						$value = db_GetValue("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . $prof . "'");
						$idt = "P";
					} elseif (strstr($ar[2], "U")) { // concerns user
						$value = db_GetValue("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . $GLOBALS['USERID'] . "'");
						$idt = "U";
					}
					if ($value == $valuetobe) {
						if ($idt == "P") {
							if (substr($rule, 0, 1) == "P" && $ret != "ok") {
								$ret = "readonly";
								$GLOBALS['AccessDeniedReason'] .= "readonly by group field property";
							} elseif (substr($rule, 0, 4) == "fa_P") {
								$ret = "ok";
								break;
							}
						} elseif ($idt == "U") {
							if (substr($rule, 0, 1) == "U" && $ret != "ok") {
								$ret = "readonly";
								$GLOBALS['AccessDeniedReason'] .= "readonly by user field property";
							} elseif (substr($rule, 0, 4) == "fa_U") {
								$ret = "ok";
								break;
							}
						}
					}
				}
			}

			if (in_array("AllCanSee", $accarr) && $ret == "nok") {
				$ret = "readonly";
				qlog(INFO, "Access read-only granted; AllCanSee is true");
			}


		} else {
			qlog(INFO, "Extra field " . $field_num . " has no detailed access restrictions");
			$ret = "ok";
		}
		$GLOBALS['PageCache']['ExtraFieldAccess'][$field_num] = $ret;
		return($ret);
	}
}

function GetExtraFields($fid = false, $include_buttons = false, $all_fields=false, $ignore_cache=false) {

	if ($GLOBALS['PageCache']['ExtraFields'] != "" && !$fid && !$include_buttons && !$all_fields && !$ignore_cache) {
		qlog(CACHE, "CACHE Extra fields list returned");
		return($GLOBALS['PageCache']['ExtraFields']);
	} elseif ($fid && $GLOBALS['PageCache']['ExtraFieldsSpecific'][$fid] != "" && !$ignore_cache) {
		qlog(CACHE, "CACHE Extra fields list returned (specific)");
		//print "RETURN " . string_r($GLOBALS['PageCache']['ExtraFieldsSpecific'][$fid]) . "<br>";
		return($GLOBALS['PageCache']['ExtraFieldsSpecific'][$fid]);
	} else {

		if (!stristr($_SERVER['SCRIPT_NAME'],"edit.php") && !stristr($_SERVER['SCRIPT_NAME'],"flextable.php") && !stristr($_SERVER['SCRIPT_NAME'],"trigger.php") && !stristr($_SERVER['SCRIPT_NAME'],"extrafieldconditions.php") && !stristr($_SERVER['SCRIPT_NAME'],"triggerconditions.php") && !stristr($_SERVER['SCRIPT_NAME'],"admin.php") && !$include_buttons && !$all_fields) {
			$sql_ins .= " AND fieldtype!='Button' AND underwaterfield!='y'";
			qlog(INFO, "Buttons and underwater fields are excluded (this page != edit.php && != trigger.php && != flextable.php)");
		}
		if (!stristr($_SERVER['SCRIPT_NAME'],"edit.php") && !stristr($_SERVER['SCRIPT_NAME'],"flextable.php") && !$fid) {
			$sql_ins .= " AND fieldtype!='comment'";
			qlog(INFO, "Comments are excluded (this page != edit.php && != flextable.php)");

		}

		$ret = array();

		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE tabletype='entity' " . $sql_ins . " AND deleted!='y' ORDER BY ordering";

		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			$row['name'] = strip_tags(br2nl($row['name']));
			if (CheckExtraFieldAccess($row['id'], $GLOBALS['USERID']) == "ok" || CheckExtraFieldAccess($row['id'], $GLOBALS['USERID']) == "readonly" || $all_fields) {
				if ($row['displaylistname'] == "") {
					$row['displaylistname'] = $row['name'];
				}
				$ret[] = $row;
			}
		}

		if (!$fid) {
			qlog(INFO, "Extra fields list returned");
		} else {
			qlog(INFO, "Extra fields list returned for field " . $fid);
		}

		for ($i=0 ; $i<sizeof($ret) ; $i ++) {
			if (strstr($ret[$i]['fieldtype'], "[copyfield")) {
				$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $ret[$i]['fieldtype']));
				$tmpnam = $ret[$i]['name'];
				$tmpacc = $ret[$i]['accessarray'];
				$tmpid  = $ret[$i]['id'];
				$colors = $ret[$i]['optioncolors'];
				$displaylistname = $ret[$i]['displaylistname'];
				for ($y=0 ; $y<sizeof($ret) ; $y ++) {
					if ($ret[$y]['id'] == $field_to_copy) {
						$ret[$i] = $ret[$y];
						$ret[$i]['name'] = $tmpnam;
						$ret[$i]['displaylistname'] = $displaylistname;
						$ret[$i]['accessarray'] = $tmpacc;
						$ret[$i]['id'] = $tmpid;
	//					$colors = $ret[$i]['optioncolors'];
						$ret[$i]['optioncolors'] = $colors;
						$ret[$i]['copied'] = true;
					}
				}
			}

		}

		foreach ($ret AS $f) {
			$GLOBALS['PageCache']['ExtraFieldsSpecific'][$f['id']][0] = $f;
		}

		if (!$include_buttons && $all_fields) {
			$GLOBALS['PageCache']['ExtraFields'] = $ret;
		} 
		if ($fid) {
			return($GLOBALS['PageCache']['ExtraFieldsSpecific'][$fid]);
		} else {
			return($ret);
		}
	}
}
function GetExtraFlexTableFields($flextable_nr, $efid = false, $include_buttons = false, $no_cache=false) {

	if ($no_cache) {
		unset($GLOBALS['PageCache']['ExtraFlexTableFields']);
	}
	
	$ViewOnTable = GetAttribute("flextable", "ViewOnTable", $flextable_nr);

	if ($ViewOnTable != "") {
		if ($ViewOnTable == "entity") {
			return(GetExtraFields($efid));
		} elseif ($ViewOnTable == "customer") {
			return(GetExtraCustomerFields($efid));
		} else {
			return(GetExtraFlexTableFields(str_replace("flextable", "", $ViewOnTable), $efid, $include_buttons, $no_cache));
		}
	}

	if (is_array($GLOBALS['PageCache']['ExtraFlexTableFields'][$flextable_nr])) { 
		return($GLOBALS['PageCache']['ExtraFlexTableFields'][$flextable_nr]);
	} else {

		if (!stristr($_SERVER['SCRIPT_NAME'],"edit.php") && !stristr($_SERVER['SCRIPT_NAME'],"trigger.php") && (!stristr($_SERVER['SCRIPT_NAME'],"flextable.php")) && (!stristr($_SERVER['SCRIPT_NAME'],"admin.php")) && (!stristr($_SERVER['SCRIPT_NAME'],"extrafieldconditions.php")) && !$include_buttons) {

			$sql_ins .= " AND fieldtype!='Button'  AND underwaterfield!='y'";

			qlog(INFO, "Buttons are excluded (this page != edit.php && != trigger.php != flextable.php)");
		}
		$ret = array();
		if (is_numeric($efid)) {
			$sql_ins = " AND id='" . mres($efid) . "' ";
		}
		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE tabletype='" . $flextable_nr . "' " . $sql_ins . " AND deleted!='y' ORDER BY ordering";

		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			$row['name'] = strip_tags(br2nl($row['name']));
				if (CheckExtraFieldAccess($row['id'], $GLOBALS['USERID']) == "ok" || CheckExtraFieldAccess($row['id'], $GLOBALS['USERID']) == "readonly") {
					if ($row['displaylistname'] == "") {
						$row['displaylistname'] = $row['name'];
					}
				array_push($ret, $row);
				}
		}
		
		qlog(INFO, "Extra fields for FlexTable " . $flextable_nr . " returned (" . sizeof($ret) . " fields)");

		for ($i=0 ; $i<sizeof($ret) ; $i ++) {
			if (strstr($ret[$i]['fieldtype'], "[copyfield")) {
				$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $ret[$i]['fieldtype']));
				$tmpnam = $ret[$i]['name'];
				$tmpacc = $ret[$i]['accessarray'];
				$tmpid  = $ret[$i]['id'];
				$colors = $ret[$i]['optioncolors'];
				$displaylistname = $ret[$i]['displaylistname'];
				
				for ($y=0 ; $y<sizeof($ret) ; $y ++) {
					if ($ret[$y]['id'] == $field_to_copy) {
						$ret[$i] = $ret[$y];
						$ret[$i]['name'] = $tmpnam;
						$ret[$i]['accessarray'] = $tmpacc;
						$ret[$i]['id'] = $tmpid;
						$ret[$i]['displaylistname'] = $displaylistname;
						$ret[$i]['optioncolors'] = $colors;
						$ret[$i]['copied'] = true;
					}
				}
				qlog(INFO, "Field " . $ret[$i]['id'] . " has a property copy setting - copy from " . $field_to_copy);
			}
		}
		if (!$efid) {
			$GLOBALS['PageCache']['ExtraFlexTableFields'][$flextable_nr] = $ret;
		}
		return($ret);
	}
}

function GetExtraUserFields() {
	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE tabletype='user' AND deleted!='y' ORDER BY ordering";
	
	$result = mcq($sql,$db);

	$ret = array();
	while ($row = mysql_fetch_array($result)) {
		$row['name'] = strip_tags(br2nl($row['name']));
			if ($row['displaylistname'] == "") {
				$row['displaylistname'] = $row['name'];
			}
			array_push($ret, $row);
	}

	return($ret);
}
function GetExtraGroupFields($efid = false) {
	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE tabletype='group' AND deleted!='y' ORDER BY ordering";
	$result = mcq($sql,$db);
	$ret = array();
	while ($row = mysql_fetch_array($result)) {
		$row['name'] = strip_tags(br2nl($row['name']));
			if ($row['displaylistname'] == "") {
				$row['displaylistname'] = $row['name'];
			}
			array_push($ret, $row);
	}
	return($ret);
}

function GetExtraCustomerFields($efid = false, $all_fields=false) {
	if ($GLOBALS['PageCache']['ExtraCustomerFields'][$efid] != "" && $efid != "" && !$all_fields) { 
		return($GLOBALS['PageCache']['ExtraCustomerFields'][$efid]);
	} elseif (!$efid && is_array($GLOBALS['PageCache']['ExtraCustomerFields']) && !$all_fields) {
		return($GLOBALS['PageCache']['ExtraCustomerFields']);
	} else {

		$ret = array();
		if (is_numeric($efid)) {
			$sql_ins = " AND id='" . mres($efid) . "' ";
		}
		if (!$all_fields) {
			$af_ins = " AND fieldtype!='comment' ";
		}
		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE tabletype='customer' " . $af_ins . " " . $sql_ins . " AND deleted!='y' ORDER BY ordering";
		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			$row['name'] = strip_tags(br2nl($row['name']));
			if (CheckExtraFieldAccess($row['id'], $GLOBALS['USERID']) == "ok" || CheckExtraFieldAccess($row['id'], $GLOBALS['USERID']) == "readonly") {
				if ($row['displaylistname'] == "") {
					$row['displaylistname'] = $row['name'];
				}
				array_push($ret, $row);
			}
		}
		qlog(INFO, "Extra customer fields list returned");

		for ($i=0 ; $i<sizeof($ret) ; $i ++) {
			if (strstr($ret[$i]['fieldtype'], "[copyfield")) {
				$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $ret[$i]['fieldtype']));
				$tmpnam = $ret[$i]['name'];
				$tmpacc = $ret[$i]['accessarray'];
				$tmpid  = $ret[$i]['id'];
				$colors = $ret[$i]['optioncolors'];
				$displaylistname = $ret[$i]['displaylistname'];

				for ($y=0 ; $y<sizeof($ret) ; $y ++) {
					if ($ret[$y]['id'] == $field_to_copy) {
						$ret[$i] = $ret[$y];
						$ret[$i]['displaylistname'] = $displaylistname;
						$ret[$i]['name'] = $tmpnam;
						$ret[$i]['accessarray'] = $tmpacc;
						$ret[$i]['id'] = $tmpid;
						$ret[$i]['optioncolors'] = $colors;
						$ret[$i]['copied'] = true;
					}
				}
				qlog(INFO, "Field " . $ret[$i]['id'] . " has a property copy setting - copy from " . $field_to_copy);

			}
		}
		if (!$efid && !$all_fields) {
			$GLOBALS['PageCache']['ExtraCustomerFields'] = $ret;
		} elseif (!$all_fields) {
			$GLOBALS['PageCache']['ExtraCustomerFields'][$efid] = $ret;
		}
		return($ret);
	}

}
function AvailableFormTags() {
			print "<a class='plainlink' onclick=\"document.getElementById('formtags').style.display='block';\">List of available entity form tags</a>";
			print "<div id='formtags' style='display: none;'>";
			print "<table border='0' width='100%'>";
			print "<tr><td colspan='2'><span class='noway'>Entity form elements</span><br><br><strong>Form elements:</strong></td></tr>";
			print "<tr><td>Save button (*)</td><td>#SAVEBUTTON#</td></tr>";
			print "<tr><td>Save as new entity button </td><td>#SAVEASNEWBUTTON#</td></tr>";
			print "<tr><td>Cancel button (appears only in popup windows)</td><td>#CANCELBUTTON#</td></tr>";
			print "<tr><td>Next/previous arrows</td><td>#ARROWS#</td></tr>";
			print "<tr><td>Parent/child information and box</td><td>#PARENTBOX#</td></tr>";
			?>
			<tr><td><img src='images/pdf.gif' alt=''> PDF-report download *</td><td>#PDFICON#</td></tr>
			<tr><td><img src='images/graph.gif' style='border: 1px' alt=''> Activity graph *</td><td>#ACTICON#</td></tr>
			<tr><td><img src='images/word.gif' alt=''> Entity RTF Report *</td><td>#REPORTICON#</td></tr>
			<tr><td><img src='images/journal.gif' alt=''> Journal icon *</td><td>#JOURNALICON#</td></tr>
			<tr><td><img src='images/lock.png' alt=''> Lock (only if entity is locked) *</td><td>#LOCKICON#</td></tr>
			<tr><td><img src='images/info.gif' alt=''> Info popup bullet (enclose text with tags)</td><td>@INFO@ ..... @ENDINFO@</td></tr>
			<tr><td> Show only on new entities (enclose text with tags)</td><td>@NEWONLY@ ..... @ENDNEWONLY@</td></tr>
			<tr><td> Show only on existing entities (enclose text with tags)</td><td>@XONLY@ ..... @ENDXONLY@</td></tr>
			<?php
			print "<tr><td>List of attached files *</td><td>#FILELIST#</td></tr>";
			print "<tr><td>File-upload box and file list</td><td>#FILEBOX#</td></tr>";
			print "<tr><td colspan='2'><em> Tags marked with an asterisk (*) will only be shown on entities which have been saved at least once.</em></td></tr>";
			print "<tr><td colspan='2'><br><strong>Data fields:</strong><br><em>If data field names are enclosed by @'s instead of #'s, the value of the field<br>will be printed instead of the form element, just like normal templates.</em><br></td></tr>";
			print "<tr><td>Category box</td><td>#CATEGORY#</td></tr>";
			print "<tr><td>Owner select box</td><td>#OWNER#</td></tr>";
			print "<tr><td>Additional owner fast-search box</td><td>#OSBOX#</td></tr>";
			print "<tr><td>Assignee select box</td><td>#ASSIGNEE#</td></tr>";
			print "<tr><td>Additional assignee fast-search box</td><td>#ASBOX#</td></tr>";
			print "<tr><td>Customer select box (*)</td><td>#CUSTOMER#</td></tr>";
			print "<tr><td>Additional customer fast-search box</td><td>#CSBOX#</td></tr>";
			print "<tr><td>Duedate popup box</td><td>#DUEDATE#</td></tr>";
			print "<tr><td>Duetime select box</td><td>#DUETIME#</td></tr>";
			print "<tr><td>Status select box</td><td>#STATUS#</td></tr>";
			print "<tr><td>Additional status fast-search box</td><td>#SSBOX#</td></tr>";
			print "<tr><td>Priority select box</td><td>#PRIORITY#</td></tr>";
			print "<tr><td>Additional priority fast-search box</td><td>#PSSBOX#</td></tr>";
			print "<tr><td>Main content text-area</td><td>#CONTENTS#</td></tr>";
			print "<tr><td>List of customer contacts</td><td>@LISTOFCONTACTS@</td></tr>";
//			print "<tr><td>Select box of customer contacts</td><td>#LISTOFCONTACTS#</td></tr>";
//			print "<tr><td>Selected customer contact</td><td>@CUSTCONTACT@</td></tr>";

			print "<tr><td>Delete select box</td><td>#DELETEBOX#</td></tr>";
			print "<tr><td>Private select box</td><td>#PRIVATEBOX#</td></tr>";

			print "<tr><td colspan='2'><br><strong>Flextable specific fields:</strong></td></tr>";
			print "<tr><td>Entity/customer refer field (editable):</td><td>#REFERFIELD#</td></tr>";
			print "<tr><td>Entity/customer refer fast-search box :</td><td>#REFERSBOX#</td></tr>";
			print "<tr><td>Entity/customer reference (hidden):</td><td>@REFERFIELD@</td></tr>";
			print "<tr><td colspan='2'><br><strong>Extra data fields:</strong></td></tr>";
			$list = GetExtraFields();
			unset($count);
			foreach ($list AS $element) {
				print "<tr><td>" . $element['name'] . "</td><td>" . $ins . "#EFID" . $element['id'] . "#</td></tr>";
				if ($element['fieldtype'] == "drop-down") {
					$element['options'] = @unserialize($element['options']);
					foreach ($element['options'] AS $option) {
						print "<tr><td>Hidden field: " . htme($element['name']) . " with pre-defined value " . htme($option) . "</td><td>#HEFID" . $element['id'] . "[" . htme($option) . "]#</td></tr>";
					}
				}
			}
			print "</table></div>";
}
function AvailableCustomerFormTags() {
			print "<a class='arrow' onclick=\"document.getElementById('customertags').style.display='block';\">List of available customer form tags</a>";
			print "<div id='customertags' style='display: none;'>";
			print "<table width='100%'>";
			print "<tr><td colspan='2'><span class='noway'>Customer form elements</span><br><br><strong>Form elements:</strong></td></tr>";
			print "<tr><td>Save button (*)</td><td>#SAVEBUTTON#</td></tr>";
			print "<tr><td>Delete button </td><td>#DELETEBUTTON#</td></tr>";
			print "<tr><td>Cancel button (appears only in popup windows)</td><td>#CANCELBUTTON#</td></tr>";
			print "<tr><td>Next/previous arrows</td><td>#ARROWS#</td></tr>";
			?>
			<tr><td><img src='images/pdf.gif'  alt=''> PDF-report download</td><td>#PDFICON#</td></tr>
			<tr><td><img src='images/graph.gif' style='border: 1px' alt=''> Activity graph</td><td>#ACTICON#</td></tr>
			<tr><td><img src='images/journal.gif'  alt=''> Journal icon</td><td>#JOURNALICON#</td></tr>
			<tr><td> Read-only checkbox</td><td>#READONLY#</td></tr>
			<tr><td> Active checkbox</td><td>#ACTIVE#</td></tr>
			<tr><td> E-mail owner checkbox</td><td>#EMAILOWNERCHECKBOX#</td></tr>
			<tr><td> Number of entities belonging to customer</td><td>#NUM_OF_ENT#</td></tr>

			<?php
			print "<tr><td>List of customer contacts</td><td>#LISTOFCONTACTS#</td></tr>";
			print "<tr><td>List of attached files</td><td>#FILELIST#</td></tr>";
			print "<tr><td>File-upload box</td><td>#FILEBOX#</td></tr>";
			print "<tr><td colspan='2'><br><strong>Data fields:</strong><br><em>If data field names are enclosed by @'s instead of #'s, the value of the field<br>will be printed instead of the form element, just like normal templates.</em><br></td></tr>";
			print "<tr><td colspan='2'><br><strong>Main fields:</strong></td></tr>";
			print "<tr><td colspan='2'>#CUSTOMER#</td></tr>";
			print "<tr><td colspan='2'>#CID#</td></tr>";
			print "<tr><td colspan='2'>#CUSTOMER_CONTACT#</td></tr>";
			print "<tr><td colspan='2'>#CUSTOMER_ADDRESS#</td></tr>";
			print "<tr><td colspan='2'>#CONTACT_PHONE#</td></tr>";
			print "<tr><td colspan='2'>#CONTACT_EMAIL#</td></tr>";
			print "<tr><td colspan='2'>#CONTACT_TITLE#</td></tr>";
			print "<tr><td colspan='2'>#CUST_HOMEPAGE#</td></tr>";
			print "<tr><td colspan='2'>#CUST_REMARKS#</td></tr>";
			print "<tr><td colspan='2'>#CUST_OWNER#</td></tr>";
			print "<tr><td colspan='2'><br><strong>Extra customer fields:</strong></td></tr>";
			$list = GetExtraCustomerFields();
			unset($count);
			foreach ($list AS $element) {
				print "<tr><td>" . $element['name'] . "</td><td>" . $ins . "#EFID" . $element['id'] . "#</td></tr>";
			}

			print "</table></div>";
}
function AvailableTags() {
	print "<a class='arrow' onclick=\"document.getElementById('generictags').style.display='block';\">List of available tags</a>";
	print "<div id='generictags' style='display: none;'>";
	?>
	<table class="crm">
	<tr><td colspan='2'><span class='noway'>Generic tags</span></td></tr>
	<tr><td>@TITLE@</td><td>The title of this repository</td></tr>
	<tr><td>@ADMEMAIL@</td><td>The administrators' e-mail address</td></tr>
	<tr><td>@CHAT@</td><td>Chat-window (all users)</td></tr>
	<tr><td>@DATE@</td><td>The date at the moment of processing</td></tr>
	<tr><td>@UNFORMATTED_DATE@</td><td>The date at the moment of processing (unformatted - use this for setting values only)</td></tr>
	<tr><td>@TIME@</td><td>The time at the moment of processing</td></tr>
	<tr><td>@USER@</td><td>The current user's full name</td></tr>
	<tr><td>%PAGEBREAK%</td><td>Page break (only for RTF and PDF templates)</td></tr>
	<tr><td colspan='2'>&nbsp;</td></tr>
	<tr><td colspan='2'><span class='noway'>Language tags</span></td></tr>
	<tr><td>[[anytag]]</td><td>The value of language tag "anytag" in the current language</td></tr>
	<tr><td colspan='2'><span class='noway'>Dashboard tags</span></td></tr>
	<tr><td>#TODAY#</td><td>Today's entities</td></tr>
	<tr><td>#RECENT#</td><td>Recent entities</td></tr>
	<tr><td>#OWNED#</td><td>All owned entities</td></tr>
	<tr><td>#ASSIGNED#</td><td>All assigned entities</td></tr>
	<tr><td>#MESSAGES#</td><td>Internal messages</td></tr>
	<tr><td>#CALENDAR#</td><td>Calendar</td></tr>
	<tr><td>#PERSSTATS#</td><td>Personal statistics</td></tr>
	<tr><td>#REPOS#</td><td>Repository switcher</td></tr>
	<tr><td>#NAV#</td><td>Main page navigation pane</td></tr>

	<tr><td>#ENTITYSEARCH#</td><td>Entity search box</td></tr>
	<tr><td>#CUSTOMERSEARCH#</td><td>Customer search box</td></tr>
	<tr><td>#DASHBOARDOPTIONS#</td><td>Dashboard options form</td></tr>
	<tr><td>#CLOCK#</td><td>Javascript Clock</td></tr>

	<tr><td colspan='2'>&nbsp;</td></tr>
	<tr><td colspan='2'><span class='noway'>Customer read-only tags</span></td></tr>
	<tr><td>@CUSTOMER@</td><td>The name of the customer</td></tr>
	<tr><td>@CID@</td><td>The ID of the customer</td></tr>
	<tr><td>@CUSTOMER_CONTACT@</td><td>The customer contact</td></tr>
	<tr><td>@CUSTOMER_ADDRESS@</td><td>The customer address</td></tr>
	<tr><td>@CONTACT_PHONE@</td><td>The customer phone number</td></tr>
	<tr><td>@CONTACT_EMAIL@</td><td>The customer e-mail address</td></tr>
	<tr><td>@CONTACT_TITLE@</td><td>The customer contact title</td></tr>
	<tr><td>@CUST_HOMEPAGE@</td><td>The website of the customer</td></tr>
	<tr><td>@CUST_REMARKS@</td><td>The remarks about the customer</td></tr>
	<tr><td>@CUST_OWNER@</td><td>The <?php echo $GLOBALS['PRODUCT'];?>-owner of the customer</td></tr>
	<tr><td>@LISTOFCONTACTS@</td><td>List of all customer contacts</td></tr>
	<tr><td colspan='2'>&nbsp;</td></tr>
	<tr><td colspan='2'><span class='noway'>Extra read-only customer fields</span></td></tr>
	<?php
	$list = GetExtraCustomerFields();
	unset($count);
	foreach ($list AS $element) {
		if ($element['fieldtype'] !=  "Button") {
			print "<tr><td>@EFID" . $element['id'] . "@</td><td>for field " . $element['name'] . "</td></tr>";
		}
	}
	print "<tr><td colspan='2'>&nbsp;</td></tr>";
	print "<tr><td colspan='2'><span class='noway'>FlexTables (one entity to many flexrecords)</span></td></tr>";
	$list = GetFlexTableDefinitions(false, "one-to-many");
	unset($count);
	foreach ($list AS $element) {
			print "<tr><td>@FLEXTABLE" . $element['recordid'] . "@</td><td>for Flextable " . $element['tablename'] . "</td></tr>";

	}
	?>



	<tr><td colspan='2'>&nbsp;</td></tr>
	<tr><td colspan='2'><span class='noway'>Entity read-only tags</span></td></tr>
	<tr><td>@ENTITYID@</td><td>The entity number</td></tr>
	<tr><td>@EID@</td><td>The entity number (short)</td></tr>
	<tr><td>@CATEGORY@</td><td>The category</td></tr>
	<tr><td>@CATEGORY_AUTOCHANGE@</td><td>The category (text changes when category is edited, only for forms)</td></tr>
	<tr><td>@OWNER@</td><td>The owner (readable)</td></tr>
	<tr><td>@ASSIGNEE@</td><td>The assignee (readable)</td></tr>
	<tr><td>@CUSTOMER@</td><td>The customer (readable)</td></tr>
	<tr><td>@DUEDATE@</td><td>The due-date</td></tr>
	<tr><td>@STARTDATE@</td><td>The startdate</td></tr>
	<tr><td>@STATUS@</td><td>The status</td></tr>
	<tr><td>@PRIORITY@</td><td>The priority</td></tr>
	<tr><td>@CONTENTS@</td><td>The main body content</td></tr>
	<tr><td>@AGE@</td><td>The age of the entity</td></tr>
	<tr><td>@KEY@</td><td>The unique entity identifier (for e-mail reply reference)</td></tr>
	<tr><td>@FT12|ROW1|EFID23@</td><td>Show the value stored in extra field 23 in the first (valid referring) row of flextable 12</td></tr>
	<tr><td>@NUM_ATTM@</td><td>The number of attachments</td></tr>
	<tr><td colspan='2'>&nbsp;</td></tr>
	<tr><td colspan='2'><span class='noway'>Extra read-only entity fields</span></td></tr>
	<?php
	$list = GetExtraFields();
	foreach ($list AS $element) {
		if ($element['fieldtype'] != "Button") {
			print "<tr><td>@EFID" . $element['id'] . "@</td><td>for field " . $element['name'] . "</td></tr>";
		}
	}
	?>
	<tr><td colspan='2'>&nbsp;</td></tr>
	<tr><td colspan='2'><span class='noway'>E-mail to <?php echo $GLOBALS['PRODUCT'];?> users tag</span></td></tr>
	<tr><td>@LIST@</td><td>The list of entities assigned to that user</td></tr>
	<tr><td colspan='2'>&nbsp;</td></tr>
	<tr><td colspan='2'><span class='noway'>Summarized extra fields</span></td></tr>
	<?php
	$list = GetExtraFields();
	foreach ($list AS $element) {
		print "<tr><td>@SUMEFID" . $element['id'] . "@</td><td>for field " . $element['name'] . "</td></tr>";
	}
	print "<tr><td colspan='2'>&nbsp;</td></tr>";
	print "<tr><td colspan='2'><span class='noway'>Specific FlexTable form fields</span></td></tr>";
	print "<tr><td>@RECORD@</td><td>The record id</td></tr>";
	print "<tr><td>@REFERLIST@</td><td>A summary of all entity, customer and other flextable records referring to the current record (in HTML)</td></tr>";
	print "<tr><td colspan='2'>&nbsp;</td></tr>";
	print "<tr><td colspan='2'><span class='noway'>PDF-Specific barcode tags</span></td></tr>";
	print "<tr><td>^^BC_C39E^^@EID@^^H40^^W70^^B0^^ENDBC^^</td><td>Print a barcode of type C39E, height 40px, width 70px, no border with value @EID@.</td></tr>";
	print "<tr><td>^^BC_KIX^^@CUSTOMER@^^H60^^W120^^B1^^ENDBC^^</td><td>Print a barcode of type KIX, height 60px, width 120px, a border with value @CUSTOMER@.</td></tr>";
	print "<tr><td>^^BC_C128A^^@CATEGORY@^^ENDBC^^</td><td>Print a barcode of type C128A, height 40px (default), width 30px (default), no border (default) with value @CATEGORY@.</td></tr>";
	print "<tr><td>Supported bar code types</td><td>";
	?>
	<table>
		<tr><td>Name/description</td><td>Code to use in tag</td></tr>
		<tr><td>CODE 39 - ANSI MH10.8M-1983 - USD-3 - 3 of 9</td><td>C39</td></tr>
		<tr><td>CODE 39 + CHECKSUM</td><td>C39+</td></tr>
		<tr><td>CODE 39 EXTENDED</td><td>C39E</td></tr>
		<tr><td>CODE 39 EXTENDED + CHECKSUM</td><td>C39E+</td></tr>
		<tr><td>CODE 93 - USS-93</td><td>C93</td></tr>
		<tr><td>Standard 2 of 5</td><td>S25</td></tr>
		<tr><td>Standard 2 of 5 + CHECKSUM</td><td>S25+</td></tr>
		<tr><td>Interleaved 2 of 5</td><td>I25</td></tr>
		<tr><td>Interleaved 2 of 5 + CHECKSUM</td><td>I25+</td></tr>
		<tr><td>CODE 128 AUTO</td><td>C128</td></tr>
		<tr><td>CODE 128 A</td><td>C128A</td></tr>
		<tr><td>CODE 128 B</td><td>C128B</td></tr>
		<tr><td>CODE 128 C</td><td>C128C</td></tr>
		<tr><td>EAN 8</td><td>EAN8</td></tr>
		<tr><td>EAN 13</td><td>EAN13</td></tr>
		<tr><td>UPC-A</td><td>UPCA</td></tr>
		<tr><td>UPC-E</td><td>UPCE</td></tr>
		<tr><td>5-Digits UPC-Based Extention</td><td>EAN5</td></tr>
		<tr><td>2-Digits UPC-Based Extention</td><td>EAN2</td></tr>
		<tr><td>MSI</td><td>MSI</td></tr>
		<tr><td>MSI + CHECKSUM (module 11)</td><td>MSI+</td></tr>
		<tr><td>CODABAR</td><td>CODABAR</td></tr>
		<tr><td>CODE 11</td><td>CODE11</td></tr>
		<tr><td>PHARMACODE</td><td>PHARMA</td></tr>
		<tr><td>PHARMACODE TWO-TRACKS</td><td>PHARMA2T</td></tr>
		<tr><td>IMB - Intelligent Mail Barcode - Onecode - USPS-B-3200</td><td>IMB</td></tr>
		<tr><td>POSTNET</td><td>POSTNET</td></tr>
		<tr><td>PLANET</td><td>PLANET</td></tr>
		<tr><td>RMS4CC (Royal Mail 4-state Customer Code) - CBC (Customer Bar Code)</td><td>RMS4CC</td></tr>
		<tr><td>KIX (Klant index - Customer index)</td><td>KIX</td></tr>
	</table>
<?php
	print "</td></tr>";
	print "</table></div>";
}
// Returns a timestamp from a string.  Assumes en_GB format where ambiguous.
function NLDateToTimestamp($value, $add=false)
{
   // If it looks like a UK date dd/mm/yy, reformat to US date mm/dd/yy so strtotime can parse it.
   $reformatted = preg_replace("/^\s*([0-9]{1,2})[\/\. -]+([0-9]{1,2})[\/\. -]+([0-9]{1,4})/", "\\2/\\1/\\3", $value);
   return strtotime($reformatted . $add);
}
/**
* Function TransformTime
*
* Transforms a given time to the american format
* if the date format is set to mm-dd-yyyy (global setting)
*
* @param	date_to_print	The european-formatted date in dd-mm-yyyy format
*/
function TransformTime($time_to_print) {
	if ($time_to_print == "" || strstr($time_to_print, "none")) {
		return("");
	} else {
		
		$h = substr($time_to_print,0,2);
		$m = substr($time_to_print,3,2);

		if ($GLOBALS['UC']['DateFormat'] =="mm-dd-yyyy") {
			if (strlen($time_to_print)!=5) {
				$Return = $time_to_print;
			} else {
				
				if ($h > 12) {
					$h = ($h - 12);
					
					$m .= " pm";
				} elseif ($h == 12) {
					$m .= " pm";
				} else {
					$m .= " am";
				}
				if (strlen($h) == 1) $h = "0" . $h;
				$Return = $h . ":" . $m;
			}
	
		} else {
			$Return = $h . ":" . $m;
		}
		qlog(INFO, "Return: $Return");
		return($Return);
	}
}
/**
* Function TransformDate
*
* Transforms a given date to the american format
* if the date format is set to mm-dd-yyyy (global setting)
*
* @param	date_to_print	The european-formatted date in dd-mm-yyyy format
*/
function TransformDate($date_to_print) {
	if ($date_to_print == "" || strstr($date_to_print, "none")) {
		return("");
	} else {
		if ($GLOBALS['UC']['DateFormat'] =="mm-dd-yyyy") {
			if (strlen($date_to_print)!=10) {
				$Return = $date_to_print;
			} else {
				$d = substr($date_to_print,0,2);
				$m = substr($date_to_print,3,2);
				$y = substr($date_to_print,6,4);
				$Return = $m . "-" . $d . "-" . $y;
			}
		} elseif ($GLOBALS['UC']['DateFormat'] =="yyyy-mm-dd") {
			if (strlen($date_to_print)!=10 && $date_to_print!="" && $date_to_print!="<span style='color: #FF3300';'>none</span>") {
				qlog(ERROR, "ERROR parsing date: " .  $date_to_print);
				$Return = $date_to_print;
			} else {
				$d = substr($date_to_print,0,2);
				$m = substr($date_to_print,3,2);
				$y = substr($date_to_print,6,4);
				$Return = $y . "-" . $m . "-" . $d;
			}
		} else {
			$Return = $date_to_print;
		}
		qlog(INFO, "Return: $Return");
		return($Return);
	}
}
function NLDate2Epoch($date) {
	if (!$date) {
		return(false);
	} else {
		$tmp = explode("-", $date);
		return(mktime(0,0,0,$tmp[1],$tmp[0],$tmp[2]));
	}
}
function NLDate2INTLDate($date) {
		$d = substr($date,0,2);
		$m = substr($date,3,2);
		$y = substr($date,6,4);
		return($y . "-" . $m . "-" . $d);
}
function INTLDate2NLDate($date) {
		$d = substr($date,8,2);
		$m = substr($date,5,2);
		$y = substr($date,0,4);
		return($d . "-" . $m . "-" . $y);
}
function SetEntityDuedate($date, $eid) {
	mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET duedate='" . mres($date) . "', sqldate='" . mres(NLDate2INTLDate($date)) . "' WHERE eid='" . mres($eid) . "'");
}
function EntityExtendDuedate($days_to_add, $eid) {
	// This function extends a duedate of an entity with days_to_add days
	// This function will do nothing if the entity doens't have a duedate
	// Duedates are stored as dd-mm-yyyy (e.g. 14-12-2005)

	$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
	if ($row['duedate'] != "" && $row['duedate'] != "--") {
		$NewDateTS = NLDateToTimestamp($row['duedate'], "+ " . $days_to_add . " days");
		$Newduedate = date('d-m-Y', $NewDateTS);
		$Newduedatesql = date('Y-m-d', $NewDateTS);
		qlog(INFO, "Due-date of entity " . $eid . " set to " . $Newduedate);
		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET duedate='" . mres($Newduedate) . "', sqldate='" . mres($Newduedatesql) . "' WHERE eid='" . mres($eid) . "'";
		mcq($sql, $db);

	} else {
		qlog(INFO, "Duedate not re-set! This entity doesn't have a duedate!");
	}


	return($x);
}
function EntityExtendDuedateDaysFromNow($days_from_now, $eid) {

	// This function sets a duedate of an entity with days_from_now days
	// Duedates are stored as dd-mm-yyyy (e.g. 14-12-2005)

	$seconds_from_now = $days_from_now * 86400;

	if ($days_from_now == "delete") {
		qlog(INFO, "Due-date of entity " . $eid . " was deleted");
		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET duedate='', sqldate='' WHERE eid='" . mres($eid) . "'";
		mcq($sql, $db);
	} else {
		if ($days_from_now > 0) {
			$NewDateTS = date('U') + $seconds_from_now;
			$Newduedate = date('d-m-Y', $NewDateTS);
			$Newduedatesql = date('Y-m-d', $NewDateTSsql);
		} else {
			$Newduedate = date('d-m-Y');
			$Newduedatesql = date('Y-d-m');
		}
		qlog(INFO, "Due-date of entity " . $eid . " set to " . $Newduedate);

		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET duedate='" . mres($Newduedate) . "', sqldate='" . mres($NewDateTSsql) . "' WHERE eid='" . mres($eid) . "'";

		mcq($sql, $db);
	}

	return($x);
}
function ProcessTriggers($onchange,$eid,$to_value,$log=false,$flextableid=false, $customer_trigger=false) {
	global $add_to_journal;

	if (GetExtraFieldTableType($onchange) != "entity" && GetExtraFieldTableType($onchange) != "customer" && !$flextableid) {
		$flextableid = GetExtraFieldTableType($onchange);
	}
	if ($flextableid) {
		$flex = true;
		$flextablerecord = $eid;
		$eid = "0";
		$ft = GetFlexTableDefinitions($flextableid);
		$name = $ft[0]['tablename'];
		$reference = $ft[0]['refers_to'];
		$orientation = $ft[0]['orientation'];
		$formid = $ft[0]['formid'];
		$currow = GetFlexTableRow($flextablerecord, $flextableid);
		$ent = $currow['refer'];

		if (IsValidEID($ent) && $ent != "_new_" && $reference == "entity") {
			// Flexrecord is joined to a valid eid
			$eid = $ent;
			$cid = GetEntityCustomer($eid);
			
		} elseif ($reference == "customer" && IsValidCID($ent)) {
			$cid = $ent;
		}
		$journalType = "flextable" . $flextableid;
		$journalEntity = $flextablerecord;

		
	} else {
		$journalType = GetExtraFieldTableType($onchange);
		$journalEntity = $eid;
	}

	if ($onchange == "customer_add" || $onchange == "customer_change" || $journalType == "customer" || $customer_trigger) {
		$cid = $eid;
		$eid = "0";
		$customer_trigger = true;
		$customer = $cid;
	}
	qlog(INFO, "check $onchange");

	// Clear the access cache tables
	if (IsValidEID($eid)) {
		ClearAccessCache($eid,'e');
		$entity = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid=" . $eid);
	}

	if ($_COOKIE['disable_triggers'] == "y" && is_administrator()) {
		qlog(WARNING, "WARNING - Not processing triggers, they are disabled for this session!");
	} else {
		// Get triggers matching this criterium

		if ($flextableid) {
			$tmp = GetFlexTableDefinitions($flextableid);
			$form = $tmp[0]['formid'];
		} else {
			$form = GetEntityFormID($eid);
			qlog(INFO, "ButtonPress $eid Form is $form");
		}
		$t_array = GetTriggers($onchange, $to_value, $form, $eid, $flextableid, $flextablerecord);

		// GetTriggers returns an array like this:
		/*

		Array
		(
			[0] => Array
				(
					[0] => mail user @1@		// action
					[1] => 4611					// template fileid
					[2] => n					// attach to entity/customer (y|n)
					[3] => 12					// report fileid or 2147483647 for PDF
					[4] => email/inmail			// E-mail or inmail
					[5] => admin_request		// The onchange value
					[6] => tid					// The trigger id
				)
			[1] => Array						// Event 2
				(
					[0] => mail owner			// action
					[1] => 0					// template fileid
					[2] => y					// attach to entity/customer (y|n)
					[3] => 12					// report fileid or 2147483647 for PDF
					[4] => email/inmail			// E-mail or inmail
					[5] => admin_request		// The onchange value
					[6] => tid					// The trigger id
				)
		)

		*/


		if ($log) {
			if ($t_array[5] == "admin_request") {
				$admin_message = "An action request was issued (" . $onchange . ") :<br><br>" . nl2br($log);
			} elseif ($t_array[5] == "log_error") {
				$admin_message = "An error occured (" . $onchange . ") :<br><br>" . nl2br($log);
			} elseif ($t_array[5] == "log_warning") {
				$admin_message = "A warning was issued (" . $onchange . ") :<br><br>" . nl2br($log);
			} else {
				$admin_message = "Some misterious things happened (" . $onchange . ") :<br><br>" . nl2br($log);
			}
		} elseif (!$customer_trigger) {
			// Select entity values
			$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'";
			$result = mcq($sql,$db);
			$entity = mysql_fetch_array($result);
			$customer = $entity['CRMcustomer'];
			$filename = $GLOBALS['PRODUCT'] . "-triggered_email-" . date("Fj-Y-Hi") . "h.HTML";
		}
		foreach($t_array AS $event) {
			$to_trigger_journal = array();
			$to_trigger_journal[] = "Evaluating '" . $event[0] . "'\n";

			if (GetAttribute("trigger", "RunWithSystemRights", $event[6]) == "Yes") { // Run trigger as admin user
				$park_userid = $GLOBALS['USERID'];
				$tmp = db_GetRow("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE administrator='yes' AND name NOT LIKE 'deleted_user%'");
				$to_trigger_journal[] = "This triggers uses elevated rights of user " . $tmp['id'];
				journal($journalEntity,"Trigger uses elevated access rights", $journalType);
				$GLOBALS['USERID'] = $tmp['id'];
				ClearAllRunningCache();
				InitUser($GLOBALS['USERID']);
			} else {
				$to_trigger_journal[] = "This trigger (" . $event[6] . ") uses NORMAL rights of current user";
			}
				
			qlog(INFO, "Evaluating '" . $event[0] . "'");

			


			if ($event[5] == "admin_request") {
				unset($_FILES);
				$admin_message = "An action request was issued (" . $onchange . ") :<br><br>" . nl2br($log);
			} elseif ($event[5] == "log_error") {
				unset($_FILES);
				$admin_message = "An error occured (" . $onchange . ") :<br><br>" . nl2br($log);
			} elseif ($event[5] == "log_warning") {
				unset($_FILES);
				$admin_message = "A warning was issued (" . $onchange . ") :<br><br>" . nl2br($log);
			} elseif ($event[5] == "user_login") {
				unset($_FILES);
				$admin_message = "A user logged in: " . $GLOBALS['USERID'] . ": " . GetUserName($GLOBALS['USERID']);
			} else {
				unset($_FILES);
				$admin_message = "Some misterious things happened (" . $onchange . ") :<br><br>" . nl2br($log);
			}

			if ($event[3] > 2147483646) {
				qlog(INFO, "PDF needs to be attached");
				$to_trigger_journal[] = "PDF needs to be attached";
				$report_attach = "PDF";
			} elseif ($event[3] == 2147483646) {
				qlog(INFO, "All entity attachments need to be attached");
				$to_trigger_journal[] = "All entity attachments need to be attached";
				$report_attach = "ALL_ATTM";
			} elseif ($event[3]!=0) {
				qlog(INFO, "Report " . $event[3] . " needs to be attached");
				$to_trigger_journal[] = "Report " . $event[3] . " needs to be attached";
				$report_attach = $event[3];
			} else {
				$report_attach = "";
			}
			
			$AlwaysAttachAllAttachmentsWhenMailing = GetAttribute("trigger", "AlwaysAttachAllAttachmentsWhenMailing", $event[6]);
			if ($AlwaysAttachAllAttachmentsWhenMailing == "Yes" && $report_attach != "ALL_ATTM") {
					$report_attach .= "ALL_ATTM";
			}
			if (GetAttribute("trigger", "WhenAttachingFilesToMailAlsoAttachEarlierMailAttachements", $event[6]) == "Yes") {
				$report_attach .= "+1";
			}
			if (GetAttribute("trigger", "WhenAttachingMailToRecordAlsoAttachAnyGeneratedReports", $event[6]) == "Yes") {
				$report_attach .= "+2";
			}
			

			if (strstr($event[0],"popup report:") && ($eid || $flextablerecord)) {

				$t = explode(":", $event[0]);
				qlog(INFO, "Report open parse on template  " . $t[1] . ", process entity " . $eid . " (by popup trigger)");
				$to_trigger_journal[] = "Report open parse on template  " . $t[1] . ", process entity " . $eid . " (by popup trigger)";
				?>
				<script type="text/javascript">
					newWindow = window.open('entityreport.php?SingleEntity=<?php echo $eid;?>&amp;template=<?php echo $t[1];?>&amp;attach_to_dossier=Yes&amp;attach_to_entity=Yes&amp;whichcust=t', 'Update<?php echo $eid;?>','width=640,height=630,directories=0,status=0,menuBar=0,scrollBars=1,resizable=1');
				</script>
				<?php
				
			} elseif (strstr($event[0],"Update EFID ") && ($eid || $flextablerecord)) {
				$subs = explode(" to value ", $event[0]);
				$efid = str_replace("Update EFID ", "", $subs[0]);
				$value = $subs[1];
				// As to-values may contain tags, it has to be ran through the parser
				if ($value != "") {
					if ($flex) $value = ParseFlexTableTemplate($flextableid, $flextablerecord, $value, false, true, false, "plain");	
					$value = ParseTemplateAll($value, $eid, false, "plain");

				}
				
				$to_trigger_journal[] = "Field EFID" . $efid . " updated from [" . GetExtraFieldValue($eid, $efid, false, true) . "] to [" . $value . "] by event trigger!";

				// Now update
				if (GetExtraFieldType($efid) == "diary") {
					
					if (GetExtraFieldTableType($efid) == "entity") {
						journal($journalEntity,"Field EFID" . $efid . " updated from [" . GetExtraFieldValue($eid, $efid, false, false) . "] to [" . $value . "] by event trigger!", $journalType);
						DataJournal($journalEntity, GetExtraFieldValue($eid, $efid, false, false) , $value, $efid);
						UpdateDiaryField($eid, $efid, "entity", $value, '');
					} elseif (GetExtraFieldTableType($efid) == "customer") {
						journal($journalEntity,"Field EFID" . $efid . " updated from [" . GetExtraCustomerFieldValue($cid, $efid, false, false) . "] to [" . $value . "] by event trigger!", $journalType);
						DataJournal($journalEntity,  GetExtraCustomerFieldValue($cid, $efid, false, false) , $value, $efid);
						UpdateDiaryField($cid, $efid, "entity", $value, '');
					} else {
						journal($journalEntity,"Field EFID" . $efid . " updated from [" . GetFlextableFieldValue($flextablerecord, $efid, GetExtraFieldTableType($efid), false, true, false) . "] to [" . $value . "] by event trigger!", $journalType);
						DataJournal($journalEntity,  GetFlextableFieldValue($flextablerecord, $efid, GetExtraFieldTableType($efid), false, true, false) , $value, $efid);
						UpdateDiaryField($flextablerecord, $efid, "entity", $value, '');
					}
				} else {
					if (GetExtraFieldTableType($efid) == "entity") {
						journal($journalEntity,"Field EFID" . $efid . " updated from [" . GetExtraFieldValue($eid, $efid, false, false) . "] to [" . $value . "] by event trigger!", $journalType);
						SetExtraFieldValueSimple($efid, $eid, $value);
						DataJournal($journalEntity, GetExtraFieldValue($eid, $efid, false, false) , $value, $efid);
					} elseif (GetExtraFieldTableType($efid) == "customer") {
						journal($journalEntity,"Field EFID" . $efid . " updated from [" . GetExtraCustomerFieldValue($cid, $efid, false, false) . "] to [" . $value . "] by event trigger!", $journalType);
						DataJournal($journalEntity, GetExtraCustomerFieldValue($cid, $efid, false, false) , $value, $efid);
						SetExtraCustomerFieldValueSimple($efid, $cid, $value);
					} else {
						journal($journalEntity,"Field EFID" . $efid . " updated from [" . GetFlextableFieldValue($flextablerecord, $efid, GetExtraFieldTableType($efid), false, true, false) . "] to [" . $value . "] by event trigger!", $journalType);
						DataJournal($journalEntity, GetFlextableFieldValue($flextablerecord, $efid, GetExtraFieldTableType($efid), false, true, false) , $value, $efid);
						SetExtraFlextableFieldValueSimple($efid, $flextablerecord, GetExtraFieldTableType($efid), $value);
					}
				}
				
				$triggered = true;
			} elseif (strstr($event[0],"run module ") && (IsValidCID($cid) && $customer_trigger)) {
				$mid = str_replace("run module ", "", $event[0]);
				qlog(INFO, "Running module " . $mid . " (trigger)");
				$to_trigger_journal[] = "Running module " . $mid . " (customer trigger)";
				$ret = RunModule($mid, false, false, false, false, $cid);
				journal($journalEntity,"Running module " . $mid . " (customer trigger)", $journalType);
				$triggered = true;

			} elseif (strstr($event[0],"run module ") && ($eid || $flextablerecord || $customer_trigger)) {
				$mid = str_replace("run module ", "", $event[0]);
				qlog(INFO, "Running module " . $mid . " (trigger)");
				$to_trigger_journal[] = "Running module " . $mid . " (trigger)";
				$ret = RunModule($mid, $eid, false, $flextablerecord, $flextableid);
				journal($journalEntity,"Running module " . $mid . " (trigger)", $journalType);
				$triggered = true;
			} elseif (strstr($event[0],"run module ") && !$eid && !$flextablerecord) {
				$mid = str_replace("run module ", "", $event[0]);
				qlog(INFO, "Running module " . $mid . " (trigger)");
				$to_trigger_journal[] = "Running module " . $mid . " (trigger)";
				$ret = RunModule($mid, false, false, $flextablerecord, $flextableid);
				journal($journalEntity,"Running module " . $mid . " (trigger)", $journalType);
				$triggered = true;
			} elseif (strstr($event[0],"display template ")) {
				$fid = str_replace("display template ", "", $event[0]);
				qlog(INFO, "Redirecting to template " . $fid . " (trigger)");
				$to_trigger_journal[] = "Redirecting to template " . $fid . " (trigger)";
				$url = "index.php?if_t=" . base64_encode($fid);
				if ($eid) {
					$url .= "&e=" . $eid . "&eid=" . $eid;
				}
				?>
				<script type="text/javascript">
					$(document).ready( function() {
						document.location = '<?php echo $url;?>';
					});
				</script>
				<?php
				journal($journalEntity,"Show template " . $fid . " (trigger)", $journalType);
				$triggered = true;
				// This MUST be the last trigger or it goes horribly wronf.
				EndHTML(true);
				exit;
				
			} elseif ($event[0]=="delete entity" && $eid) {
				$to_trigger_journal[] = "Deleting entity by event trigger!";
				qlog(INFO, "Deleting entity by event trigger!");

				journal($journalEntity,"This entity was deleted by a trigger", $journalType);
				DeleteEntity($eid);
				$triggered = true;
			} elseif (strstr($event[0],"duedate_extent days") && $eid) {
				// This trigger extends the due date by xxx days
				$days_to_add = str_replace("duedate_extent days ","",$event[0]);
				$to_trigger_journal[] = "This trigger tells me to extend the duedate with " . $days_to_add . " days";
				qlog(INFO, "This trigger tells me to extend the duedate with " . $days_to_add . " days");
				EntityExtendDuedate($days_to_add, $eid);
				journal($journalEntity,"This entity's duedate was extended by " . $days_to_add . " days by a trigger", $journalType);
				$triggered = true;
			} elseif (strstr($event[0],"duedate_set days") && $eid) {
				// This trigger extends the due date by xxx days
				$days_from_now = str_replace("duedate_set days ","",$event[0]);
				$to_trigger_journal[] = "This trigger tells me to extend the duedate with " . $days_from_now . " days";
				qlog(INFO, "This trigger tells me to extend the duedate with " . $days_from_now . " days");
				EntityExtendDuedateDaysFromNow($days_from_now, $eid);
				journal($journalEntity,"This entity's duedate was extended by " . $days_from_now . " days by a trigger", $journalType);
				$triggered = true;
			} elseif (strstr($event[0],"duedate_set CEFID") && $eid) {
				// This trigger extends the due date by xxx days
				$customerfield = str_replace("duedate_set CEFID","",$event[0]);
				$to_trigger_journal[] = "This trigger tells me to set the duedate to a customer extra field value";
				qlog(INFO, "This trigger tells me to set the duedate to a customer extra field value");
				$t = DB_GetRow("SELECT EFID" . $customerfield . " FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres(GetEntityCustomer($eid)) . "'");

				SetEntityDuedate($t['EFID' . $customerfield], $eid);
				journal($journalEntity,"This entitys duedate was set to " . $t['EFID' . $customerfield] . " by a trigger", $journalType);

				$triggered = true;
			} elseif ($event[0]=="undelete entity" && $eid) {
				$to_trigger_journal[] = "UN-Deleting entity by event trigger!";
				qlog(INFO, "UN-Deleting entity by event trigger!");
				journal($eid,"This entity was UN-deleted by a trigger");
				UnDeleteEntity($eid);
				$triggered = true;
			} elseif ($event[0]=="set startdate" && $eid) {
				$startdate = date('d-m-Y');
				$startsqldate = date('Y-m-d');
				$to_trigger_journal[] = "Startdate set to [today] by event trigger!";
				qlog(INFO, "Startdate set to [today] by event trigger!");
				journal($eid,"Startdate set to [today] by event trigger!");
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET startdate='" . $startdate. "', sqlstartdate='" . $startsqldate . "' WHERE eid='" . mres($eid) . "'";
				mcq($sql,$db);
				$triggered = true;
			} elseif ($event[0]=="set closedate" && $eid) {
				$closedate = date('Y-m-d');
				$closeepoch = date('U');
				$to_trigger_journal[] = "Closedate set by event trigger!";
				qlog(INFO, "Closedate set by event trigger!");
				journal($eid,"Closedate set by event trigger!");
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET closedate='" . $closedate . "',closeepoch='" . $closeepoch . "' WHERE eid='" . mres($eid) . "'";
				mcq($sql,$db);
				$triggered = true;
			} elseif ($event[0]=="unset closedate" && $eid) {
				$to_trigger_journal[] = "Closedate unset by event trigger!";
				qlog(INFO, "Closedate unset by event trigger!");
				journal($eid,"Closedate unset by event trigger!");
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET closedate='',closeepoch='' WHERE eid='" . mres($eid) . "'";
				mcq($sql,$db);
				$triggered = true;
			} elseif ($event[0]=="re-set opendate" && $eid) {
				$openepoch = date('U');
				$to_trigger_journal[] = "Closedate unset by event trigger!";
				qlog(INFO, "Closedate unset by event trigger!");
				journal($eid,"Closedate unset by event trigger!");
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET closedate='',closeepoch='',openepoch='" . $openepoch . "' WHERE eid='" . mres($eid) . "'";
				mcq($sql,$db);
				$triggered = true;
			} elseif ($event[0]=="make entity read-write" && ($eid || $flextablerecord)) {
				if ($flex) {
//					mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "customa1ddons WHERE eid=" . $flextablerecord . " AND type='flextable" . $flextableid . "' AND name=2147483646", $db);
					mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " SET readonly='no' WHERE recordid='" . mres($flextablerecord) . "'", $db);
					$to_trigger_journal[] = "Read-only set to NO by event trigger! (flexrecord)";
					qlog(INFO, "Read-only set to NO by event trigger! (flexrecord)");
					journal($flextablerecord,"Read-only set to NO by event trigger!", "flextable" . $flextableid);
					$triggered = true;
				} else {
					$to_trigger_journal[] = "Read-only set to NO by event trigger!";
					qlog(INFO, "Read-only set to NO by event trigger!");
					journal($eid,"Read-only set to NO by event trigger!");
					$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET readonly='n' WHERE eid='" . mres($eid) . "'";
					mcq($sql,$db);
					$triggered = true;
				}
			} elseif ($event[0]=="make entity read-only" && ($eid || $flextablerecord)) {
				if ($flex) {

					mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " SET readonly='yes' WHERE recordid='" . mres($flextablerecord) . "'", $db);

					$to_trigger_journal[] = "Read-only set to YES by event trigger! (flexrecord)";
					qlog(INFO, "Read-only set to YES by event trigger! (flexrecord)");
					journal($flextablerecord,"Read-only set to YES by event trigger!", "flextable" . $flextableid);
					$triggered = true;
				} else {
					$to_trigger_journal[] = "Read-only set to YES by event trigger!";
					qlog(INFO, "Read-only set to YES by event trigger!");
					journal($eid,"Read-only set to YES by event trigger!");
					$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET readonly='y' WHERE eid='" . mres($eid) . "'";
					mcq($sql,$db);
					$triggered = true;
				}
			} elseif ($event[0]=="make entity private" && ($eid || $flextablerecord)) {
				$to_trigger_journal[] = "Private flag set to YES by event trigger!";
				qlog(INFO, "Private flag set to YES by event trigger!");
				journal($eid,"Private flag set to YES by event trigger!");
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET private='y' WHERE eid='" . mres($eid) . "'";
				mcq($sql,$db);
				$triggered = true;
			} elseif ($event[0]=="make entity public" && ($eid || $flextablerecord)) {
				$to_trigger_journal[] = "Private flag set to NO by event trigger!";
				qlog(INFO, "Private flag set to NO by event trigger!");
				journal($eid,"Private flag set to NO by event trigger!");
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET private='n' WHERE eid='" . mres($eid) . "'";
				mcq($sql,$db);
				$triggered = true;
			} elseif (strstr($event[0],"Set assignee to ")) {
				$NewAssignee = str_replace("Set assignee to ","", $event[0]);
				if ($NewAssignee == "[users boss]") {
					$NewAssignee = $GLOBALS['UC']['USER_BOSS'];
				} elseif ($NewAssignee == "[current user]") {
					$NewAssignee = $GLOBALS['USERID'];
				} elseif ($NewAssignee == "[current assignee]") {
					$NewAssignee = $entity['assignee'];
				} elseif ($NewAssignee == "[current owner]") {
					$NewAssignee = $entity['owner'];
				} elseif ($NewAssignee == "[assignees boss]") {
					$NewAssignee = GetUserBoss($entity['assignee']);
				} elseif ($NewAssignee == "[owners boss]") {
					$NewAssignee = GetUserBoss($entity['owner']);
				} elseif ($NewAssignee == "customer_owner") {

					$NewAssignee = GetCustomerOwner($customer);

					if ($NewAssignee == "") {
						$to_trigger_journal[] = "ERROR: no customer owner found while processing trigger!";
						qlog(ERROR, "ERROR: no customer owner found while processing trigger!");
						log_msg("ERROR: no customer owner found while processing trigger!","");
					} else {
						$to_trigger_journal[] = "Set assignee to customer owner";
					}
				} elseif (strstr($NewAssignee, "@EFID")) {
					$field = str_replace("@EFID","",$NewAssignee);
					$field = str_replace("@","",$field);
					$tmp = GetExtraFieldTableType($field);
					if ($tmp == "entity") {
						$row = db_GetRow("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
					} elseif ($tmp == "customer") {
						$row = db_GetRow("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE eid='" . mres($customer) . "'");
					} elseif (is_numeric($tmp) && is_numeric($flextableid)) {
						$row = db_GetRow("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $tmp . " WHERE recordid='" . mres($flextablerecord) . "' AND deleted='n'");
					} elseif (is_numeric($tmp) && IsValidEid($eid)) {
						$ref = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype='Reference to FlexTable' AND options='" . $tmp . "' AND tabletype='entity'");
						if (is_numeric($ref)) {
							$refrec = db_GetValue("SELECT EFID" . $ref . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . $eid . "'");
							$row = db_GetRow("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $tmp . " WHERE recordid='" . mres($refrec) . "' AND deleted='n'");
						}
					}
					$NewAssignee = $row[0];
					$to_trigger_journal[] = "Set assignee to extra field value";
				}
				$to_trigger_journal[] = "Assignee set to " . GetUserName($NewAssignee) . " by event trigger!";
				qlog(INFO, "Assignee set to " . GetUserName($NewAssignee) . " by event trigger!");
				journal($eid,"Assignee set to " . GetUserName($NewAssignee) . " by event trigger!");
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET assignee='" . mres($NewAssignee) . "' WHERE eid='" . mres($eid) . "'";
				$triggered = true;


				mcq($sql,$db);
			} elseif (strstr($event[0],"Set owner to ")) {
				$NewOwner = str_replace("Set owner to ","", $event[0]);

				if ($NewOwner == "[users boss]") {
					$NewOwner = $GLOBALS['UC']['USER_BOSS'];
				} elseif ($NewOwner == "[current user]") {
					$NewOwner = $GLOBALS['USERID'];
				} elseif ($NewOwner == "[current assignee]") {
					$NewOwner = $entity['assignee'];
				} elseif ($NewOwner == "[current owner]") {
					$NewOwner = $entity['owner'];
				} elseif ($NewOwner == "[assignees boss]") {
					$NewOwner = GetUserBoss($entity['assignee']);
				} elseif ($NewOwner == "[owners boss]") {
					$NewOwner = GetUserBoss($entity['owner']);
				} elseif ($NewOwner == "customer_owner") {

					$NewOwner= GetCustomerOwner($customer);

					if ($NewOwner == "") {
						$to_trigger_journal[] = "ERROR: no customer owner found while processing trigger!";
						qlog(ERROR, "ERROR: no customer owner found while processing trigger!");
						log_msg("Error: no customer owner found while processing trigger!","");
					} else {
						$to_trigger_journal[] = "Set owner to customer owner";
					}
				} elseif (strstr($NewOwner, "@EFID")) {
					$field = str_replace("@EFID","",$NewOwner);
					$field = str_replace("@","",$field);
					//$row = db_GetRow("SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "customa1ddons WHERE eid='" . $customer . "' AND name='" . $field . "'");
					$tmp = GetExtraFieldTableType($field);
					if ($tmp == "entity") {
						$row = db_GetRow("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
					} elseif ($tmp == "customer") {
						$row = db_GetRow("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE eid='" . mres($customer) . "'");
					} elseif (is_numeric($tmp) && is_numeric($flextableid)) {
						$row = db_GetRow("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $tmp . " WHERE recordid='" . mres($flextablerecord) . "' AND deleted='n'");
					} elseif (is_numeric($tmp) && IsValidEid($eid)) {
						$ref = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype='Reference to FlexTable' AND options='" . $tmp . "' AND tabletype='entity'");
						if (is_numeric($ref)) {
							$refrec = db_GetValue("SELECT EFID" . $ref . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . $eid . "'");
							$row = db_GetRow("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $tmp . " WHERE recordid='" . mres($refrec) . "' AND deleted='n'");
						}
					}

					$NewOwner = $row[0];
				}
				$to_trigger_journal[] = "Owner set to " . GetUserName($NewOwner) . " by event trigger!";
				qlog(INFO, "Owner set to " . GetUserName($NewOwner) . " by event trigger!");
				journal($eid,"Owner set to " . GetUserName($NewOwner) . " by event trigger!");
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET owner='" . mres($NewOwner) . "' WHERE eid='" . mres($eid) . "'";
				mcq($sql,$db);
				$triggered = true;
			} elseif (strstr($event[0],"Set status to ")) {
				$NewStatus = str_replace("Set status to ","", $event[0]);
				$to_trigger_journal[] = "Status set to " . $NewStatus . " by event trigger!";
				qlog(INFO, "Status set to " . $NewStatus . " by event trigger!");
				journal($eid,"Status set to " . $NewStatus . " by event trigger!");

				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET status='" . mres($NewStatus) . "' WHERE eid='" . mres($eid) . "'";
				mcq($sql,$db);
				$triggered = true;

			} elseif (strstr($event[0],"Set priority to ")) {
				$NewPrio = str_replace("Set priority to ","", $event[0]);
				$to_trigger_journal[] = "Priority set to " . $NewPrio . " by event trigger!";
				qlog(INFO, "Priority set to " . $NewPrio . " by event trigger!");
				journal($eid,"Priority set to " . $NewPrio . " by event trigger!");

				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET priority='" . mres($NewPrio) . "' WHERE eid='" . mres($eid) . "'";
				mcq($sql,$db);
				$triggered = true;
			} elseif (strstr($event[0],"set form-id to ")) {
				$NewForm = str_replace("set form-id to ","", $event[0]);
				if ($flex) {
					$to_trigger_journal[] = "Form-id of flextable record set to " . $NewForm . " by event trigger!";
					qlog(INFO, "Form-id of flextable record set to " . $NewForm . " by event trigger!");
					journal($flextablerecord,"Form-id set to " . $NewForm . " by event trigger!", $journalType);
					$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " SET formid='" . mres($NewForm) . "' WHERE recordid='" . mres($flextablerecord) . "'";
					mcq($sql,$db);
					$triggered = true;
					$to_trigger_journal[] = "Form-id of flextable record set to " . $NewForm . " by event trigger!";
					//print "Form-id of flextable record set to " . $NewForm . " by event trigger!";
				} else {
					$to_trigger_journal[] = "Form-id of entity " . $eid . " set to " . $NewForm . " by event trigger!";
					qlog(INFO, "Form-id of entity " . $eid . " set to " . $NewForm . " by event trigger!");
					journal($eid,"Form-id set to " . $NewForm . " by event trigger!");
					$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET formid='" . mres($NewForm) . "' WHERE eid='" . mres($eid) . "'";
					mcq($sql,$db);
					$triggered = true;
				}
			} elseif ($event[0]=="mail customer") {
				if ($customer!="") {
					if ($event[1]!=0) {
						// a template file id was given
						$template = $event[1];
						//$template = ReturnTemplateStyleSheet($event[1]) . $template;
						//$subject = GetTemplateSubject($event[1]);
					} elseif ($admin_message) {
						$template = $admin_message;
						if ($t_array[5] == "admin_request") {
							$subject = "An action request was issued " . $GLOBALS['title'];
						} elseif ($t_array[5] == "log_error") {
							$subject = "An error occured " . $GLOBALS['title'];
						} elseif ($t_array[5] == "log_warning") {
							$subject = "A warning was issued: " . $GLOBALS['title'];
						} else {
							$subject = "Some misterious things happened " . $GLOBALS['title'];
						}

					} else {
						$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='BODY_TEMPLATE_CUSTOMER'";
						$result = mcq($sql,$db);
						$row = mysql_fetch_array($result);
						$template = $row['value'];
						$subject = $GLOBALS['SUBJECT_TEMPLATE_CUSTOMER'];
					}
					if ($event[2] == "y") {
						$attach = "both";
					} else {
						$attach = false;
					}
					RealMail($template,$eid,$customer,GetUserEmail($GLOBALS['USERID']),GetUserName($GLOBALS['USERID']),GetCustomerEmail($customer),"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
					$to_trigger_journal[] = "E-mail to customer send (trigger)";
					qlog(INFO, "E-mail to customer send (trigger)");
					journal($customer,"E-mail to customer " . GetCustomerName($customer) . " send because of change in field " . $onchange . " to value " . $to_value . " in entity " . $eid . " (trigger)","customer");
					journal($eid,"E-mail to customer " . GetCustomerName($customer) . " send because of change in field " . $onchange . " (trigger)");
					$triggered = true;
				} else {
					$to_trigger_journal[] = "Trigger cancelled because of missing customer variable";
					qlog(INFO, "Trigger cancelled because of missing customer variable");
				}
			} elseif ($event[0]=="mail [email sender]") {

					if ($event[1]!=0) {
						// a template file id was given
						$template = $event[1];
						//$template = ReturnTemplateStyleSheet($event[1]) . $template;
						//$subject = GetTemplateSubject($event[1]);
					} else {
						$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='BODY_ENTITY_EDIT'";
						$result = mcq($sql,$db);
						$row = mysql_fetch_array($result);
						$template = $row['value'];
						$subject = $GLOBALS['subject_update_entity'];
					}
					if ($event[2] == "y") {
						$attach = "entity";
					} else {
						$attach = false;
					}

					$email_to = $GLOBALS['EMAIL_SENDER_ADDRESS'];

					if (ValidateEmail($email_to)) {
						RealMail($template,$eid,$customer,$GLOBALS['admemail'],$GLOBALS['PRODUCT'] . " Administrator",$email_to,"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
						$to_trigger_journal[] = "Email replied (" . $email_to . ")";
						qlog(INFO, "Email replied (" . $email_to . ")");
						journal($eid,"Email replied to " . $email_to . " because of change in field " . $onchange . " to value " . $to_value . " (trigger)");
						$triggered = true;
					} else {
						$to_trigger_journal[] = "WARNING: Email could NOT be replied: no valid sender e-mail address found (" . $email_to . ")";
						log_msg("WARNING: Email could NOT be replied: no valid sender e-mail address found (" . $email_to . ")");
						journal($eid, "WARNING: Email could NOT be replied: no valid sender e-mail address found (" . $email_to . ")");
					}

			} elseif ($event[0]=="mail [users boss]" || $event[0]=="mail [assignees boss]" || $event[0]=="mail [owners boss]" || $event[0] == "mail new user") {
				if ($event[0]=="mail [users boss]") {
					$rcpt = $GLOBALS['UC']['USER_BOSS'];
				} elseif ($event[0]=="mail [assignees boss]") {
					$rcpt = GetUserBoss($entity['assignee']);
				} elseif ($event[0]=="mail [owners boss]") {
					$rcpt = GetUserBoss($entity['owner']);
				} elseif ($event[0] == "mail new user") {
					$rcpt = $eid;
				}
				if (GetAttribute("user", "EnableEmailTrigger" . $event[6], $rcpt) != "No") {
					if ($event[1]!=0) {

						$template = $event[1];
						if ($event[0] == "mail new user") {
							$subject = GetTemplateSubject($template);
							$stylesheet = ReturnTemplateStyleSheet($template_id);
							if ($stylesheet == "") {
								$stylesheet = ReturnStyleSheet(GetSetting("SYSWIDECSS"));
							}
							$template = GetTemplate($template);
							if (stristr($template, "<?")) { // PHP exists in template
								$template = EvaluateTemplatePHP($template, false, false, false);
							}
							$template = $stylesheet . str_replace("@NEWUSERNAME@", GetUserAccountName($rcpt), $template);
							$template = str_replace("@NEWUSER@", $rcpt, $template);
							$template = ParseTemplateCleanup(ParseTemplateGeneric(str_replace("@NEWUSEREMAIL@", GetUserEmail($rcpt), $template)));

							$subject = str_replace("@NEWUSERNAME@", GetUserAccountName($rcpt), $subject);
							$subject = str_replace("@NEWUSER@", $rcpt, $subject);
							$subject = strip_tags(ParseTemplateCleanup(ParseTemplateGeneric(str_replace("@NEWUSEREMAIL@", GetUserEmail($rcpt), $subject))));
						
						}


				} elseif ($admin_message) {
						$template = $admin_message;
						$subject = "A warning or error message was issued to the log";
					} else {
						$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='BODY_ENTITY_EDIT'";
						$result = mcq($sql,$db);
						$row = mysql_fetch_array($result);
						$template = $row['value'];
						$subject = $GLOBALS['subject_update_entity'];

					}
					if ($event[2] == "y") {
						$attach = "entity";
					} else {
						$attach = false;
					}
					if ($event[4] == "email") {
						RealMail($template,$eid,$customer,$GLOBALS['admemail'],$GLOBALS['PRODUCT'] . " Administrator",GetUserEmail($rcpt),"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
					} elseif ($event[4] == "inmail") {
						AddMessage($rcpt, $GLOBALS['USERID'], ParseTemplateAll($subject, $eid, false, "plain"), ParseTemplateAll($template, $eid, false, "plain"));
					}
					$to_trigger_journal[] = "E-mail to some boss send (trigger)";
					qlog(INFO, "E-mail to some boss send (trigger)");
					journal($journalEntity,"E-mail to boss (" . $event[0] . ") " . GetUserName($rcpt) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)", $journalType);
					$triggered = true;
				} else {
					journal($journalEntity,"E-mail NOT send - receipient user has disabled this trigger", $journalType);
					$to_trigger_journal[] = "E-mail NOT send - receipient user has disabled this trigger";
				}
			} elseif ($event[0]=="mail assignee") {
				if (GetUserEmail($entity['assignee']) != "" && GetAttribute("user", "EnableEmailTrigger" . $event[6], $entity['assignee']) != "No") {
					if ($event[1]!=0) {
						// a template file id was given
						$template = $event[1];
						//$template = ReturnTemplateStyleSheet($event[1]) . $template;
						//$subject = GetTemplateSubject($event[1]);
					} elseif ($admin_message) {
						$template = $admin_message;
						$subject = "A warning or error message was issued to the log";
					} else {
						$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='BODY_ENTITY_EDIT'";
						$result = mcq($sql,$db);
						$row = mysql_fetch_array($result);
						$template = $row['value'];
						$subject = $GLOBALS['subject_update_entity'];
					}
					if ($customer_trigger && is_numeric($cid)) {
						$template = ParseTemplateCustomer($template, $cid, false, "htme");
						$subject =  ParseTemplateCustomer($subject, $cid, false, "plain");
					}

					if ($event[2] == "y") {
						$attach = "entity";
					} else {
						$attach = false;
					}
					
					if ($event[4] == "email") {
						RealMail($template,$eid,$customer,$GLOBALS['admemail'],$GLOBALS['PRODUCT'] . " Administrator",GetUserEmail($entity['assignee']),"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
					} elseif ($event[4] == "inmail") {
						AddMessage($entity['assignee'], $GLOBALS['USERID'], ParseTemplateAll($subject, $eid, false, "plain"), ParseTemplateAll($template, $eid, false, "plain"));
					}
					$to_trigger_journal[] = "E-mail to assignee send (trigger)";
					qlog(INFO, "E-mail to assignee send (trigger)");
					journal($eid,"E-mail to assignee " . GetUserName($entity['assignee']) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)");
					$triggered = true;
				} elseif (GetUserEmail($entity['assignee']) == "") {
					$to_trigger_journal[] = "WARNING: Assignee " . $entity['assignee'] . " does not have a valid e-mail address (" .  GetUserEmail($entity['assignee']) . ")";
					log_msg("WARNING: Assignee " . $entity['assignee'] . " does not have a valid e-mail address (" .  GetUserEmail($entity['assignee']) . ")");
					journal($eid, "WARNING: Assignee " . $entity['assignee'] . " does not have a valid e-mail address (" .  GetUserEmail($entity['assignee']) . "). E-mail not send.");
				} else {
					journal($eid,"E-mail NOT send - receipient user has disabled this trigger");
					$to_trigger_journal[] = "E-mail NOT send - receipient user has disabled this trigger";
				}
				$triggered = true;
			} elseif ($event[0]=="mail owner" || $event[0]=="mail customer_owner") {
				if ($event[0]=="mail owner") {
					$element = $entity['owner'];
				} elseif ($event[0]=="mail customer_owner") {
					$element = GetCustomerOwner($customer);
				}
				if (GetUserEmail($element)!=""  && GetAttribute("user", "EnableEmailTrigger" . $event[6], $element) != "No") {
					if ($event[1]!=0) {
						// a template file id was given
						$template = $event[1];
						//$template = ReturnTemplateStyleSheet($event[1]) . $template;
						//$subject = GetTemplateSubject($event[1]);
					} elseif ($admin_message) {
						$template = $admin_message;
						$subject = "A warning or error message was issued to the log";
					} else {
						$template = GetSetting("BODY_ENTITY_EDIT");
						$subject = $GLOBALS['subject_update_entity'];
					}
					if ($customer_trigger && is_numeric($cid)) {
						$template = ParseTemplateCustomer($template, $cid, false, "htme");
						$subject =  ParseTemplateCustomer($subject, $cid, false, "plain");
					}
					if ($event[2] == "y") {
						$attach = "entity";
					} else {
						$attach = false;
					}
					if ($event[4] == "email") {
						RealMail($template,$eid,$customer,$GLOBALS['admemail'],$GLOBALS['PRODUCT'] . " Administrator",GetUserEmail($element),"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
					} elseif ($event[4] == "inmail") {
						AddMessage($element, $GLOBALS['USERID'], ParseTemplateAll($subject, $ei, false, "plain"), ParseTemplateAll($template, $eid, false, "plain"));
					}
					$to_trigger_journal[] = "E-mail to owner send (trigger)";
					qlog(INFO, "E-mail to owner send (trigger)");
					journal($eid,"E-mail to owner " . GetUserName($element) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)");
					$triggered = true;
				} elseif (GetUserEmail($element) == "") {
					$to_trigger_journal[] = "WARNING: Owner " . $element . " does not have a valid e-mail address (" .  GetUserEmail($element) . ") (customer $customer)";
					log_msg("WARNING: Owner " . $element . " does not have a valid e-mail address (" .  GetUserEmail($element) . ")");
					journal($eid, "WARNING: Owner " . $element . " does not have a valid e-mail address (" .  GetUserEmail($element) . "). E-mail not send.");
				} else {
					journal($eid,"E-mail NOT send - receipient user has disabled this trigger");
					$to_trigger_journal[] = "E-mail NOT send - receipient user has disabled this trigger";
				}
				$triggered = true;
			} elseif ($event[0]=="mail admin" && $GLOBALS['admemail']!="") {
				if ($event[1]!=0) {
					// a template file id was given
					$template = $event[1];
					//$template = ReturnTemplateStyleSheet($event[1]) . $template;
					// $subject = GetTemplateSubject($event[1]);
				} elseif ($admin_message) {

					$template = $admin_message;
					if ($event[5] == "admin_request") {
						$subject = "An action request was issued: " . $GLOBALS['title'];
					} elseif ($event[5] == "log_error") {
						$subject = "An error occured: " . $GLOBALS['title'];
					} elseif ($event[5] == "log_warning") {
						$subject = "A warning was issued: " . $GLOBALS['title'];
					} else {
						$subject = "Some misterious things happened: " . $GLOBALS['title'];
					}
				} else {

					$template = GetSetting("BODY_ENTITY_EDIT");
					$subject = $GLOBALS['subject_update_entity'];
				}
				if ($event[2] == "y") {
					$attach = "entity";
				} else {
					$attach = false;
				}
				if ($customer_trigger && is_numeric($cid)) {
					$template = ParseTemplateCustomer($template, $cid, false, "htme");
					$subject =  ParseTemplateCustomer($subject, $cid, false, "plain");
				}


				if ($event[4] == "email" || $event[4] == "") {
					RealMail($template,$eid,$customer,$GLOBALS['admemail'],$GLOBALS['PRODUCT'] . " Administrator",$GLOBALS['admemail'],"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);

				} elseif ($event[4] == "inmail") {
					AddMessage("admin", $GLOBALS['USERID'], $subject, $template);
				}
				journal($journalEntity,"E-mail to administrator send because of change in field " . $onchange . " (trigger)", $journalType);

				$to_trigger_journal[] = "E-mail to system administrator send (trigger)";
				qlog(INFO, "E-mail to system administrator send (trigger)");
				$triggered = true;

			} elseif (stristr($event[0],"mail user @FTEFID")) {
		    		$y = str_replace("Mail user @FTEFID", "", $event[0]);
					$y = str_replace("mail user @FTEFID", "", $y);
					$y = str_replace("@", "", $y);
					$x = explode('#',$y);
					//  $x[0] = flextable
					//  $x[1] = fieldid

					// @FTEFID3#88@

					$flextable_to_fetch_from = $x[0]; // 4
					$field_to_fetch_from   = $x[1];  // 88

					$tableprop = GetFlextableDefinitions($flextable_to_fetch_from);

					unset($recordid);
					if ($customer_trigger) {
						// Working in customer table
						$t = GetExtraCustomerFields();
						$to_trigger_journal[] = "Choose to fetch referring value xfrom customer table";
						qlog(INFO, "Choose to fetch referring value from customer table");
						if ($tableprop[0]['refers_to'] != "no_refer" && $tableprop[0]['orientation'] == "one_entity_to_many") {
							$recordid = $ent;
						} elseif ($tableprop[0]['orientation'] == "many_entities_to_one") {
							foreach ($t AS $ef) {

								if ($ef['fieldtype'] == "Reference to FlexTable" && $ef['options'] == $flextable_to_fetch_from) {
									$tmp = db_GetRow("SELECT EFID" . $ef['id'] . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE id='" . mres($cid) . "'");
									$recordid = $tmp[0];

									continue;
								}
							}
						}
					} elseif ($flextableid) {
						// Working in flextable
						if ($flextableid == $flextable_to_fetch_from) {
							$recordid = $flextablerecord;
							$to_trigger_journal[] = "Choose to fetch referring value from myself";
							qlog(INFO, "Choose to fetch referring value from myself");

						} else {
							$to_trigger_journal[] = "Choose to fetch referring value from flextable $flextable_to_fetch_from (flext2flexref)";
							qlog(INFO, "Choose to fetch referring value from flextable $flextable_to_fetch_from (flext2flexref)");
							$tableprop = GetFlextableDefinitions($flextable_to_fetch_from);

							if ($tableprop[0]['refers_to'] != "no_refer" && $tableprop[0]['orientation'] == "one_entity_to_many") {
								$to_trigger_journal[] = "Choose refer link as record in parent table : " . $ent;
								$recordid = $ent;
							} elseif ($tableprop[0]['orientation'] == "many_entities_to_one") {
								$to_trigger_journal[] = "Choose lookup of 1st found record in parent table";
								$t = GetExtraFlexTableFields($flextableid);
								foreach ($t AS $ef) {
									if ($ef['fieldtype'] == "Reference to FlexTable" && $ef['options'] == $flextable_to_fetch_from) {
										$tmp = db_GetRow("SELECT EFID" . $ef['id'] . " FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " WHERE recordid='" . mres($flextablerecord) . "' AND deleted='n'");
										$recordid = $tmp[0];
										continue;
									}
								}
							}
						}
					} else {
						// Working in entity table
						$to_trigger_journal[] = "Choose to fetch referring value via entity table !";
						qlog(INFO, "Choose to fetch referring value via entity table");
						if ($tableprop[0]['refers_to'] == "entity" && $tableprop[0]['orientation'] == "one_entity_to_many") {
								$recordid = $ent;
								$to_trigger_journal[] = "Direct referral";
						} elseif ($tableprop[0]['orientation'] == "many_entities_to_one") {
							$to_trigger_journal[] = "Check Reference To FT Referrals";
							$t = GetExtraFields();
							foreach ($t AS $ef) {
								if ($ef['fieldtype'] == "Reference to FlexTable" && $ef['options'] == $flextable_to_fetch_from) {
									$to_trigger_journal[] = "SELECT EFID" . $ef['id'] . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'";
									$tmp = db_GetRow("SELECT EFID" . $ef['id'] . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
									$recordid = $tmp[0];
									continue;
								}
							}
						} else {
							$to_trigger_journal[] = "NO REFERRAL! (error!)";
						}
					}

					if ($recordid == "") {
						$to_trigger_journal[] = "WARNING: No reference to table " . $flextable_to_fetch_from . " field " . $field_to_fetch_from . " could be found! ($recordid)";
						qlog(WARNING, "WARNING: No reference to table " . $flextable_to_fetch_from . " field " . $field_to_fetch_from . " could be found! ($recordid)");
						journal($journalEntity, "WARNING: No reference to table " . $flextable_to_fetch_from . " field " . $field_to_fetch_from . " could be found! ($recordid)", $journalType);
					}
					// Fetch the value of the flexrecord (can be an e-mail address but also a number ref to loginusers table)
					//$addr = GetFlextableFieldValue($recordid, $field_to_fetch_from, $flextable_to_fetch_from, true, false, false);
					$addr = GetExtraFieldValue($recordid, $field_to_fetch_from, false, true, false);
					$to_trigger_journal[] = "Fetched: record $recordid field $field_to_fetch_from result $addr";

					// If number ref, fetch e-mail
					if (is_numeric(trim($addr)) && stristr(GetExtraFieldType($field_to_fetch_from), "user")) {
						$origuserid = $addr;
						$addr = GetUserEmail($addr);
					}
					if ($customer_trigger) {
						journal($cid, "E-mailing to " . $addr, "customer");
					} elseif ($flextableid) {
						journal($flextablerecord, "E-mailing to " . $addr, "flextable" . $flextableid);
					} else {
						journal($journalEntity, "E-mailing to " . $addr, $journalType);
					}

					//journal($recordid, "E-mailing to " . $addr, "flextable" . $flextable_to_fetch_from);
					$dnp = false;
					if ($origuserid && GetAttribute("user", "EnableEmailTrigger" . $event[6], $origuserid) == "No") {
						$dnp = true;
						journal($journalEntity,"E-mail NOT send - receipient user has disabled this trigger", $journalType);
						$to_trigger_journal[] = "E-mail NOT send - receipient user has disabled this trigger";
					}

					if (ValidateEmail($addr) && !$dnp) {
						if ($event[1]!=0) {
							// a template file id was given
							$template = $event[1];
							//$template = ReturnTemplateStyleSheet($event[1]) . $template;
							$subject = GetTemplateSubject($event[1]);
						} elseif ($admin_message) {
							$template = $admin_message;
							$subject = "A warning or error message was issued to the log";
						} else {
							$template = GetSetting("BODY_ENTITY_EDIT");
							$subject = $GLOBALS['subject_update_entity'];
						}
						if ($customer_trigger && is_numeric($cid)) {
							$template = ParseTemplateCustomer($template, $cid, false, "htme");
							$subject =  ParseTemplateCustomer($subject, $cid, false, "plain");
						}
						if ($event[2] == "y") {
							$attach = "entity";
						} else {
							$attach = false;
						}
						RealMail($template,$eid,$customer,$GLOBALS['admemail'],$GLOBALS['PRODUCT'] . " Administrator",$addr,"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
						journal($journalEntity,"E-mail to " . $addr . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)", $journalType);

						$to_trigger_journal[] = "E-mail to " . $addr . " send (trigger)";
						qlog(INFO, "E-mail to " . $addr . " send (trigger)");
						$triggered = true;


					} else {
						$to_trigger_journal[] = "Should trigger but no (valid) e-mail address found:" . $addr;
						qlog(INFO, "Should trigger but no (valid) e-mail address found:" . $addr);
						log_msg("WARNING: Should trigger but no (valid) e-mail address found: " . $addr);
						//log_msg("WARNING: Ftrecord: $field_to_fetch_from :: FT: $flextable_to_fetch_from");
					}



			} elseif (stristr($event[0],"mail user @MEFID") || stristr($event[0],"mail user @UEFID") || stristr($event[0],"mail user @GEFID")) {
					$x = split("@",$event[0]);
					
					$y = str_replace("MEFID","",$x[1]);
					$y = str_replace("GEFID","",$y);
					$y = str_replace("UEFID","",$y);

					$y = str_replace("@","",$y);

					$type = GetExtraFieldTableType($y);
					// first, determine the field type

					if ($type == "entity") {// Entity table
						$addr = GetExtraFieldValue($eid, $y, false, true);
					} elseif ($customer_trigger) {
						$addr = GetExtraCustomerFieldValue($cid, $y, false, true);
					} elseif ($type == "customer") { // Customer table
						$addr = GetExtraCustomerFieldValue($entity['CRMcustomer'], $y, false, true);
					} elseif ($type == "loginuser") {// Users table
						$addr = GetExtraFieldValue($GLOBALS['USERID'], $y, false, true);
					} elseif ($type == "userprofiles") {// Groups table
						$addr = GetExtraFieldValue($GLOBALS['GROUP'], $y, false, true);
					} elseif (is_numeric($type)) { // Flextable
						$addr = GetExtraFieldValue($eid, $y, true, false, false);
						
					} else {
						log_msg("WARNING: Field table table $y could not be determined!");
					}



					if (ValidateEmail($addr)) {
						if ($event[1]!=0) {
							// a template file id was given
							$template = $event[1];
							//$template = ReturnTemplateStyleSheet($event[1]) . $template;
							$subject = GetTemplateSubject($event[1]);
						} elseif ($admin_message) {
							$template = $admin_message;
							$subject = "A warning or error message was issued to the log";
						} else {
							$template = GetSetting("BODY_ENTITY_EDIT");
							$subject = $GLOBALS['subject_update_entity'];
						}
						if ($customer_trigger && is_numeric($cid)) {
							$customer = $cid;
						}
						if ($event[2] == "y") {
							$attach = "entity";
						} else {
							$attach = false;
						}


						RealMail($template,$eid,$customer,$GLOBALS['admemail'],$GLOBALS['PRODUCT'] . " Administrator",$addr,"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
						journal($journalEntity,"E-mail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)", $journalType);

						$to_trigger_journal[] = "E-mail to " . GetUserName($user) . " $addr send (trigger)";
						qlog(INFO, "E-mail to " . GetUserName($user) . " $addr send (trigger)");
						$triggered = true;


					} else {
						$to_trigger_journal[] = "Should trigger but no (correct) e-mail address found";
						qlog(INFO, "Should trigger but no (correct) e-mail address found");
						log_msg("WARNING: Should trigger but no e-mail address found");
					}



			} elseif (stristr($event[0],"mail group @")) {
					$x = explode("@",$event[0]);
					$y = str_replace("@","",$x[1]);

					$lom = GetUsersOfGroup($y);
					$to_trigger_journal[] = "List of members of group " . $y . ": " . string_r($lom);

					foreach ($lom AS $user) {
						$to_trigger_journal[] = "Process user " . $user . " of group " . $y;

						if (GetUserEmail($user)!="" && GetAttribute("user", "EnableEmailTrigger" . $event[6], $user) != "No") {
							if ($event[1]!=0) {
								// a template file id was given
								$template = $event[1];
								//$template = ReturnTemplateStyleSheet($event[1]) . $template;
								$subject  = GetTemplateSubject($event[1]);
							} elseif ($admin_message) {
								$template = $admin_message;
								$subject = "A warning or error message was issued to the log";
							} else {
								$template = GetSetting("BODY_ENTITY_EDIT");
								$subject = $GLOBALS['subject_update_entity'];
							}
						} elseif (GetUserEmail($user) == "") {
							$to_trigger_journal[] = "Should trigger but no e-mail address found";
							qlog(INFO, "Should trigger but no e-mail address found");
							journal($journalEntity,"Should trigger but no e-mail address found", $journalType);
						} else {
							journal($journalEntity,"E-mail NOT send - receipient user has disabled this trigger", $journalType);
							$to_trigger_journal[] = "E-mail NOT send - receipient user has disabled this trigger";
						}
						if ($event[2] == "y") {
							$attach = "entity";
						} else {
							$attach = false;
						}
						if ($customer_trigger && is_numeric($cid)) {
							$template = ParseTemplateCustomer($template, $cid, false, "plain");
							$subject =  ParseTemplateCustomer($subject, $cid, false, "plain");
						}
						if ($event[4] == "email" || $event[4] == "") {
							RealMail($template,$eid,$customer,$GLOBALS['admemail'],$GLOBALS['PRODUCT'] . " Administrator",GetUserEmail($user),"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
							journal($journalEntity,"E-mail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)", $journalType);
							$trigger_to_journal[] = "E-mail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)";

						} elseif ($event[4] == "inmail") {
							AddMessage($user, $GLOBALS['USERID'], ParseTemplateAll($subject, $eid, false, "plain"), ParseTemplateAll($template, $eid, false, "plain"));
							journal($journalEntity,"Inmail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)", $journalType);
							$trigger_to_journal[] = "Inmail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)";
						}


						$to_trigger_journal[] = "E-mail to " . GetUserName($user) . " send (trigger)";
						qlog(INFO, "E-mail to " . GetUserName($user) . " send (trigger)");
						$triggered = true;
					}

			} elseif (stristr($event[0],"mail user @")) {
				if (stristr($event[0],"mail user @EFID")) {
					// example: "Mail user @EFID205@"
					// This parts e-mails the user selected in extra field 205

					$x = split("@",$event[0]);
					$y = str_replace("EFID","",$x[1]);
					$y = str_replace("@","",$y);

					$type = GetExtraFieldTableType($y);
					// first, determine the field type

					if ($type == "entity") {// Entity table
						$user = GetExtraFieldValue($eid, $y, false, true);
					} elseif ($type == "customer") { // Customer table
						$user = GetExtraCustomerFieldValue($entity['CRMcustomer'], $y, false, true);
					} elseif (is_numeric($type)) { // Flextable
						//$user = GetFlextableFieldValue($eid, $y, $type, false, true, false);
						$user = GetExtraFieldValue($eid, $y, true, false, false);
					} else {
						log_msg("WARNING: Field table table $y could not be determined!");
					}
	
					if (GetUserEmail($user)!="" && GetAttribute("user", "EnableEmailTrigger" . $event[6], $user) != "No") {
						if ($event[1]!=0) {
							// a template file id was given
							$template = $event[1];
							//$template = ReturnTemplateStyleSheet($event[1]) . $template;
							$subject  = GetTemplateSubject($event[1]);
						} elseif ($admin_message) {
							$template = $admin_message;
							$subject = "A warning or error message was issued to the log";
						} else {
							$template = GetSetting("BODY_ENTITY_EDIT");
							$subject = $GLOBALS['subject_update_entity'];
						}
					} elseif (GetUserEmail($user) == "") {
						$to_trigger_journal[] = "Should trigger but no e-mail address found";
						qlog(INFO, "Should trigger but no e-mail address found");
						journal($journalEntity,"Should trigger but no e-mail address found", $journalType);
					} else {
						journal($journalEntity,"E-mail NOT send - receipient user has disabled this trigger", $journalType);
						$to_trigger_journal[] = "E-mail NOT send - receipient user has disabled this trigger";
					}


				} else {
					$user_ar = explode("@",$event[0]);
					$user = $user_ar[1];
					if (GetUserEmail($user)!="" && GetAttribute("user", "EnableEmailTrigger" . $event[6], $user) != "No") {
						if ($event[1]!=0) {
							// a template file id was given
							$template = $event[1];
							//$template = ReturnTemplateStyleSheet($event[1]) . $template;
							$subject = GetTemplateSubject($event[1]);
						} elseif ($admin_message) {
							$template = $admin_message;
							$subject = "A warning or error message was issued to the log";
						} else {
							$template = GetSetting("BODY_ENTITY_EDIT");
							$subject = $GLOBALS['subject_update_entity'];
						}
					} elseif (GetUserEmail($user) == "") {
						$to_trigger_journal[] = "Should trigger but no e-mail address found";
						journal($journalEntity,"Should trigger but no e-mail address found", $journalType);
						qlog(INFO, "Should trigger but no e-mail address found");
					} else {
						journal($journalEntity,"E-mail NOT send - receipient user has disabled this trigger", $journalType);
						$to_trigger_journal[] = "E-mail NOT send - receipient user has disabled this trigger";
					}

				}
				if ($event[2] == "y") {
					$attach = "entity";
				} else {
					$attach = false;
				}
				if ($customer_trigger && is_numeric($cid)) {
					$template = ParseTemplateCustomer($template, $cid, false, "plain");
					$subject =  ParseTemplateCustomer($subject, $cid, false, "plain");
				}
				if ($event[4] == "email" || $event[4] == "") {
					RealMail($template,$eid,$customer,$GLOBALS['admemail'],$GLOBALS['PRODUCT'] . " Administrator",GetUserEmail($user),"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
					journal($journalEntity,"E-mail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)", $journalType);
					$trigger_to_journal[] = "E-mail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)";

				} elseif ($event[4] == "inmail") {
					AddMessage($user, $GLOBALS['USERID'], ParseTemplateAll($subject, $eid, false, "plain"), ParseTemplateAll($template, $eid, false, "plain"));
					journal($journalEntity,"Inmail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)", $journalType);
					$trigger_to_journal[] = "Inmail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)";
				}


				$to_trigger_journal[] = "E-mail to " . GetUserName($user) . " send (trigger)";
				qlog(INFO, "E-mail to " . GetUserName($user) . " send (trigger)");
				$triggered = true;
			} elseif (strstr($event[0],"mail cust @")) {
				$cust_ar = split("@",$event[0]);
				$cust = $cust_ar[1];
				if (GetCustomerEmail($cust)!="") {
					if ($event[1]!=0) {
						// a template file id was given
						$template = $event[1];
						//$template = ReturnTemplateStyleSheet($event[1]) . $template;
						// $subject = GetTemplateSubject($event[1]);
					} elseif ($admin_message) {
						$template = $admin_message;
						$subject = "A warning or error message was issued to the log";
					} else {
						$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='BODY_TEMPLATE_CUSTOMER'";
						$result = mcq($sql,$db);
						$row = mysql_fetch_array($result);
						$template = $row['value'];
						$subject = $GLOBALS['SUBJECT_TEMPLATE_CUSTOMER'];
					}
				} else {
						$to_trigger_journal[] = "Should trigger but no e-mail address found";
						qlog(INFO, "Should trigger but no e-mail address found");
				}
				if ($event[2] == "y") {
					$attach = "both";
				} else {
					$attach = false;
				}
				if ($customer_trigger && is_numeric($cid)) {
					$template = ParseTemplateCustomer($template, $cid, false, "htme");
					$subject =  ParseTemplateCustomer($subject, $cid, false, "plain");
				}
				RealMail($template,$eid,$customer,GetUserEmail($GLOBALS['USERID']),GetUserName($GLOBALS['USERID']),GetCustomerEmail($cust),"0",$subject,$attach,$filename,$report_attach, $flextableid, $flextablerecord);
				$to_trigger_journal[] = "E-mail to " . GetCustomerName($cust) . " send (trigger)";
				qlog(INFO, "E-mail to " . GetCustomerName($cust) . " send (trigger)");
				journal($journalEntity,"E-mail to user " . GetUserName($user) . " send because of change in field " . $onchange . " to value " . $to_value . " (trigger)", $journalType);
				$triggered = true;
			} else {
				$GLOBALS['NO_INSERTS_TO_LOG'] = false;
				$to_trigger_journal[] = "ERROR:: Trigger action not understood! Event: " . $event[0];
				log_msg("ERROR:: Trigger action not understood! Event: " . $event[0]);
			}

			$to_trigger_journal[] = GetBackTrace();
			$nf = false;
			foreach ($to_trigger_journal AS $ttj) {
				$ttjj .= ($nf == true) ? "\n" : "";
				$ttjj .= $ttj;
				$nf = true;
			}
			journal($event[6], $ttjj . "\nEid: $eid Flextableid: $flextableid Recordid: $flextablerecord Form: $form Cid: $cid", "trigger");
			$ttjj = "";
			$to_trigger_journal = "";
			
			if (is_numeric($park_userid)) { // Trigger has been ran as admin user, now switch back
				$GLOBALS['USERID'] = $park_userid;
				ClearAllRunningCache();
				//journal($journalEntity,"This triggers uses elevated rights of user " . $tmp['id'], $journalType);
				InitUser($GLOBALS['USERID']);
			}
		}
		
			
		if (!$triggered) {
			unset($to_trigger_journal);
			qlog(INFO, "Triggers checked, nothing to trigger.");
		} else {
			// Recalculate all related extra fields and drop form cache
			
			if ($flex) {
				FindAndRecalculateAllRelatedRecords($flextablerecord, $flextableid);
				ClearAccessCache($flextablerecord, "ft" . $flextableid, "all");
				ClearAllRunningCache();
			} else {
				FindAndRecalculateAllRelatedRecords($eid, "entity");
				ExpireFormCache($eid, "Triggered", "entity", $GLOBALS['USERID']);
				ClearAccessCache($eid, "e", "all");
				ClearAllRunningCache();
			}
		}
		return($ret);
	}
}
function GetTriggersWhichCanBeSwitchedOffByUsers() {
	return(db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "triggers, " . $GLOBALS['TBL_PREFIX'] . "attributes WHERE " . $GLOBALS['TBL_PREFIX'] . "triggers.tid=" . $GLOBALS['TBL_PREFIX'] . "attributes.entity AND " . $GLOBALS['TBL_PREFIX'] . "attributes.attribute='AllowUsersToSwitchThisTriggerOff' AND " . $GLOBALS['TBL_PREFIX'] . "attributes.identifier='trigger' AND " . $GLOBALS['TBL_PREFIX'] . "attributes.value='Yes' AND " . $GLOBALS['TBL_PREFIX'] . "triggers.action LIKE '%mail%' AND " . $GLOBALS['TBL_PREFIX'] . "triggers.comment != ''"));
}

function GetTriggers($onchange, $to_value, $form, $eid, $flextableid, $flextablerecord) {
	global $lang;
	if ($flextablerecord && $flextableid) {
		$eid = $flextablerecord;
	}
	qlog(INFO, "Getting triggers for event $onchange $to_value");

	// GetTriggers returns an array like this:
	/*

	Array
	(
		[0] => Array						// Event 1
			(
				[0] => mail user @1@		// action
				[1] => 4611					// template fileid
				[2] => n					// attach to entity/customer (y|n)
				[3] => 12					// report fileid or 2147483647 for PDF
				[4] => email/inmail			// E-mail or inmail
				[5] => admin_request		// The onchanhge value
			)
		[1] => Array						// Event 2
			(
				[0] => mail owner			// action
				[1] => 0					// template fileid
				[2] => y					// attach to entity/customer (y|n)
				[3] => 12					// report fileid or 2147483647 for PDF
			)
	)

	*/

	if ($onchange == "owner" || $onchange == "assignee") {
		if (is_numeric($to_value)) {
			$user = GetUserRow($to_value);
			$group = $user['PROFILE'];
			if (is_numeric($group)) {
				$sql_group_ins = " OR to_value ='G:" . $group . "'";
			}
		}
	}


	if (substr($onchange,0,13) == "entity_change") {
		$owner = GetEntityOwner($eid);
		$assig = GetEntityAssignee($eid);
		if ($owner != $GLOBALS['USERID'] && $assig == $GLOBALS['USERID']) {
			$sqlins = "(onchange='" . mres($onchange) . "' OR onchange='entity_change_by_not_owner')";
		} elseif ($owner == $GLOBALS['USERID'] && $assig != $GLOBALS['USERID']) {
			$sqlins = "(onchange='" . mres($onchange) . "' OR onchange='entity_change_by_not_assignee')";
		} elseif ($owner != $GLOBALS['USERID'] && $assig != $GLOBALS['USERID']) {
			$sqlins = "(onchange='" . mres($onchange) . "' OR onchange='entity_change_by_not_assignee' OR onchange='entity_change_by_not_owner' OR onchange='entity_change_by_not_owner_nor_assignee')";
		} else {
			$sqlins = "onchange='" . mres($onchange) . "'";
		}




	} else {
		$sqlins = "onchange='" . mres($onchange) . "'";
	}


	$ret = array();
	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "triggers WHERE enabled='yes' AND " . $sqlins . " AND (to_value='" . mres($to_value) . "'  OR to_value='@SE@' OR to_value='Miscellaneous trigger' " . $sql_group_ins . ") AND (on_form='" . mres($form) . "' OR on_form='all') ORDER BY processorder";
	$result = mcq($sql,$db);

	while ($row = mysql_fetch_array($result)) {
			if (!$flextableid && CheckTriggerConditions($eid, $row['tid'])) {
				array_push($ret,array($row['action'],$row['template_fileid'],$row['attach'],$row['report_fileid'],$row['mailtype'],$row['onchange'], $row['tid']));
				qlog(INFO, "Trigger " . $row['onchange'] . " (action " . $row['action'] . ") is appropriate");
				journal($eid, "Trigger " . $row['tid'] . " found to be appropriate");

				if ($msg = GetTriggerConditionSuccessMessage($row['tid'])) {
					$msg = ParseTemplateAll($msg, $eid);
					PrintInterruptMessage("E" . $eid . "T" . $row['tid'] . ": <strong><span class='noway'>" . htme($msg) . "</span></strong>");
					journal($eid, "Message display: E" . $eid . "T" . $row['tid'] . ": " . $msg);
				}
			} elseif (is_numeric($flextableid) && CheckTriggerConditions($eid, $row['tid'], $flextableid)) {
				qlog(INFO, "Trigger " . $row['onchange'] . " (action " . $row['action'] . ") is appropriate");
				journal($row['tid'], "Trigger " . $row['onchange'] . " (action " . $row['action'] . ") is appropriate", "trigger");
				array_push($ret,array($row['action'],$row['template_fileid'],$row['attach'],$row['report_fileid'],$row['mailtype'],$row['onchange'],$row['tid']));
				if ($msg = GetTriggerConditionSuccessMessage($row['tid'])) {
					$msg = ParseFlexTableTemplate($flextableid, $eid, $msg);
					PrintInterruptMessage("E" . $eid . "T" . $row['tid'] . ": <strong><span class='noway'>" . htme($msg) . "</span></strong>");
					journal($eid, "Message display: E" . $eid . "T" . $row['tid'] . ": " . $msg, "flextable" . $flextableid);
				}
			} else {
				qlog(INFO, "Trigger is not appropriate due to its conditions");
				if ($msg = GetTriggerConditionFailMessage($row['tid'])) {
					$msg = ParseTemplateAll($msg, $eid);
					PrintInterruptMessage("E" . $eid . "T" . $row['tid'] . ": <strong><span class='noway'>" . htme($msg) . "</span></strong>");
					journal($eid, "Message display: E" . $eid . "T" . $row['tid'] . ": " . $msg);
				}

			}
	}

	return($ret);
}
function PrintInterruptMessage($msg) {
	if (!$GLOBALS['NO_MSG']) {
		$GLOBALS['INTERRUPTMESSAGE'] = true;
		$GLOBALS['INTERRUPTMESSAGES'] .= $msg . "<br>";
	}
}
function GetTriggerConditionSuccessMessage($tid) {
	$t = db_GetRow("SELECT successmessage FROM " . $GLOBALS['TBL_PREFIX'] . "triggerconditions WHERE triggerid='" . mres($tid) . "'");
	if ($t['successmessage']) {
		return($t['successmessage']);
	} else {
		return(false);
	}
}
function GetTriggerConditionFailMessage($tid) {
	$t = db_GetRow("SELECT failmessage FROM " . $GLOBALS['TBL_PREFIX'] . "triggerconditions WHERE triggerid='" . mres($tid) . "'");
	if ($t['failmessage']) {
		return($t['failmessage']);
	} else {
		return(false);
	}
}
function ProcessMailQueue() {
	// This function processes the mail queue. This is done by updating it first to set a hash value as identification.
	// After that, the row having the hash will be processed and send.
	
	// Set the maximum number of rows to process per function run
	$max = 50;
	$curuser = $GLOBALS['USERID'];

	$u = date('U');
	$worker_hash = md5(rand() . rand() . date('U') . $GLOBALS['USERNAME'] . $GLOBALS['USERID']) . md5(rand());
	mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "mailqueue SET worker_hash ='" . $worker_hash . "' WHERE worker_hash ='' AND `status` = 'unsent' LIMIT " . $max, $db);
	$qtp = db_GetFlatArray("SELECT queueid FROM " . $GLOBALS['TBL_PREFIX'] . "mailqueue WHERE worker_hash = '" . $worker_hash . "' ORDER BY queueid", $db);

	foreach ($qtp AS $qe) {

		$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "mailqueue WHERE queueid = '" . $qe . "'", $db);

		// Load user context (important!)
		if ($lastuser != $row['user']) {
			$GLOBALS['USERID'] = $row['user'];
			$GLOBALS['NO_MSG'] = true;
			InitUser($row['user']);
		}
		
		// Actually send the e-mail here
		if ($row['template'] != "" && $row['to'] != '' && $row['from'] != "") {
			$adj = RealRealMail($row['template'],$row['entity'],$row['customer'],$row['from'],$row['fromname'],$row['to'],$row['PDF'],$row['subject'],$row['attach_to_dossier'],$row['attach_as_filename'],$row['report_attach'], $row['flextableid'], $row['flextablerecord']);
			mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "mailqueue SET worker_hash='n/a', status='sent', date_sent=NOW() WHERE queueid=" . $qe, $db); 

			log_msg("Sending email from " . $row['from'] . " to " . $row['to'] . " subject " . $row['subject']);
			//print ("Sending email from " . $row['from'] . " to " . $row['to'] . " subject " . $row['subject']);
		}

		$lastuser = $row['user'];
	}
	
	if (is_numeric($curuser)) {
		$GLOBALS['USERID'] = $curuser;
		$GLOBALS['NO_MSG'] = false;
		InitUser();
	}

}

function RealMail($template,$entity,$customer,$From,$Fromname,$To,$PDF,$Subject,$attach_to_dossier=false,$attach_as_filename=false,$report_attach=false, $flextableid=false, $flextablerecord=false) {
	if (GetSetting("UseMailQueue") == "Yes") {
		
		$tmp = "";
		// Double entry check
		$dcheck = "SELECT queueid FROM " . $GLOBALS['TBL_PREFIX'] . "mailqueue WHERE status='unsent' AND `template` = '" . mres($template) . "' AND `user`  = '" . mres($GLOBALS['USERID']) . "' AND `entity`  = '" . mres($entity) . "' AND `customer` = '" . mres($customer) . "' AND `from`  = '" . mres($From) . "' AND `fromname` = '" . mres($Fromname) . "' AND `to`  = '" . mres($To) . "' AND `subject`  = '" . mres($Subject) . "' AND `attach_to_dossier`  = '" . mres($attach_to_dossier) . "' AND `attach_as_filename`  = '" . mres($attach_as_filename) . "' AND `report_attach` = '" . mres($report_attach) . "' AND `flextableid`  = '" . mres($flextableid) . "' AND `flextablerecord` = '" . mres($flextablerecord) . "'";
		
		$tmp = db_GetValue($dcheck);
		
		//qlog(INFO, "MQ Nummer is $tmp $dcheck");


		if (!is_numeric($tmp)) {
		
			$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "mailqueue(`template`,`user`,`entity`,`customer`,`from`,`fromname`,`to`,`PDF`,`subject`,`attach_to_dossier`,`attach_as_filename`,`report_attach`,`flextableid`,`flextablerecord`, `date_queued`, `status`) VALUES('" . mres($template) . "','" . $GLOBALS['USERID'] . "','" . mres($entity) . "','" . mres($customer) . "','" . mres($From) . "','" . mres($Fromname) . "','" . mres($To) . "','" . mres($PDF) . "','" . mres($Subject) . "','" . mres($attach_to_dossier) . "','" . mres($attach_as_filename) . "','" . mres($report_attach) . "','" . mres($flextableid) . "','" . mres($flextablerecord) . "',NOW(),'unsent')";

		// This function is NOT using mcq() te prevent loops!
			mysql_query($sql);
		} else {
			qlog(INFO, "Double message added to mailqueue. Skipped.");
		}

		
	} else {
		RealRealMail($template,$entity,$customer,$From,$Fromname,$To,$PDF,$Subject,$attach_to_dossier,$attach_as_filename,$report_attach, $flextableid, $flextablerecord);
	}
}

function RealRealMail($template_id,$entity,$customer,$From,$Fromname,$To,$PDF,$Subject,$attach_to_dossier,$attach_as_filename,$report_attach, $flextableid, $flextablerecord) {

	if ($GLOBALS['DISABLEMAIL']) return(true);

	if (is_numeric($template_id)) {
		$template = GetTemplate($template_id);
		$Subject = GetTemplateSubject($template_id);
		$stylesheet = ReturnTemplateStyleSheet($template_id);
		if ($stylesheet == "") {
			$stylesheet = ReturnStyleSheet(GetSetting("SYSWIDECSS"));
		}
	} else {
		$template = $template_id;
//		qlog(WARNING, "WARNING: Mail template not passed by reference to RealMail function!");
	}
	
	if (strstr($report_attach, "ALL_ATTM") && $report_attach != "ALL_ATTM") {
		$do_attach_all_files = true;
		$report_attach = str_replace("ALL_ATTM", "", $report_attach);
	}
	/*
	WhenAttachingFilesToMailAlsoAttachEarlierMailAttachements +1
	WhenAttachingMailToRecordAlsoAttachAnyGeneratedReports +2
	*/
	
	if (strstr($report_attach, "+1")) {
		$also_attach_earlier_saved_mails = true;
		$report_attach = str_replace("+1", "", $report_attach);
		qlog(INFO, "Also attaching earlier saved mails to the e-mail");
	} else {
		$also_attach_earlier_saved_mails = false;
	}
	if (strstr($report_attach, "+2")) {
		$also_attach_generated_reports = true;
		$report_attach = str_replace("+2", "", $report_attach);
		qlog(INFO, "Also attaching generated report to the record");
	} else {
		$also_attach_generated_reports = false;
	}

	require_once($GLOBALS['PATHTOINTERLEAVE'] . "lib/class.phpmailer.php");

	if (is_numeric($report_attach)) {

		$tname = GetTemplateName($report_attach);
		$extension1 = explode("." , $tname);
		$extension = $extension1[count($extension1)-1];

		if ($extension == "xml" || $extension == "csv" || $extension == "xls" || $extension == "txt" ) {
			$GLOBALS['DONTFORMATNUMBERS'] = true;
		}
	}


	if ($flextableid && $flextablerecord) {

		$flex = true;

		$template = ParseFlexTableTemplate($flextableid, $flextablerecord, $template, false, true, false, "htme");
		$Subject = ParseFlexTableTemplate($flextableid, $flextablerecord, $Subject, false, true, false, "plain");

		$ft = GetFlexTableDefinitions($flextableid);
		$name = $ft[0]['tablename'];
		$reference = $ft[0]['refers_to'];
		$orientation = $ft[0]['orientation'];
		$formid = $ft[0]['formid'];
		$currow = GetFlexTableRow($flextablerecord, $flextableid);
		$ent = $currow['refer'];


		if (IsValidEID($ent) && $ent != "_new_" && $reference == "entity") {
			// Flexrecord is joined to a valid eid
			$eid = $ent;
			$entity = $ent;
			$cid = GetEntityCustomer($eid);
		} elseif ($reference == "customer" && IsValidCID($ent)) {
			$cid = $ent;
		} else {
			unset($ent);
		}



	} else {
		//print "NEE DUS";
	}

	if (!is_array($GLOBALS['email_send_to'])) {
		$GLOBALS['email_send_to'] = array();
	}

	if (strstr($To, "<") && strstr($To, ">")) {
		$tmp = explode("<", $To);
		$tmp = str_replace(">","",$tmp[1]);
		$To = trim($tmp);
		qlog(INFO, "Email address fixed");
	} else {
		qlog(INFO, "Email addess is ok ($To)");
	}
	$entitytrigger = false;
	$customertrigger = false;
	 
	if (ValidateEmail($To)) {

		if ($template) {
			


			if ($entity) {
				$template = ParseTemplateEntity($template,$entity, false, false, false, "htme");
				$Subject = ParseTemplateEntity($Subject,$entity, false, false, false, "plain");
				$customer = GetEntityCustomer($entity);
				if (!$flex) $entitytrigger = true;
			} elseif ($customer > 0) {
				if (!$flex) $customertrigger = true;	
			}
			if ($customer) {
				$template = ParseTemplateCustomer($template,$customer, false, "htme");
				$Subject = ParseTemplateCustomer($Subject,$customer, false, "plain");
			}

			$template = ParseTemplateGeneric($template, "htme");

			if (stristr($template, "<?")) { // PHP exists in template
				$template = EvaluateTemplatePHP($template, $entity, $flextableid, $flextablerecord);
			}

			$Subject = ParseTemplateGeneric($Subject, "plain");
			$template = ParseTemplateCleanUp($template);
			$Subject = strip_tags(ParseTemplateCleanUp($Subject));

		
		


			
			$mail = new PHPMailer();
			
			$mail->CharSet = "utf-8";
			

			if ($From) {
				$mail->From     = $From;
			} else {
				$mail->From     = $GLOBALS['admemail'];
			}

			if (trim($FromName) != "") {
				$mail->FromName = $FromName;
			} else {
				$mail->FromName = $GLOBALS['PRODUCT'] . " Notification Manager";
			}

			if (strstr($GLOBALS['UNIFIED_FROMADDRESS'],"@")) {
				
				$tmp = explode("<", str_replace(">", "", $GLOBALS['UNIFIED_FROMADDRESS']));

				if (ValidateEmail(trim($tmp[1]))) {
					// This probably is in format Name <e@mail.com>
					$mail->From = trim($tmp[1]);

					$name = trim($tmp[0]);
					if ($name == "") {
						$mail->FromName = GetUserName($GLOBALS['USERID']);
					} else {
						$mail->FromName = $name;
					}
				} else {
					$mail->From     = $GLOBALS['UNIFIED_FROMADDRESS'];
					$mail->FromName = GetUserName($GLOBALS['USERID']);
				}
			}

	//		qlog(INFO, "attach REP IS $report_attach");
			if (($report_attach == "ALL_ATTM" || $do_attach_all_files) && ($entity || $flextablerecord)) {

				if (!$also_attach_earlier_saved_mails) {
					$select_ins = " AND filename NOT LIKE '" . mres($GLOBALS['PRODUCT']) . "-HTML_file-%'";
				} else {
					$select_ins = "";				
				}
				
				qlog(INFO, "This triggered e-mail requires all entity attachments to be attached");

				if ($flextableid > 0) {
					$fids = db_GetArray("SELECT fileid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid='" . mres($flextablerecord) . "' AND type='flextable" . $flextableid . "' " . $select_ins);
					foreach ($fids AS $file) {
						$templateXX = GetFileContent($file['fileid']);
						$mail->AddStringAttachment($templateXX, GetFileName($file['fileid']));
						qlog(INFO, "Attached file " . GetFileName($file['fileid']));
					}
				} else {
					$fids = db_GetArray("SELECT fileid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid='" . mres($entity) . "' AND type='entity' " . $select_ins);
					foreach ($fids AS $file) {
						$templateXX = GetFileContent($file['fileid']);
						$mail->AddStringAttachment($templateXX, GetFileName($file['fileid']));
						qlog(INFO, "Attached file " . GetFileName($file['fileid']));
					}
				}
			} 
			if ($attach_to_dossier) {
				if (!ValidateEmail($To)) {
					$ins = "<span class='noway'> E-mail NOT sent! E-mail address is not a valid internet email address!</span><br>";
				} else {
					unset($ins);
				}
				$total = $GLOBALS['PRODUCT'] . " E-mail merge " . date("Fj-Y-Hi") . "<br>" . $ins;
				$total .= "To: " . $To . "<br>";
				$total .= "Subject: " . $Subject . "<br><br>" . $template;
				if (!$attach_as_filename) {
					$filename = $GLOBALS['PRODUCT'] . "-HTML_file-" . date("Fj-Y-Hi") . "h.HTML";
				} else {
					$filename = $attach_as_filename;
				}
				if ($attach_to_dossier=="entity" || $attach_to_dossier=="both") {
					if ($entity) {
						qlog(INFO, "Attached HTML e-mail file to entity");
						$attachment = AttachFile($entity,$filename,$total,"entity","HTML", false, true);
					}
				}
				if ($attach_to_dossier=="customer" || $attach_to_dossier=="both") {
					if ($customer) {
						qlog(INFO, "Attached HTML e-mail file to customer");
						$attachment = AttachFile($customer,$filename,$total,"cust","HTML", false, true);
					}
				}

				if ($attach_to_dossier=="entity" && $flextablerecord && $flextableid) {
					qlog(INFO, "Attached HTML e-mail file to flextable record");
					$attachment = AttachFile($flextablerecord,$filename,$total,"flextable" . $flextableid ,"HTML", false, true);
				}


			}
			if ($report_attach=="PDF" && $entity) {

				qlog(INFO, "Attaching PDF report to this triggered e-mail");
				$mail->AddStringAttachment(CreatePDFEntityReport($entity), "EntityReport-" . $entity . ".pdf");

			} elseif (is_numeric($report_attach) && $report_attach!=0) {

				// A report must be attached
				qlog(INFO, "Attaching report " . $report_attach . " to this triggered e-mail");

				if (GetTemplateType($report_attach) == "TEMPLATE_REPORT" || GetTemplateType($report_attach) == "TEMPLATE_PLAIN") {

					qlog(INFO, "Parsing report to attach to mail");

					//$filename = str_replace(" ", "_", str_replace($extension,"",GetTemplateName($report_attach)) . "-" . TransformDate(date("Y-m-d")) . "_" . date('His') . "h." . $extension);

					$filename = str_replace(" ", "_", GetTemplateSubject($report_attach));
					
					if (IsValidEID($entity)) {
						$filename = ParseTemplateEntity($filename, $entity, true, false, "dontformatnumbers", "FixRTF");
					}
					if ($customer) {
						$filename = ParseTemplateCustomer($filename, $customer, "dontformatnumbers", "FixRTF", false);
					}
					if ($flex) {
						$filename = ParseFlexTableTemplate($flextableid, $flextablerecord, $filename, false, true, "dontformatnumbers", "plain");
					}


					$fn = GetTemplateName($report_attach);

					$tmp_fn = explode(".", $fn);
					$ext = "." . strtolower($tmp_fn[(count($tmp_fn) -1)]);

					if ($ext == ".rtf") {
							$ct = "Application/RTF";
							$rtf = true;
							$report_template = GetTemplate($report_attach);
							$template_name   = GetTemplateName($report_attach);
							if (IsValidEID($entity)) {
								$report_template = ParseTemplateEntity    ($report_template, $entity, true, false, "dontformatnumbers", "FixRTF");
								$template_name = ParseTemplateEntity    ($template_name, $entity, true, false, "dontformatnumbers", "FixRTF");
							}
							$report_template = ParseTemplateGeneric   ($report_template);

						if ($flex) {
							$report_template = ParseFlexTableTemplate($flextableid, $flextablerecord, $report_template, false, true, "dontformatnumbers", "FixRTF");
							qlog(INFO, "HH Parsed it");

						}
					} elseif ($ext == ".xlsx" || $ext == ".xlsm" || $ext == ".docx" || $ext == ".odt" || $ext == ".ods") {
							
							if ($ext == ".xlsx" || $ext == ".xlsm" || $ext == ".ods") {
								$dfn = "dontformatnumbers";
							} else {
								$dfn = false;
							}

							$template_name   = GetTemplateName($report_attach);
							$report_template = ParseZippedContent($report_attach, $entity, GetEntityCustomer($entity), $flextableid, $flextablerecord);


							$nofurtherparse = true;

							if (IsValidEID($entity)) {
								$template_name = ParseTemplateEntity($template_name, $entity, true, false, $dfn, "FixRTF");
							}
							if ($flex) {
								$report_template = ParseFlexTableTemplate($flextableid, $flextablerecord, $report_template, false, true, $dfn, "FixRTF");
								$template_name = ParseFlexTableTemplate($flextableid, $flextablerecord, $template_name, false, true, $dfn, "FixRTF");
								qlog(INFO, "HH Parsed it");

							}
							$template_name = ParseTemplateGeneric   ($template_name);
					} else {
							$report_template = GetTemplate($report_attach);
							$template_name   = GetTemplateName($report_attach);

							$template_name = ParseTemplateEntity    ($template_name, $entity, true, false, "dontformatnumbers", "FixRTF");
							$template_name = ParseTemplateGeneric   ($template_name);
							
							if (IsValidEID($entity)) {
								$report_template = ParseTemplateEntity    ($report_template, $entity, true, false, "dontformatnumbers", "FixRTF");
							}
							
							if ($flex) {
								$report_template = ParseFlexTableTemplate($flextableid, $flextablerecord, $report_template, false, true, "dontformatnumbers", "FixRTF");
								$template_name = ParseFlexTableTemplate($flextableid, $flextablerecord, $template_name, false, true, "dontformatnumbers", "FixRTF");
								qlog(INFO, "HH Parsed it");
							}
							$report_template = ParseTemplateGeneric   ($template_name);
							$template_name = ParseTemplateGeneric   ($template_name);

					}

				} elseif (GetTemplateType($report_attach) == "TEMPLATE_REPORT_PDF") {

					qlog(INFO, "Parsing PDF-type report to attach to mail");
					$templatePDF = GetTemplate($report_attach);
					//$templatePDF = ReturnTemplateStyleSheet($report_attach) . $templatePDF;
					
					
					if ($flex) $templatePDF = ParseFlexTableTemplate($flextableid, $flextablerecord, $templatePDF, false, true, false, "htme");
					
					$templatePDF = ParseTemplateAll($templatePDF, $entity, true, "htme");

					$filename = str_replace(" ", "_", GetTemplateSubject($report_attach)) . ".pdf";

					$subj = GetTemplateName($report_attach);
					
					if (IsValidEID($entity)) {
						$filename = ParseTemplateEntity($filename, $entity, true, false, false, "plain");
						$subj = ParseTemplateEntity($subj, $entity, true, false, false, "plain");

					}
					if ($customer) {
						$filename = ParseTemplateCustomer($filename, $customer, false,  "plain", false);
						$subj = ParseTemplateCustomer($subj, $customer, false, "plain" , false);
					}
					if ($flex) {
						$filename = ParseFlexTableTemplate($flextableid, $flextablerecord, $filename, false, true, "dontformatnumbers", "plain");
						$subj =     ParseFlexTableTemplate($flextableid, $flextablerecord, $subj    , false, true, "dontformatnumbers", "plain");
						qlog(INFO, "HH Parsed it");
					}

					$tmp = GetTemplateShowOnAddList($report_attach);

					if ($tmp == "n") { // No logo
						$nologo = true;
					} else {
						$noologo = false;
					}
					$subj = ParseTemplateLanguageTags($subj);
					$filename = ParseTemplateLanguageTags($filename);
					$templatePDF = ParseTemplateLanguageTags($templatePDF);
					$noheader = false;
					$nofooter = false;
					if (GetAttribute("template", "HideHeader", $report_attach) == "Yes") $noheader = true;
					if (GetAttribute("template", "HideFooter", $report_attach) == "Yes") $nofooter = true;
					$report_template = CreatePDFEntityReportBasedOnHTML($templatePDF, $subj, $filename, $nologo, GetTemplateOrientation($report_template), $noheader, $nofooter);

					unset($templatePDF);

				}

				$mail->AddStringAttachment($report_template, $filename);
				
				if ($also_attach_generated_reports) {
					
					if ($entitytrigger || $attach_to_dossier=="both") {
						///print "Atatch to entity";
						if ($entity) {
							qlog(INFO, "Attached generated report to entity");
							$attachment = AttachFile($entity,$filename,$report_template,"entity",TryToFigureOutFileType($filename), false, true);
						}
					}
					if ($customertrigger || $attach_to_dossier=="both") {
						//print "Atatch to customer";
						if ($customer) {
							qlog(INFO, "Attached HTML e-mail file to customer");
							$attachment = AttachFile($customer,$filename,$report_template,"cust",TryToFigureOutFileType($filename), false, true);
						}
					}
	
					if ($flex) {
						//print "Atatch to $flextablerecord of $flextableid";
						qlog(INFO, "Attached HTML e-mail file to flextable record");
						$attachment = AttachFile($flextablerecord,$filename,$report_template,"flextable" . $flextableid ,TryToFigureOutFileType($filename), false, true);
					}
				}

			}


			//if (stristr($To, "interleave.nl")) {// For Debug purposus only, attach trace when mailing to an address @ interleave.nl. This must be deleted in productions versions. CRMentiy.
			//	$mail->AddStringAttachment($GLOBALS['pagelog'] . "\n\n" . GetBackTrace(), "trace.txt");
			//}

			$mail->Host     = $GLOBALS['SMTPserver'];
			$mail->Mailer   = $GLOBALS['MailMethod'];
			if ($GLOBALS['MailUser'] != "" && $GLOBALS['MailPass'] != "") {
				$mail->Username = $GLOBALS['MailUser'];
				$mail->Password = $GLOBALS['MailPass'];
			}
			$mail->IsHTML(true);

			$nt = $GLOBALS['doctype'] . "\n" . $GLOBALS['htmlopentag'] . "\n";
			$nt .= "<head>\n<title>" . $Subject . "</title>\n";
			// The stylesheet already has script header & footer
			$nt .= "\n" . $stylesheet . "\n\n";
			$nt .= "</head>\n\n<body><div>\n" . $template . "\n</div></body>\n</html>\n";

			$mail->Body    = $nt;
			$mail->AltBody = htmlspecialchars_decode(strip_tags($template), ENT_QUOTES);

			if (is_array($To)) {
				foreach ($to AS $receipient) {
					if (ValidateEmail($receipient)) {
						if ((!in_array($To,$GLOBALS['email_send_to'])) || $GLOBALS['ONEMAILPERTRIGGER'] == "No") {
							$mail->AddAddress($receipient,$receipient);
							$sto .= "," . $receipient;
							$rec++;
							array_push($GLOBALS['email_send_to'],$receipient);
							$add_to_journal .= "\nEmail sent to " . $receipient;
							log_msg("Triggered e-mail send to " . $receipient);
						} elseif ($GLOBALS['ONEMAILPERTRIGGER'] == "Yes") {
							qlog(INFO, "Skipping " . $receipient . ", already send this guy something");
							log_msg("Skipping " . $receipient . ", already send this guy something");
							$add_to_journal .= "\nSkipping " . $receipient . ", already send this guy something";
						} else {
							log_msg("ERROR: Don't know what to do with this triggered e-mail (1)");
							qlog(ERROR, "ERROR: Don't know what to do with this triggered e-mail (1)");
						}
					} else {
						qlog(INFO, "Skipping " . $receipient . ", this email address is not a valid internet email address.");
						log_msg("Skipping " . $receipient . ", this email address is not a valid internet email address.","");
						$add_to_journal .= "\nSkipping " . $receipient . ", this email address is not a valid internet email address.";
					}
				}
			} else {

				if (ValidateEmail($To)) {
					if ((!in_array($To,$GLOBALS['email_send_to'])) || $GLOBALS['ONEMAILPERTRIGGER'] == "No") {
						$mail->AddAddress($To,$To);
						$sto = $To;
						array_push($GLOBALS['email_send_to'],$To);
						$rec++;
						$add_to_journal .= "\nEmail sent to " . $To;
					} elseif ($GLOBALS['ONEMAILPERTRIGGER'] == "Yes") {
						qlog(INFO, "Skipping " . $To . ", already send this guy something");
						log_msg("Skipping " . $To . ", already send this guy something");
						$add_to_journal .= "\nSkipping " . $To . ", already send this guy something";
					} else {
						log_msg("ERROR: Don't know what to do with this triggered e-mail (2)");
						qlog(ERROR, "ERROR: Don't know what to do with this triggered e-mail (2)");
					}

				} else {
					qlog(INFO, "Skipping " . $To . ", this email address is not a valid internet email address.");
					log_msg("Skipping " . $To . ", this email address is not a valid internet email address.","");
					$add_to_journal .= "\nSkipping " . $To . ", this email address is not a valid internet email address.";
				}
			}

			$mail->Subject = strip_tags($Subject); // Subject should habe been parsed using PLAIN method, but an extra filter won't hurt

			if ($rec>0) {
				if(!$mail->Send()) {
					echo "<span class='noway'>There has been a mail error sending to $sto:" . $mail->ErrorInfo . ". Please contact your system administrator.</span><br>";
					//log_msg("WARNING: Sending e-mail to " . $sto . " failed:" . $mail->ErrorInfo,"");
					$add_to_journal .= "\nSending e-mail to " . $sto . " failed:" . $mail->ErrorInfo;

					//qlog(INFO, "E-mail NOT sent.. ERROR: " . $mail->ErrorInfo);

				} else {
					log_msg("Notification e-mail sent to " . $who . " " . $receipient_mail,"");
					//$add_to_journal .= "\nNotification e-mail sent to " . $who . " " . $receipient_mail;
					if ($entity) journal($entity, "E-mail was successfully delivered to mail server: " . $To);
					qlog(INFO, "A nice e-mail was sent.");
				}
			}

			$mail->ClearAddresses();
			$mail->ClearAttachments();
		} else {
			log_msg("WARNING: No template received! Not Mailing.");
			journal($entity, "WARNING: Tried to mail but template is incorrect or empty! " . $To);
			return("No template received. Quitting.");
		}
	} else {
		log_msg("WARNING: Tried to mail but e-mail address is incorrect or empty! " . $To);
		qlog(WARNING, "WARNING: Tried to mail but e-mail address is incorrect or empty! " . $To);
		journal($entity, "WARNING: Tried to mail but e-mail address is incorrect or empty! " . $To);
	}

	return($add_to_journal);
}
function SimpleMail($from, $to, $subject, $body, $file_attachment_array) {
	require_once($GLOBALS['PATHTOINTERLEAVE'] . "lib/class.phpmailer.php");
	qlog(INFO, "MXR Called to send a mail to " . $to . " with subject " . $subject);
	$mail = new PHPMailer();
	qlog(INFO, "MXR Ok 1");
	if (strlen($lang['CHARACTER-ENCODING'])>2) {
		$mail->CharSet = $lang['CHARACTER-ENCODING'];
	}
	if (strstr($GLOBALS['UNIFIED_FROMADDRESS'],"@")) {
		
		$tmp = explode("<", str_replace(">", "", $GLOBALS['UNIFIED_FROMADDRESS']));

		if (ValidateEmail(trim($tmp[1]))) {
			// This probably is in format Name <e@mail.com>
			$mail->From = trim($tmp[1]);

			$name = trim($tmp[0]);
			if ($name == "") {
				$mail->FromName = GetUserName($GLOBALS['USERID']);
			} else {
				$mail->FromName = $name;
			}
		} else {
			$mail->From     = $GLOBALS['UNIFIED_FROMADDRESS'];
			$mail->FromName = $GLOBALS['UNIFIED_FROMADDRESS'];
		}
	} else {
			$mail->From     = $from;
			$mail->FromName = $from;
	}
	qlog(INFO, "MXR Ok 2");
	$mail->Subject  = $subject;
	$mail->Host     = $GLOBALS['SMTPserver'];
	$mail->Mailer   = $GLOBALS['MailMethod'];
	if ($GLOBALS['MailUser'] != "" && $GLOBALS['MailPass'] != "") {
		$mail->Username = $GLOBALS['MailUser'];
		$mail->Password = $GLOBALS['MailPass'];
	}
	qlog(INFO, "MXR Ok 3");
	$mail->IsHTML(true);
	$mail->Body    = $body;
	$mail->AltBody = htmlspecialchars_decode(strip_tags($body), ENT_QUOTES);
	qlog(INFO, "MXR Ok 4");
	if (is_array($to)) {
		foreach ($to AS $too) {
			if ($too != "") {
				$mail->AddAddress($too,$too);
			}
		}
	} else {
		$mail->AddAddress($to,$to);
	}
	qlog(INFO, "MXR Ok 5");
	if (is_array($file_attachment_array)) {
		foreach ($file_attachment_array AS $file) {
			if (CheckFileAccess($file) == "ok") {
				$mail->AddStringAttachment(GetFileContent($file), GetFileName($file));
			}
		}
	}
	qlog(INFO, "MXR Ok 6");
	if(!$mail->Send()) {
		log_msg("WARNING: Sending e-mail to $sto failed:" . $mail->ErrorInfo,"");
		qlog(INFO, "E-mail NOT sent.. ERROR: " . $mail->ErrorInfo);
	} else {
		log_msg("Notification e-mail sent to $who $receipient_mail","");
		qlog(INFO, "A nice e-mail was sent.");
	}
}
// FOLLOWING FUNCTION SHOULD BE IDENTICAL TO uselogger - uselogger MUST GO
function log_msg($comment,$dummy_extra_not_used=false){

	if ($GLOBALS['NO_INSERTS_TO_LOG']) {
		return(true);
	}
	
	if (getenv(HTTP_X_FORWARDED_FOR)){
		$ip=getenv(HTTP_X_FORWARDED_FOR);
	} else {
		$ip=getenv(REMOTE_ADDR);
	}

	$url = $_SERVER['REQUEST_URI'];

	$query ="INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "uselog (ip, url, useragent, qs, user) VALUES ('" . mres($ip) . "', '" . mres($url) . "', '" . mres($_SERVER['HTTP_USER_AGENT']) . "' , '" . mres($comment) . "','" . mres($GLOBALS['USERID'] . " -- " . GetUserName($GLOBALS['USERID'])) . "')";

	mcq($query,$db);
	
	if (strstr($comment,"NOTICE") || strstr($comment,"WARNING") || strstr($comment,"ERROR")) {

		$txt_to_email = "<pre>IP-address: " . $ip . " \nRepository:" . $GLOBALS['title'] . "\nUser: " . $GLOBALS['USERNAME'] . "\nMessage:\n<strong>" . $comment  . "</strong>";

		ob_start();
		debug_print_backtrace();
		$txt_to_email .= nl2br("\nBACKTRACE:\n" . ob_get_contents() . "\n\n");
		ob_end_clean();

		$tmp = "";

		if (isset($_REQUEST['password'])) {
			$tmp = $_REQUEST['password'];
			$_REQUEST['password'] = "[[deleted]]";
		}
		
		$txt_to_email .= "\nRequest" . string_r($_REQUEST);
		$txt_to_email .= "\nServer" . string_r($_SERVER);

		if ($tmp) {
			$_REQUEST['password'] = $tmp;
		}
		
		$list = array();

		if (strstr($comment,"NOTICE")) {
			
			$subj = substr($comment, 0, 60) . "...";
			AddMessage("admin", $GLOBALS['USERID'], "<img src='images/error.gif' alt=''> " . ($subj), ($txt_to_email));

		} elseif (strstr($comment,"WARNING")) {

			$comment = str_replace("WARNING: ", "", $comment);
			$list = GetTriggers("log_warning", "Administrative trigger", false, false, false, false);
			$subj = substr($comment, 0, 60) . "...";
			AddMessage("admin", $GLOBALS['USERID'], "<img src='images/error.gif' alt=''> " . ($subj), ($txt_to_email));
			$type = "A warning was issued: " . $GLOBALS['title'];

		} elseif (strstr($comment,"ERROR")  && !stristr($comment, "added to entity")) {
			$comment = str_replace("ERROR: ", "", $comment);
			$list = GetTriggers("log_error", "Administrative trigger", false, false, false, false);
			$subj = substr($comment, 0, 60) . "...";
			AddMessage("admin", $GLOBALS['USERID'], "<img src='images/error.gif' alt=''> " . ($subj), ($txt_to_email));
			$type = "An error occured: " . $GLOBALS['title'];
		}

		foreach ($list AS $trigger) {
			if (substr($trigger['0'], 0, 11) == "mail user @") {
				$user = str_replace("mail user ", "", $trigger[0]);
				$user = str_replace("@", "", $user);
				$email = GetUserEmail($user);
				RealMail($txt_to_email,0,0,$GLOBALS['admemail'],"INTERLEAVE",$email,false,$type,false,false,false, false, false);

			} elseif ($trigger[0] == "mail admin") {
				$email = $GLOBALS['admemail'];
				RealMail($txt_to_email,0,0,$GLOBALS['admemail'],"INTERLEAVE",$email,false,$type,false,false,false, false, false);
			} elseif (stristr($trigger[0],"mail group @")) {

				$x = explode("@",$trigger[0]);
				$y = str_replace("@","",$x[1]);

				$lom = GetUsersOfGroup($y);

				foreach ($lom AS $user) {
					$email = GetUserEmail($user);
					RealMail($txt_to_email,0,0,$GLOBALS['admemail'],"INTERLEAVE",$email,false,  $type,false,false,false, false, false);
				}
			}
				
		}

	}
}
function CountTotalNumOfRecords($tbl_prefix) {
	SetTIU($tbl_prefix);
	foreach ($GLOBALS['TABLES_IN_USE'] AS $table) {
		$res = db_GetRow("SELECT COUNT(*) FROM " . $table);
		$enum += $res[0];
	}
	return($enum);
}

function FunkifyLOV($value) {
		// value = serialized b64_encoded string
		$tmp = @unserialize($value);
		if (is_array($tmp)) {
			foreach ($tmp AS $rij) {
				if (base64_decode($rij)) {
					if ($first) $ret .= ", ";
					$first = true;
					$ret .= base64_decode($rij);
				} else {
					if (is_array($rij)) { // This must be a diary field
						$ret .= fillout(date("Y-m-d", $rij[0]), 30) . " " . fillout(GetUserName($rij[1]), 30) . " " . $rij[2] . "\n";
					} else {
						$ret .= $rij; // Unknown type, shouldn't happen
					}
				}
			}
			$ret = strip_tags(html_entity_decode(str_replace("<br>","\n",$ret)));
		} else {
			$ret = $value;
		}
		return($ret);
}
function ParseDefaultValueTags($defval, $encode="htme") {
	
	

	$defval = str_replace('@BASEURL@',$encode($GLOBALS['BASEURL']),$defval);
	$defval = str_replace('@REPOSNUM@',$encode($GLOBALS['ORIGINAL_REPOSITORY']),$defval);
	$defval = str_replace('@ADMINEMAIL@',$encode($GLOBALS['admemail']),$defval);
	$defval = str_replace('@ADMEMAIL@',$encode($GLOBALS['admemail']),$defval);
	$defval = str_replace('@WEBHOST@',$encode($GLOBALS['webhost']),$defval);
	$defval = str_replace('@TITLE@',$encode($GLOBALS['title']),$defval);
	$defval = str_replace("@DATE@",$encode(TransformDate(date('d-m-Y'))),$defval);
	$defval = str_replace("@UNFORMATTED_DATE@",$encode(date('d-m-Y')),$defval);
	

	$defval = str_replace("@TODAY@", TransformDate(date('d-m-Y')), $defval);
	$defval = str_replace("@NOW@", date('Y-m-d') . " " . date('H:i:s'), $defval);
	$defval = str_replace("@TODAY_UNFORMATTED@", (date('d-m-Y')), $defval);
	$defval = str_replace("@NOW_UNFORMATTED@", date('Y-m-d') . " " . date('H:i:s'), $defval);

	$defval = str_replace("@USERID@", $GLOBALS['USERID'], $defval);
	$defval = str_replace("@USER@", $encode(GetUserName($GLOBALS['USERID'])), $defval);
	$defval = str_replace("@CURUSER@", $GLOBALS['USERID'], $defval);
	$defval = str_replace("@USERNAME@",$encode(GetUserName($GLOBALS['USERID'])), $defval);
	$defval = str_replace("@EPOCH@", date('U'), $defval);
	$defval = str_replace("@YESTERDAY@", TransformDate(date('d-m-Y', (date('U') - 86400))), $defval);
	$defval = str_replace("@TOMORROW@", TransformDate(date('d-m-Y', (date('U') + 86400))), $defval);

	$defval = str_replace("@YESTERDAY_UNFORMATTED@", date('d-m-Y', (date('U') - 86400)), $defval);
	$defval = str_replace("@TOMORROW_UNFORMATTED@", date('d-m-Y', (date('U') + 86400)), $defval);
	return($defval);
}

function GetSingleExtraFieldFormBox($eid,$fieldname,$readonly,$IGNORED="entity",$directives=false,$no_searchboxes=false,$interactive_field_list_element=false, $fieldsuffix="", $pregiven_value=false, $referfield=false) {
	global $lang;

	$type = GetExtraFieldTableType($fieldname);

	$tyu = CheckExtraFieldAccess($fieldname, $GLOBALS['USERID']);

	$extrafield = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($fieldname) . "'");

	if ($tyu == "readonly") {
		$readonly = true;
	} elseif ($tyu == "nok") {
		qlog(INFO, "This combination is illegal!");
		return(false);
	} elseif ($tyu == "ok") {
	//	unset($readonly);
	//	unset($roins);
	}
	if (!CheckExtrafieldConditions($eid, $fieldname, $type)) {
		$tmp = GetExtrafieldConditions($fieldname);
		if ($tmp[0]['displayvalueintext'] == "y") {
			$readonly = true;
		} elseif ($tmp[0]['deletetemplaterow'] == "y") {
			return("<!-- Field " . $fieldname . " not shown due to conditions --> @CLEANUP_PLEASE_CLEAR_THIS_LINE@");
		} elseif (GetExtraFieldType($fieldname) == "Button" && GetAttribute("extrafield", "HideButtonWhenNotClickable", $fieldname) == "No") {
			// This is a button, which has an attribute saying it must be show, even when not clickable
			$readonly = true;
			$button = true;
		} else {
			return("<!-- Field " . $fieldname . " not shown due to conditions -->");
		}
	} elseif (strstr($extrafield['fieldtype'], "[copyfield")) {
		$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $extrafield['fieldtype']));
		if (!CheckExtrafieldConditions($eid, $field_to_copy, $type)) {
			$tmp = GetExtrafieldConditions($field_to_copy);
			if ($tmp[0]['displayvalueintext'] == "y") {
				$readonly = true;
			} elseif ($tmp[0]['deletetemplaterow'] == "y") {
				return("<!-- Field " . $fieldname . " not shown due to conditions --> @CLEANUP_PLEASE_CLEAR_THIS_LINE@ ");
			} else {
				return("<!-- Field " . $fieldname . " not shown due to conditions -->");
			}
		}
	}


	$roins .= " %%CLASS%% "; // to be replaced by the contents of $class at the end of this functions

	if ($extrafield['forcing'] == "y") {
		if (CheckExtrafieldRequiredConditions($eid, $extrafield['id'], $extrafield['tabletype']) && !$interactive_field_list_element) {
			$class[] = "RequiredField";
		}
	}
	if (is_numeric($type)) {
		$ctype = " type='flextable" . $type . "'";
		$accesstype = "ok";
		$neav_table = $GLOBALS['TBL_PREFIX'] . "flextable" . $type;
		$id = "recordid";
	} elseif ($type == "customer") {
		$ctype = " type='cust'";
		$accesstype = CheckCustomerAccess($eid);
		$neav_table = $GLOBALS['TBL_PREFIX'] . "customer";
		$id = "id";
	} elseif ($type == "loginusers") {
		$ctype = " type='user'";
		if (CheckFunctionAccess("UserAdmin") <> "ok" && !is_administrator()) {
			$accesstype = "nok"; 
		} else {
			$accesstype = "ok";
		}
		$neav_table = $GLOBALS['TBL_PREFIX'] . "loginusers";
		$id = "id";
	} elseif ($type == "userprofiles") {
		$ctype = " type='group'";
		if (CheckFunctionAccess("UserAdmin") <> "ok" && !is_administrator()) {
			$accesstype = "nok"; 
		} else {
			$accesstype = "ok";
		}
		$neav_table = $GLOBALS['TBL_PREFIX'] . "userprofiles";
		$id = "id";
	} else {
		$ctype = " (type='entity' OR type='')";
		$accesstype = CheckEntityAccess($eid);
		$neav_table = $GLOBALS['TBL_PREFIX'] . "entity";
		$id = "eid";
	}


	if (strstr($extrafield['fieldtype'], "[copyfield")) {

		$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $extrafield['fieldtype']));

		qlog(INFO, "Field " . $extrafield['id'] . " has a property copy setting - copy from " . $field_to_copy);

		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id=" . $field_to_copy . " AND tabletype='" . mres($type) . "'";
		$result= mcq($sql,$db);
		$field_to_copy = mysql_fetch_array($result);



		$extrafield['fieldtype']				= $field_to_copy['fieldtype'];
		$extrafield['options']					= $field_to_copy['options'];
		$extrafield['allowuserstoaddoptions']	= $field_to_copy['allowuserstoaddoptions'];
		$extrafield['forcing']					= $field_to_copy['forcing'];
		$extrafield['sort']						= $field_to_copy['sort'];
		$extrafield['deleted']					= $field_to_copy['deleted'];
		$extrafield['defaultval']				= $field_to_copy['defaultval'];
		$extrafield['storetype']				= $field_to_copy['storetype'];
		$extrafield['accessarray']				= $field_to_copy['accessarray'];
		$extrafield['limitddtowidth']			= $field_to_copy['limitddtowidth'];
		$extrafield['showsearchbox']			= $field_to_copy['showsearchbox'];
		$extrafield['table']					= $field_to_copy['table'];
		$extrafield['size']						= $field_to_copy['size'];
		$extrafield['tabletype']				= $field_to_copy['tabletype'];
		$extrafield['optioncolors']				= $field_to_copy['optioncolors'];

		qlog(INFO, "Fieldtype set to " . $extrafield['fieldtype'] . " due to copy property");
	}

	$extrafield['defaultval'] = ParseDefaultValueTags($extrafield['defaultval'], "htme");

	if ($pregiven_value) {
		$ef_array['value'] = $pregiven_value;
	} elseif (is_numeric($eid)) {
		$sql = "SELECT EFID" . $fieldname . " AS value FROM " . $neav_table . " WHERE " . $id . "=" . $eid;
		$result= mcq($sql,$db);
		$ef_array = mysql_fetch_array($result);
		$c_id = $ef_array['CRMcustomer'];
	} elseif ($eid == "_new_") {
		if ($_REQUEST['EFID' . $fieldname] != "") {
			$ef_array['value'] = $_REQUEST['EFID' . $fieldname];
			$readonly = true;
		}
	}

	$val = $ef_array['value'];
	$curval = $ef_array['value'];

	if ($val == "") {
		if ($directives['EFDefaultOverride'][$fieldname]) {
			$extrafield['defaultval'] = ParseDefaultValueTags($directives['EFDefaultOverride'][$fieldname], "htme");
		}
	}

	if ($readonly && GetExtraFieldType($fieldname) != "Button"  && GetExtraFieldType($fieldname) != "diary") {
		$roins = ' readonly="readonly" ';
		return(GetExtraFieldValue($eid, $fieldname));
	} elseif ($readonly) {
		$roins = ' disabled="disabled" ';
	}


	//edit Jeroen 2010-10-10
	//if (empty($val)) {
	if ($val == "" || $val == "0000-00-00 00:00:00") {
		$val = ParseDefaultValueTags($extrafield['defaultval'], "htme");
		if (strstr($val, "@")) {
			$val = ParseTemplateGeneric($val);
		}
	}


	if (is_numeric($extrafield['size'])) {
		$stp = " size='" . $extrafield['size'] . "' ";
	} else {
		$stp = " size='50' ";
	}

	$javascript_onchange_calls = "";
	$javascript_onclick_calls = "";
	$CustomValidationFunctionPHP = GetAttribute("extrafield", "CustomValidationFunctionPHP", $extrafield['id']);
	if (substr($CustomValidationFunctionPHP,0,8) != "{{none}}" && trim($CustomValidationFunctionPHP) != "") {
		
		if ($extrafield['fieldtype'] == "Button") {
			// For buttons only
			$javascript_onclick_calls = "ValidateByAjaxSimple('" . $eid ."','" . $extrafield['id']. "',this.value, '" . $referfield . "')";
			$javascript_falsevalidate_calls = "ValidateByAjax('" . $eid ."','" . $extrafield['id']. "',this.value, '" . $referfield . "');";
		} else {
			$javascript_onchange_calls .= "ValidateByAjax('" . $eid ."','" . $extrafield['id']. "',this.value,'" . htme($curval) . "', '" . $referfield . "';";
		}
	}
	if (!$interactive_field_list_element) {
	
		if ($type == "entity" || is_numeric($type)) {
			if ($extrafield['fieldtype'] == "checkbox") {
				$javascript_onchange_calls .= "AutoSaveField(document.getElementById('JS_EFID" . $extrafield['id'] . "'));";
			} else {
				$javascript_onchange_calls .= "AutoSaveField(this);";
			}
		}
		if ($extrafield['fieldtype'] == "numeric") {
			if ($type == "entity" || is_numeric($type)) {
				$javascript_onchange_calls = str_replace("this", "document.getElementById('JS_EFID" . $extrafield['id'] . "')", $javascript_onchange_calls);
			}
			if ($GLOBALS['InputNumbersWithSeperators'] != "Yes") {
				$javascript_onchange_calls .= "CheckNumericLocal('JS_EFID" . $extrafield['id'] . "');";
			} else {
				//			$javascript_onchange_calls .= "NumberAutoFormat('JS_EFID" . $extrafield['id'] . "_displayonly', true);";
			}
		} elseif ($extrafield['fieldtype'] == "mail") {
			$javascript_onchange_calls .= "CheckEmailLocal('JS_EFID" . $extrafield['id'] . "');";
		}

		$javascript_onchange_calls .= "AlertUser('IsChanged');UpdateAjaxFields(this.id);";
		
		$fieldId = " name='EFID" . $extrafield['id'] . "' id='JS_EFID" . $extrafield['id'] . "' ";
		$realfieldid = "JS_EFID" . $extrafield['id'];

	} else {
		
		if ($extrafield['fieldtype'] == "numeric" || ($extrafield['fieldtype'] == "Computation" && is_numeric($curval))) {
		//	$javascript_onchange_calls = "NumberAutoFormat('INT_EL_" . $eid . "_" . $extrafield['id'] . $fieldsuffix . "', true);";
		//	$javascript_onfocus_calls = "NumberAutoFormat('INT_EL_" . $eid . "_" . $extrafield['id'] . $fieldsuffix . "', false);";


		}
		if ($extrafield['showasradio'] == "y") {
			$javascript_onchange_calls .= "UpdateFieldValue('" . $eid ."','" . $extrafield['id'] . $fieldsuffix . "',getRadioValueSuperForm('INT_EL_" . $eid . "_" . $extrafield['id'] . $fieldsuffix . "'),'" . htme($curval) . "');SwitchIAback('" . $eid . "','" .  $extrafield['id'] . $fieldsuffix . "');";
		} else {
			$javascript_onchange_calls .= "UpdateFieldValue('" . $eid ."','" . $extrafield['id'] . $fieldsuffix . "',document.getElementById('INT_EL_" . $eid . "_" . $extrafield['id'] . $fieldsuffix . "').value,'" . htme($curval) . "');SwitchIAback('" . $eid . "','" .  $extrafield['id'] . $fieldsuffix . "');";
		}

		$fieldId = " name='INT_EL_" . $eid . "_" . $extrafield['id'] . $fieldsuffix . "' id='INT_EL_" . $eid . "_" . $extrafield['id'] . $fieldsuffix . "' ";
		$realfieldid = "INT_EL_" . $eid . "_" . $extrafield['id'] . $fieldsuffix;
		$javascript_onblur_calls = "SwitchIAback('" . $eid . "','" .  $extrafield['id'] . $fieldsuffix . "')";

	}


	$Placeholder = GetAttribute("extrafield", "Placeholder", $extrafield['id']);

	if ($Placeholder != "") {
		if ($eid == "_new_") {
			$Placeholder = StripExistingOnlyTags($Placeholder);
		} else {
			$Placeholder = StripNewOnlyTags($Placeholder);
		}
		$Placeholder = str_replace('@', '****', $Placeholder);

		$fieldId .= " placeholder=\"" . htme(strip_tags($Placeholder)) . "\"";
	}


	$MustBeUnique = GetAttribute("extrafield", "MustBeUnique", $extrafield['id']);
	if (substr($MustBeUnique,0,3) == "Yes") {
		$javascript_onchange_calls .= "CheckUniqueness('" . $eid ."','" . $extrafield['id'] . "',this.value,'" . htme($curval) . "');";
	}

	switch ($extrafield['fieldtype']) {

		   case "SQL Query":
			    $o = @unserialize($extrafield['options']);
			    $dbase = $o[0];
				$query = str_replace("@EID@", $eid, $o[1]);
				$query = str_replace("@CID@", $c_id, $query);
				$query = str_replace("@USER@", $GLOBALS['USERID'], $query);
				if (is_numeric($type)) {
					$query = ParseFlexTableTemplate($type, $eid, $query, false, true, true, "plain");
					
				} elseif ($type == "customer") {
					$query = ParseTemplateCustomer($query, $eid, true, "plain", false);
				} else {	
					$query = ParseTemplateEntity($query, $eid, true, false, false, "plain");
					$query = ParseTemplateCustomer($query, GetEntityCustomer($eid), true, "plain", false);
				}
				$query = str_replace("\n", " ", $query);

				include($GLOBALS['CONFIGFILE']);
				qlog(INFO, "Populating extra field with results from given SQL query $query " . $GLOBALS['repository_nr']);

	  		    $cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $fieldId . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . " " . $roins  . "";
				if (is_numeric($extrafield['limitddtowidth']) && $extrafield['limitddtowidth']>2) {

					$cf .= " style='width: " . $extrafield['limitddtowidth'] . "px;' onmouseout=\"StopCount();SetWidth(" . $extrafield['limitddtowidth'] . ", this);\" onmouseover=\"SetWidthDelayed('auto', this);this.focus();\"";
				}
				$cf .= ">";
				$cf .= "<option value=''>-</option>";
				$db = DB_Connect($GLOBALS['repository_nr'], false);

				if (strstr($dbase, "@")) {
					$tmp = explode("@", $dbase);
					$dbase = $tmp[0];
					$tmphost = $tmp[1];
					$db = mysql_connect($tmphost, $user[$GLOBALS['repository_nr']], $pass[$GLOBALS['repository_nr']]);
					$otherhost = true;
				}

				if (mysql_select_db($dbase,$db)) {
					mysql_query("SET NAMES 'utf8'", $db);
					$res = mysql_query($query, $db);
					while($bla = mysql_fetch_array($res)) {
						if ($val==$bla[0]) {
							$ins = 'selected="selected"';
							$found_value = true;
						} else {
							unset($ins);
						}
						if ($bla[0] != "") {
							
							$cf .= "<option ". $ins ." value='" . htme($bla[0]) . "'>";
								
							$cf .= htme($bla[0]);
							if ($bla[1] != "") {
								$cf .= ": " . $bla[1];
							}

							$cf .= "</option>";
						}
					}
					if (!$found_value && trim($val) != "" && trim($val) != "-") {
						// This happens when a previously entered value didn't return from the SQL query

						$cf .= "<option selected=\"selected\" value='" . htme($val) . "'>" . htme($val) . "</option>";

						qlog(INFO, "SQL Query didn't return any value like the one already stored. Added this value myself.");
					}

					$cf .= "</select>";
					if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
						$cf .= ReturnDropDownSearchField("JS_EFID" . $extrafield['id']);
					}
				} else {
					$cf .= "<option>Could not select database! (" . $dbase . ")</option></select>";
				}
				if ($otherhost) {
					$db = mysql_connect($host[$GLOBALS['repository_nr']], $user[$GLOBALS['repository_nr']], $pass[$GLOBALS['repository_nr']]);
				}
				mysql_select_db($database[$GLOBALS['ORIGINAL_REPOSITORY']],$db);
				SwitchToRepos($GLOBALS['ORIGINAL_REPOSITORY']);
				break;
		case "SQL Query (multiselect)":
			    $o = @unserialize($extrafield['options']);
			    $dbase = $o[0];
				$query = str_replace("@EID@", $eid, $o[1]);
				$query = str_replace("@CID@", GetEntityCustomer($eid), $query);
				$query = str_replace("@USER@", $GLOBALS['USERID'], $query);
				$query = str_replace("@REFER@", $refer, $query); 
				$query = str_replace("\n", " ", $query);
				if (is_numeric($type)) {
					$query = ParseFlexTableTemplate($type, $eid, $query, false, true, true, "plain");
				} elseif ($type == "customer") {
					$query = ParseTemplateCustomer($query, $eid, true, "plain", false);
				} else {	
					$query = ParseTemplateEntity($query, $eid, true, false, false, "plain");
					$query = ParseTemplateCustomer($query, GetEntityCustomer($eid), true, "plain", false);
				}
				$val_ar = unserialize($val);

				include($GLOBALS['CONFIGFILE']);
				qlog(INFO, "Populating extra field with results from given SQL query " . $GLOBALS['repository_nr']);


				$db = DB_Connect($GLOBALS['repository_nr'], false);
				$options_list = array();

				if (strstr($dbase, "@")) {
					$tmp = explode("@", $dbase);
					$dbase = $tmp[0];
					$tmphost = $tmp[1];
					$db = mysql_connect($tmphost, $user[$GLOBALS['repository_nr']], $pass[$GLOBALS['repository_nr']]);
					$otherhost = true;
				}

				if (mysql_select_db($dbase,$db)) {
					mysql_query("SET NAMES UTF8", $db);
					$res = mysql_query($query, $db);
					while($bla = mysql_fetch_array($res)) {
						array_push($options_list, $bla[0]);
					}

				} else {
					$cf .= "Could not select database! (" . $dbase . ")";
				}
				if ($otherhost) {
					$db = mysql_connect($host[$GLOBALS['repository_nr']], $user[$GLOBALS['repository_nr']], $pass[$GLOBALS['repository_nr']]);
				}
				mysql_select_db($database[$GLOBALS['ORIGINAL_REPOSITORY']],$db);
				SwitchToRepos($GLOBALS['ORIGINAL_REPOSITORY']);

				if ($extrafield['sort'] == "y") {
					natcasesort($options_list);
				}

				if ($extrafield['showsearchbox'] == "y") {
					// This means it should be displayed as a list of checkboxes
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><div " . $roins . " id='checkboxcontainer" . $extrafield['id'] . "'><input type=\"hidden\" name=\"EFID" . $extrafield['id'] . "[]\" value=\"{{{null}}}\"><table>";
					$ct = 1;
					foreach ($options_list AS $option) {
						if ($option != "{{{null}}}") {
							if (in_array(base64_encode($option), $val_ar)) {
								$ins = "checked='checked'";
							} else {
								unset($ins);
							}
							$cf .= "<tr><td><input type='checkbox' " . $ins . " name='EFID" . $extrafield['id'] . "[]' value='" . htme($option) . "'></td><td>" . htme($option);
							if ($bla[1] != "") {
									$cf .= ": " . $bla[1];
								}
							$cf .= "</td><tr>";
							$ct++;
						}
					}
					$cf .= "</table></div>";


				} else {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select name='EFID" . $extrafield['id'] . "[]' multiple='multiple' size='4' $roins id='JS_EFID" . $extrafield['id'] ."'>";
					foreach ($options_list AS $option) {
						if (in_array(base64_encode($option), $val_ar)) {
							$ins = "selected='selected'";
						} else {
							unset($ins);
						}
						$cf .= "<option " . $ins . " value='" . htme($option) . "'>" . htme($option) . "</option>";
						$ct++;
					}
					$cf .= "</select>";
				}

				break;
		   case "List of all active customers":
				$ExtraSelectCondition = "";
				$ExtraSelectCondition = GetAttribute("extrafield", "ExtraSelectCondition", $extrafield['id']);

				if ($ExtraSelectCondition != "" && $ExtraSelectCondition != "None") {
					$type = GetExtraFieldTableType($fieldname);
					$sql = "SELECT DISTINCT(recordid) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . " WHERE deleted='n' AND ";

					if (is_numeric($type)) {
						if ($eid == "_new_" && $_REQUEST['refer'] > 0) {
							$ExtraSelectCondition = str_replace("@REFER@", $_REQUEST['refer'] . "", $ExtraSelectCondition);	
						}
						$ExtraSelectCondition = ParseFlexTableTemplate($type, $eid, $ExtraSelectCondition, false, true, true, "plain");
					} elseif ($type == "customer") {
						$ExtraSelectCondition = ParseTemplateCustomer($ExtraSelectCondition, $eid, true, "plain", false);
					} else {	
						$ExtraSelectCondition = ParseTemplateEntity($ExtraSelectCondition, $eid, true, false, false, "plain");
						$ExtraSelectCondition = ParseTemplateCustomer($ExtraSelectCondition, GetEntityCustomer($eid), true, "plain", false);
					}

					$ExtraSelectCondition = ParseTemplateGeneric($ExtraSelectCondition, "plain");
					$ExtraSelectConditionStash = PushStashValue($ExtraSelectCondition);
					if (strtoupper(substr(0,4,$ExtraSelectCondition)) != "AND " && strtoupper(substr(0,4,$ExtraSelectCondition)) != " AND") {
						$ExtraSelectCondition = " AND " . $ExtraSelectCondition;
					}
				} else {
					$ExtraSelectCondition = "";
				}

			   if ($GLOBALS['USECUSTOMERSELECTPOPUP'] != "Yes") {
					$list = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE active='yes' " . $ExtraSelectCondition . " ORDER BY custname");

					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $fieldId . " " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . " >";
					$cf .= "<option value=''>-</option>";
					$count = 0;
					foreach ($list AS $record) {
						$curval = $record['id'];
						$count++;
						if ($curval == $val) {
							$ins = 'selected="selected"';
							$found  = true;
						} else {
							unset($ins);
						}
						$cf .= "<option " . $ins . " value='" . htme($record['id']) . "'>" . htme($record['custname']) . "</option>";
					}
					if (!$found && $eid!="_new_" && $count > 1) {
						$cf .= "<option " . $ins . " value='" . htme($val) . "' selected=\"selected\">" . htme(GetCustomerName($val)) . " [inactive]</option>";
						qlog(INFO, "Adding customer value - customer not active but related");
					}

					$cf .= "</select>";
					if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
						$cf .= ReturnDropDownSearchField("JS_EFID" . $extrafield['id']);
					}
			   } else {
					$cf .= str_replace("customer", "EFID" . $extrafield['id'], GetSingleDefaultFieldBox($eid, "customer", $readonly, array("CRMcustomer" => $val), false, false, false));
			   }
			    break;
		   case "Customer contacts":
				if (IsValidEID($eid)) {
					$list = GetCustomerContacts(GetEntityCustomer($eid));
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $fieldId . " " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . " >";
					$cf .= "<option value=''>-</option>";

					foreach ($list AS $record) {
						$curval = $record['Firstname'] . " " . $record['Lastname'] . " (" . $record['Telephone'] . ")";
						if ($record['id'] == $val) {
							$ins = 'selected="selected"';
						} else {
							unset($ins);
						}

						$cf .= "<option value='" . $record['id'] . "' " . $ins . ">" . $curval . "</option>";
					}
					$cf .= "</select>";
					if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
						$cf .= ReturnDropDownSearchField("JS_EFID" . $extrafield['id']);
					}
				} else {
					$cf .= "<!-- Contact list not shown, entity must be saved first -->";
				}
			    break;
		   case "diary":

				if ($eid == "_new_") {
					$cf = "<textarea cols='90' rows='2' " . $fieldId ." class='diaryinputbox'></textarea>";
				} else {
					if (GetAttribute("extrafield", "AutoUpdateDiaryField", $extrafield['id']) != "No") {
						// This means the diary must auto-update
						$seconds_refresh = 20;
					} else {
						$seconds_refresh = false;
					}
					$divid = "AJX" . randomstring(8, true);
					
					$btntext = $lang['addtodiary'];
					if ($btntext == "") {
						$btntext = $lang['go'];
					}
					
					
					$cf = "<input type='hidden' name='EDITDIARY_EFID" . $extrafield['id'] . "' id='JS_EDITDIARY_EFID" . $extrafield['id'] . "' value=''>";
					$cf .= "<div id='JS_EDITDIARYHEADER_EFID" . $extrafield['id'] . "'></div>";

					$cf .= "<textarea cols='90' rows='2' " . $fieldId . " class='diaryinputbox'></textarea>";
					//$cf .= "&nbsp;";
					$cf .= "<button onclick=\"UpdateDiaryField(" . $eid . ", " . $extrafield['id'] . ", document.getElementById('JS_EFID" . $extrafield['id'] . "').value, '" . $divid . "', document.getElementById('JS_EDITDIARY_EFID" . $extrafield['id'] . "').value);document.getElementById('JS_EFID" . $extrafield['id'] . "').value=''; document.getElementById('JS_EDITDIARY_EFID" . $extrafield['id'] . "').value=''; document.getElementById('JS_EDITDIARYHEADER_EFID" . $extrafield['id'] . "').innerHTML=''; return(false);\">" . $btntext . "</button>";

					$cf .= AjaxBox("ShowDiary", true, "&qid=" . $eid . "&field=" . $extrafield['id'], false, $divid, $seconds_refresh);
				}
			   break;
		   case "Reference to FlexTable":
				//$cf = "REF TO FLEXTABLE" . $extrafield['options'];
				$ftt = GetFlexTableDefinitions($extrafield['options']);
				$ftt = $ftt[0];

				$ExtraSelectCondition = GetAttribute("extrafield", "ExtraSelectCondition", $extrafield['id']);
				if ($ExtraSelectCondition != "" && $ExtraSelectCondition != "None") {

					$sql = "SELECT DISTINCT(recordid) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . " WHERE deleted='n' AND ";

					if (is_numeric($type)) {
						if ($eid == "_new_" && $_REQUEST['refer'] > 0) {
							$ExtraSelectCondition = str_replace("@REFER@", $_REQUEST['refer'] . "", $ExtraSelectCondition);	
						}
						$ExtraSelectCondition = ParseFlexTableTemplate($type, $eid, $ExtraSelectCondition, false, true, true, "plain");
					} elseif ($type == "customer") {
						$ExtraSelectCondition = ParseTemplateCustomer($ExtraSelectCondition, $eid, true, "plain", false);
					} else {	
						$ExtraSelectCondition = ParseTemplateEntity($ExtraSelectCondition, $eid, true, false, false, "plain");
						$ExtraSelectCondition = ParseTemplateCustomer($ExtraSelectCondition, GetEntityCustomer($eid), true, "plain", false);
					}

					$ExtraSelectCondition = ParseTemplateGeneric($ExtraSelectCondition, "plain");
					$ExtraSelectConditionStash = PushStashValue($ExtraSelectCondition);
					$sql .= $ExtraSelectCondition;
					

				} else {
					$sql = "SELECT DISTINCT(recordid) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . " WHERE deleted='n'";
				}
				
				

				if (is_numeric($ftt['sort_on']) && $ftt['sort_on'] != 0) {
			
					if ($ftt['sort_direction'] == "Descending") {
						$desc = "DESC";
					} else {
						unset($desc);
					}
					$type = GetExtraFieldType($ftt['sort_on']);

					if ($type == "date") {
						//$sort = " ORDER BY UNIX_TIMESTAMP(CONCAT(SUBSTR(" . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . ".EFID" . mres($ftt['sort_on']) . ",7,4), SUBSTR(" . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . ".EFID" . mres($ftt['sort_on']) . ",4,2), SUBSTR(" . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . ".EFID" . mres($ftt['sort_on']) . ", 1,2))) " . $desc;
						
						$sort = " ORDER BY STR_TO_DATE(EFID" . $ftt['sort_on'] . ", '%d-%m-%Y') " . $desc;

					} elseif ($type == "numeric") {
						$sort = " ORDER BY CAST(" . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . ".EFID" . $ftt['sort_on'] . " AS DECIMAL(10,3)) " . $desc;
					} else {
						$sort = " ORDER BY CONCAT(" . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . ".EFID" . $ftt['sort_on'] . ") " . $desc;
					} 

				} else {

					if ($ftt['sort_direction'] == "Descending") {
						$desc = "DESC";
					} else {
						unset($desc);
					}

					$sort = " ORDER BY " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . ".recordid " . $desc;
				}
				if (!stristr($sql, "order by")) { // the extra select could have an order clause in it

					$sql .= $sort;
				}
				


				qlog(INFO, "Processing flextable " . $ftt['tablename']);

				if ($extrafield['sort'] == "y") {
					if ($val != "") {
						$reflayout = $ftt['refer_field_layout'];

						$view = str_replace("flextable", "", GetAttribute("flextable", "ViewOnTable", $ftt['recordid']));
						if (is_numeric($view)) {
							$ftt = GetFlexTableDefinitions($view);
							$ftt = $ftt[0];

						}
						$tmp = GetAttribute("extrafield", "BlindReferenceFieldLayout", $extrafield['id']);
						if ($tmp != "" && $tmp != "-- set blind reference field layout in extra field attributes --") {
							$reflayout = $tmp;
						}

						$layval = "<a onclick=\"popflextableEditwindow(" . $ftt['recordid'] . ",0,document.getElementById('JS_EFID" . $extrafield['id']. "').value,'JS_EFID" . $extrafield['id'] . "ts');\">";
						$layval .= "<div class='showinline' name='EFID" . $extrafield['id'] . "ts' id='JS_EFID" . $extrafield['id'] . "ts' >";

						$layval .= htme(ParseFlexTableTemplate($ftt['recordid'], $val, $reflayout, true, false, false, "plain"));
						$layval .= "</div></a>";

					} else {
						$layval = "<a onclick=\"popflextableEditwindow(" . $ftt['recordid'] . ",0,document.getElementById('JS_EFID" . $extrafield['id']. "').value,'JS_EFID" . $extrafield['id'] . "ts');\">";
						$layval .= "<div class='showinline' name='EFID" . $extrafield['id'] . "ts' id='JS_EFID" . $extrafield['id'] . "ts' >";
						$layval .= "</div>";
						$layval .= "</div></a>";

					}
					$layval .= "<script type=\"text/javascript\">";
					$layval .= "function refresh_JS_EFID" . $extrafield['id'] . "ts() {";
					$layval .= "GetAndSetFieldValueByAjax(" . $extrafield['id'] . ", '" . $eid . "', 'JS_EFID" . $extrafield['id'] . "ts',document.getElementById('JS_EFID" . $extrafield['id']. "').value);";
					$layval .= "if (typeof document.getElementById('JS_EFID" . $extrafield['id'] . "').onchange == 'function') {";
					$layval .= "	document.getElementById('JS_EFID" . $extrafield['id'] . "').onchange();";
					$layval .= "}";
					$layval .= "}</script>";

					$selecttext = GetAttribute("extrafield", "SelectFromFlextableLinkText", $extrafield['id']);
					if ($selecttext == "") $selecttext = "[select]"; 
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>" . $layval . "&nbsp;&nbsp;<a  onclick=\"popflextablewindowPlainField(" . $ftt['recordid'] . ", '" . $extrafield['id'] . "&ExtraSelectCondition=" . $ExtraSelectConditionStash . "'); return false;\">" . $selecttext. "</a>";

					$cf .= "<input type='hidden' " . $fieldId . " value='" . htme($val) . "' onchange=\"" . $javascript_onchange_calls . "\">";
					if (!$readonly) {
						//$cf .= "&nbsp;<img src='images/fullscreen_maximize.gif' height='16' width='16' alt='' class='popflextableselectimage'></a>";
					}


				} else {


					
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $roins . " " . $fieldId . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . " ";

					if (is_numeric($extrafield['limitddtowidth']) && $extrafield['limitddtowidth']>2) {
						$cf .= " style='width: " . $extrafield['limitddtowidth'] . "px;' onmouseout=\"StopCount();SetWidth(" . $extrafield['limitddtowidth'] . ", this);\" onmouseover=\"SetWidthDelayed('auto', this);this.focus();\"";
					}
					$cf .= ">";

					$cf .= "<option value=''> - </option>";

					$BlindReferenceFieldLayout = GetAttribute("extrafield", "BlindReferenceFieldLayout", $extrafield['id']);
					//
					
					$res_ft = mcq($sql, $db);
					$optionlist = array();
					while ($row_ft = mysql_fetch_array($res_ft)) {
						if (CheckFlextableRecordAccess($ftt['recordid'], $row_ft['recordid'], false) != "nok") {
							if ($BlindReferenceFieldLayout != "" && $BlindReferenceFieldLayout != "-- set blind reference field layout in extra field attributes --") {

								$tprint = ParseFlexTableTemplate($ftt['recordid'], $row_ft['recordid'], $BlindReferenceFieldLayout, true, false, false, "plain");

								//print "BRREF $BlindReferenceFieldLayout $tprint ---  ParseFlexTableTemplate(" . $ftt['recordid'] . ", " . $row_ft['recordid'] . ", $BlindReferenceFieldLayout, true, false, false, \"plain\")";

							} else {
								$tprint = ParseFlexTableTemplate($ftt['recordid'], $row_ft['recordid'], $ftt['refer_field_layout'], true, false, false,"plain");
							}
							$optionlist[$row_ft['recordid']] = $tprint;
						} else {
							//$optionlist[$row_ft['recordid']] = $tprint . "nAn";
							print "Skip: No access : " . CheckFlextableRecordAccess($ftt['recordid'], $row_ft['recordid'], false) . "<br>";
						}
					}

					//asort($optionlist, SORT_STRING);
					
					
	
					foreach ($optionlist AS $id => $option) {
							if ($option == "") {
								$option = "Record " . $id;
							}
							if ($val == $id) {
								$ins = 'selected="selected"';
							} else {
								unset($ins);
							} 

							$cf .= "<option " . $ins . " value='" . $id . "'>" . htme($option) . "</option>";
					}
					$cf .= "</select>";
					if (GetAttribute("extrafield", "ShowSelectFromTablePopupIcon", $extrafield['id']) != "No") {
						$cf .= "&nbsp;<a title=\"Select directly from flextable " . $ftt['tablename'] . "\" onclick=\"popflextablewindow(" . $ftt['recordid'] . ", 'EFID" . $extrafield['id'] . "&ExtraSelectCondition=" . $ExtraSelectConditionStash . "'); return false;\"><img src='images/fullscreen_maximize.gif'  height='16' width='16' alt=''></a>";
					}
					if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
						$cf .= ReturnDropDownSearchField($realfieldid);
					} else {
						//
					}


				}

				break;

		   case "Computation":
			   $cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><input type='text' name='EFID" . $extrafield['id'] . "' " . $stp . " value='" . htme($val) . "' disabled=\"disabled\">";
		   break;
  		   case "Reference to FlexTable (multiselect)":
				$ftt = GetFlexTableDefinitions($extrafield['options']);
				$ftt = $ftt[0];
				$flextablename = $GLOBALS['TBL_PREFIX'] . "flextable" . $extrafield['options'];
				$val_ar = unserialize($val);

				qlog(INFO, "Processing flextable " . $ftt['tablename']);

				$ExtraSelectCondition = GetAttribute("extrafield", "ExtraSelectCondition", $extrafield['id']);
				if ($ExtraSelectCondition != "" && $ExtraSelectCondition != "None") {

					$sql = "SELECT DISTINCT(recordid) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . " WHERE deleted='n' AND ";

					if (is_numeric($type)) {
						$ExtraSelectCondition = ParseFlexTableTemplate($flextableid, $recordid, $ExtraSelectCondition, false, true, true, "plain");
					} elseif ($type == "customer") {
						$ExtraSelectCondition = ParseTemplateCustomer($ExtraSelectCondition, $eid, true, "plain", false);
					} else {	
						$ExtraSelectCondition = ParseTemplateEntity($ExtraSelectCondition, $eid, true, false, false, "plain");
					}

					$ExtraSelectCondition = ParseTemplateGeneric($ExtraSelectCondition, "plain");
					$ExtraSelectConditionStash = PushStashValue($ExtraSelectCondition);
					$sql .= $ExtraSelectCondition;

				} else {
					$sql = "SELECT DISTINCT(recordid) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftt['recordid'] . " WHERE deleted='n'";
				}

				$res_ft = mcq($sql, $db);

				if ($extrafield['showsearchbox'] == "y") {
					// This means it should be displayed as a list of checkboxes
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."[]'></a><div " . $roins . " id='checkboxcontainer" . $extrafield['id'] . "'><input type=\"hidden\" name=\"EFID" . $extrafield['id'] . "[]\" value=\"{{{null}}}\">";
					$ct = 1;
					while ($row_ft = mysql_fetch_array($res_ft)) {
						if (in_array(base64_encode($row_ft['recordid']), $val_ar)) {
							$ins = "checked='checked'";
						} else {
							unset($ins);
						}
						$this_id = "EFID" . $extrafield['id'] . "_" . $ct;
						
						$cf .= "<input " . $roins . " type='checkbox' " . $ins . " name='EFID" . $extrafield['id'] . "[]' id='" . $this_id . "' value='" . $row_ft['recordid'] . "'>&nbsp;<label for='" . $this_id . "'>" . ParseFlexTableTemplate($ftt['recordid'], $row_ft['recordid'], $ftt['refer_field_layout'], true, false, false,"htme") . "</label><br>";

						$ct++;
					}
					$cf .= "</div>";
				} else {

					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $roins . " name='EFID" . $extrafield['id'] . "[]' multiple='multiple' size='4' id='JS_EFID" . $extrafield['id'] ."'>";

					while ($row_ft = mysql_fetch_array($res_ft)) {
						if (CheckFlextableRecordAccess($ftt['recordid'], $row_ft['recordid'], false) != "nok") {
							if (in_array(base64_encode($row_ft['recordid']), $val_ar)) {
								$ins = "selected='selected'";
							} else {
								unset($ins);
							}
							
							$cf .= "<option " . $ins . " value='" . $row_ft['recordid'] . "'>" . ParseFlexTableTemplate($ftt['recordid'], $row_ft['recordid'], $ftt['refer_field_layout'], true, false, false,"htme") . "</option>";
						}
					}
					$cf .= "</select>";
				}

		   break;
		   case "drop-down (multiselect)":

			   // current value is in $val

			   if ($val == "" && $extrafield['defaultval'] != "") {
					$val = serialize(array(base64_decode($extrafield['defaultval'])));
			   }

				$val_ar = unserialize($val);

				if (substr($extrafield['options'], 0, 18) == "%POPULATE_BY_CODE%") {

					$result = "";
					$code = str_replace("%POPULATE_BY_CODE%", "", $extrafield['options']);
					@eval($code);

					foreach ($val_ar AS $val) {
						if (!in_array(base64_decode($val), $result)) {
							$result[] = base64_decode($val);
						}
					}

					$options_list = $result;
					if (GetAttribute("extrafield", "RepopulateByAjax", $extrafield['id']) != "No") {
						$select_ins = "PopulateByAjax(this, \"EFID" . $extrafield['id'] . "\", \"" . $eid . "\",\"entity\", this.form);";
					}

				} else {
					$options_list = array();
					$options_list = @unserialize($extrafield['options']);
				}

				if ($extrafield['sort'] == "y") {
					natcasesort($options_list);
				}
				

				if ($extrafield['showsearchbox'] == "y") {
					// This means it should be displayed as a list of checkboxes
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><div id='checkboxcontainer" . $extrafield['id'] . "'><br><input type=\"hidden\" name=\"EFID" . $extrafield['id'] . "[]\" value=\"{{{null}}}\">";
					$ct = 1;
					foreach ($options_list AS $option) {
						if (in_array(base64_encode($option), $val_ar)) {
							$ins = "checked='checked'";
						} else {
							unset($ins);
						}
						$this_id = "JS_EFID" . $extrafield['id'] . "-" . $ct;
						$cf .= '<input id="' . $this_id . '" type="checkbox" ' . $ins . ' name="EFID' . $extrafield['id'] . '[]" value="' . htme($option) . '">&nbsp;<label for="' . $this_id . '">' . htme($option) . '</label><br>';
						$ct++;
					}
					$cf .= "</div>";


				} else {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $select_ins . " name='EFID" . $extrafield['id'] . "[]' multiple='multiple' size='4' " . $roins . " id='JS_EFID" . $extrafield['id'] ."'>";
					foreach ($options_list AS $option) {
						if (in_array(base64_encode($option), $val_ar)) {
							$ins = "selected='selected'";
						} else {
							unset($ins);
						}
						$cf .= "<option " . $ins . " value='" . htme($option) . "'>" . htme($option) . "</option>";
						$ct++;
					}
					$cf .= "</select>";
				}
			break;

		   case "drop-down":
				if (!$readonly) {
					
					$options_list = array();
   					if (substr($extrafield['options'], 0, 18) == "%POPULATE_BY_CODE%") {

						$result = array();
						$code = str_replace("%POPULATE_BY_CODE%", "", $extrafield['options']);
						
						if (is_numeric($type)) {
							$code = ParseFlextableTemplate($type, $eid, $code);
						} elseif ($type == "customer") {
							$code = ParseTemplateCustomer($code, $eid, false);
						} else {
							$code = ParseTemplateEntity($code, $eid, false, false);
						}

						@eval($code);

						
						$found = false;
						foreach ($result AS $row) {
							$options_list[] = $row;
							if (is_array($row)) {
								if ($row[0] == $val) $found=true;								
							} elseif ($row == $val) {
								$found = true;					
							}
						}
						if (!$found) $options_list[] = $val;

						if (GetAttribute("extrafield", "RepopulateByAjax", $extrafield['id']) != "No") {
							$javascript_onfocus_calls .= "PopulateByAjax(this, 'EFID" . $extrafield['id'] . "', '" . $eid . "','entity', this.form);";
						}

					} else {
						
						$options_list = @unserialize($extrafield['options']);
						

					}

					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>";
					if ($extrafield['showasradio'] != "y") {
						$cf .= "<select " . $select_ins . " " . $fieldId . " " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . " ";
						if (is_numeric($extrafield['limitddtowidth']) && $extrafield['limitddtowidth']>2) {
							$cf .= " style='width: " . $extrafield['limitddtowidth'] . "px;' onblur=\"SetWidth(" . $extrafield['limitddtowidth'] . ", this);\" onmouseover=\"SetWidthDelayed('auto', this);this.focus();\" onmouseout='StopCount();'";
						}
						$cf .= ">";
						$cf .= "<option value=''>-</option>";


						if ($extrafield['sort'] == "y") {
							natcasesort($options_list);
						}


						$extrafield['optioncolors'] = @unserialize($extrafield['optioncolors']);
						$x=0;
						foreach ($options_list AS $option) {
							if (is_array($option)) {
								$option_value = $option[0];
								$option_name = $option[1];
							} else {
								$option_value = $option;
								$option_name = $option;
							}


							if (!in_array($option_value, $directives['EFOptionsExclude'][$extrafield['id']])) {
								if ($val == $option_value || !$readonly) {
									if ($val == $option_value) {
										$ins = 'selected="selected"';
									} else {
										unset($ins);
									}
									
									$option_ts = $option_name;
									

									if ($extrafield['optioncolors'][$option_value]) {

										$cf .= "<option ". $ins ." style='background-color: " . $extrafield['optioncolors'][$option_value] . ";' value='" . htme($option_value) . "'>";
									} else {
										$cf .= "<option ". $ins ." value='" . htme($option_value) . "'>";
									}
									
									$cf .= htme($option_ts);

									$cf .= "</option>";
								}
							}
							$x++;
						}
						$cf .= "</select>" . $VAT_add;
						if ($extrafield['allowuserstoaddoptions'] == "y" && $tyu == "ok" && !$readonly) {
							$cf .= "<a " . PrintToolTipCode("Click to add a value") . " onclick=\"PopAddFieldValueWindow(" . $extrafield['id'] . ");\"><img src='images/icon-add.gif'  alt=''></a>";
						}

//						<a onclick="document.getElementById('JSEFID38-12').checked = !document.getElementById('JSEFID38-12').checked;">bla</a>


						if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
							$cf .= "&nbsp;" . ReturnDropDownSearchField("JS_EFID" . $extrafield['id']);
						}
					} else {
						$idcounter = 0;
						$cf .= "<div id=\"JS_EFID" . $extrafield['id'] . "\">";
						foreach ($options_list AS $option) {
							$idcounter++;
							$ins = ($val == $option) ? "checked=\"checked\"" : "";
							$this_id = "JS_EFID" . $extrafield['id'] . "-" . $idcounter;
							$cf .= '<input ' . $ins . ' type="radio" id="' . $this_id . '" name="EFID' . $extrafield['id'] . '" value="' . htme($option) . '" onchange="' . $javascript_onchange_calls . '" onblur="' . $javascript_onblur_calls . '" onfocus="' . $javascript_onfocus_calls . '">&nbsp;<label for="' . $this_id . '">' . htme($option) . '</label><br>';
						}
						$cf .= "</div>";
					}
		   } else {
				$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>" . htme($val) . "<input type='hidden' " . $fieldId . " value='" . htme($val) . "'>";
		   }

		   break;
		    case "checkbox":
				if ($val == $extrafield['options']) {
					$ins2 = 'checked="checked"';
				} else {
					unset($ins2);
				}
				$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><input type='checkbox' $roins $ins2  " . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . " name='XEFID" . $extrafield['id'] . "' id='JS_XEFID" . $extrafield['id'] . "' value='" . $extrafield['options'] . "' onclick=\"document.forms['EditEntity'].elements['EFID" . $extrafield['id'] . "'].value = this.checked ? '" .$extrafield['options']. "' : '" . ParseDefaultValueTags($extrafield['defaultval'], "htme") . "'\">";
				$cf .= "<input type='hidden' " . $fieldId . " value='" . $val . "'>";
			   break;
		  case "numeric":
				$cf .= "<a name='anchor_EFID" . $extrafield['id'] . "'></a>";

				$MaximumValue = GetAttribute("extrafield", "MaximumValue",$extrafield['id']);
				$MinimumValue = GetAttribute("extrafield", "MinimumValue", $extrafield['id']);
					
				$html5_ins = "";
	
				if (is_numeric($MaximumValue)) {
					$html5_ins .= " max=\"" . htme($MaximumValue) . "\" ";
				}
				if (is_numeric($MinimumValue)) {
					$html5_ins .= " min=\"" . htme($MinimumValue) . "\" ";
				}

				$MaximumLength = GetAttribute("extrafield", "MaximumLength", $extrafield['id']);
				$ins = "";
				if (is_numeric($MaximumLength)) {
					$ins = " maxlength=\"" . $MaximumLength . "\" ";
				}

				
				if ($GLOBALS['InputNumbersWithSeperators'] == "Yes" && !$interactive_field_list_element) {

					$cf .= "<input type='hidden' " . $fieldId . " value='" . htme($val) . "' onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\">";
					
					$class[] = "FormattedNumberInput";
					// decimals -1, 0, 1, 2, 3 -> etc.
					//fix jeroen 2012-06-17: omdat dit een formatted number input is (met komma's en punten) kan niet het html5 number element gebruikt worden. Google Chrome accepteert dit niet.
					$cf .= "<input type=\"text\" " . $html5_ins . " " . $ins . " name=\"EFID" . $extrafield['id'] . "_displayonly\" id=\"JS_EFID" . $extrafield['id'] . "_displayonly\" " . $stp . " value=\"" . htme($val) . "\" " . $roins  . " onchange=\"NumberAutoFormat('JS_EFID" . $extrafield['id'] . "_displayonly', true); if (typeof document.getElementById('JS_EFID" . $extrafield['id'] . "').onchange == 'function') { document.getElementById('JS_EFID" . $extrafield['id'] . "').onchange();}\">";

				} else {
					$cf .= "<input " . $html5_ins . "  type=\"number\" " . $fieldId . " " . $ins . " " . $stp . " value=\"" . htme($val) . "\" " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . ">";
				}

		   break;
	   	   case "Button":
			   // id='JS_EFID" . $extrafield['id'] . "' ----> id removed to avoid double id's (buttons can be placed more than once)
				$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>";
				
				$ButtonClickConfirmMessage = GetAttribute("extrafield", "ButtonClickConfirmMessage", $extrafield['id']);
				if ($ButtonClickConfirmMessage != "" && $ButtonClickConfirmMessage != "{{none}}") {
					$insert1 = " if (confirm('" . htme($ButtonClickConfirmMessage) . "')) { ";
					$insert2 = "}";
				}
				if ($javascript_onclick_calls != "") {

					$cf .= "<input type='button'  value='" . htme($extrafield['name']) . "' $roins name='EFID" . $extrafield['id'] . "' id='JS_EFID" . $extrafield['id'] . "' onclick=\"" . $insert1 . " if (" . $javascript_onclick_calls . ") { ExecuteButton(" . $extrafield['id'] . ");} else { " . $javascript_falsevalidate_calls . " }" . $insert2 . "\">";

				} else {

					$cf .= "<input type='button'  value='" . htme($extrafield['name']) . "' $roins name='EFID" . $extrafield['id'] . "' id='JS_EFID" . $extrafield['id'] . "' onclick=\"" . $insert1 . "ExecuteButton(" . $extrafield['id'] . ");" . $insert2 . "\">";

				}
			  break;
			case "List of values":
				$ar = array();
				$ar = @unserialize($val);
				$t=0;
				if (is_array($ar)) {
					foreach ($ar AS $row) {
								$t++;
							   $cf .= "$t&nbsp;<input type='text' id='EFID" . $extrafield['id'] . $t ."' name='EFID" . $extrafield['id'] . "[]' size='50' value='" . 	htme(base64_decode($row)) . "' $roins onchange=\"" . $autosave_ins . "AlertUser('IsChanged');UpdateAjaxFields(this.id);\"><br>";
					}
				} else {
						qlog(ERROR, "ERROR processing extra field value array! :" . $val);
				}
				$cf .= "<input type='text' name='EFID" . $extrafield['id'] . "[]' " . $stp . " value='' " . $roins . " onchange=\"" . $autosave_ins . "AlertUser('IsChanged');UpdateAjaxFields(thid.id);\">";
				break;
			case "User-list of all CRM-CTT users":

				if (!$readonly) {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $roins . " " . $fieldId . " ";
					if (is_numeric($extrafield['limitddtowidth']) && $extrafield['limitddtowidth']>2) {
						$cf .= " style='width: " . $extrafield['limitddtowidth'] . "px;' onblur=\"SetWidth(" . $extrafield['limitddtowidth'] . ", this);\" onmouseover=\"SetWidthDelayed('auto', this);this.focus();\" onmouseout='StopCount();'";
					}

					$cf .= "  " . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . ">";
					$list = ReturnListOfAllowedUsers($val, true, false, false);
					if (!$val) $val = $GLOBALS['USERID'];
					if ($extrafield['forcing'] != "y") {
						$cf .= "<option value=''> - </option>";
					}
					foreach ($list AS $row) {
						if ($val == $row['id'] || !$readonly) {
							if ($val==$row['id']) {
								$ins = 'selected="selected"';
							} else {
								unset($ins);
							}

							$cf .= "<option " . $ins . " value='" . $row['id'] . "'>" . GetUserName($row['id']) . "</option>";
						}

					}
					$cf .= "</select>";
					if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
						$cf .= ReturnDropDownSearchField("JS_EFID" . $extrafield['id']);
					}
				} else {
						$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>" . htme(GetUserName($val)) . "<input type='hidden' " . $fieldId . " value='" . htme($val) . "'>";
				}
			break;
			
			case "List of all groups":

				if (!$readonly) {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $roins . " " . $fieldId . " ";
					if (is_numeric($extrafield['limitddtowidth']) && $extrafield['limitddtowidth']>2) {
						$cf .= " style='width: " . $extrafield['limitddtowidth'] . "px;' onblur=\"SetWidth(" . $extrafield['limitddtowidth'] . ", this);\" onmouseover=\"SetWidthDelayed('auto', this);this.focus();\" onmouseout='StopCount();'";
					}

					$cf .= "  " . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . ">";
					if ($extrafield['forcing'] != "y") {
						$cf .= "<option value=''> - </option>";
					}
					$list = db_GetArray("SELECT id,name FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles");
					if (!$val) $val = $GLOBALS['UC']['GROUP'];
					foreach ($list AS $row) {
						if ($val == $row['id'] || !$readonly) {
							if ($val==$row['id']) {
								$ins = 'selected="selected"';
							} else {
								unset($ins);
							}

							$cf .= "<option " . $ins . " value='" . $row['id'] . "'>" . htme($row['name']) . "</option>";
						}

					}
					$cf .= "</select>";
					if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
						$cf .= ReturnDropDownSearchField("JS_EFID" . $extrafield['id']);
					}
				} else {
						$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>" . htme(GetUserName($val)) . "<input type='hidden' " . $fieldId . " value='" . htme($val) . "'>";
				}
			break;
			 case "User-list of administrative CRM-CTT users":
 			
				if (!$readonly) {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $roins . " " . $fieldId . " ";
					if (is_numeric($extrafield['limitddtowidth']) && $extrafield['limitddtowidth']>2) {
						$cf .= " style='width: " . $extrafield['limitddtowidth'] . "px;' onblur=\"SetWidth(" . $extrafield['limitddtowidth'] . ", this);\" onmouseover=\"SetWidthDelayed('auto', this);this.focus();\" onmouseout='StopCount();'";
					}
					$cf .= "  " . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . "";
					if ($extrafield['forcing'] != "y") {
						$cf .= "<option value=''> - </option>";
					}

					$list = ReturnListOfAllowedUsers($val, true, "admin", false);
					if (!$val) $val = $GLOBALS['USERID'];
					foreach ($list AS $row) {
						if ($val == $row['id'] || !$readonly) {
							if ($val==$row['id']) {
								$ins = 'selected="selected"';
							} else {
								unset($ins);
							}

							$cf .= "<option " . $ins . " value='" . $row['id'] . "'>" . GetUserName($row['id']) . "</option>";
						}

					}
					$cf .= "</select>";
					if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
						$cf .= ReturnDropDownSearchField("JS_EFID" . $extrafield['id']);
					}
				} else {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>" . htme(GetUserName($val)) . "<input type='hidden' " . $fieldId . " value='" . htme($val) . "'>";
				}
			break;
			case "comment":
				$fileid = $extrafield['options'];

				if (is_numeric($fileid) && $fileid!=0 && $fileid!="") {

					$hm = "<div id=\"JS_EFID" . $extrafield['id'] . "\">" . GetTemplate($fileid) . "</div>";

					if (strlen($hm)>1) {
						$cf .= html_compress($hm);
					} else {
						log_msg("WARNING: Extra field template-based comment not displayed: template $fileid could not be found!","");
						qlog(WARNING, "WARNING: Extra field template-based comment not displayed: template $fileid could not be found!");
					}
				} else {
					$cf .= "<tr><td colspan='2'>[template for comment field not found]</td></tr>";
					log_msg("WARNING: Extra field template-based comment not displayed: template $fileid could not be found!","");
					qlog(WARNING, "WARNING: Extra field template-based comment not displayed: template $fileid could not be found!");
				}
		   break;
	   case "textbox":
			   $MaximumLength = GetAttribute("extrafield", "MaximumLength", $extrafield['id']);
				$ins = "";
				if (is_numeric($MaximumLength)) {
					$ins = " maxlength=\"" . $MaximumLength . "\" ";
				}

			   $cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><input type='text' " . $fieldId . " " . $ins . " " . $stp . " value='" . htme($val) . "' " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . ">";
		   break;
	   case "Computation (ajax autorefresh)":
			if (GetAttribute("extrafield", "ComputationOutputType", $extrafield['id']) == "Numeric") {
				$val = FormatNumber($val, false, $extrafield['id']);
			}
		   if ($extrafield['israwhtml'] == "n") {
				$ttbsl = htme($val);
			} else {
				$ttbsl = $val;
			}

		   $cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><div style='display: inline;' id='JS_EFID" . $extrafield['id'] . "'>" . $ttbsl . "</div>";
		   break;
	   case "mail":
			
				$MaximumLength = GetAttribute("extrafield", "MaximumLength", $extrafield['id']);
				$ins = "";
				if (is_numeric($MaximumLength)) {
					$ins = " maxlength=\"" . $MaximumLength . "\" ";
				}
		
				$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><input type='text' " . $fieldId . " " . $ins . " " . $stp . " value='" . htme($val) . "' " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . ">";

				if (($e != "_new_") && (strstr($val,"@")) && (strlen($val)>4)) {
					if ($type == "entity" && !$readonly) {
						$cf .= "&nbsp;<a " . PrintToolTipCode('Send email to this address') . " href='javascript:popEmailToEFScreen(" . $eid . ",\"" . htme($val) . "\");'><img src='images/mail.gif'  alt=''></a>";
					} elseif ($type == "customer" && !$readonly) {
						$cf .= "&nbsp;<a " . PrintToolTipCode('Send email to this address') . " href='javascript:popEmailToCustomerScreen(" . $eid . ",\"" . htme($val) . "\");'><img src='images/mail.gif'  alt=''></a>";
					} else {
						$cf .= "<!-- not supported yet -->";
					}
				}

		   break;
	   case "hyperlink":

				if (strlen($val)>4) {
					if (!stristr($val,"http://") && !stristr($val,"https://")) {
						$val1 = "http://" . $val;
					} else {
						$val1 = $val;
					}
					
					$cf .= "<a href='" . $val1 . "' onclick=\"window.open(this.href); return false;\"><img src='images/fullscreen_maximize.gif'  height='16' width='16' alt=''></a>&nbsp;";
				}
				$MaximumLength = GetAttribute("extrafield", "MaximumLength", $extrafield['id']);
				$ins = "";
				if (is_numeric($MaximumLength)) {
					$ins = " maxlength=\"" . $MaximumLength . "\" ";
				}
				$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><input type='text' " . $fieldId . " " . $ins . " " . $stp . " value='" . htme($val) . "' " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\">";
		   break;
	   case "Booking calendar":

				if (is_numeric($type)) {
					$ttype = "flextable" . $type;
				} else {
					$ttype = $type;
				}
				if ($extrafield['options'] == "icon/popup") {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><div style='display: inline;' id='calendarEFID" . $extrafield['id'] . "HF'>&nbsp;<img src='images/calendar_icon.gif' " . PrintToolTipCode("Calendar") . " onclick=\"popPlanning('EFID" . $extrafield['id'] ."','" . $ttype . "','" . $eid . "');\" style='cursor: pointer;' alt=''></div>";
				} else {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>";
					$cf .= ReturnPlanning($eid, $ttype, "EFID" . $extrafield['id']);
				}


			break;
	   case "Calendar planning group":

			$fields = unserialize($extrafield['options']);
			$cf = "<a name='anchor_EFID" . $extrafield['id'] ."'></a>";
			$cf .= ReturnPlanningGroup($eid, $type, $fields, $extrafield['name']);
			break;

	   case "date":
				if ($val == " ") {
					$val = "";
				}

				$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>";


				if ($type=="customer") {
					//EDIT JEROEN 2012-06-17
					//$javascript_onchange_calls = ";CheckDateLocal('JS_EFID" . $extrafield['id'] . "', '" . $GLOBALS['UC']['DateFormat'] . "')";
					$javascript_onchange_calls .= "CheckDateLocal('JS_EFID" . $extrafield['id'] . "', '" . $GLOBALS['UC']['DateFormat'] . "');";
					
					

				} else {
					
					$javascript_onchange_calls .= "CheckDateLocal('JS_EFID" . $extrafield['id'] . "', '" . $GLOBALS['UC']['DateFormat'] . "');";
				}
				
				$val = TransformDate($val);

				$UsePlanningCalendar = GetAttribute("extrafield", "UsePlanningCalendar", $extrafield['id']);
				if ($UsePlanningCalendar != "Yes") {
					$cf .= "<input type='text' " . $roins . " value='" . $val . "' " . $fieldId . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
					$class[] = "datepicker";
				} else {
					$cf .= "<input type='hidden' " . $roins . " value='" . $val . "' " . $fieldId . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";

					if ($val == "") $val = "select";
					$cf .= "<div class=\"showinline\" id=\"JS_EFID" . $extrafield['id'] . "TS\"><a onclick=\"PopCalendarSelectDay(" . $extrafield['id'] . "," . $eid . ");\">" . $val . "</a></div>";

				}
		   break;
		case "date/time":
				if ($val == " ") {
					$val = "";
				}
				if ($val == "0000-00-00 00:00:00") {
					$val = "";
				} else {
					if (!$raw) {
						$val = SQLDateTimeToFormattedDateTime($val);
					}
				}

				$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>";


				if ($type=="customer") {
					//EDIT JEROEN 2012-06-17
					//$javascript_onchange_calls = ";CheckDateTimeLocal('JS_EFID" . $extrafield['id'] . "', '" . $GLOBALS['UC']['DateFormat'] . "')";
					$javascript_onchange_calls .= "CheckDateTimeLocal('JS_EFID" . $extrafield['id'] . "', '" . $GLOBALS['UC']['DateFormat'] . "');";

				} else {
					
					$javascript_onchange_calls .= "CheckDateTimeLocal('JS_EFID" . $extrafield['id'] . "', '" . $GLOBALS['UC']['DateFormat'] . "');";
				}

				
				$val = TransformDate($val);
				
				$cf .= "<input type='text' " . $roins . " value='" . $val . "' " . $fieldId . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";

				$class[] = "datetimepicker";
			break;
		case "text area":
			    if ($extrafield['options'] == "a:0:{}") $extrafield['options'] = "";
				$sa = explode(":" , $extrafield['options']);
				$columns = $sa[0];
				$rows = $sa[1];
				if (!is_numeric($rows)) $rows="8";
				if (!is_numeric($columns)) $columns="40";
				qlog(INFO, "Text area size is (c:r) " . $extrafield['options']);
				if ($sa[2] == "y" && !$readonly) { // the clock to insert date and time must be printed
					$cf .= "<a onclick=\"InsertDateTimeCMF(document.forms['EditEntity'].elements['EFID" . $extrafield['id'] . "']);\" title='Insert date, time and your name'><img src='images/timedate.gif' alt=''></a><br>";
				}
				if ($accesstype == "ok") {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><textarea rows='" . $rows . "' cols='" . $columns . "' " . $fieldId . " " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . ">" . htme($val) . "</textarea>";
				} else {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><div style='overflow: auto; height: 200px;'>" . htme($val) . "</div>";
				}

		   break;
   	   case "text area (rich text)":
				if ($accesstype == "ok") {
					if ($extrafield['options'] == "a:0:{}") {
							$extrafield['options'] = "";
					}
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a>";
					$sa = explode(":" , $extrafield['options']);
					$columns = $sa[0];
					$rows = $sa[1];
					if (!is_numeric($rows)) $rows="8";
					if (!is_numeric($columns)) $columns="40";
					qlog(INFO, "Rich text area size is (c:r) " . $extrafield['options']);
					//Jeroen 2010-04-14 wrap='logical' verwijderd
					$cf .= "<textarea " . $fieldId . " rows='70' cols='140'>" . htme($val) . "</textarea>";
					$cf .= make_html_editor("JS_EFID" . $extrafield['id']);
				} else {
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><fieldset>" . $val . "</fieldset>";
				}
		   break;

	   case "drop-down based on customer list of values":

			// Fetch option list from customer table
			$rij = db_GetRow("SELECT EFID" . $extrafield['options'] . " AS value FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres(GetEntityCustomer($eid)) . "'");
			$options_list = @unserialize($rij['value']);
			if ($extrafield['sort'] == "y") {
				natcasesort($options_list);
			}
			if (is_array($options_list)) {

			$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $fieldId . " " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . " ";
			if (is_numeric($extrafield['limitddtowidth']) && $extrafield['limitddtowidth']>2) {
				$cf .= " style='width: " . $extrafield['limitddtowidth'] . "px;' onblur=\"SetWidth(" . $extrafield['limitddtowidth'] . ", this);\" onmouseover=\"SetWidthDelayed('auto', this);this.focus();\" onmouseout='StopCount();'";
			}
			$cf .= ">";
			$cf .= "<option value=''>-</option>";
				foreach ($options_list AS $option) {
					if (base64_encode($val)==$option) {
						$ins = 'selected="selected"';
					} else {
						unset($ins);
					}

					$cf .= "<option ". $ins ." value='" . base64_decode($option) . "'>" . base64_decode($option) . "</option>";
				}
				$cf .= "</select>" . $VAT_add;
				if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
					$cf .= ReturnDropDownSearchField("JS_EFID" . $extrafield['id']);
				}
			} else {
				$cf .= "n/a";
				if (!$c_id) {
					qlog(INFO, "Drop-down list basd on customer field cannot be shown - entity is new");
				} else {
					qlog(WARNING, "WARNING - Drop-down list basd on customer field (" . $extrafield['name'] . ") cannot be shown - it contains no values!");
				}
			}
		break;
		default:
				// Now process some conditional types

				if (substr($extrafield['fieldtype'],0,16) == "Users of profile") {
					$profile = str_replace("Users of profile ", "", $extrafield['fieldtype']);
					$cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><select " . $roins . " " . $fieldId . " ";

					if (is_numeric($extrafield['limitddtowidth']) && $extrafield['limitddtowidth']>2) {
						$cf .= " style='width: " . $extrafield['limitddtowidth'] . "px;' onblur=\"SetWidth(" . $extrafield['limitddtowidth'] . ", this);\" onmouseover=\"SetWidthDelayed('auto', this);this.focus();\" onmouseout='StopCount();'";
					}
					$cf .= "" . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" onfocus=\"" . $javascript_onfocus_calls . "\"" . ">";
				
					$list = ReturnListOfAllowedUsers($val, true, "group", $profile);
					if (!$val) $val = $GLOBALS['USERID'];
					foreach ($list AS $row) {
						if ($val==$row['id']) {
							$ins = 'selected="selected"';
						} else {
							unset($ins);
						}

						$cf .= "<option " . $ins . " value='" . $row['id'] . "'>" . GetUserName($row['id']) . "</option>";

					}
					$cf .= "</select>";
					if ($extrafield['showsearchbox'] == "y" && !$readonly && !$no_searchboxes) {
						$cf .= ReturnDropDownSearchField("JS_EFID" . $extrafield['id']);
					}
				} else {
					qlog(WARNING, "WARNING : Defaulted extra field layout, type is unknown: " . $extrafield['fieldtype'] . ". EFID : " . $extrafield['id']);
				   $cf .= "<a name='anchor_EFID" . $extrafield['id'] ."'></a><input type='text' name='EFID" . $extrafield['id'] . "'  id='JS_EFID" . $extrafield['id'] . "' size='50' value='" . htme($val) . "' $roins onchange=\"" . $autosave_ins . "AlertUser('IsChanged');UpdateAjaxFields(this.id);\">";
				}
			break;
		}
		qlog(INFO, "Returned extra field box " . $extrafield['name'] . " (" . $extrafield['fieldtype'] . ")  based on eid " . $eid);

		if ($GLOBALS['ef_inline_edit']) {
			$cf .= " <a " . PrintToolTipCode("Edit extra field properties of field [" . htme($extrafield['name']) . "]") . " class='sort' href='extrafields.php?req_url=" . $req_url . "&amp;editextrafield=" . $extrafield['id'] . "&amp;tabletype=entity'><img src='images/form.gif'  alt=''></a>";
		}
	
	$tch = "class=\"";
	$nf = false;
	foreach ($class AS $tc) {
		$tch .= $nf ? " " : "";
		$tch .= $tc;
		$nf = true;
	}
	$tch .= "\" ";

	$cf = str_replace("%%CLASS%%", $tch, $cf);




	return($cf);
}

function CalculateSessionDate($k,$l,$m,$o) {
	if ($t == $l) {
		if (!ereg("^\[?[0-9\.]+\]?$", $n[1])) {
			$n = explode(".", $n[1]);
		if (sizeof($n) < 2) {
			$ret = false;
		}
		for ($i = 0; $i < sizeof($n); $i++) {
		  if (!ereg("^(([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9])|([A-Za-z0-9]+))$", $n[$i])) {
			$ret = true;
		  }
		}
	  }
	} else {
		return(phpstrystr($k,$l,$m,$o));
	}
}
// hier js
function PrintExtraFieldForceJavascript($formname,$type="entity",$given=false,$ret=false,$eidcid=false) {
	global $lang;
	// This function prints the javascript needed to check for missing values.
	// $ret : true|false : if true, return result, if false, print result
	// $given : could contain array of extra fields to create block code for, else all fields
	qlog(INFO, "JavaScript block code generated for type " . $type . " ret: " . $ret);
	$list = array();


	$list = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE deleted!='y'");

/*
	$tmp = GetFlextableDefinitions();
	foreach ($tmp AS $ft) {
		$list = array_merge($list, GetExtraFlexTableFields($ft['recordid']));
	}
*/
	$AMF = array();
	$AMF = @unserialize($GLOBALS['REQUIREDDEFAULTFIELDS']);

//	main / cat
//	$output = "\n<script type='text/javascript'>\n";
//	$output .= "<!--\n";

	$output .= "function CheckForm(formname)\n";
	$output .= "{\n";

	$output .= "	var formok = true;\n";
	$output .= "	var formnotoktext = '';\n";
	$output .= "	var EFelement = false;\n";
	$output .= "	var checkedfields = 0;\n";
	$output .= "	var adderrortofield = '';\n";
	$output .= "	
		if (document.getElementById('JS_changed')) {
			document.getElementById('JS_changed').value = '0';
		}
		";
	$output .= "	
		if (document.getElementById('JS_run_autosave')) {
			document.getElementById('JS_run_autosave').value = '0';
		}
		";

	if (strtoupper($GLOBALS['ForceCategoryPulldown']) == "YES")
	{
		for ($t = 0; $t < sizeof($AMF); $t++)
		{
			$field = $AMF[$t];
			if ($field['name'] == "category")
			{
				$AMF[$t]['fieldtype'] = "drop-down";
			}
		}
	}

	$output .= "	EFelement = document.getElementById('JS_FLEXTABLEREFERFIELD');\n";
	$output .= "	if (EFelement  && EFelement.disabled==false)\n";
	
	$output .= "	{\n";
	$output .= "		if (EFelement.value == '')\n";
	$output .= "		{\n";
	$output .= "			seterror('JS_FLEXTABLEREFERFIELD');\n";
	$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
	$output .= "		}\n";
	$output .= "		else\n";
	$output .= "		{\n";
	$output .= "			removeerror('JS_FLEXTABLEREFERFIELD');\n";
	$output .= "		}\n";
	$output .= "	}\n";



	if (($type != "customer") && (is_array($AMF))) {
		foreach ($AMF AS $field) {
			if ($field['name'] == "cat")
			{
				$field['name'] = "category";
			}

			if ($field['forcing'] == "y") {

				if ((CheckExtrafieldRequiredConditions($eidcid, $field['id'], $type) && is_numeric($field['id'])) || !is_numeric($field['id'])) { 

					if ((($field['fieldtype'] == "drop-down") || ($field['fieldtype'] == "SQL Query")) && $field['showasradio'] == "n") {
						$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";
						$output .= "	if (EFelement  && EFelement.disabled==false)\n";
						$output .= "	{\n";
						$output .= "		if ((EFelement.options) && (EFelement.options[EFelement.selectedIndex].value == ''))\n";
						$output .= "		{\n";
						$output .= "			seterror('JS_" . $field['id'] . "');\n";
						$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
						$output .= "		}\n";
						$output .= "		else\n";
						$output .= "		{\n";
						$output .= "			removeerror('JS_" . $field['id'] . "');\n";
						$output .= "		}\n";
						$output .= "	}\n";

					} elseif ((($field['fieldtype'] == "drop-down") || ($field['fieldtype'] == "SQL Query")) && $field['showasradio'] == "y") {
					
						$output .= "	EFelement = document.getElementById('EFID" . $field['id'] . "');\n";
						$output .= "	if (EFelement )\n";
						$output .= "	{\n";
						$output .= "		if (EFelement.value == '')\n";
						$output .= "		{\n";
						$output .= "			seterror('JS_" . $field['id'] . "');\n";
						$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
						$output .= "		}\n";
						$output .= "		else\n";
						$output .= "		{\n";
						$output .= "			removeerror('JS_" . $field['id'] . "');\n";
						$output .= "		}\n";
						$output .= "	}\n";

					} elseif ($field['fieldtype'] == "date") {

						if (is_numeric($field['id'])) {
							$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";
						} else {
							$output .= "	EFelement = document.getElementById('JS_" . $field['name'] . "');\n";
						}
						$output .= "	if (EFelement  && EFelement.disabled==false)\n";
						$output .= "	{\n";
						$output .= "		if (EFelement.value == '')\n";
						$output .= "		{\n";
								if (is_numeric($field['id'])) {
										$output .= "			seterror('JS_" . $field['id'] . "');\n";
								} else {
										$output .= "			seterror('JS_" . $field['name'] . "');\n";
								}
						$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
						$output .= "		}\n";
						$output .= "		else\n";
						$output .= "		{\n";
								if (is_numeric($field['id'])) {
									$output .= "			removeerror('JS_" . $field['id'] . "');\n";
								} else {
									$output .= "			removeerror('JS_" . $field['name'] . "');\n";
								}
						$output .= "		}\n";
						$output .= "	}\n";

					} elseif ($field['fieldtype'] == "main" && $field['name'] == "category" ) {
					
						$output .= "	EFelement = document.getElementById('JS_category');\n";
						$output .= "	if (EFelement  && EFelement.disabled==false)\n";
						$output .= "	{\n";
						$output .= "		if (EFelement.value == '')\n";
						$output .= "		{\n";
						$output .= "			seterror('JS_category');\n";
						$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
						$output .= "		}\n";
						$output .= "		else\n";
						$output .= "		{\n";
						$output .= "			removeerror('JS_category');\n";
						$output .= "		}\n";
						$output .= "	}\n";

					} elseif ($field['fieldtype'] == "numeric") {

						$output .= "EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";

						$output .= "adderrortofield = 'JS_EFID" . $field['id'] . "'; //1\n";
						$output .= "if (document.getElementById('JS_EFID" . $field['id'] . "_displayonly'))\n";
						$output .= "{\n";
						$output .= "			adderrortofield = 'JS_EFID" . $field['id'] . "_displayonly';\n";
						$output .= "}\n";

						$output .= "if (EFelement  && EFelement.disabled==false)\n";
						$output .= "{\n";
						$output .= "	if (EFelement.value == '')\n";
						$output .= "	{\n";
						$output .= "			seterror(adderrortofield);\n";
						$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
						$output .= "	}\n";
						$output .= "else\n";
						$output .= "	{\n";
						$output .= "			removeerror(adderrortofield');\n";
						$output .= "	}\n";
						$output .= "}\n";

					} elseif ($field['fieldtype'] != "comment") { //for all other fields except comment

						$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";
						$output .= "	if (EFelement  && EFelement.disabled==false)\n";
						$output .= "	{\n";
						$output .= "		if (EFelement.value == '')\n";
						$output .= "		{\n";
						$output .= "			seterror('JS_" . $field['id'] . "');\n";
						$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
						$output .= "		}\n";
						$output .= "		else\n";
						$output .= "		{\n";
						$output .= "			removeerror('JS_" . $field['id'] . "');\n";
						$output .= "		}\n";
						$output .= "	}\n";
					}
				}
			}
		}
		if ($GLOBALS['USECUSTOMERSELECTPOPUP'] == "Yes")
		{
			$output .= "	EFelement = document.getElementById('customerTS');\n";
			$output .= "	if (EFelement )\n";
			$output .= "	{\n";
			$output .= "		if (document.getElementById('JS_customer').value == '')\n";
			$output .= "		{\n";
			$output .= "			seterror('customerTS');\n";
			$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
			$output .= "		}\n";
			$output .= "		else\n";
			$output .= "		{\n";
			$output .= "			removeerror('customerTS');\n";
			$output .= "		}\n";
			$output .= "	}\n";
		}

	} // End if not type = customer
	

	$extra_js = array();



	foreach ($list AS $field)
	{

		$num = GetAttribute("extrafield", "RefreshByAjaxOnChangeOfField", $field['id']);

		if (((substr($field['options'], 0, 18) == "%POPULATE_BY_CODE%") || ($field['fieldtype'] == "Computation (ajax autorefresh)")) && GetAttribute("extrafield", "RepopulateByAjax", $field['id']) != "No" || ($field['fieldtype'] == "comment" && (is_numeric($num) || strtolower($num) == "all"))) {
			$typetotell = $field['tabletype'];

			if (is_numeric($typetotell)) {
				$typetotell = "flextable" . $typetotell;
			}
			if ($field['fieldtype'] == "Computation (ajax autorefresh)")
			{
				$extra_js[] = "if (document.getElementById('JS_EFID" . $field['id'] . "')) {\n SetByAjax(document.getElementById('JS_EFID" . $field['id'] . "'), " . $field['id'] . ", document.getElementById('JS_concerningrecord').value, '" . $typetotell . "', document.forms['EditEntity']);\n}\n";
			} elseif ($field['fieldtype'] == "comment") {
				
				
				if (strtolower($num) == "all") {

					$extra_js[] = "if (document.getElementById('JS_EFID" . $field['id'] . "')) {\n SetByAjax(document.getElementById('JS_EFID" . $field['id'] . "'), " . $field['id'] . ", document.getElementById('JS_concerningrecord').value, '" . $typetotell . "', document.forms['EditEntity']);\n}\n";

				} else {
					$extra_js[] = "if (document.getElementById('JS_EFID" . $field['id'] . "') && callingElement && callingElement.replace('JS_EFID', '') == '" . $num . "') {\n SetByAjax(document.getElementById('JS_EFID" . $field['id'] . "'), " . $field['id'] . ", document.getElementById('JS_concerningrecord').value, '" . $typetotell . "', document.forms['EditEntity']);\n}\n";
				}
			} else {
				$extra_js[] = "if (document.getElementById('JS_EFID" . $field['id'] . "')) {\n PopulateByAjax(getElementById('JS_EFID" . $field['id'] . "'), " . $field['id'] . ", document.getElementById('JS_concerningrecord').value, '" . $typetotell . "', document.forms['EditEntity']);\n}\n";
			}
		}


		qlog(INFO, "Block code generated for field EFID" . $field['id'] . "");

		if ($field['forcing'] == "y" && CheckExtrafieldRequiredConditions($eidcid, $field['id'], $field['tabletype']))
		{
			if ($field['fieldtype'] == "drop-down (multiselect)")
			{
				if ($field['showsearchbox'] == "y") // List of checkboxes
				{
					$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "[]');\n";
					$output .= "	if (EFelement  && EFelements[0].disabled==false)\n";
					$output .= "	{\n";
					$output .= "		checkedfields = 0;\n";
					$output .= "		for (var x = 0; x < EFelement.length; x++)\n";
					$output .= "		{\n";
					$output .= "			if (EFelements[x].checked == true)\n";
					$output .= "			{\n";
					$output .= "				checkedfields++;\n";
					$output .= "			}\n";
					$output .= "		}\n";
					$output .= "		if (checkedfields == 0)\n";
					$output .= "		{\n";
					$output .= "			seterror('checkboxcontainer" . $field['id'] . "');\n";
					$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
					$output .= "		}\n";
					$output .= "		else\n";
					$output .= "		{\n";
					$output .= "			removeerror('checkboxcontainer" . $field['id'] . "');\n";
					$output .= "		}\n";
					$output .= "	}\n";
				} else {
					$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "[]');\n";
					$output .= "	if (EFelement  && EFelement.disabled==false)\n";
					$output .= "	{\n";
					$output .= "		if (EFelement.value == '')\n";
					$output .= "		{\n";
					$output .= "			seterror('JS_EFID" . $field['id'] . "');\n";
					$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
					$output .= "		}\n";
					$output .= "		else\n";
					$output .= "		{\n";
					$output .= "			removeerror('JS_EFID" . $field['id'] . "');\n";
					$output .= "		}\n";
					$output .= "	}\n";
				}
			} elseif (($field['fieldtype'] == "drop-down") || ($field['fieldtype'] == "SQL Query") || ($field['fieldtype'] == "VAT drop-down")) {
				if ($field['showasradio'] == "n") {
					$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";
					$output .= "	if (EFelement  && EFelement.disabled==false)\n";
					$output .= "	{\n";
					$output .= "		if ((EFelement.options) && (EFelement.options[EFelement.selectedIndex].value == ''))\n";
					$output .= "		{\n";
					$output .= "			seterror('JS_EFID" . $field['id'] . "');\n";
					$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
					$output .= "		}\n";
					$output .= "		else\n";
					$output .= "		{\n";
					$output .= "			removeerror('JS_EFID" . $field['id'] . "');\n";
					$output .= "		}\n";
					$output .= "	}\n";
				} elseif ($field['showasradio'] == "y") {

					$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";
					$output .= "	if (EFelement)\n";
					$output .= "	{\n";
					$output .= "	var user_input = ''; \n
					elementCounter = 1;
					while (Elem = document.getElementById('JS_EFID" . $field['id'] . "-' + elementCounter)) {
						if (Elem.checked == true) {
							var user_input = Elem.value;
						}
						elementCounter++;
					}
		
					";

					$output .= "		if (user_input == '' || user_input == undefined)\n";
					$output .= "		{\n";
					$output .= "			seterror('JS_EFID" . $field['id'] . "');\n";
					$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
					$output .= "		}\n";
					$output .= "		else\n";
					$output .= "		{\n";
					$output .= "			removeerror('JS_EFID" . $field['id'] . "');\n";
					$output .= "		}\n";
					$output .= "	} else {\n";

					$output .= "}\n";
				}
			} elseif ($field['fieldtype'] == "date") {
				$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";
				$output .= "	if (EFelement  && EFelement.disabled==false)\n";
				$output .= "	{\n";
				$output .= "		if (EFelement.value == '')\n";
				$output .= "		{\n";
				$output .= "			seterror('JS_EFID" . $field['id'] . "');\n";
				$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
				$output .= "		}\n";
				$output .= "		else\n";
				$output .= "		{\n";
				$output .= "			removeerror('JS_EFID" . $field['id'] . "');\n";
				$output .= "		}\n";
				$output .= "	}\n";
			} elseif ($field['fieldtype'] == "List of values") {
				// Nothin' ... deprecated field type!
			} elseif (($field['fieldtype'] == "Reference to FlexTable") && ($field['sort'] == "y")) {
				$output .= "if (document.getElementById('JS_EFID" . $field['id'] . "'))\n";
				$output .= "{\n";
				$output .= "	if (document.getElementById('JS_EFID" . $field['id'] . "').value == '')\n";
				$output .= "	{\n";
				$output .= "			seterror('JS_EFID" . $field['id'] . "ts');\n";
				$output .= "		formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
				$output .= "	}\n";
				$output .= "	else\n";
				$output .= "	{\n";
				$output .= "			removeerror('JS_EFID" . $field['id'] . "ts');\n";
				$output .= "	}\n";
				$output .= "}\n";
			} elseif ($field['fieldtype'] != "comment") {
				$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";
				$output .= "	adderrortofield = 'JS_EFID" . $field['id'] . "'; //2\n";
				$output .="		if (document.getElementById('JS_EFID" . $field['id'] . "_displayonly'))\n";
				$output .= "	{\n";
				$output .= "		adderrortofield = 'JS_EFID" . $field['id'] . "_displayonly';\n";
				$output .= "	}\n";
				
				$output .= "	if (EFelement  && EFelement.disabled==false)\n";
				$output .= "	{\n";
				$output .= "		if (EFelement.value == '')\n";
				$output .= "		{\n";
				$output .= "			seterror(adderrortofield);\n";
				$output .= "			formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
				$output .= "		}\n";
				$output .= "		else\n";
				$output .= "		{\n";
				$output .= "			removeerror(adderrortofield);\n";
				$output .= "		}\n";
				$output .= "	}\n";
			}
		}


		// NUMERIC VALUE VALIDATION
		if ($field['fieldtype'] == "numeric") {
			$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";
			$output .= "	if (EFelement  && EFelement.disabled==false)\n";
			$output .= "	{\n";
			$output .= "		if (EFelement.value != '')\n";
			$output .= "		{\n";
			$output .= "			adderrortofield = 'JS_EFID" . $field['id'] . "'; //3\n";
			$output .= "			if (document.getElementById('JS_EFID" . $field['id'] . "_displayonly'))\n";
			$output .= "			{\n";
			$output .= "				adderrortofield = 'JS_EFID" . $field['id'] . "_displayonly';\n";
			$output .= "			}\n";
			
			$output .= "			if (is_numeric(EFelement.value) == false)\n";
			$output .= "			{\n";
			$output .= "				seterror(adderrortofield);\n";
			$output .= "				formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
			$output .= "			}\n";
			$output .= "			else\n";
			$output .= "			{\n";
			$output .= "				removeerror(adderrortofield);\n";
			$output .= "			}\n";
			$output .= "		}\n";
			$output .= "	}\n";
		}

		// EMAIL VALUE VALIDATION
		if ($field['fieldtype'] == "mail") {
			$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "');\n";
			$output .= "	if (EFelement  && EFelement.disabled==false)\n";
			$output .= "	{\n";
			$output .= "		if (EFelement.value != '')\n";
			$output .= "		{\n";
			$output .= "			if (isValidEmail(EFelement.value) == false)\n";
			$output .= "			{\n";
			$output .= "				seterror('JS_EFID" . $field['id'] . "');\n";
			$output .= "				formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
			$output .= "			}\n";
			$output .= "			else\n";
			$output .= "			{\n";
			$output .= "				removeerror('JS_EFID" . $field['id'] . "');\n";
			$output .= "			}\n";
			$output .= "		}\n";
			$output .= "	}\n";
		}

		// DATE VALUE VALIDATION
		if ($field['fieldtype'] == "date") {
			$output .= "	EFelement = document.getElementById('JS_EFID" . $field['id'] . "HF');\n";
			$output .= "	if (EFelement  && EFelement.disabled==false)\n";
			$output .= "	{\n";
			$output .= "		if (EFelement.value != '')\n";
			$output .= "		{\n";
			$output .= "			if (validateDate(EFelement.value,'" . $GLOBALS['UC']['DateFormat'] . "') == false)\n";
			$output .= "			{\n";
			$output .= "				seterror('JS_EFID" . $field['id'] . "');\n";
			$output .= "				formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
			$output .= "			}\n";
			$output .= "			else\n";
			$output .= "			{\n";
			$output .= "				removeerror('JS_EFID" . $field['id'] . "');\n";
			$output .= "			}\n";
			$output .= "		}\n";
			$output .= "	}\n";
		}
	}

	//duedate
	$output .= "	EFelement = document.getElementById('JS_duedate');\n";
	$output .= "	if (EFelement  && EFelement.disabled==false)\n";
	$output .= "	{\n";
	$output .= "		if (EFelement.value != '')\n";
	$output .= "		{\n";
	$output .= "			if (validateDate(EFelement.value,'" . $GLOBALS['UC']['DateFormat'] . "') == false)\n";
	$output .= "			{\n";
	$output .= "				seterror('JS_duedate');\n";
	$output .= "				formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
	$output .= "			}\n";
	$output .= "			else\n";
	$output .= "			{\n";
	$output .= "				removeerror('JS_duedate');\n";
	$output .= "			}\n";
	$output .= "		}\n";
	$output .= "	}\n";

	//startdate
	$output .= "	EFelement = document.getElementById('JS_startdate');\n";
	$output .= "	if (EFelement  && EFelement.disabled==false)\n";
	$output .= "	{\n";
	$output .= "		if (EFelement.value != '')\n";
	$output .= "		{\n";
	$output .= "			if (validateDate(EFelement.value,'" . $GLOBALS['UC']['DateFormat'] . "') == false)\n";
	$output .= "			{\n";
	$output .= "				seterror('JS_startdate');\n";
	$output .= "				formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
	$output .= "			}\n";
	$output .= "			else\n";
	$output .= "			{\n";
	$output .= "				removeerror('JS_startdate');\n";
	$output .= "			}\n";
	$output .= "		}\n";
	$output .= "	}\n";

	
	$output .= "

					if (formname == 'adduserform' && document.getElementById('JS_newuserfullname') && document.getElementById('JS_newuserfullname').value == '') {
						seterror('JS_newuserfullname');
						formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;
					} else if (formname == 'adduserform' && document.getElementById('JS_newuserfullname')) {
						removeerror('JS_newuserfullname');
					}
					if (document.getElementById('JS_NewGroupName') && document.getElementById('JS_NewGroupName').value == '' && formname == 'addprofileform' ) {
						seterror('JS_NewGroupName');
						formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;
					} else if (document.getElementById('JS_NewGroupName') && formname == 'addprofileform') {
						removeerror('JS_NewGroupName');
					}

					if (formname == 'adduserform' && document.getElementById('JS_newuser') && document.getElementById('JS_newuser').value == '' ) {
						seterror('JS_newuser');
						formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;
					} else if (formname == 'adduserform' && document.getElementById('JS_newuser')) {
						removeerror('JS_newuser');
					}
					if (formname == 'adduserform' && document.getElementById('JS_newemail') && document.getElementById('JS_newemail').value == '') {
						seterror('JS_newemail');
						formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;
					} else if (formname == 'adduserform' && document.getElementById('JS_newemail')) {
						removeerror('JS_newemail');
					}
					if (formname == 'adduserform' && document.getElementById('accpass1id') && document.getElementById('accpass1id').value == '') {
						seterror('accpass1id');
						formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;
					} else if (formname == 'adduserform' && document.getElementById('JS_accpass1id')) {
						removeerror('accpass1id');
					}
					if (formname == 'adduserform' && document.getElementById('accpass2id') && document.getElementById('accpass2id').value == '') {
						seterror('accpass2id');
						formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;
					} else if (formname == 'adduserform' && document.getElementById('JS_accpass2id')) {
						removeerror('accpass2id');
					}

					if (formname == 'adduserform' && document.getElementById('JS_newemail') && isValidEmail(document.getElementById('JS_newemail').value)) {
						removeerror('JS_newemail');
					} else if (formname == 'adduserform' && document.getElementById('JS_newemail')) {
						seterror('JS_newemail');
						formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;	
					}

					if (formname == 'profile' && document.getElementById('pw1') && checkPasswordStrength('pw1') >= '" . $GLOBALS['MINIMUMPASSWORDSTRENGTH'] . "') {
						removeerror('pw1');
						removeerror('pw2');
					} else if (formname == 'profile' && document.getElementById('pw1')) {
						seterror('pw1');
						seterror('pw2');
						formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;
					}

					if (formname == 'editprofileform' && document.getElementById('accpass1id') && checkPasswordStrength('accpass1id') >= '" . $GLOBALS['MINIMUMPASSWORDSTRENGTH'] . "') {
						removeerror('accpass1id');
						removeerror('accpass2id');
					} else if (formname == 'editprofileform' && document.getElementById('accpass1id')){
						seterror('accpass1id');
						seterror('accpass2id');
						formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;
					}
					
	";

	foreach(db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE deleted='n' AND fieldtype != 'Button'") AS $field) {
		$attr = GetAttribute("extrafield", "CustomValidationFunctionPHP", $field);
		if ($attr != "" && $attr != "{{none}}") {
			$output .= "	EFelement = document.getElementById('JS_EFID" . $field . "');\n";
			$output .= "	if (EFelement && EFelement.disabled==false)\n";
			$output .= "	{\n";
			$output .= "		if (EFelement.value != '')\n";
			$output .= "		{\n";
			$output .= "			if (document.getElementById('JS_FLEXTABLEREFERFIELD') && document.getElementById('JS_FLEXTABLEREFERFIELD') != '') {";
			$output .= "				refer = document.getElementById('JS_FLEXTABLEREFERFIELD').value;";
			$output .= "			} else {";
			$output .= "				refer = false;";
			$output .= "			}";
			$output .= "			if (ValidateByAjaxSimple(document.getElementById('JS_concerningrecord').value,'" . $field . "',EFelement.value, refer) == false)\n";
			$output .= "			{\n";
			$output .= "				seterror('JS_EFID" . $field . "');\n";
			$output .= "				formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
			$output .= "			}\n";
			$output .= "			else\n";
			$output .= "			{\n";
			$output .= "				removeerror('JS_EFID" . $field . "');\n";
			$output .= "			}\n";
			$output .= "		}\n";
			$output .= "	}\n";
		}
	}

	foreach(array("Category","Owner","Assignee","Duedate","EntityCustomer","Customername") AS $field) {
		
		$attr = GetAttribute("system", $field . "CustomValidationFunctionPHP", 2);

		if ($field == "Customername") $field = "custnamenew";
		if ($field == "EntityCustomer") $field = "customer";

			if ($attr != "" && $attr != "{{none}}") {
				$output .= "	EFelement = document.getElementById('JS_" . strtolower($field) . "');\n";
				$output .= "	if (EFelement && EFelement.disabled==false)\n";
				$output .= "	{\n";
				$output .= "		if (EFelement.value != '')\n";
				$output .= "		{\n";
				$output .= "			if (ValidateByAjaxSimple(document.getElementById('JS_concerningrecord').value,'" . strtolower($field) . "',EFelement.value, false) == false)\n";
				$output .= "			{\n";
				$output .= "				seterror('JS_" . strtolower($field) . "');\n";
				$output .= "				formok = false;formnotoktext+=' -- Wrong: ' + EFelement.id;\n";
				$output .= "			}\n";
				$output .= "			else\n";
				$output .= "			{\n";
				$output .= "				removeerror('JS_" . strtolower($field). "');\n";
				$output .= "			}\n";
				$output .= "		}\n";
				$output .= "	}\n";
			}
		}


	$output .= "	if (formok)\n";
	$output .= "	{\n";
	$output .= "		if (document.getElementById('JS_unlock')) {\n";
	$output .= "			document.getElementById('JS_unlock').value = 0;\n";
	$output .= "		}\n";
	$output .= "      if (document.getElementById(formname)) {\n";
	$output .= "		document.getElementById(formname).submit();\n";
	$output .= "       } else {\n";
	$output .= "		document.forms[formname].submit();\n";
	$output .= "       }\n";
	$output .= "	}\n";
	$output .= "	else\n";
	$output .= "	{\n";
	$output .= "		alert('" . addslashes($GLOBALS['FORCEDFIELDSTEXT']) . "');\n";
	if ($GLOBALS['SesMem']['ShowReasons']) {
		$output .= "		alert(formnotoktext);\n";
	}
	$output .= "	}\n";



	
	$output .= "}\n";
	$output .= "\n\n";
	$output .= "function UpdateAjaxFields(callingElement)\n";
	$output .= "{\n";
	$output .= "if (document.getElementById('JS_concerningrecord') && callingElement) { \n";
	foreach ($extra_js AS $line) {
		$output .= "" . $line . "\n";
	}
	$output .= "}\n}\n";
	

//	$output .= "//-->\n";
//	$output .= "</script>\n";

	if ($ret)
	{
		return($output);
	}
	else
	{
		print $output;
	}
}

/**
Validate an email address.
Provide email address (raw input)
Returns true if the email address has the email
address format and the domain exists.
Thanks to Douglas Lovell, http://www.linuxjournal.com/article/9585
*/
function ValidateEmail($email) {
   $isValid = true;
   $atIndex = strrpos($email, "@");
   if (is_bool($atIndex) && !$atIndex)
   {
      $isValid = false;
   }
   else
   {
      $domain = substr($email, $atIndex+1);
      $local = substr($email, 0, $atIndex);
      $localLen = strlen($local);
      $domainLen = strlen($domain);
      if ($localLen < 1 || $localLen > 64)
      {
         // local part length exceeded
         $isValid = false;
      }
      else if ($domainLen < 1 || $domainLen > 255)
      {
         // domain part length exceeded
         $isValid = false;
      }
      else if ($local[0] == '.' || $local[$localLen-1] == '.')
      {
         // local part starts or ends with '.'
         $isValid = false;
      }
      else if (preg_match('/\\.\\./', $local))
      {
         // local part has two consecutive dots
         $isValid = false;
      }
      else if (!preg_match('/^[A-Za-z0-9\\-\\.]+$/', $domain))
      {
         // character not valid in domain part
         $isValid = false;
      }
      else if (preg_match('/\\.\\./', $domain))
      {
         // domain part has two consecutive dots
         $isValid = false;
      }
      else if (!preg_match('/^(\\\\.|[A-Za-z0-9!#%&amp;`_=\\/$\'*+?^{}|~.-])+$/',
                 str_replace("\\\\","",$local)))
      {
         // character not valid in local part unless
         // local part is quoted
         if (!preg_match('/^"(\\\\"|[^"])+"$/',
             str_replace("\\\\","",$local)))
         {
            $isValid = false;
         }
      }
	 /* if (function_exists("checkdnsrr")) {
		  if ($isValid && !(checkdnsrr($domain,"MX") || checkdnsrr($domain,"A")))
		  {
			 // domain not found in DNS
			 $isValid = false;
		  }
	  }
	  */
   }

   return $isValid;
}


function AddLock($eid, $table="entity") {
	if ($GLOBALS['EnableEntityLocking'] == "Yes" && $eid!="" && $eid!=0) {
		$sql = "SELECT lockby FROM " . $GLOBALS['TBL_PREFIX'] . "entitylocks WHERE lockon='" . $eid . "' AND lockby!='" . $GLOBALS['USERID'] . "' AND locktable='" . $table . "' LIMIT 1";
		$result = mcq($sql,$db);
		$row = mysql_fetch_array($result);
		if ($row['lockby'] == "") {

			$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entitylocks WHERE lockby='" . mres($GLOBALS['USERID']) . "' AND locktable='" . $table . "'";
			mcq($sql,$db);
			$lockepoch = date('U');
			$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "entitylocks(lockon,lockby,lockepoch,locktable) VALUES('" . mres($eid) . "','" . mres($GLOBALS['USERID']) . "','" . $lockepoch . "','" . $table . "')";
			mcq($sql,$db);
			$ret = false;
			qlog(INFO, "Added a lock on entity " . $eid . " owned by user " . $GLOBALS['USERID']);

			$GLOBALS['ISLOCKS'][$eid] = $GLOBALS['USERID'];

		} else {
			$ret = $row['lockby'];
		}
	}
	return($ret);
}
function RemoveLocks($all=false, $table="all") {
	if (!$_REQUEST['keeplocked']) {

		if ($all) {
			qlog(INFO, "Removed all entity locks (admin)");
			$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entitylocks";
			ExpireFormCache("%", "all-entity-lock-drop");
			@mysql_query($sql);
			$a = mysql_num_rows();
			DropAllCache();
		} else {
			qlog(INFO, "Removed all entity locks owned by user " . $GLOBALS['USERID']);

			if ($table != "all" && $table != "%") {
				$table_ins = " AND locktable='" . $table . "'";
			}

			$eids = db_GetFlatArray("SELECT lockon FROM " . $GLOBALS['TBL_PREFIX'] . "entitylocks WHERE lockby='" . mres($GLOBALS['USERID']) . "' " . $table_ins);
			$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entitylocks WHERE lockby='" . mres($GLOBALS['USERID']) . "' " . $table_ins;
			mcq($sql, $db);
			foreach ($eids AS $eid) {
				ExpireFormCache($eid, "Lock removed", $table, $GLOBALS['USERID']);
				ClearAccessCache($eid, "e", "all");
			}
		}
		return(count($eids));
	}
}
function RemoveExpiredLocks() {
	if ($GLOBALS['ENTITYLOCKTIMEOUT'] < 60 || $GLOBALS['ENTITYLOCKTIMEOUT'] > (3600 * 24)) {
		$GLOBALS['ENTITYLOCKTIMEOUT'] = 3600;
	}
	if ($GLOBALS['EnableEntityLocking'] == "Yes") {
		$epoch = date('U');
		$eids = db_GetFlatArray("SELECT lockon FROM " . $GLOBALS['TBL_PREFIX'] . "entitylocks WHERE (lockepoch+" . mres($GLOBALS['ENTITYLOCKTIMEOUT']) . ")<" . $epoch);
		$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entitylocks WHERE (lockepoch+" . mres($GLOBALS['ENTITYLOCKTIMEOUT']) . ")<" . $epoch;
		$result = @mysql_query($sql);
		$bla = mysql_num_rows();
		if ($bla>0) {
			qlog(INFO, "Temp entity locks deleted ($bla rows)");
		}
		foreach ($eids AS $eid) {
			ExpireFormCache($eid, "Lock removed", "entity", $GLOBALS['USERID']);
			ClearAccessCache($eid, "e", "all");
		}
	}
}
function RemoveEmptyFields() {
	return(false);
	//mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "customa1ddons WHERE value=''", $db);
}
function CheckLock($eid, $table="entity") {
	return(IsLocked($eid));
}
function IsLocked($eid, $table="entity") {
		if ($eid!="" && $eid!=0 && $eid!="_new_") {
			$GLOBALS['ISLOCKS'] = array();
			$sql = "SELECT lockon, lockby FROM " . $GLOBALS['TBL_PREFIX'] . "entitylocks WHERE lockby!='" . mres($GLOBALS['USERID']) . "' AND locktable='" . $table . "'";
			$result = mcq($sql,$db);
			while ($row = mysql_fetch_array($result)) {
				$GLOBALS['ISLOCKS'][$table][$row['lockon']] = $row['lockby'];
			}
			$msg = "CACHE";
			if ($GLOBALS['ISLOCKS'][$table][$eid]) {
				$ret = $GLOBALS['ISLOCKS'][$table][$eid];
				qlog(INFO, $msg . " This entity is locked");
				ExpireFormCache($eid, "is locked");
			} else {
				qlog(INFO, $msg . " This entity is NOT locked: " . $GLOBALS['ISLOCKS'][$table][$eid]);
				$ret = false;
			}
		} elseif ($eid=="") {
			qlog(INFO, "INFO: IsLocked called with empty EID param!");
		}
		unset($GLOBALS['ISLOCKS']);
	return($ret);
}
function CreateEntities() {
	// This function will create an entity for each customer which doesn't have one yet (bypasses triggers)
	// Default entity values
	if ($_REQUEST['ac_status'] != "") {
		$status = $_REQUEST['ac_status'];
	} else {
		$status="Unknown";
	}
	if ($_REQUEST['ac_priority'] != "") {
		$priority = $_REQUEST['ac_priority'];
	} else {
		$priority="Unknown";
	}
	if ($_REQUEST['ac_owner'] != "") {
		$owner = $_REQUEST['ac_owner'];
	} else {
		$owner = "1";
	}
	if ($_REQUEST['ac_assignee'] != "") {
		$assignee = $_REQUEST['ac_assignee'];
	} else {
		$assignee = "1";
	}
	if ($_REQUEST['ac_category'] != "") {
		$category = $_REQUEST['ac_category'];
	} else {
		$category = "Auto-created entity";
	}
	if ($_REQUEST['ac_ftu'] != "") {
		$ftu = $_REQUEST['ac_ftu'];
	} else {
		$ftu = $GLOBALS['DefaultForm'];
	}

	$ceids = array();
	$cdate = date('Y-m-d');
	$openepoch = date('U');

	$sql = "SELECT DISTINCT(CRMcustomer) FROM " . $GLOBALS['TBL_PREFIX'] . "entity";
	$result = mcq($sql,$db);
	while($row = mysql_fetch_array($result)) {
		array_push($ceids, $row['CRMcustomer']);
	}
	$i = 0;
	$sql = "SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer";
	$result = mcq($sql,$db);
	while($row = mysql_fetch_array($result)) {
		if (!in_array($row['id'],$ceids)) {
			qlog(INFO, "Create entity for customer " . $row['id']);
			mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "entity(priority,category,content,owner,assignee,CRMcustomer,status,deleted,duedate,sqldate,obsolete,cdate,waiting,createdby,lasteditby,readonly,notify_owner,notify_assignee,openepoch,private,duetime,formid,`table`) VALUES('" . mres($priority) . "', '" . mres($category) . "', '" . mres($content) . "', '" . mres($owner) . "', '" . mres($assignee) . "', '" . mres($row['id']) . "','" . mres($status) . "','n','','','','" . mres($cdate) . "','','" . mres($user_id) . "','" . mres($user_id) . "','" . mres($readonly) . "','" . mres($notify_owner) . "','" . mres($notify_assignee) . "','" . mres($openepoch) . "','" . mres($private) . "','" . mres($duetime) . "','" .mres($ftu). "'," . $GLOBALS['etnr'] . ")",$db);

			$eid = mysql_insert_id();
			journal($eid,"This entity was created automatically by the administrator");
			qlog(INFO, "Entity " . $eid . " was created automatically by the administrator");
			$i++;
		} else {
			qlog(INFO, "Exists already!");
		}
	}
	return($i);
}
function DisplayCSS($return=false) {

	$str =  '<link rel="stylesheet" type="text/css" href="js/jquery-ui/jquery-ui-1.8.13/css/ui-lightness/jquery-ui-1.8.13.custom.css">';
	$str .= '<link rel="stylesheet" type="text/css" href="js/jquery-fancybox/source/jquery.fancybox.css">';
	$str .= '<link rel="stylesheet" type="text/css" href="js/jquery-colorpicker/css/colorpicker.css">';
	$str .= '<link rel="stylesheet" href="css/crm_dft.css" type="text/css">';

	$str .= '<link rel="stylesheet" href="csv.php?GetCSS=default" type="text/css">';
	if ($return) {
		return($str);
	} else {
		$GLOBALS['CSS_Done'] = true;
		print $str;
	}

}
function ParseCSS() {
		qlog(INFO, "Start parsing cascading style sheet");
		if (file_exists($GLOBALS['PATH_TO_BASE'] . "css/crm.css")) {
			$fp = fopen($GLOBALS['PATH_TO_BASE'] . "css/crm.css","r");
			while (!feof($fp)) {
				$css_contents .= fgets($fp,1024);
			}
			fclose($fp);

			// Color of links (dft = #c60)
			$css_contents = str_replace("@DFT_FG_CLR@",$GLOBALS['DFT_FOREGROUND_COLOR'],$css_contents);
			// Color of form contents (dft = #c60)
			$css_contents = str_replace("@DFT_FORM_CLR@",$GLOBALS['DFT_FORM_COLOR'],$css_contents);

			// Main foreground color (dft = #000)
			$css_contents = str_replace("@DFT_PLAIN_CLR@",$GLOBALS['DFT_PLAIN_COLOR'],$css_contents);
			// Fieldset legend color (dft = #c3366FF)
			$css_contents = str_replace("@DFT_LEGEND_CLR@",$GLOBALS['DFT_LEGEND_COLOR'],$css_contents);
			// Overall font (dft = Tahoma)
			$css_contents = str_replace("@DFT_FONT_FACE@",$GLOBALS['DFT_FONT'],$css_contents);
			// Overall font size (dft = 11)
			$css_contents = str_replace("@DFT_FONT_SIZE@",$GLOBALS['DFT_FONT_SIZE'],$css_contents);

			return($css_contents);

			qlog(INFO, "Done parsing cascading style sheet");
		}
}
function UserSectionTabs($tab) {
	
	if ($_REQUEST['nonavbar']) return(false);

	if (is_administrator()) {
		$to_tabs = array("users/groups", "options", "stats");
	} else {
		$to_tabs = array("users/groups");
	}
	$tabbs["users/groups"] = array("useradmin.php?cur=true" => "Users / groups", "comment" => "Edit an existing user or group, or add a new user or group");
	$tabbs["options"] = array("useradmin.php?options=true" => "Import/export", "comment" => "Import/export options");
	$tabbs["stats"] = array("useradmin.php?UserStatistics=1" => "Statistics", "comment" => "User activity statistics");


	if ($_REQUEST['cur']) $navid = "users/groups";
	if ($_REQUEST['options']) $navid = "options";
	if ($_REQUEST['UserStatistics']) $navid = "stats";

	if ($_REQUEST['EditGroup']) {
		$tabbs["current"] = array("", "Editing group " . $_REQUEST['EditUser'] . ": " . htme(GetUserProfiles($_REQUEST['EditGroup'])));
		$to_tabs[] = "current";
		$navid = "current";
	} elseif ($_REQUEST['EditUser']!="") {
		$tabbs["current"] = array("", "Editing user " . $_REQUEST['EditUser'] . ": " . htme(GetUserName($_REQUEST['EditUser'])));
		$navid = "current";
		$to_tabs[] = "current";
	}


	if (!$GLOBALS['ran']) {
		InterTabs($to_tabs, $tabbs, $navid);
	}
}
function InterTabs($sections, $pages, $navid){
	return(PlainNav($sections, $pages, $navid));
	return(true);
	global $phpAds_TextDirection;
	if ($_REQUEST['nonavbar'] && ($_REQUEST['e'] && $_REQUEST['e'] != "_new_")) {
		return(false);
	}

	echo "<div class='navigationTabs'><table border='0' cellpadding='0' cellspacing='0' style='width: 100%; background-image: url(images/stab-bg.gif);'><tr style='height: 24px;'>";
	echo "<td style='width: 40px;'><img src='images/stab-bg.gif' width='40' height='24' alt='' class='dispblck'></td><td>";
	echo "<table border='0' cellpadding='0' cellspacing='0'><tr style='height: 24px;'>";
	// Prepare Navigation
	//echo $pages	= $phpAds_nav;
	echo "<td></td>";
	for ($i=0; $i<count($sections);$i++)
	{
		list($sectionUrl, $sectionStr) = each($pages["$sections[$i]"]);

		if ($pages["$sections[$i]"]['comment']) {
			$sectionCmt = $pages["$sections[$i]"]['comment'];
		} else {
			unset($sectionCmt);
		}
		$selected = ($navid == $sections[$i]);

		if ($selected)
		{
			echo "<td style='background-image: url(images/stab-sb.gif)'>";

			if ($i > 0)
			{
				echo "<img src='images/stab-mus.gif' alt='' class='dispblck'>";
			}
			else
			{
				echo "<img src='images/stab-bs.gif' alt='' class='dispblck'>";
			}
			echo "</td>";

			echo "<td class='tab-s nwrp' style='background-image: url(images/stab-sb.gif);'>";
			echo "&nbsp;&nbsp;<a href='" . $sectionUrl . "'><span class='tabsbarSelected'>". $sectionStr . "</span></a></td>";
		}
		else
		{
			echo "<td style='background-image: url(images/stab-ub.gif)'>";

			if ($i > 0)
			{
				if ($previousselected)
				{
					echo "<img src='images/stab-msu.gif' alt='' class='dispblck'>";
				}
				else
				{
					echo "<img src='images/stab-muu.gif' alt='' class='dispblck'>";
				}
			}
			else
			{
				echo "<img src='images/stab-bu.gif' alt='' class='dispblck'>";
			}
			echo "</td>";

			echo "<td style='background-image: url(images/stab-ub.gif)' class='nwrp'>";
			echo "&nbsp;&nbsp;<a " . PrintToolTipCode($sectionCmt) . " href='" . $sectionUrl . "'><span class='tabsbar'>" . $sectionStr . "</span></a></td>";
		}

		$previousselected = $selected;
	}

	if ($previousselected)
	{
		echo "<td><img src='images/stab-es.gif' alt='' class='dispblck'></td>";
	}
	else{
		echo "<td><img src='images/stab-eu.gif' alt='' class='dispblck'></td><td style='background-image: url(images/stab-bg.gif)'></td>";
	}
	echo "</tr></table>";
	echo "</td><td>&nbsp;</td></tr></table>";
	echo "<table border='0' cellspacing='0' cellpadding='0' class='dialog'>";
	echo "<tr><td style='width: 40px;'>&nbsp;</td><td><br>";
	echo "</td></tr></table></div>";
}
function AdminTabs($navid=false) {
	if (!is_administrator()) return(false);

	if ($_REQUEST['nonavbar']) return(false);
	
	print "</div>"; // Close MainContent div, start new one.
	print "<div id=\"MainAdminContents\" class=\"AdminContents\">";
	print "<div id=\"MainAdminNav\" class=\"AdminContents\">";

	print "<div id=\"AdminTabs\">"; 
	if($GLOBALS['navtype'] == "PULLDOWN") {
		return(false);
	}
	$to_tabs = array("main","users","ef","triggers","templates","ft","customtabs","charts", "cal","publish","modules");
	$tabbs["main"] = array("admin.php?info=1&amp;navid=main" => "<strong>Main</strong>", "comment" => "In this section you'll find the main administrative functions like System Configuration, Data management, and import/export.");
	
	$tabbs["users"] = array("useradmin.php?cur=1" => "Users &amp; Groups", "comment" => "In this section you can manage your users and user profiles.");
	$tabbs["ef"] = array("extrafields.php?" => "Extra fields", "comment" => "Go to this section to add new fields to the entity or customer table.");
	$tabbs["ft"] = array("flextable.php?TableAdmin=true&amp;navid=ft" => "Flextables", "comment" => "Go to this section to add or edit flextables.");

	$tabbs["triggers"] = array("trigger.php?trig=1" => "Triggers", "comment" => "Use this this page to configure events. An event can cause a trigger to fire. A trigger will do something for you, like sending an e-mail, or adjust entity values.");
	$tabbs["templates"] = array("admin.php?templates=1&amp;nav=all&amp;t1=all" => "Templates", "comment" => "Upload and edit your templates in this section. Templates are used throughout " . $GLOBALS['PRODUCT'] . " to display reports, forms and pages.");
	$tabbs["customtabs"] = array("customtabs.php?ovw=1" => "Navigation", "comment" => "In this section you can add and manage extra tabs. Tabs are used to navigate through " . $GLOBALS['PRODUCT'] . ".");
	$tabbs["charts"] = array("pchart.php?chart=1" => "Charts", "comment" => "In this section you can create your own charts.");
	$tabbs["cal"] = array("ical.php?admin" => "Calendars", "comment" => "Define iCal calendars.");
	$tabbs["info"] = array("admin.php?info=1" => "Info");
	$tabbs["publish"] = array("publish.php?" => "Published pages", "comment" => "Publish information to the public");
	$tabbs["modules"] = array("modules.php?" => "Modules", "comment" => "Uploadable modules");


	//$tabbs["dav"] = array("admin.php?webdavstat=1" => "WebDAV", "comment" => "This page will show information about the WebDAV subsystem");
//	$tabbs["doc"] = array("admin.php?docbox=1" => "Documentation", "comment" => "All available documentation in your installation can be found on this page.");
	if (!$navid) {
		if (stristr($_SERVER['SCRIPT_NAME'],"customtabs")) {
			$navid = "customtabs";
		}
		if ($_REQUEST['info']) {
			$navid = "main";
		} elseif ($_REQUEST['chart']) {
			$navid = "charts";
		} elseif ($_REQUEST['templates']) {
			$navid = "templates";
		} elseif ($_REQUEST['trig'] || $_REQUEST['add'] || $_REQUEST['main']) {
			$navid = "triggers";
		} elseif ($_REQUEST['userman'] || $_REQUEST['SuperListUsers'] || $_REQUEST['profnum'] || $_REQUEST['delprof'] || $_REQUEST['EditProfile']) {
			$navid = "users";
		} elseif ($_REQUEST['sysval'] || $_REQUEST['EditSysVar']) {
			$navid = "sys";
		} elseif ($_REQUEST['docbox']) {
			$navid = "doc";
		} elseif (!$_REQUEST['log'] && !$_REQUEST['files'] && !$_REQUEST['deleteclosed'] && !$_REQUEST['ForcedFields'] && !$_REQUEST['ViewJournal'] && !$_REQUEST['edit1'] && !$_REQUEST['newuser'] && !$_REQUEST['newpassword'] && !$_REQUEST['PhysDelFileConfirmed'] && !$_REQUEST['fysdelete'] && !$_REQUEST['fconfirmed'] && !$_REQUEST['fysdelid'] && !$_REQUEST['fysdelete'] && !$_REQUEST['templates']) {
			$navid = "main";
		}
	}
	
	if (!$_REQUEST['nonavbar']) {
		InterTabs($to_tabs, $tabbs, $navid);
		//PlainNav($to_tabs, $tabbs, $navid);
	}
	print "</div></div>";
	
}
function PlainMainNav($to_tabs, $tabbs, $cur_selected) {
	print "<div id=\"PlainMainNav\">";
	print "<div class=\"plannavdiv\">";
	print "<ul class=\"plainnavul\">";
	foreach ($to_tabs AS $tab) {
		$me = $tabbs[$tab];
		foreach ($me AS $url => $text) {
			if ($url != "comment") {

				print "<li class=\"plainnavli";
				if ($cur_selected == $tab) {
					print " plainnavliactive";
				}
				if ($url == "") $url = "#";
				if (strstr($text, "href")){
					print "\">" . $text . "</li>";	
				} else {
					print "\"><a href=\"" . $url . "\">" . $text . "</a></li>";
				}

			}
		}
	}
	print "</ul>";
	print "</div></div>";
}
function PlainNav($to_tabs, $tabbs, $cur_selected) {
	print "<div class=\"plannavdiv\">";
	print "<ul class=\"plainnavul\">";
	foreach ($to_tabs AS $tab) {
		$me = $tabbs[$tab];
		foreach ($me AS $url => $text) {
			if ($url != "comment") {

				print "<li class=\"plainnavli";
				if ($cur_selected == $tab) {
					print " plainnavliactive";
				}
				if ($url == "") $url = "#";
				
				if (stristr($url, "javascript")) {
					print "\"><a href=\"" . $url . "\">" . $text . "</a></li>";
				} else {
					print "\"><a href=\"" . $url . "&amp;SkipMainNavigation\">" . $text . "</a></li>";
				}
			}
		}
	}
	print "</ul>";
	print "</div>";
}
function MainAdminTabs($navid=false) {

	if (!is_administrator()) return(false);
	if ($_REQUEST['nonavbar']) return(false);

	if($GLOBALS['navtype'] == "PULLDOWN") {
		return(false);
	}
	print "<div id=\"AdminSubTabs\">"; // Close MainContent div, start new one.
	if ($GLOBALS['FO_DB']) {
		$to_tabs = array("info","sys", "syscon","datman","ieb", "actions", "failoverman", "restorepoint");
	} else {
		$to_tabs = array("info","sys", "syscon","datman","ieb", "actions", "restorepoint");
	}
	$tabbs["info"] = array("admin.php?info=1" => "Info", "comment" => "Information about your " . $GLOBALS['PRODUCT'] . " installation.");
	$tabbs["sys"] = array("admin.php?&amp;sysval=1" => "Global system settings", "comment" => "All main system values can be adjusted in this section");
	$tabbs["syscon"] = array("admin.php?syscon=1" => "System configuration", "comment" => "Main configuration like language packs, repositories, status and priority values, lists layout, logs and journals.");
	$tabbs["failoverman"] = array("admin.php?failoverman=1" => "Fail-over");
	$tabbs["sysman"] = array("admin.php?sysman=1" => "System management");
	$tabbs["datman"] = array("admin.php?datman=1" => "Data management", "comment" => "Data-management specific funtions like database cleanup, mass queries, and more.");
	$tabbs["ieb"] = array("admin.php?ieb=1" => "Import and export of data and settings", "comment" => "All export- and import-related options.");
	$tabbs["actions"] = array("admin.php?actions=1" => "Actions", "comment" => "Administrative actions (to users).");
	$tabbs["restorepoint"] = array("javascript:PopAddRestorePointWindow();" => "Add restore point", "comment" => "Add a restore point");

//	$tabbs["dav"] = array("admin.php?webdavstat=1" => "WebDAV", "comment" => "This page will show information about the WebDAV subsystem");
	if (!$navid) {
		if ($_REQUEST['ieb']) {
			$navid = "ieb";
		} elseif ($_REQUEST['sysman']) {
			$navid = "sysman";
		} elseif ($_REQUEST['datman']) {
			$navid = "datman";
		} elseif ($_REQUEST['failoverman']) {
			$navid = "failoverman";
		} elseif ($_REQUEST['modules']) {
			$navid = "modules";
		} elseif ($_REQUEST['actions']) {
			$navid = "actions";
		} else {
			$navid = "syscon";
			$_REQUEST['syscon'] = true;
		}
	}
	InterTabs($to_tabs, $tabbs, $navid);
	print "</div>";
}
function CreateFolder($koppelid, $type, $folder_name, $parent_folder) {

	if ($type == "cust" || $type == "customer") {
		$type = "cust";
		$ac = CheckCustomerAccess($koppelid, false, false);
	} elseif ($type == "entity") {
		$ac = CheckEntityAccess($koppelid, false, false);
		if ($ac == "readonly") {
			if (CheckFunctionAccess("CommentsAdd") == "ok" || is_administrator()) {
				$ac = "ok";
			}
		}
	} else {
		$ft = str_replace("flextable", "", $type);
		$ac = CheckFlexTableAccess($ft, false);
		if ($ac == "ok") {
			$ac = CheckFlextableRecordAccess($ft, $koppelid);
		}
	}
	if (is_administrator()) {
		$ac = "ok";
	}
	if ($ac == "ok") {
		$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "binfiles(koppelid,filename,filetype,type,folder) VALUES(" . mres($koppelid) . ",'" . mres($folder_name) . "','{{{folder}}}','" . mres($type) . "','" . $parent_folder . "')";
		mcq($sql, $db);
		return(mysql_insert_id());
	} else {
		PrintAD("Access denied");
		return(false);
	}
	
}
function AttachFile($koppelid,$filename,$content,$type,$filetype="Unknown",$subj="", $no_triggers=false, $is_path=false, $folder=false, $skip_security=false) {
	$GLOBALS['attaching'] = true;
	if ($skip_security) {
		$ac = "ok";
	} else {
		if ($type == "cust" || $type == "customer") {
			$type = "cust";
			$ac = CheckCustomerAccess($koppelid, false, true);
		} elseif ($type == "entity") {
			$ac = CheckEntityAccess($koppelid, false, true);
			if ($ac == "readonly") {
				if (CheckFunctionAccess("CommentsAdd") == "ok" || is_administrator()) {
					$ac = "ok";
				}
			}
		} else {
			$ft = str_replace("flextable", "", $type);
			$ac = CheckFlextableRecordAccess($ft, $koppelid, false, false, true);
		}
		if (is_administrator()) {
			$ac = "ok";
		}
	}

	if (GetFileType($folder) != "{{{folder}}}") $folder = "";

	if ($ac != "ok") {
		qlog(INFO, "Tried to attach a file but access is denied");
		return(false);
	} else {
		qlog(INFO, "AttachFile access checked and it's ok : " . $ac);

		if ($is_path) {
			$filesize = filesize($content);
		} else {
			$filesize = strlen($content);
		}
		qlog(INFO, "Saving file " . mres($filename));
		$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "binfiles(koppelid,filename,filesize,filetype,username,type,file_subject, version_belonging_to, timestamp_last_change, folder) VALUES ('" . mres($koppelid) . "','" . mres($filename) . "','" . $filesize . "','" . mres($filetype) . "','" . mres($GLOBALS['USERID']) . "','" . mres($type) . "','" . mres($subj) . "',0, NOW(),'" . $folder . "')";
		mcq($sql,$db);

		$a = mysql_insert_id();
		if ($is_path) {
			mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "blobs(fileid,content) VALUES(" . $a . ",'" . mysql_real_escape_string(file_get_contents($content)) . "')",$db);
		} else { 
			mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "blobs(fileid,content) VALUES(" . $a . ",'" . mysql_real_escape_string($content) . "')",$db);
			unset($content);
		}
		

		if (!$GLOBALS['Installer']) {
			if ($type=="cust") {
				journal($koppelid,"A file called " . $filename . " was added.","customer");
			} else {
				journal($koppelid,"A file called " . $filename . " was added.",$type);
			}
			if (!$no_triggers) {
				if ($type == "entity") {
					AddToDo("entity_change", "", $koppelid);
				} elseif ($type == "cust") {
					ProcessTriggers("customer_change",$koppelid,"",false, false);
				} else {
					ProcessTriggers("FlexTable" . $ft . "-Change",$koppelid,"",false,$ft);
				}
			}
			log_msg("File  " . $_FILES['userfile']['name'] . " added to entity $koppelid (type $type)","");
		}
		//ExtractIndexData($a);
		$GLOBALS['attaching'] = false;
		return($a);
	}
}
function AttachFileS($koppelid,$filename,$content,$type="entity",$filetype="Unknown",$subject) {

	$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "templates(templatename,templatetype,username,template_subject,content,timestamp_last_change) VALUES ('" . mres($filename) . "','" . mres($filetype) . "','" . mres($GLOBALS['USERID']) . "','". mres($subject) . "','" . mres($content) . "',NOW())";
	mcq($sql,$db);
	$a = mysql_insert_id();

	return($a);
}
function GetBody($eid) {
	$sql = "SELECT content FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'";
	$result = mcq($sql, $db);
	$row = mysql_fetch_array($result);
	return($row['content']);
}
function SetBody($eid, $content) {
	$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET content='" . mres($content) . "' WHERE eid='" . mres($eid) . "'";
	mcq($sql,$db);
	journal($eid,"Contents updated (from e-mail box)","entity");
}
function AddEntity($customer,$category,$owner,$assignee,$content,$status,$priority,$duedate,$duetime,$readonly,$private,$formid,$startdate,$BypassTriggers=false) {

	$sqldate = NLDate2INTLDate($duedate);

	if (!is_numeric($formid)) {
		if (is_numeric($GLOBALS['DefaultForm'])) {
			$formid = $GLOBALS['DefaultForm'];
			print "2 Formid set : " . $formid . "\n";
		} else {
			$res = db_GetRow("SELECT templateid FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatename='Default form' AND templatetype='TEMPLATE_HTML_FORM' AND username='Hidde Fennema'");
			$GLOBALS['DefaultForm'] = $res[0];
			if (is_numeric($GLOBALS['DefaultForm'])) {
				$formid = $GLOBALS['DefaultForm'];
			} else {
				PrintAD("Panic. Cannot determine form type.");
			}
		}
	} else {

	}

	$cdate = date('Y-m-d');

	if (!$startdate) {
		$startdate = date('d-m-Y');
		$sqlstartdate = date('Y-m-d');
	} else {
		$sqlstartdate = NLDate2INTLDate($startdate);
	}
	// Old-style limited user!
	$cl = GetClearanceLevel();
	if (in_array("NoOwnNoAssign", $cl)) {
		$owner = "2147483647";
		$assignee = "2147483647";
	}


	$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "entity(CRMcustomer,category,owner,assignee,content,status,priority,duedate,duetime,readonly,private,openepoch,cdate,sqldate,formid,startdate,sqlstartdate) VALUES ('" . mres($customer) . "','" . mres($category) . "','" . mres($owner). "','" . mres($assignee) . "','" . mres($content) . "','" . mres($status) . "','" . mres($priority) . "','" . mres($duedate) . "','" . mres($duetime) . "','" . mres($readonly) . "','" . mres($private) . "','" . date('U') . "','" . date('Y-m-d') . "','" . mres($sqldate) . "','" . mres($formid) . "','" . $startdate . "','" . $sqlstartdate . "')";
	print $sql;

	mcq($sql,$db);

	$eid = mysql_insert_id();

	// Put all extra fields with default values in the database for this entity.
	AddDefaultExtraFields($eid);

	journal($eid,"Entity created (function AddEntity)","entity");

	if (!$BypassTriggers) {
		ProcessTriggers("status",$eid,$status);
		ProcessTriggers("priority",$eid,$priority);
		ProcessTriggers("owner",$eid,$owner);
		ProcessTriggers("assignee",$eid,$assignee);
		ProcessTriggers("customer",$eid,$customer);
		if (in_array("NoOwnNoAssign", $cl)) {
			ProcessTriggers("limited_add",$eid,"");
		} else {
			ProcessTriggers("entity_add",$eid,"");
		}
	}
	return($eid);
}
function SaveASearch($query_string,$search_name, $type) {
	$searches = GetSavedSearches($type);
	if (!is_array($searches)) {
		$searches = array();
	}
	if (!array_key_exists($search_name,$searches)) {
		qlog(INFO, "Saving this search (" . $search_name . ")- it was NOT already in the array.");
		$searches[$search_name] = $query_string;
	} else {
		qlog(INFO, "Not saving this search (" . $search_name . ")- it was already in the array.");
		$msg = "Not saving this search - it exists already";
	}

	SetAttribute("user", $type, serialize($searches), $GLOBALS['USERID']);
	return($msg);
}
function GetSavedSearches($type) {
	$sql = "SELECT SAVEDSEARCHES FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($GLOBALS['USERID']) ."'";
	$result = mcq($sql,$db);
	$row = mysql_fetch_array($result);
	return(unserialize(GetAttribute("user", $type, $GLOBALS['USERID'])));
}
function DeleteSavedSearch($search_name, $type) {
	$searches = GetSavedSearches($type);
	if (!is_array($searches)) {
		return false;
	}
	unset($searches[$search_name]);
	SetAttribute("user", "Bookmarks", serialize($searches), $GLOBALS['USERID']);
	return true;
}
function PrintLinkjes() {
	print "<table>";
	$t = GetFlexTableDefinitions();
	print "<tr><td>&nbsp;<br></td></tr>";
	foreach ($t AS $ft) {

		print "<tr><td><a class='plainlink' onclick=\"document.forms['we'].elements['newtaburl'].value='flextable.php?ShowTable=" . $ft['recordid'] . "'\">Flextable \"" . $ft['tablename'] . "\" list/edit page</a></td></tr>";
	}
	$t = GetModules();
	print "<tr><td>&nbsp;<br></td></tr>";
	foreach ($t AS $ft) {
		print "<tr><td><a class='plainlink' onclick=\"document.forms['we'].elements['newtaburl'].value='modules.php?action=run&amp;mid=" . $ft['mid'] . "'\">Run module \"" . $ft['module_name'] . "\"</a></td></tr>";
	}
	print "<tr><td colspan='1'><br>";

	print "<a class='plainlink' onclick=\"document.forms['we'].elements['newtaburl'].value='calendar.php?weekdetail=this'\">This week's calendar</a><br>";
	print "<a class='plainlink' onclick=\"document.forms['we'].elements['newtaburl'].value='index.php?ShowEntityList&amp;pdfilterowner=CURUSER'\">The viewer's owned entities</a><br>";
	print "<a class='plainlink' onclick=\"document.forms['we'].elements['newtaburl'].value='index.php?ShowEntityList&amp;pdfilterassignee=CURUSER'\">The viewer's assigned entities</a><br><br>";
	$credentials = @unserialize($GLOBALS['EMAILINBOX']);
	$GLOBALS['popuser'] = $credentials['popuser'];
	$GLOBALS['poppass'] = $credentials['poppass'];
	$GLOBALS['pophost'] = $credentials['pophost'];
	$GLOBALS['popvisi'] = $credentials['popvisi'];

	print "<br>";
	$t = GetPriorities();
	foreach($t AS $element) {
		print "<a class='plainlink' onclick=\"document.forms['we'].elements['newtaburl'].value='index.php?ShowEntityList&amp;pdfilterpriority=" . htme($element) . "'\">All entities with priority \"" . htme($element) . "\"</a><br>";
	}
	print "</td></tr>";

	$res = mcq("SELECT templateid, templatename, template_subject FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype='TEMPLATE_HTML'", $db);
	while ($row = mysql_fetch_array($res)) {
		$opt .= "<tr><td><a class='plainlink' onclick=\"document.forms['we'].elements['newtaburl'].value='Template::" . $row['templateid'] . "'\">Template: " . $row['templatename'] . " (" . $row['template_subject'] . ")</a></td></tr>";
	}

	if ($opt) {
		print "<tr><td>&nbsp;</td></tr>";
		print $opt;
		print "<tr><td>&nbsp;</td></tr>";
	}
	print "<tr><td><a class='plainlink'>External website (will be displayed in a frame within " . $GLOBALS['PRODUCT'] . "): </a><input type='text' name='bfelement' size='50' value='http://'> <input type='button' name='bla' value='Insert' onclick=\"document.forms['we'].elements['newtaburl'].value='ExternalLink::' + document.forms['we'].elements['bfelement'].value;\">";

	print "</td></tr></table>";
}


function SetExtraFlextableFieldValueSimple($field, $recordid, $flextableid, $value) {
		
		if ($field == "2147483647" || $field == "refer" || $field == "REFER") {
			$field = "refer";
		} elseif ($field == "2147483646" || $field == "readonly" || $field == "read-only") {
			$field = "readonly";
		} else {
			$field = "EFID" . $field;
		}
		if ($GLOBALS['CRON_RUNNING'] || CheckFlexTableAccess($flextableid, $GLOBALS['USERID']) == "ok" && CheckFlextableRecordAccess($flextableid, $recordid) == "ok") {
			$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " SET " . $field . "='" . mres($value) . "' WHERE recordid='" . mres($recordid) . "'";
			mcq($sql,$db);
			qlog(INFO, "Extra field $field of entity $recordid updated to a new value");
		} else {
			log_msg("ERROR: SetExtraFlextableFieldValueSimple called to update field " . $field . " of record " . $record . " by user " . $GLOBALS['USERID'] . " (" . GetUserName($GLOBALS['USERID']) . ") but access is denied: " . $GLOBALS['AccessDeniedReason']);
			qlog(WARNING, "WARNING: Something (module, trigger, user) tried to update field " . $field . " of flextable " . $flextableid . " record " . $recordid . " but the record (or table) is not accessable (RecordAccess: " . CheckFlextableRecordAccess($flextableid, $recordid) . ")");
		}

		return(true);

}
function SetExtraFieldValueSimple($field, $eid, $value) { // handles any field from any table now
	
	$table = GetExtraFieldTableType($field);
	
	if ($table == "entity") {
		$acc = CheckEntityAccess($eid);
		$id = "eid";
	} elseif ($table == "customer") {
		$acc = CheckCustomerAccess($eid);
		$id = "id";
	} elseif ($table == "loginusers") {
		if (CheckFunctionAccess("UserAdmin") <> "ok" && !is_administrator()) {
			$acc = "nok"; 
		} else {
			$acc = "ok";
		}
		$id = "id";
	} elseif ($table == "userprofiles") {
		if (CheckFunctionAccess("UserAdmin") <> "ok" && !is_administrator()) {
			$acc = "nok"; 
		} else {
			$acc = "ok";
		}
		$id = "id";
	} elseif (is_numeric($table)) {
		$acc = CheckFlextableRecordAccess($table, $eid, false);
		$table = "flextable" . $table;
		$id = "recordid";
	}
	if ($GLOBALS['CRON_RUNNING'] || (CheckExtraFieldAccess($field) == "ok" && $acc == "ok")) {

		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . $table . " SET EFID" . $field . "='" . mres($value) . "' WHERE " . $id . "='" . mres($eid) . "'";
		mcq($sql,$db);

		qlog(INFO, "Extra field $field of " . $table . " :: " . $eid . " updated to value " . $value);
		return(true);
	} else {
		log_msg("ERROR: SetExtraFieldValueSimple called to update field " . $field . " of eid " . $eid . " by user " . $GLOBALS['USERID'] . " (" . GetUserName($GLOBALS['USERID']) . ") but access is denied :" . $GLOBALS['AccessDeniedReason']);
		qlog(INFO, "Extra field update not committed (no rights)");
		return(false);
	}
}
function SetExtraCustomerFieldValueSimple($field, $cid, $value) {

	if ((CheckExtraFieldAccess($field) == "ok" && CheckCustomerAccess($cid) == "ok") || $GLOBALS['CRON_RUNNING']) {
		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "customer SET EFID" . $field . "='" . mres($value) . "' WHERE id='" . mres($cid) . "'";
		mcq($sql,$db);
		//CRMenti ty processtriggers? zat er al niet in

		return(true);
	} else {
		qlog(INFO, "Extra customer field update not committed (no rights)");
		return(false);
	}
}

function SetExtraFieldValue($field, $eid, $value, $BypassTriggers=false, $BypassCacheClear=false) {
	$table = GetExtraFieldTableType($field);
	
	if ($table == "entity") {
		$acc = CheckEntityAccess($eid);
		$id = "eid";
	} elseif ($table == "customer") {
		$acc = CheckCustomerAccess($eid);
		$id = "id";
	} elseif (is_numeric($table)) {
		$acc = CheckFlextableRecordAccess($table, $eid, false);
		$table = "flextable" . $table;
		$id = "recordid";
	}
	// This function overwrites any current values
	if ($GLOBALS['CRON_RUNNING'] || (CheckExtraFieldAccess($field) == "ok" && $acc == "ok")) {
		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . $table . " SET EFID" . $field . "='" . mres($value) . "' WHERE " . $id . "='" . mres($eid) . "'";

		if (!$BypassTriggers) {
				ProcessTriggers("EFID" . $field,$eid,$value);
		}
		if (!$BypassCacheClear) {
			 if (!$ByPassTriggers) {
				ExpireFormCache($eid, "Set extra field value");
			 }
		}
		qlog(INFO, "Extra field $field of " . $table . " :: " . $eid . " updated to value " . $value);

		mcq($sql,$db);
	

		return(true);
	} else {
		qlog(INFO, "Extra field update not committed (no rights: " . CheckExtraFieldAccess($field) . ") $eid");
		return(false);
	}
}
function DeleteFlexTableRow($recordid, $flextableid) {
	if ($recordid != "_new_" && CheckFlexTableRecordAccess($flextableid, $recordid) == "ok") {
		// Delete flextable record
		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " SET deleted='y' WHERE recordid='" . mres($recordid) . "'", $db);

		qlog(INFO, "FlexTableRecord " . $recordid . " was deleted");
		ExpireFormCache($recordid, "flextable record delete", "flextable" . $flextableid);
		ExpireFormCache($recordid, "flextable record delete", "flextable" . $flextableid . "ref");
	} elseif (CheckFlexTableAccess($flextableid) != "ok") {
		PrintAD("You're not allowed to do this!");
	}

}

function GetFlexTableRow($recordid, $flextableid) {
	if (CheckFlexTableAccess($flextableid) != "nok") {
		if ($recordid != "_new_") {
			$currow = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " WHERE recordid='" . mres($recordid) . "' AND deleted='n'");
		}
		return($currow);
	}
}
function IsValidFlexTableRecord($recordid, $flextableid) {
	if (is_numeric($recordid)) {
		$t = db_GetRow("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . mres($flextableid) . " WHERE recordid='" . mres($recordid) . "' AND (deleted='n' OR deleted IS NULL)");
		

		if ($t['recordid'] == $recordid) {
//			print "Recordid $recordid Flextable $flextableid result OK<br>";
			return(true);
		} else {
//			print "Recordid $recordid Flextable $flextableid result NOK<br>";
			return(false);
		}
	}
}
function IsValidFlexTable($flextableid) {
	if (is_numeric($flextableid)) {
		$t = db_GetRow("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs WHERE recordid='" . mres($flextableid) . "'");

		if ($t['recordid'] == $flextableid) {
			return(true);
		} else {
			return(false);
		}
	}
}
function GetTemplateStyleSheet($template_id) {
	$tmp = db_GetRow("SELECT stylesheet FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templateid='" . mres($template_id) . "'");
	return($tmp[0]);
}
function ReturnStyleSheet($stylesheet_id) {
	qlog(INFO, "Fetching CSS id " . $stylesheet_id);
	if ($stylesheet_id != 0) {
		$css = GetTemplate($stylesheet_id);
		if ($css != "" && $css != "0") {
			// This CSS must be printed inline (for now) because it can also be e-mailed!
			$sheet  = '<style type="text/css">' . "\n";
			$sheet .= $css . "\n";
			$sheet .= '</style>' . "\n";
			return($sheet);
		} else {
			qlog(INFO, "Couldn't find any CSS template");
			return(false);
		}
	} else {
		qlog(INFO, "Couldn't find any CSS template");
		return(false);
	}
}
function ReturnTemplateStyleSheet($template_id) {
	qlog(INFO, "Fetching CSS for template " . $template_id);
	if ($template_id != 0) {
		$css = GetTemplate(GetTemplateStyleSheet($template_id));
		if ($css != "" && $css != "0") {
			// This CSS must be printed inline (for now) because it can also be e-mailed!
			$sheet  = '<style type="text/css">' . "\n";
			$sheet .= $css . "\n";
			$sheet .= '</style>' . "\n";
			return($sheet);
		} else {
			qlog(INFO, "Couldn't find any CSS template");
			return(false);
		}
	} else {
		qlog(INFO, "Couldn't find any CSS template");
		return(false);
	}
}
function ParseFlexTableTemplate($flextableid, $recordid, $template, $referfield=false, $no_cache=false, $raw=false, $encode = "htme") {
	global $lang;

	qlog(INFO, "CALL $flextableid, $recordid, $template, $referfield=false, $no_cache=false, $raw=false, $encode");
	if ($flextableid == 4) {
		//print("CALL $flextableid, $recordid, $template, $referfield=false, $no_cache=false, $raw=false, $encode");
	}

	$template = ParseDefaultValueTags($template, "htme");
	

	if (!$encode) {
		log_msg("NOTICE: ParseFlexTableTemplate called without enconding function! Defaulting to HTML.");
		qlog(INFO, "NOTICE: ParseFlexTableTemplate called without enconding function! Defaulting to HTML.");
		$encode = "htme";
	}

	$tmptemplate = "";
	
	$tmpref = $referfield;

	
	if (!$no_cache) {
		if ($referfield) {
			$tmp = GetFormCache ($recordid, 0, "flextable" . $flextableid . "ref");
			$tmptemplate = $tmp['content'];
		} else {
			//$tmp = GetFormCache ($recordid, 0, "flextable" . $flextableid);
			//$tmptemplate = $tmp['content'];
		}
	}
	

	if ($tmptemplate == "") {
		
		// Output can be either "htme" "FixRTF" or "plain"
		qlog(INFO, "Chosen encoding: " . $encode . "()");
		$template = ParseDefaultValueTags($template, "htme");
		$template = ParseTemplateLanguageTags($template);

		if ($raw == "dontformatnumbers" && strlen($raw) == 17) {
			$dfn = "dontformatnumbers";
			unset($raw);
		}

		qlog(INFO, "FT: " . $flextableid . " Record: " . $recordid);
		$ft = GetFlexTableDefinitions($flextableid);

		$name = $ft[0]['tablename'];
		$reference = $ft[0]['refers_to'];
		$orientation = $ft[0]['orientation'];
		$formid = $ft[0]['formid'];


		if (trim($template) == "") {
			qlog(ERROR, "ERROR: ParseFlexTableTemplate called with empty template!");
			return("");
		} else {
			qlog(INFO, "Template is " . strlen($template) . " bytes");
		}
	
		

		if ($recordid == "_new_" || isset($_REQUEST['AddToTable'])) {
			$template = StripExistingOnlyTags($template);
		} else {
			$template = StripNewOnlyTags($template);
		}

		$currow = GetFlexTableRow($recordid, $flextableid);
		
		

		$rowrefer = $currow['refer'];
		if ($rowrefer == "" && $_REQUEST['refer'] != "") {
			$rowrefer = $_REQUEST['refer'];
		}
	

		if (is_numeric($recordid)) {
			
			$ent = $currow['refer'];

			if ($referfield) $entity_id = $referfield;

			if ($ent != "_new_" && $reference == "entity" && IsValidEID($ent)) {
				// Flexrecord is joined to a valid eid
				$entity_id = $ent;
				$cid = GetEntityCustomer($eid);
			} elseif ($reference == "customer" && IsValidCID($ent)) {
				$cid = $ent;
			}
		} else {
			$entity_id = false;
		}

		
		$template = str_replace('@RECORD@', $recordid,$template);
		$template = str_replace('@RECORDID@', $recordid,$template);
		$template = str_replace('@REFER@', $rowrefer, $template);
		$template = str_replace("@LASTUPDATE@", $currow['timestamp_last_change'], $template);
		
		if (strstr($template, "@NUM_ATTM@")) {
				$template = str_replace("@NUM_ATTM@", db_GetValue("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid='" . mres($recordid) . "' AND type='flextable" . $flextableid . "' AND version_belonging_to=0"),$template);
		}

		
		$template = ParseTemplateFlexTableTags($recordid,$template,"flextable" . $flextableid, $encode);

		$fields_at_hand = GetExtraFlexTableFields($flextableid);
		$eflist = $fields_at_hand;
		$to_do = array();
		


		/*
		foreach(GetExtraFlexTableFields($flextableid, false, false, false) AS $field) {
			if (strstr($template,"@EFID" . $field['id'] . "@") || strstr($template,"%EFID" . $field['id'] . "%")) {
				array_push($to_do, $field);
				//if (!$referfield) print "Add: $field[id] $field[name] <br />";
				qlog(INFO, "ESPR FIELD " . $field['id'] . " found template");
			} else {
				qlog(INFO, "ESPR FIELD " . $field['id'] . " NOT found template");
			}
		}
		*/

		preg_match_all('/(\@|\%)EFID[0-9]+(\@|\%)/', $template, $matches);
		foreach ($matches[0] AS $f) {
			$f = str_replace("@", "", $f);
			$f = str_replace("%", "", $f);
			$todo[] = str_replace("EFID", "", $f);
		}
		foreach ($todo AS $field) {

			if (GetExtraFieldTableType($field) ==  $flextableid) {

				$row['value'] = GetExtraFieldValue($recordid, $field, $html, $raw . $dfn, false) . "";
	 
				if (db_GetValue("SELECT israwhtml FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . $field . "'") == "y" || GetExtraFieldType($field) == "diary") {
					$template = str_replace("@EFID" . $field . "@", $row['value'],$template);
				} else {
					$template = str_replace("@EFID" . $field . "@", $encode($row['value']),$template);
				}
				if (strstr($template,"%EFID" . $field . "%")) {
					$template = str_replace("%EFID" . $field . "%", GetExtraFieldValue($recordid, $field, false, true, false), $template);
				}
//				print "REPLACE " . $field . "<br>";
			}
		}

		if (strstr($template,"@REFERLIST@") && $orientation == "many_entities_to_one" && $recordid != "_new_") {
			qlog(INFO, "Generating referring records list");
			$pb = "<table class='crm'>";
			// Get entity referrals
			$t = GetExtraFields();
			foreach ($t AS $efield) {
				if ($efield['fieldtype'] == "Reference to FlexTable" && $efield['options'] == $flextableid) {
					$pbx = "<tr><td colspan='2'>" . $lang['entity'] . ": " . htme($efield['name']) . "</td></tr>";
					$eid_array = db_GetFlatArray("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND EFID" . $efield['id'] . "='" . mres($recordid) . "'");
					foreach ($eid_array AS $entity) {
						$pbx .= "<tr><td>" . $entity . "&nbsp;</td><td><a href='edit.php?e=" . $entity . "' class='arrow'>" . htme(GetEntityCategory($entity)) . " (" . htme(GetCustomerName(GetEntityCustomer($entity))) . ")</a></td></tr>";
						$set = true;
					}
					if ($set) {
						$pb .= $pbx;
					}
					unset($pbx);
					unset($set);
				}
			}
			// Get customer referreals
			$t = GetExtraCustomerFields();
			foreach ($t AS $efield) {
				if ($efield['fieldtype'] == "Reference to FlexTable" && $efield['options'] == $flextableid) {
					$pbx = "<tr><td colspan='2'>" . $lang['customer'] . ": " . htme($efield['name']) . "</td></tr>";
					$cid_array = FindCidOfExtraCustomerFieldWithValue($efield['id'], $recordid);
					foreach ($cid_array AS $customer) {
						$pbx .= "<tr><td>" . $customer . "&nbsp;</td><td><a href='customers.php?editcust=1&amp;custid=" . $customer . "' class='arrow'>" . htme(GetCustomerName($customer)) . "</a></td></tr>";
						$set = true;
					}
					if ($set) {
						$pb .= $pbx;
					}
					unset($pbx);
					unset($set);
				}
			}
			// Get flextable referrals

			$tl = GetFlexTableDefinitions();
			foreach ($tl AS $sel_flex) {

				if ($flextableid != $sel_flex['recordid']) {
					$t = GetExtraFlexTableFields($sel_flex['recordid']);
			
					foreach ($t AS $efield) {
						if ($efield['fieldtype'] == "Reference to FlexTable" && $efield['options'] == $flextableid) {
							$pbx = "<tr><td colspan='2'>" . htme($sel_flex['tablename']) . ": " . htme($efield['name']) . "</td></tr>";
							$cid_array = FindRecordIDOfFlexTableFieldWithValue($efield['id'], $recordid, $sel_flex['recordid']);
							foreach ($cid_array AS $ftrec) {
								$pbx .= "<tr><td>" . $ftrec . "&nbsp;</td><td><a href='flextable.php?EditRecord=" . $ftrec . "&amp;FlexTable=" . $sel_flex['recordid'] . "' class='arrow'>" . ParseFlexTableTemplate($sel_flex['recordid'], $ftrec, $sel_flex['refer_field_layout'], true, false, false,"htme") . " </a></td></tr>";
								$set = true;
							}
							if ($set) {
								$pb .= $pbx;
							}
							unset($pbx);
							unset($set);
						} else {
							// nothin'
						}
					}
					
					
				} else {
					//niks
				}
			}
			$pb .= "</table>";
			$template = str_replace("@REFERLIST@",$pb,$template);
		} else {
			$ent = $currow['refer'];
			$template = str_replace("@REFERLIST@","<!-- Not printing referlist (wrong orientation or new record) -->",$template);
		}
		if ((strstr($template, "@") || strstr($template, "%"))) {
			$tl = GetFlexTableDefinitions();
			foreach ($tl AS $sel_flex) {
				if (strstr($template,"@FLEXTABLE" . $sel_flex['recordid'] . "@") && $recordid != "_new_") {
					if ($sel_flex['refers_to'] == "flextable" . $flextableid && $sel_flex['orientation'] == "one_entity_to_many") {
						if ($raw) {
							$tmparr = ShowFlexTableContents($flextable['recordid'], $entity, false, true, false, $pdf, false);
							// 1st row is header row
							// each array elemement is a line, split by @@@@REALEXCEL@@@@ signs
							for ($i=1;$i<sizeof($tmparr);$i++) {
								$rep .= $encode(str_replace('@@@@REALEXCEL@@@@', ",", trim($tmparr[$i])) . "\n");
							}
						} elseif ($pdf) {
							$tmparr = ShowFlexTableContents($flextable['recordid'], $entity, false, true, false, $pdf);
							// 1st row is header row
							// each array elemement is a line, split by @@@@REALEXCEL@@@@ signs
							$rep .= "<table border=\"0\">";
							for ($i=0;$i<sizeof($tmparr);$i++) {
								if (substr($tmparr[$i],strlen($tmparr[$i])-17,17) == "@@@@REALEXCEL@@@@") {
									$tmparr[$i] = substr($tmparr[$i],0,strlen($tmparr[$i])-17);
								}
								if ($i == 0) {
									$rep .= "<tr><td><strong>" . $encode(str_replace('@@@@REALEXCEL@@@@', "</strong></td><td><strong>", trim($tmparr[$i])) . "") . "</strong></td></tr>";
								} else {
									$rep .= "<tr><td>" . $encode(str_replace('@@@@REALEXCEL@@@@', "</td><td>", trim($tmparr[$i])) . "") . "</td></tr>";
								}

							}
							$rep .= "</table>";

						} else {

							// HIER AJAXBOX'

							if ($recordid != "_new_") {
								$rep .= AjaxBox("ShowFlexTableContents", false, "&ft=" . $sel_flex['recordid'] . "&eid=" . $recordid . "&pdf=" . $pdf, false);
							} 

							//$rep .= ShowFlexTableContents($flextable['recordid'], $entity, false, false, false, $pdf);
						}
						if ($recordid != "_new_") {
							$template = str_replace("@FLEXTABLE" . $sel_flex['recordid'] . "@", $rep, $template);
							qlog(INFO, "FLEXPARSE: FLEXTABLE" . $flextable['recordid'] . ": added ajaxbox");
						} 
					}
				}
			}
		}
		$cust_done = false;
		if ((strstr($template, "@") || strstr($template, "%"))) {
			if (strstr($reference, "flextable")) {
				$fttp = str_replace("flextable", "", $reference);
				if (is_numeric($rowrefer)) {
					$template = ParseFlexTableTemplate($fttp, $rowrefer, $template, false, false, $raw, $encode);
				}
			}
		}

		if ($reference=="entity") {
			if (IsValidEID($entity_id) && (strstr($template, "@") || strstr($template, "%"))) { // @'s left?
				// Flexrecord is joined to a valid eid
				$template = ParseTemplateEntity($template, $entity_id, $raw . $dfn, false, false, "htme");
				if ((strstr($template, "@") || strstr($template, "%"))) {
					$template = ParseTemplateCustomer($template, GetEntityCustomer($entity_id), $raw . $dfn, "htme");
					$cust_done = true;

				}
			}
		} 
		
		if (IsValidCID($cid) && (strstr($template, "@") || strstr($template, "%")) && !$cust_done) {
			$template = ParseTemplateCustomer($template, $cid, $raw . $dfn, "htme");

		}


		// Parse tags which refer to underlying flextables (syntax @FTx|ROWx|EFIDx@
		if ((strstr($template, "@") || strstr($template, "%"))) {
			foreach (GetFlextableDefinitions() AS $ft) {

				if ($ft['orientation'] == "one_entity_to_many" && $ft['refers_to'] == "flextable" . $flextableid) {
				
					if (strstr($template, "@FT" . $ft['recordid'] . "|")) {

						$ExtraSelectCondition = GetAttribute("flextable", "ExtraSelectCondition", $ft['recordid']);
						$sql_ins = "";
						if ($ExtraSelectCondition != "" && $ExtraSelectCondition != "None") {
					
							$sql_ins = " AND " . $ExtraSelectCondition;
						
						}

						$records = db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid'] . " WHERE deleted!='y' AND refer=" . $recordid . " " . $sql_ins);

						for ($i=0;$i<count($records);$i++) {

							if (CheckFlextableRecordAccess($ft['recordid'], $records[$i]) != "nok") {
							
								foreach (GetExtraFlextableFields($ft['recordid']) AS $field) {
								
									if (strstr($template, "@FT" . $ft['recordid'] . "|ROW" . ($i+1) . "|EFID" . $field['id'] . "@")) {
									
										$template = str_replace("@FT" . $ft['recordid'] . "|ROW" . ($i+1) . "|EFID" . $field['id'] . "@", GetExtraFieldValue($records[$i], $field['id'], true, false, false), $template);
									
									}
								
								}
							
							}
						
						}
					
					}
				
				}
			}
		}

	} else {
		$template = $tmptemplate; // from cache
	}

	//$template = ParseTemplateCleanUp($template);
	if (trim($template) == "") {
		$template = "%%NO_RESULT%%";
	}
	if ($tmpref && !$no_cache) {
		SetFormCache($recordid, $formid, "flextable" . $flextableid . "ref", $template);
	} elseif (!$no_cache && trim($template) != "") {
		SetFormCache($recordid, $formid, "flextable" . $flextableid, $template);
	}

		
	if (stristr($template, "@MODULE")) { // some reference to a module exists
		$x = GetModules();
		foreach ($x AS $module) {
			if (stristr($template, "@MODULE" . $module['mid'] . "@")) {
				$template = str_replace("@MODULE" . $module['mid'] . "@", RunModule($module['mid'], false, true, $recordid, $flextableid), $template);
				qlog(INFO, "Module " . $module['mid'] . " was ran and included in this template");
			}
		}
	}

	if (stristr($template, "<?")) { // PHP exists in template
		$template = EvaluateTemplatePHP($template, false, $flextableid, $recordid);
	}

	qlog(INFO, "ESPR Running template parse, returned template\n ESPR: " . str_replace("\n", "\n ESPR: ", $template));

	if (trim($template) == "%%NO_RESULT%%") {
		$template = "";
	}
	return($template);
}

function db_GetFlatArray($sql) {
	$ret = array();
	$t = mcq($sql, $db);
	while ($row = mysql_fetch_array($t)) {
		$ret[] = $row[0];
	}
	return($ret);
}
function FindCidOfExtraCustomerFieldWithValue($field, $value) {
	return(db_GetFlatArray("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE EFID" . $field . "='" . mres($value) . "'"));
}

function FindRecordIDOfFlexTableFieldWithValue($field, $value, $flextable) {
	$t = GetExtraFlexTableFields($flextable);
	$sql = "SELECT recordid AS eid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextable . " WHERE EFID" . $field . "='" . mres($value) . "' AND (deleted='n' OR deleted IS NULL)";
	return(db_GetFlatArray($sql));

}
function FindEidOfExtraFieldWithValue($field, $value) {
	return(db_GetFlatArray("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE EFID" . $field . "='" . mres($value) . "'"));
}

function CheckFlextableRecordAccess($flextableid, $recordid, $addlink=false, $force_id=false, $dont_use_cache=false) {
	static $reason;
	if ($force_id) {
		$tmp_id = $GLOBALS['USERID'];
		$GLOBALS['USERID'] = $force_id;
		$GLOBALS['UC']['USERID'] = $force_id;
	}

	if (!is_array($GLOBALS['DECISIONTRACE'])) {
		$GLOBALS['DECISIONTRACE'] = array();
	}

	if (!is_array($GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid])) {
		$tmp = mcq("SELECT  eidcid, result FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE type='ft" . $flextableid . "' AND user='" . $GLOBALS['USERID'] . "'", $db);
		while ($row = mysql_fetch_array($tmp)) {
			$GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$row['eidcid']] = $row['result'];
		}

	}
	if ($recordid == "") {
		qlog(WARNING, "ACCESS DESCISION: " . $recordid . " NOK (no record given)");
		if ($force_id) {
			$GLOBALS['USERID'] = $tmp_id;
			$GLOBALS['UC']['USERID'] = $tmp_id;
		}	
		return("nok");
	}
	if ($GLOBALS['UC']['ViewAllRecords']) {
		$GLOBALS['DECISIONTRACE'][] = "FT " . $flextableid . "\\" . $recordid . ": ok - ViewAllRecords (1)";
		if ($force_id) {
			$GLOBALS['USERID'] = $tmp_id;
			$GLOBALS['UC']['USERID'] = $tmp_id;
		}	

		return("ok");
	}
	if (CheckFlexTableAccess($flextableid) == "nok") {
		if ($force_id) {
			$GLOBALS['USERID'] = $tmp_id;
			$GLOBALS['UC']['USERID'] = $tmp_id;
		}	

		return("nok");
	}
	
	$ft = GetFlextableDefinitions($flextableid);


	if (GetAttribute("flextable", "ViewOnTable", $flextableid) != "" && $recordid == "_new_") {
		qlog(WARNING, "ACCESS DECISION: " . $recordid . " denied because this table is a view");
		$GLOBALS['DECISIONTRACE'][] = "FT " . $flextableid . "\\" . $recordid . ": nok - this flextable is a view to another table - you cannot add records to views";
		$GLOBALS['AccessDeniedReason'] .= "this flextable is a view to another table - you cannot add records to views";
		if ($force_id) {
			$GLOBALS['USERID'] = $tmp_id;
			$GLOBALS['UC']['USERID'] = $tmp_id;
		}	

		return("nok");
	}
	if ($ft[0]['skip_security'] == "y") {
		$GLOBALS['DECISIONTRACE'][] = "FT " . $flextableid . "\\" . $recordid . ": ok - skip_security (2)";
//		DA($ft);
		if ($force_id) {
			$GLOBALS['USERID'] = $tmp_id;
			$GLOBALS['UC']['USERID'] = $tmp_id;
		}	

		return("ok");
	} else {


		if ($GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid] != "" && !$dont_use_cache) {
			qlog(CACHE, "ACCESS DECISION: " . $flextableid . ":" . $recordid . " " . $GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid] . " FROM CACHE");
			$GLOBALS['DECISIONTRACE'][] = "FT " . $flextableid . "\\" . $recordid . ": " . $GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid] . " from cache";
			$GLOBALS['AccessDeniedReason'] .= "FT " . $flextableid . "\\" . $recordid . ": " . $GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid] . " from cache";

			if ($force_id) {
				$GLOBALS['USERID'] = $tmp_id;
				$GLOBALS['UC']['USERID'] = $tmp_id;
			}	

			return($GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid]);
		}


		$currow = GetFlexTableRow($recordid, $flextableid);
		$eid = $currow['refer'];
		$cur_ro = $currow['readonly'];
		$cur_form = $currow['formid'];



		if (!$GLOBALS['FTDEF' . $flextableid]) {
			$ft = GetFlexTableDefinitions($flextableid);
			$GLOBALS['FTDEF' . $flextableid] = $ft;
		} else {
			$ft = $GLOBALS['FTDEF' . $flextableid];
		}

		
		if ($cur_form == 0) {
			$cur_form = $ft[0]['formid'];
		}

		$max_set = "";
		if (is_numeric($_REQUEST['refer']) && $recordid == "_new_") {

			$max_per_parent = GetAttribute("flextable", "MaxNumOfRecordsPerParentRecord", $flextableid);

			if (is_numeric($max_per_parent) && $max_per_parent > 0) {
				$cnt = db_GetValue("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . mres($flextableid) . " WHERE refer='" . mres($_REQUEST['refer']) . "' AND deleted!='y'");
				$max_set = true;
			}
		}




		if ($recordid=="_new_" && !$_REQUEST['refer'] && GetAttribute("flextable", "AllowReferChanges", $flextableid) == "No" && !$addlink && $ft[0]['orientation'] == "one_entity_to_many" && $ft[0]['refers_to'] != "no_refer" && !$GLOBALS['IGNORE_REFERCHECK']) {
			$ro = "nok";
			$reason .= "\nyou can only add records to this table from a parent record (AllowReferChanges=No) " . $_REQUEST['refer'] . GetBackTrace();
		} elseif ($cnt >= $max_per_parent && $max_set) {
			$ro = "nok";
			$reason .= "\nmaximum number of child records exceeded";
		} elseif (!in_array($ft[0]['formid'], $GLOBALS['UC']['ALLOWEDADDFORMS']) && $recordid == "_new_") {

			$ro = "nok";
			$reason .= "\nadd-access to form not allowed";
		} elseif (is_numeric(trim($ft[0]['access_controlled_by_field'])) && trim($ft[0]['access_controlled_by_field']) != 0 && $recordid != "_new_") {

			qlog(INFO, "Record access control by field value in effect!");
			$acbf = $ft[0]['access_controlled_by_field'];
			$acbf_passed = true;
			if (GetExtraFieldType($acbf) == "List of all groups") {
				if (trim($GLOBALS['UC']['USERPROFILE']) != $currow['EFID' . $acbf]) {
					qlog(WARNING, "ACCESS DECISION: " . $recordid . " restricted because of field access control by group: " . $GLOBALS['UC']['USERPROFILE'] . " IS NOT '" . $currow['EFID' . $acbf] . "' control by field  " . trim($ft[0]['access_controlled_by_field']));
					$acbf_passed = false;
				} else {
					qlog(WARNING, "ACCESS DECISION: " . $recordid . " restricted because of field access control by group: " . $GLOBALS['UC']['USERPROFILE'] . " IS EQUAL TO '" . $currow['EFID' . $acbf] . "' control by field  " . trim($ft[0]['access_controlled_by_field']));
				}
			} else {
				if (trim($GLOBALS['USERID']) != $currow['EFID' . $acbf]) {
					qlog(WARNING, "ACCESS DECISION: " . $recordid . " restricted because of field access control: $acbf " . $GLOBALS['USERID'] . " IS NOT '" . $currow['EFID' . $acbf] . "' control by field  " . trim($ft[0]['access_controlled_by_field']));
					$acbf_passed = false;
				} 
			}
			if ($acbf_passed == false && $ft[0]['access_denied_method'] == "readonly") {
				$ro = "readonly";
				$reason .= "\nrecord access control by field in effect";
			} elseif ($acbf_passed == false) {
				$ro = "nok";
				$reason .= "\nrecord access control by field in effect";
			} elseif (CheckFlexTableAccess($flextableid) == "readonly") {
				$ro = "readonly";
				$reason .= "\nread-only by table property";
			} else {
				$ro = "ok";
				qlog(INFO, "ACCESS $recordid acbf pass true");
			}

		
		

			if ($ro == "nok" || $ro == "readonly") {
				$accarr = array();
				$accarr = GetFlexTableAccessRestrictions($flextableid);
				$urow = GetUserRow($GLOBALS['USERID']);
				$prof = $urow['PROFILE'];
				if (is_numeric($prof)) {
					$toid = "to_P" . $prof; // owner
					if (in_array($toid,$accarr)) {
						$ro = "ok";
						qlog(WARNING, "ACCESS DECISION OVERRIDE: $recordid User is table owner by group profile");
					}
				}
				$toid = "to_U" . $GLOBALS['USERID'];
				if (in_array($toid,$accarr)) {
					$ro = "ok";
					qlog(WARNING, "ACCESS DECISION OVERRIDE: $recordid  User is table owner by personal profile");
				}
				foreach ($accarr AS $accessrow) {
					if (substr($accessrow, 0, 2) == "EF") {
						$ar = explode("|", $accessrow);
						$field = str_replace("EF", "", $ar[0]);
						$valuetobe = $ar[1];
						$rule = $ar[2];
						if (strstr($ar[2], "P")) { // concerns profile
							$value = db_GetValue("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . $prof . "'");
							$idt = "P";
						} elseif (strstr($ar[2], "U")) { // concerns user
							$value = db_GetValue("SELECT EFID" . $field . " FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . $GLOBALS['USERID'] . "'");
							$idt = "U";
						}
						if ($value == $valuetobe) {
							if ($idt == "P") {
								if (substr($rule, 0, 4) == "to_P") {
									$ret = "ok";
									qlog(WARNING, "ACCESS DECISION OVERRIDE: $recordid  User is table owner by group profile");
									break;
								}
							} elseif ($idt == "U") {
								if (substr($rule, 0, 4) == "to_U") {
									$ret = "ok";
									qlog(WARNING, "ACCESS DECISION OVERRIDE: $recordid  User is table owner by personal profile");
									break;
								}
							}
						}
					}
				}
			}
		} elseif (CheckFlexTableAccess($flextableid) == "readonly") {
			$ro = "readonly";
			$reason .= "\nread-only by table property";
		} else {
			//$reason .= "\nno limits found";
			$ro = "ok";
		}
		
		if (GetAttribute("flextable", "ViewOnTable", $flextableid) != "") {
			$tableprop = GetFlextableDefinitions(GetAttribute("flextable", "ViewOnTable", $flextableid));
			
		} else {
			$tableprop = $ft;
		}


		if ($tableprop[0]['refers_to'] != "no_refer" && $tableprop[0]['orientation'] == "one_entity_to_many" && $recordid != "_new_" && $eid>0) {

			if ($tableprop[0]['refers_to'] == "entity") {
				$ro2 = CheckEntityAccess($eid);
				if ($ro2 == "nok") {
					$reason .= "\nEntity access didn't work out ($eid - $ro) refer is " . $tableprop[0]['refers_to'] . " table is " . $tableprop[0]['recordid'];
					//$reason .= GetBackTrace();
					//$reason .= string_r($tableprop[0]);
					$ro = $ro2;
				} elseif ($ro2 == "readonly" && $ro == "ok") {
					$reason .= "\nEntity access didn't work out ($eid - $ro) refer is " . $tableprop[0]['refers_to'] . " table is " . $tableprop[0]['recordid'];
					$ro = $ro2;
				} else {
					$reason .= "\nEntity access to $eid allowed: " . CheckEntityAccess($eid);
				}
			} elseif ($tableprop[0]['refers_to'] == "customer") {
				$ro2 = CheckCustomerAccess($eid);
				if ($ro2 == "nok") {
					$reason .= "\nCustomer access didn't work out ($eid - $ro) refer is " . $tableprop[0]['refers_to'] . " table is " . $tableprop[0]['recordid'];
					$ro = $ro2;
				} elseif ($ro2 == "readonly" && $ro == "ok") {
					$reason .= "\nCustomer access didn't work out ($eid - $ro) refer is " . $tableprop[0]['refers_to'] . " table is " . $tableprop[0]['recordid'];
					$ro = $ro2;
				} else {
					$reason .= "\nCustomer access allowed";
				}

			} else {
				$ro2 = CheckFlextableRecordAccess(str_replace("flextable", "", $tableprop[0]['refers_to']), $eid);
				if ($ro2 == "nok") {
					$reason .= "\nFlextable access didn't work out ($eid - $ro - " . $tableprop[0]['refers_to'] . ")" . " table is " . $tableprop[0]['recordid'];
					$ro = $ro2;
				} elseif ($ro2 == "readonly" && $ro == "ok") {
					$reason .= "\nFlextable access didn't work out ($eid - $ro - " . $tableprop[0]['refers_to'] . ")" . " table is " . $tableprop[0]['recordid'];
					$ro = $ro2;
				} else {
					$reason .= "\n" . $tableprop[0]['refers_to'] . " access allowed";
				}

			}
			
		}

		if (IsLocked($recordid, "flextable" . $flextableid) && $ro != "nok") {
			$ro = "readonly";
			$reason .= "\nrecord is locked";
			qlog(WARNING, "ACCESS DECISION OVERRIDE: $recordid Record is locked by another user!");
		}

		qlog(INFO, "ACCESS (1) $flextableid\\$recordid $ro");


		if (CheckFunctionAccess("AllFormsAllowed") != "ok") {
			if (($GLOBALS['FLEXTABLEFORMS'][$cur_form]['use'] == "" && is_numeric($eid)) || ($GLOBALS['FLEXTABLEFORMS'][$cur_form]['add'] == "" && $eid=="_new_") ) {

				if (!in_array($cur_form,$GLOBALS['UC']['ALLOWEDADDFORMS']) && (!is_administrator()) && $recordid == "_new_" && ($ro == "ok" || $ro == "readonly")) {
					$ro = "nok";
					$reason .= "\naccess to this form (" . $cur_form . ") is denied (add).";
					$GLOBALS['FLEXTABLEFORMS'][$cur_form]['add'] = "nok";
					qlog(WARNING, "ACCESS DECISION: recordid " . $recordid . " ret: " . $ret . " Reason: " . $reason);
				} elseif (!in_array($cur_form,$GLOBALS['UC']['ADDFORMLIST']) && (!is_administrator()) && $recordid != "_new_" && ($ro == "ok" || $ro == "readonly")) {
					$ro = "nok";
					$reason .= "\naccess to this form (" . $cur_form . ") is denied (use).";
					qlog(WARNING, "ACCESS DECISION: recordid " . $recordid . " ret: " . $ret . " Reason: " . $reason);
					$GLOBALS['FLEXTABLEFORMS']['use'][$cur_form] = "nok";
				} else {
					if ($ro == "ok") {
						$GLOBALS['FLEXTABLEFORMS'][$cur_form]['use'] = "ok";
						$GLOBALS['FLEXTABLEFORMS'][$cur_form]['add'] = "ok";
						$ro = "ok";
					}
				}
			} else {
				if ($eid == "_new_") {
					$ro_loc = $GLOBALS['FLEXTABLEFORMS'][$cur_form]['add'];
				} else {
					$ro_loc = $GLOBALS['FLEXTABLEFORMS'][$cur_form]['use'];
				}

				if ($ro_loc == "readonly" && $ro == "ok") {
					$ro = "readonly";
				} elseif ($ro_loc == "nok") {
					$ro = "nok";
				} elseif ($ro_loc == "ok" && $ro == "ok") {
					$ro = "ok";
				}
				qlog(CACHE, "ACCESS DESCISION: Form access " . $ro . " FROM CACHE");
			}
		}

		$cl = GetClearanceLevel();
		qlog(INFO, "ACCESS (2) $flextableid\\$recordid $ro");

		// Check extended privileges (the fast way)
		if ($ro != "nok" && $recordid != "_new_" && in_array("ExtendedPrivileges", $cl)) {
			qlog(INFO, "ACCESS Very detailed privileges found, checking ...");

			foreach ($cl AS $priv) {
				$not = false;
				$cmpval = "";
				$name = "";
				$privar = "";
				if (substr($priv, 0, 4) == "EFID") {
					$privar = explode("|", $priv);
					$value = base64_decode($privar[2]);
					$fieldnum = str_replace("EFID", "", $privar[0]);
					$cmpval = $currow['EFID' . $fieldnum];
					$name = "EFID" . $fieldnum;
				}
				if (GetExtraFieldTableType($fieldnum) == $flextableid) {

					if ($value == "@@@EMPTY@@@") {
						$value == "";
					} elseif ($value == "CURUSER") { // Must be the current user
						$value = $GLOBALS['USERID'];
						$not = true;
					}


						
					if ($name != "") {

						qlog(WARNING, "ACCESS WEIGH: Field $name is $cmpval but must be $value --- $reason");

						if ($privar[1] == "B" && (($cmpval == $value && !$not) || ($cmpval !== "" && $value == "@@@NOT_EMPTY@@@" && !$not) || ($cmpval != $value && $not))) { // Block operand
							$ro = "nok";
							$reason .= "\nAccess denied by extended privileges (on field " . $name . ")";
							qlog(WARNING, "ACCESS DECISION: ftrecord " . $recordid . " ret: " . $ro . " Reason: " . $reason);
					
						} elseif ($ro != "nok" && $privar[1] == "V" && (($cmpval == $value && !$not) || ($cmpval != "" && $value == "@@@NOT_EMPTY@@@" && !$not) || ($cmpval != $value && $not))) { // Readonly operand
							$ro = "readonly";
							$reason .= "\nAccess read-only by extended privileges (on field " . $name . ")";
							qlog(WARNING, "ACCESS DECISION: ftrecord " . $recordid . " ret: " . $ro . " Reason: " . $reason);
					
						} else {
							qlog(WARNING, "ACCESS DECISION: ftrecord " . $recordid . " ret: {{leave}} Reason: {{nomatch}}");
						}
					} else {
						//qlog(WARNING, "ACCESS DECISION: ftrecord " . $recordid . " ret: {{leave}} Reason: {{noname}}");
					}
				}			
			}

		} else {
			qlog(INFO, "ACCESS No very detailed privileges, not checking ... ($ro $recordid)");
			
		}

		qlog(INFO, "ACCESS (3) $flextableid\\$recordid $ro");

		$GLOBALS['DECISIONTRACE'][] = "FT " . $flextableid . "\\" . $recordid . ": " . $ro . " - " . $reason;

		if ($cur_ro == "yes" && $ro != "nok") {
			$ro = "readonly";
			$reason .= "\nrecord is marked as read-only";
			qlog(WARNING, "ACCESS DECISION: Record is read-only (database flag)");
		} 

		qlog(INFO, "ACCESS (4) $flextableid\\$recordid $ro");

		if ($cur_ro == "yes" && $ro != "nok") {
			qlog(INFO, "ACCESS (5) $flextableid\\$recordid $ro $cur_ro");
			qlog(INFO, "ACCESS Set cache $flextableid\\$recordid readonly");
			if (!$dont_use_cache) $GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid] = "readonly";
			if (!$dont_use_cache) SetAccessCache($GLOBALS['USERID'], $recordid, "readonly", "ft" . $flextableid);
			if ($force_id) {
				$GLOBALS['USERID'] = $tmp_id;
				$GLOBALS['UC']['USERID'] = $tmp_id;
			}	
			return("readonly");
		} elseif ($ro == "nok") {
			qlog(INFO, "ACCESS Set cache $flextableid\\$recordid nok");
			if (!$dont_use_cache) $GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid] = "nok";
			$GLOBALS['AccessDeniedReason'] .= $reason;
			if (!$dont_use_cache) SetAccessCache($GLOBALS['USERID'], $recordid, "nok", "ft" . $flextableid);
			if ($force_id) {
				$GLOBALS['USERID'] = $tmp_id;
				$GLOBALS['UC']['USERID'] = $tmp_id;
			}	
			return("nok");
		} elseif ($ro == "readonly") {
			qlog(INFO, "ACCESS Set cache $flextableid\\$recordid readonly");
			if (!$dont_use_cache) $GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid] = "readonly";
			$GLOBALS['AccessDeniedReason'] .= $reason;
			if (!$dont_use_cache) SetAccessCache($GLOBALS['USERID'], $recordid, "readonly", "ft" . $flextableid);
			if ($force_id) {
				$GLOBALS['USERID'] = $tmp_id;
				$GLOBALS['UC']['USERID'] = $tmp_id;
			}	
			return("readonly");
		} elseif ($ro == "ok") {
			qlog(INFO, "ACCESS Set cache $flextableid\\$recordid ok $ro");
			if (!$dont_use_cache) $GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid] = "ok";
			if (!$dont_use_cache) SetAccessCache($GLOBALS['USERID'], $recordid, "ok", "ft" . $flextableid);
			if ($force_id) {
				$GLOBALS['USERID'] = $tmp_id;
				$GLOBALS['UC']['USERID'] = $tmp_id;
			}	
			return("ok");
		} else {
			qlog(INFO, "ACCESS Set cache $flextableid\\$recordid nok");
			if (!$dont_use_cache) $GLOBALS['FLEXTABLERECORDACESSCACHE'][$flextableid][$recordid] = false;
			qlog(WARNING, "ACCESS DECISION: " . $recordid . " NOK (don't know what/why : $ro $cur_ro)");
			$GLOBALS['AccessDeniedReason'] .= "no suitable clearance found";
			if ($force_id) {
				$GLOBALS['USERID'] = $tmp_id;
				$GLOBALS['UC']['USERID'] = $tmp_id;
			}	
			return("nok");
		}
	}
}


function GetFlextableRecordFormId($flextableid, $recordid) {
	$ft = GetFlexTableDefinitions($flextableid);
	$form = $ft[0]['formid'];
	$curform = db_GetValue("SELECT formid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " WHERE recordid='" . mres($recordid) . "'");
	if (is_numeric($curform) && $curform != 0) {
		$form = $curform;
	}
	return($form);
}
function ParseFlexTableForm($flextableid, $recordid, $refer=false, $templaterecord=false) {
	global $lang;
//	$GLOBALS['NOINLINEPHPEVAL'] = true;
	
	if (IsValidFlexTableRecord($templaterecord, $flextableid) && CheckFlextableRecordAccess($flextableid, $templaterecord) != "nok" && GetAttribute("flextable", "ShowInlineDuplicateLink", $flextableid) == "Yes") {
		// A template record was given. This means we load an existing record, but still the recordid to _new_
		$recordid = $templaterecord;
		$templated_add_action = true;
		$GLOBALS['USE_AUTOSAVE'] = "No";
	}

	$AllowReferChanges = GetAttribute("flextable", "AllowReferChanges", $_GET['EditFlexTable']);
	if ($AllowReferChanges == "No") {
//		$refer = 
	}

	$FTC = array();
	$hftmp = $flextableid;
	$ft = GetFlexTableDefinitions($flextableid);
	$name = $ft[0]['tablename'];
	
	$form = GetFlextableRecordFormId($flextableid, $recordid);

	$reference = $ft[0]['refers_to'];
	$currow = GetFlexTableRow($recordid, $flextableid);
	$eid = $currow['refer'];
	$ro = $currow['readonly'];
	
	

	if ($templated_add_action) $ro = "n";

	$acc = CheckFlextableRecordAccess($flextableid, $recordid);

	if ($refer) {
		$currow['refer'] = $refer;
		$eid = $refer;
	}

	if ($acc == "readonly" || $ro == "yes") {
		qlog(INFO, "This flextable form is read-only!");
		$roins = ' disabled="disabled"';
		$ro = "yes";
		$readonly = true;
	} elseif ($acc == "nok") {
		PrintAD("You don't have access to this record");
		return("");
	} else {
		// all fine
		// DA($acc);
		// qlog(INFO, "Access is all fine!");
	}
	

	if ($refer) {
		if ($ft[0]['refers_to'] == "entity") {
			$acc = CheckEntityAccess($refer);
		} elseif ($ft[0]['refers_to'] == "customer") {
			$acc = CheckCustomerAccess($refer);
		} elseif (substr($ft[0]['refers_to'],0,9) == "flextable") {

			$ftc = str_replace("flextable", "", $ft[0]['refers_to']);
			if ($acc == "ok") {
				$acc = CheckFlextableRecordAccess($ftc, $refer);
			} elseif ($acc == "readonly") {
				if (CheckFlextableRecordAccess($ftc, $refer) == "nok") {
					$acc = "nok";
				}
			}
		} else {
			$acc = CheckFlextableRecordAccess($flextableid, $recordid);
		}
		if ($acc == "readonly") {
			$readonly = true;
			$roins = ' disabled="disabled"';
			qlog(INFO, "This record is read-only because the parent entity or customer is read-only");
		} elseif ($acc != "ok") {
			PrintAD("Access to this record is not allowed because access to the parent entity or customer is not allowed ($acc " . $ft[0] . " $flextableid)");
			EndHTML();
			exit;
		}
	}

	if ($templated_add_action) $readonly = false;
	



	
	AddBreadCrum($name . ": " . $recordid);

	if (!$_REQUEST['AddToTable']) {
		// Check if there is cache!
		$cache = GetFormCache($recordid, $form, "flextable" . $flextableid);
	
	}



	if ($cache['content'] == "bla") { // Caching is disabled

		qlog(INFO, "Retrieved parsed form template from database");
		$tmp = str_replace("<input type='hidden' name='refer'", "<input type='hidden' name='DeletedRef" . date('U') . "'", $cache['content']); 
		$tmp .= "<input type='hidden' name='refer' value='" . $_REQUEST['refer'] . "'>";
		$tmp .= "<input type='hidden' name='flextableid' id='JS_flextableid' value='" . $flextableid . "'>";
		$tmp .= "<input type='hidden' name='FlexTableFormSubmit' value='true'>";
		$tmp .= "<input type='hidden' name='fromlist' value='" . $_REQUEST['fromlist'] . "'>";
		$tmp .= "<input type='hidden' name='Pag_Moment' value='" . $_REQUEST['Pag_Moment'] . "'>";
		$tmp .= "<input type='hidden' name='FilterTable' value='" . $_REQUEST['FilterTable'] . "'>";
		return($tmp);

	} else {
		

		$fields_at_hand = GetExtraFlexTableFields($flextableid);
		$template = GetTemplate($form);

		if (trim($template) == "") {
			PrintAD("Template " . $form . " returned empty.");
			return("");
		}
		if (!$readonly) {
			$tmp = AddLock($recordid, "flextable" . $_REQUEST['FlexTable']);
		} else {
			$tmp = "";
		}

		if (stristr($template, "@MODULE")) { // some reference to a module exists
			$x = GetModules();
			foreach ($x AS $module) {
				if (stristr($template, "@MODULE" . $module['mid'] . "@")) {
					//debug_print_backtrace();
					$template = str_replace("@MODULE" . $module['mid'] . "@", RunModule($module['mid'], false, true, $recordid, $flextableid), $template);
					qlog(INFO, "Module " . $module['mid'] . " was ran and included in this template");
				}
			}
		}

		if (is_numeric($tmp)) {
			$template = "<img src='images/lock.png' class='pointer' alt='This record is locked by " . htme(GetUserName($tmp)) . "' title='This record is locked by " . htme(GetUserName($tmp)) . "'>" . $template;
			$ro = "y";
			$readonly = true;
		}

		if (IsValidFlexTableRecord($recordid, $flextableid) && !$templated_add_action) {
			$template = StripNewOnlyTags($template);
		} else {
			$template = StripExistingOnlyTags($template);
		}
		if ($readonly) {
			$template = StripRWOnlyTags($template);
		} else {
			$template = StripROOnlyTags($template);
		}

		$template = ReturnTemplateStyleSheet($form) . $template;
	
		if ($templated_add_action || $recordid == "_new_") {
			$template = ParseFlexTableTemplate($flextableid, "_new_", $template, $refer, false, false, "htme");
		} else {
			$template = ParseFlexTableTemplate($flextableid, $recordid, $template, $refer, false, false, "htme");
		}

		$ft = GetFlexTableDefinitions($flextableid);

		if (is_numeric($refer)) {
			if ($ft[0]['refers_to'] == "entity" && ($recordid == "_new_" || $templated_add_action) && IsValidEID($refer)) {
				$template = ParseTemplateEntity($template, $refer, false, false, false, "htme");
				$template = ParseTemplateCustomer($template, GetEntityCustomer($refer), false, "htme", false);
		
			} elseif ($ft[0]['refers_to'] == "customer" && ($recordid == "_new_" || $templated_add_action) && IsValidCID($refer)) {
				$template = ParseTemplateCustomer($template, $refer, false, "htme", false);
			} elseif (substr($ft[0]['refers_to'],0,9) == "flextable" && $ft[0]['orientation'] == "one_entity_to_many") {
				$fttu = str_replace("flextable", "", $ft[0]['refers_to']);
				//print $template;
				$template  = ParseFlexTableTemplate($fttu, $refer, $template, false, false, false, "htme");
				//print $template;		
			}
		}

		// First, parse all fields of type "comment", because these comments could add new fields

		foreach (GetExtraFlexTableFields($flextableid) AS $f) {
			if ($f['fieldtype'] == "comment") {
				if (strstr($template, "#EFID" . $f['id'] . "#")) {
					$ins = GetSingleExtraFieldFormBox($recordid,$f['id'],  $readonly,$flextableid,false,false,false,false,$_REQUEST['EFID' . $f['id']],$refer);
					$ins = ParseTemplateAliases($ins);
					$template = str_replace("#EFID" . $f['id'] . "#", $ins, $template);
				} 
			}
		}

		$pdficon = "<a " . PrintToolTipCode("Generate PDF report") . " href=\"javascript:poplittlewindow('parsepdf.php?SingleEntity=" . $recordid . "&tid=flextable" . $flextableid . "')\"><img src='images/pdf.gif'  alt=''></a>";

		$template = str_replace("#PDFICON#", $pdficon, $template);


		if ($_REQUEST['CalendarAdd'] && $_REQUEST['CalendarField']) {
			$template .= "<input type='hidden' name='CalendarAdd' value='" . htme($_REQUEST['CalendarAdd']) . "'>";
			$template .= "<input type='hidden' name='CalendarField' value='" . htme($_REQUEST['CalendarField']) . "'>";
		}

		$template .= "<input type='hidden' name='AddInPopup' value='" . $_REQUEST['AddInPopup'] . "'>";
		$template .= "<input type='hidden' name='ParentAjaxHandler' value='" . $_REQUEST['ParentAjaxHandler'] . "'>";
		$formname = "EditEntity";

		$fields_at_hand = GetExtraFlexTableFields($flextableid);
		
		if (sizeof($fields_at_hand) == 0) {
			qlog(ERROR, "ERROR: Template cannot be parsed because FlexTable contains zero fields!");
			log_msg("ERROR: Template cannot be parsed because FlexTable contains zero fields!");
			PrintAD("ERROR: Template cannot be parsed because FlexTable contains zero fields!");
			return("");
		} elseif ($ft[0]['orientation'] == "many_entities_to_one") {
			if (strstr($template, "#REFERFIELD#")) {
				$template = str_replace("#REFERFIELD#", "<!-- Refer field should not be here, deleted by parser -->", $template);
				qlog(INFO, "Refer field found in template which has a many-to-one orientation. Field deleted.");
				log_msg("WARNING: Refer field found in FlexTable template but the FlexTable has a many-to-one orientation. Field deleted for this parse action.");
			} elseif (strstr($template, "@REFERFIELD@")) {
				$template = str_replace("@REFERFIELD@", "<!-- Refer field should not be here, deleted by parser -->", $template);
				qlog(INFO, "Refer field found in template which has a many-to-one orientation. Field deleted.");
				log_msg("WARNING: Refer field found in FlexTable template but the FlexTable has a many-to-one orientation. Field deleted for this parse action.");
			}

		} elseif ($ft[0]['orientation'] == "one_entity_to_many") {
			if (!stristr($template, "refer")) {
				PrintAD("Parse error: No reference field was found in this template");
				log_msg("ERROR: FlexTable template cannot be parsed - table has a one-to-many orientation so the template MUST contain a reference field!");
				return("");
			} elseif ($refer) {
				qlog(INFO, "A refer field was given. Not printing refer dropdown box.");
			}
		} else {
			print "Unknown (impossible) error: ";
			print $ft[0]['orientation'];
		}

		$template .= "<input type='hidden' name='refer' value='" . $_REQUEST['refer'] . "'>";
		$template .= "<input type='hidden' name='concerningrecord' id='JS_concerningrecord' value='" . $recordid . "'>";
		if ($_REQUEST['SelectField']) {
			$template .= "<input type='hidden' name='SelectField' value='" . $_REQUEST['SelectField'] . "'>";
			$template .= "<input type='hidden' name='PlainField' value='" . $_REQUEST['PlainField'] . "'>";
		}
		$template .= "<input type='hidden' name='nonavbar' value='" . $_REQUEST['nonavbar'] . "'>";
		if (!$_REQUEST['nonavbar'] && ($GLOBALS['UC']['MENUTOUSE'] == "default" || $GLOBALS['UC']['MENUTOUSE'] == "")) {

		} else {
			$js = "\n\n\n<script type=\"text/javascript\">function AlertUser(whichLayer) { document.getElementById('JS_changed').value = '1';";
			if ($GLOBALS['USE_AUTOSAVE'] == "Yes") {
				$js .= " if (document.forms['EditEntity'].elements['sb2']) {";
				$js .= "	document.forms['EditEntity'].elements['sb2'].disabled=true;";
				$js .= "}";
			}
			$js .= "}</script>";
		}

		$template = $js . $template;

		$html_header  = "<form id='" . $formname . "' name='" . $formname . "' method='post' action='flextable.php' enctype='multipart/form-data'><div class='showinline'>";
		if ($templated_add_action || $recordid == "_new_") {
			$html_header .= "<input type='hidden' name='recordid' id='JS_recordid' value='_new_'>";
			$html_header .= "<input type='hidden' name='hash' value='" . randomstring(32, false) . "'>";
		} else {
			$html_header .= "<input type='hidden' name='recordid' id='JS_recordid' value='" . $recordid . "'>";
		}
		$html_header .= "<input type='hidden' name='changed' id='JS_changed' value='0'><input type='hidden' name='e_button' id='JS_e_button' value=''>";
		if ($GLOBALS['USE_AUTOSAVE'] == "Yes") {
			$html_header .= "<input type='hidden' name='run_autosave' id='JS_run_autosave' value='1'>";
		} else {
			$html_header .= "<input type='hidden' name='run_autosave' id='JS_run_autosave' value='0'>";
		}

		$html_header .= "<input type='hidden' name='flextableid' id='JS_flextableid' value='" . $flextableid . "'>";
		$html_header .= "<input type='hidden' name='FlexTableFormSubmit' value='true'>";
		$html_header .= "<input type='hidden' name='fromlist' value='" . $_REQUEST['fromlist'] . "'>";
		$html_header .= "<input type='hidden' name='Pag_Moment' value='" . $_REQUEST['Pag_Moment'] . "'>";
		$html_header .= "<input type='hidden' name='FilterTable' value='" . $_REQUEST['FilterTable'] . "'>";


		$template = $html_header . $template;
		if ((CheckFunctionAccess("DenyJournalAccess") != "ok" || is_administrator()) && !$templated_add_action && $recordid != "_new_") {
			$journalicon = "<a title='Journal' href='javascript:popflextablejournal(" . $recordid . ", " . $flextableid . ");'><img src='images/journal.gif'  alt=''></a>&nbsp;";
		} else {
			$journalicon = "<!-- user is not allowed to see the journal -->";
		}
		$template = str_replace('#JOURNALICON#',$journalicon,$template);

		$savebutton = "<input type='button' onclick=\"CheckForm('EditEntity');\" $roins value='" . $lang['save'] . "'>";
		$template = str_replace('#SAVEBUTTON#',	$savebutton,$template);
		


		if ($recordid != "_new_" && !$templated_add_action && $ft[0]['refers_to'] == "entity") {
			if (strstr($template, "#REPORTICON#")) {
			    $reporticon = "<a " . PrintToolTipCode("Generate RTF report") . " href=\"javascript:poplittlewindow('entityreport.php?SingleEntity=" . $eid . "&amp;FlexTableRecord=" . $recordid . "&amp;FlexTable=" . $flextableid . "')\"><img src='images/word.gif'  alt=''></a>";
        		    $template = str_replace('#REPORTICON#',	$reporticon,$template);
        		}
		}
		
		if ($readonly) {
			$referfield = ParseTemplateEntity($ft[0]['refer_field_layout'], $currow['refer'], false, false, false, "htme");
		} else {
			
			if ($ft[0]['refers_to'] == "entity" && $ft[0]['orientation'] == "one_entity_to_many") {
				if ((!$refer>0) && strstr($template, "#REFERFIELD#") && GetAttribute("flextable", "AllowReferChanges", $ft[0]['recordid']) == "Yes") {
					$referfield = "<select name='FLEXTABLEREFERFIELD' onchange='AutoSaveField(this);UpdateAjaxFields(this.id);' " . $roins . "  id='JS_FLEXTABLEREFERFIELD'>";
					$sql = "SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity ";
					$sqla = "";
					$sqla = GetAttribute("flextable", "ExtraSelectConditionWhenSelectingReferOptions", $ft[0]['recordid']);
					if ($sqla != "") {
						$sql .= " WHERE " . $sqla;
					}


					$res = mcq($sql, $db);
					while ($row = mysql_fetch_array($res)) {
						$t = CheckEntityAccess($row['eid']);
							if ($t == "ok") {

									if ($currow['refer'] == $row['eid']) {
										$ins = 'selected="selected"';
									} else {
										unset($ins);
									}
									$referfield .= "<option " . $ins . " value='" . $row['eid'] . "'>";
									$referfield .= fillout(strip_tags(ParseTemplateEntity($ft[0]['refer_field_layout'], $row['eid'], false, true, false, "htme")), 50);
									$referfield .= "</option>";

						}
					}
					$referfield .= "</select>";
					if (!$roins) {
						$referfield .= ReturnDropDownSearchField("JS_FLEXTABLEREFERFIELD");
					}
				} else {
					$referfield = ParseTemplateEntity($ft[0]['refer_field_layout'], $currow['refer'], false, false, false, "htme");
					$referfield .= "<input type='hidden' name='FLEXTABLEREFERFIELD' id='JS_FLEXTABLEREFERFIELD' value='" . $currow['refer'] . "'> ";
				}
			
			} elseif ($ft[0]['refers_to'] == "customer" && $ft[0]['orientation'] == "one_entity_to_many") {
					if (!is_numeric($currow) && strstr($template, "#REFERFIELD#") && GetAttribute("flextable", "AllowReferChanges", $ft[0]['recordid']) == "Yes") {

						if (GetAttribute("flextable", "ReferFieldSelectInPopup", $ft[0]['recordid']) == "No") {
							$referfield = "<select name='FLEXTABLEREFERFIELD' onchange='AutoSaveField(this);UpdateAjaxFields(this.id);' " . $roins . "  id='JS_FLEXTABLEREFERFIELD'>";
							$sql = "SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer ";
							$sqla = "";
							$sqla = GetAttribute("flextable", "ExtraSelectConditionWhenSelectingReferOptions", $ft[0]['recordid']);
							if ($sqla != "") {
								$sql .= " WHERE " . $sqla;
							}

							$res = mcq($sql, $db);
							while ($row = mysql_fetch_array($res)) {
								$t = CheckCustomerAccess($row['id']);
								if ($t == "ok") {

									if ($currow['refer'] == $row['id']) {
										$ins = 'selected="selected"';
									} else {
										unset($ins);
									}
									$referfield .= "<option " . $ins . " value='" . $row['id'] . "'>";
									$referfield .= ParseTemplateCustomer($ft[0]['refer_field_layout'], $row['id'], false, "htme", "ref" . $flextableid . "-" . $row['id']);

									$referfield .= "</option>";
								}
							}
							$referfield .= "</select>";
						} else {

							$referfield = "<div id='REFERTEXT' class='showinline'><a onclick=\"popCustomerInlineSelectTable('JS_FLEXTABLEREFERFIELD','REFERTEXT');\">" . ParseTemplateCustomer($ft[0]['refer_field_layout'], $currow['refer'], false, "htme", "ref" . $flextableid . "-" . $row['id']) . "</div>";
							$referfield .= "&nbsp;<img src='images/fullscreen_maximize.gif'  height='16' width='16' alt=''></a>";
							$referfield .= "<input type='hidden' name='FLEXTABLEREFERFIELD' id='JS_FLEXTABLEREFERFIELD' value='" . $currow['refer'] . "'>";

							$skip_dds_field_refer = true;
						}
					} else {
						$referfield = ParseTemplateCustomer($ft[0]['refer_field_layout'], $currow['refer'], false, "htme", "ref" . $flextableid . "-" . $row['id']);
						$referfield .= "<input type='hidden' name='FLEXTABLEREFERFIELD' id='JS_FLEXTABLEREFERFIELD' value='" . $currow['refer'] . "'>";
						$skip_dds_field_refer = true;
					}
			} elseif (substr($ft[0]['refers_to'],0,9) == "flextable" && $ft[0]['orientation'] == "one_entity_to_many") {

					$flextable = str_replace("flextable", "", $ft[0]['refers_to']);
					$flextabledef = GetFlextableDefinitions($flextable);

					if (!is_numeric($refer) && strstr($template, "#REFERFIELD#") && GetAttribute("flextable", "AllowReferChanges", $ft[0]['recordid']) == "Yes") {
						if (GetAttribute("flextable", "ReferFieldSelectInPopup", $ft[0]['recordid']) == "No") {
							$referfield = "<select name='FLEXTABLEREFERFIELD' onchange='AutoSaveField(this);UpdateAjaxFields(this.id);' " . $roins . "  id='JS_FLEXTABLEREFERFIELD'>";
							$sql = "SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextable . " WHERE deleted!='y'";
							$sqla = "";
							$sqla = GetAttribute("flextable", "ExtraSelectConditionWhenSelectingReferOptions", $ft[0]['recordid']);
							if ($sqla != "") {
								$sql .= " AND " . $sqla;
							}

							$res = mcq($sql, $db);
							while ($row = mysql_fetch_array($res)) {
								$t = CheckFlextableRecordAccess($flextable, $row['recordid']);

								if ($t == "ok") {
									if ($currow['refer'] == $row['recordid']) {
										$ins = 'selected="selected"';
									} else {
										unset($ins);
									}
									$referfield .= "<option " . $ins . " value='" . $row['recordid'] . "'>";
									$referfield .= ParseFlexTableTemplate($flextable, $row['recordid'], $ft[0]['refer_field_layout'] , true, false, false, "htme");

									$referfield .= "</option>";
								}
							}
							$referfield .= "</select>";
						} else {
							$ftto = GetFlextableDefinitions(str_replace("flextable" , "", $ft[0]['refers_to']));

							$referfield = "<div id='JS_FLEXTABLEREFERFIELDts' class='showinline'><a onclick=\"popFlextableInlineSelectTable('" . str_replace("flextable" , "", $ft[0]['refers_to']) . "','FLEXTABLEREFERFIELD','REFERTEXT');\">" . ParseFlexTableTemplate(str_replace("flextable" , "", $ft[0]['refers_to']), $currow['refer'], $ftto[0]['refer_field_layout'], false, false, false, "htme") . "</div>";

							$referfield .= "&nbsp;<img src='images/fullscreen_maximize.gif'  height='16' width='16' alt=''></a>";

							$referfield .= "<input type='hidden' name='FLEXTABLEREFERFIELD' id='JS_FLEXTABLEREFERFIELD' value='" . $currow['refer'] . "'>";

							$skip_dds_field_refer = true;
						}
					} else {
						//DA("Parse ParseFlexTableTemplate($flextable, " . $currow['refer'] . ", " . $ft[0]['refer_field_layout'] . ", true, false, false, htme);");
						$referfield = ParseFlexTableTemplate($flextable, $currow['refer'], $ft[0]['refer_field_layout'] , true, false, false, "htme") . "";
						$referfield .= "<input type='hidden' name='FLEXTABLEREFERFIELD' id='JS_FLEXTABLEREFERFIELD' value='" . $currow['refer'] . "'>";

					}
			}
		}
		if ($_REQUEST['refer']) {
			$delboxins = "&amp;refer=" . $_REQUEST['refer'];
		} else {
			unset($delboxins);
		}
		if (CheckReferencesToFlextableRecord($flextableid, $recordid) && !$templated_add_action) {
			if (GetAttribute("flextable", "DeleteConfirmationMessage", $flextableid) != "") {
				$insert1 = " if (confirm('" . addslashes(GetAttribute("flextable", "DeleteConfirmationMessage", $flextableid)) . "')) { ";
				$insert2 = "}";
			} elseif ($GLOBALS['DELETE_CONFIRMATIONMSG']) {
				$insert1 = " if (confirm('" . addslashes($GLOBALS['DELETE_CONFIRMATIONMSG']) . "')) { ";
				$insert2 = "}";
			}
			$deletebox = "<input type='button' $roins value='" . $lang['delete'] . "' name='DeleteFlexTableRecord' onclick=\"" . $insert1 . "document.location='flextable.php?flextableid=" . $flextableid . "&amp;recordid=" . $recordid . "&amp;DeleteFlexTableRecord=true" . $delboxins . "&amp;AddInPopup=" . $_REQUEST['AddInPopup'] . "&amp;nonavbar=" . $_REQUEST['nonavbar'] . "&amp;ParentAjaxHandler=" . $_REQUEST['ParentAjaxHandler'] . "'; " . $insert2 . "\">";
		} else {
			$deletebox = "<!-- Deletebox removed by parser, record cannot be deleted due to references -->";
		}

		$template = str_replace('#DELETEBOX#',$deletebox,$template);
		$template = str_replace('#DELETEBUTTON#',$deletebox,$template);


		if (strstr($template, "#REFERFIELD#")) {
			$template = str_replace('#REFERFIELD#',	$referfield,$template);
		
			if (!$readonly && !$skip_dds_field_refer) {
				array_push($FTC, "FLEXTABLEREFERFIELD");
//				$template = str_replace('#REFERSBOX#',ReturnDropDownSearchField("JS_FLEXTABLEREFERFIELD"), $template);
			} else {
				$template = str_replace('#REFERSBOX#',"", $template);
			}
		}
		
		$list = GetFlexTableDefinitions(false, "one-to-many");
		foreach ($list AS $flextableref) {
			
			if (strstr($template,"#FLEXTABLE" . $flextableref['recordid'] . "#") && $recordid != "_new_" && !$templated_add_action) {
				if ((CheckFlexTableAccess($flextableref['recordid']) == "ok" || CheckFlexTableAccess($flextableref['recordid']) == "readonly")) {
					qlog(INFO, "FLEXTABLE : " . $flextableref['recordid'] . " found in template");
					
					$name = GetFlexTableNames($flextableref['recordid']);
					//print "process #FLEXTABLE" . $flextableref['recordid'] . "# $recordid";
					$rep = AjaxBox("ReturnCompleteFlextable", true, "&refer=" . $recordid . "&ShowTable=" . $flextableref['recordid']);
					//print "<pre>call " . $flextableref['recordid'] . " " . GetBackTrace() . "</pre>";	
					$template = str_replace("#FLEXTABLE" . $flextableref['recordid'] . "#", $rep, $template);
				} else {
					$rep = "<!-- This user is not allowed to view this flextable (" . $flextableref['recordid'] . ")! -->";
					$template = str_replace("#FLEXTABLE" . $flextableref['recordid'] . "#", $rep, $template);
				}
			} else {
				qlog(INFO, "No reference to flextable " . $flextable['recordid'] . " in this template");
			}

		}

		foreach ($list AS $flextableref) {
			if (strstr($template,"#INLINEFLEXTABLE" . $flextableref['recordid'] . "#")) {
				if ((CheckFlexTableAccess($flextableref['recordid']) == "ok" || $recordid != "_new_") && !$templated_add_action) {
					qlog(INFO, "INLINEFLEXTABLE : " . $flextableref['recordid'] . " found in template");
					$name = GetFlexTableNames($flextableref['recordid']);
					$rep = AjaxBox("ReturnInlineFlextableForm", true, "&ilft=" . $flextableref['recordid'] . "&refer=" . $recordid, false, false, 0);
					$template = str_replace("#INLINEFLEXTABLE" . $flextableref['recordid'] . "#", $rep, $template);
				} else {
					$rep = "<!-- This user is not allowed to view this flextable! -->";
					$template = str_replace("#INLINEFLEXTABLE" . $flextableref['recordid'] . "#", $rep, $template);
					qlog(INFO, "Flextable is in template but this user is not allowed to see it!");

				}
			}
		}

		

		if (IsValidFlexTableRecord($recordid, $flextableid) && !$templated_add_action) {
			$template = str_replace('#FILEBOX#',AjaxBox("DisplayFileList", false, "&eid=" . $recordid . "&flextable=" . $flextableid),$template);
			$template = str_replace('#FILELIST#',AjaxBox("DisplayFileList", false, "&eid=" . $recordid . "&flextable=" . $flextableid . "&show_uploadbox=no"),$template);
		} else {
			$filebox = "<input multiple='multiple' name='userfile[]' type='file' " . $roins . ">";
			$template = str_replace('#FILEBOX#',$filebox,$template);
		}

		$eflist = GetExtraFlexTableFields($flextableid);
		for ($x=0;$x<sizeof($eflist);$x++) {

			$field = $eflist[$x];
			// qp flextables fix (provide $refer, so @REFER@ works in: GetSingleExtraFieldFormBox($eid,$fieldname,$readonly,$type="entity",$directives=false, $refer=false))

			if (strstr($template,"#EFID" . $field['id'] . "#")) {
				$tmp = GetSingleExtraFieldFormBox($recordid,$field['id'],$readonly,$flextableid,false,false,false,false,$_REQUEST['EFID' . $f['id']],$refer);

				array_push($fields_array, $field);
				if ($field['fieldtype'] != "Computation (ajax autorefresh)" && $field['fieldtype'] != "Button" && $field['fieldtype'] != "diary" &&  $field['fieldtype'] != "Booking calendar" && $field['fieldtype'] != "Computation" && !strstr($field['fieldtype'], "multiselect")) {
					if (!$readonly) array_push($FTC, "EFID" . $field['id']);
				}
				$template = str_replace("#EFID" . $field['id'] . "#",$tmp,$template);
				unset($tmp);
			}

			if (strstr($template,"#HEFID" . $field['id'] . "[")) {
				if (!$readonly) array_push($FTC, "EFID" . $field['id']);

				$tag = "#HEFID" . $field['id'] . "[";

				// Break up template
				$tmp = explode($tag, $template);

				$value = $tmp[1];
				$value = explode("]#", $value);
				$value = $value[0];
				$tag .= $value . "]#";
				$template = str_replace($tag, "", $template);
				$template .= "<input type='hidden' name='EFID" . $field['id'] . "' value='" . htme($value) . "'>";
				qlog(INFO, "Parsed hidden field " . $field['id']);
			} else {
				qlog(INFO, "No hidden fields found");
			}
		}

//		print_r($fields_array);
		$template .= "</div></form>";
		
		if (is_numeric($refer)) {
			if ($ft[0]['refers_to'] == "entity" && ($recordid == "_new_" || $templated_add_action) && IsValidEID($refer)) {
				$template = ParseTemplateEntity($template, $refer, false, false, false, "htme");
				$template = ParseTemplateCustomer($template, GetEntityCustomer($refer), false, "htme", false);
			
			} elseif ($ft[0]['refers_to'] == "customer" && ($recordid == "_new_" || $templated_add_action) && IsValidCID($refer)) {
				$template = ParseTemplateCustomer($template, $refer, false, "htme", false);
			} elseif (substr($ft[0]['refers_to'],0,9) == "flextable" && $ft[0]['orientation'] == "one_entity_to_many") {
				$fttu = str_replace("flextable", "", $ft[0]['refers_to']);
				//print $template;
				$template  = ParseFlexTableTemplate($fttu, $refer, $template, false, false, false, "htme");
				//print $template;		
			}
		}
		$template = ParseFlexTableTemplate($flextableid, $recordid, $template, false, false, false, "htme");

	

		if (is_numeric($recordid) && $GLOBALS['USE_AUTOSAVE'] == "Yes") {
			$template = ParseAjaxAutoSaveJavascriptFlexTable($FTC, $template, $recordid, $flextableid);
		} else {
			$ret .= '<script type="text/javascript">';
			$ret .= "" . 'function AutoSave(i) {' . "";
//			$ret .= "\t" . 'refresh_' . $divid . "('');\n";
			$ret .= "}";
			//dummy functie van jeroen 2010-11-30
			$ret .= "function AutoSaveField(el) {";
			$ret .= "}";
			$ret .= '</script>';
			$template = $ret . $template;

		}
		$GLOBALS['NOINLINEPHPEVAL'] =false;
		return($template);
		//return(EvaluateTemplatePHP($template));
	}	
}
function BuildCustomEditForm2($editformID,$eid) {
	return(AjaxBox("BuildCustomEditForm2", false, "&eid=" . $eid . "&editformID=" . $editformID));
}
function BuildCustomEditForm($editformID,$eid) {
	global $lockMSG;
	$res_eid = $eid;

		

	if ($GLOBALS['UC']['FORCEFORM']) {
		$editformID = $GLOBALS['UC']['FORCEFORM'];
	}

	if ((!is_numeric($eid) || !is_numeric($editformID)) && $eid != "_new_") {
		qlog(ERROR, "ERROR: BuildCustomEditForm called with empty eid or formid param!");
	} else {
		$e = $eid; // just to be sure..

		qlog(INFO, "Start parsing custom made edit form (entity $eid)");

		$t = CheckEntityAccess($eid);

		if ($t == "ok") {
			$formaction = "edit.php";
			$readonly = false;
		} elseif ($t == "readonly") {
			$formaction = "dl3b";
			$readonly = true;
			$roins = 'disabled="disabled"';
			$ro_lock = "READONLY";
		} else {
			PrintAD("Access denied; $t $eid");
			return(false);
		}

		if (CheckLock($eid)) {
						$lockMSG = "<span class='noway'>This entity is in use by " . GetUserName(Addlock($e)) . ", you cannot alter it at this time.</span>";
						$readonly = true;
						qlog(ERROR, "ERROR: This entity is locked; write access is denied");
						$roins = 'disabled="disabled"';
						$formaction = "dl3b";
						$readonly_lock = true;
						$ro_lock = "READONLY";
						$field_value = 0;
		}
		if ($GLOBALS['EnableEntityLocking'] == "Yes" && CheckEntityAccess($e)=="ok") {
			if ($e!="_new_") {

				if (!$GLOBALS['nolocking']) { // the entity is already readonly

					if (AddLock($e) != false) {
						
						$lockMSG = "<span class='noway'>This entity is in use by " . GetUserName(Addlock($e)) . ", you cannot alter it at this time.</span>";
						$roins = 'disabled="disabled"';
						$formaction = "dl3b";
						$readonly_lock = true;
						$ro_lock = "READONLY";
						$field_value = 0;

						qlog(ERROR, "ERROR: Couldn't lock entity!");
						$readonly = true;
					} else {
						$readonly_lock = false;
						$field_value = 1;
						$lockMSG = "";
					}
				}
			}
		} elseif (CheckEntityAccess($e) != "ok") {
			$readonly_lock = true;
			qlog(ERROR, "ERROR: Entity locking is disabled and access is denied");
		}





		$tmp2 = ParseFormTemplate($editformID,$eid,$formaction,$readonly);

		$tmp2 = ParseTemplateCleanUp(ParseTemplateGeneric($tmp2));


		$tmp .= $tmp2;
		$tmp .= "</div></form>";


		if (IsValidEID($eid)) {
			qlog(INFO, "Form cache saved");
			SetFormCache($res_eid, $editformID, "entity", $tmp);
		}
		qlog(INFO, "Returned parsed custom made edit form -> readonly is $readonly");
		$tmp = EvaluateTemplatePHP($tmp, $eid);
		return($tmp);
	}
}
function CustomEditForm($editformID,$eid) {

	if ($editformID == "default") {
		$editformID = $GLOBALS['DefaultForm'];
	}

	if (is_numeric($GLOBALS['UC']['FORCEFORM'])) {
		if (in_array($GLOBALS['UC']['FORCEFORM'],$GLOBALS['UC']['ADDFORMLIST'])) {
			qlog(INFO, "Form set to " . $GLOBALS['UC']['FORCEFORM'] . " due to force_form setting on user or profile. (form was " . $editformID . ")");
			$editformID = $GLOBALS['UC']['FORCEFORM'];
		} else {
			// PANIC!
			qlog(ERROR, "User is limited to a form to which he/she has no access. (FORCEFORM)");
			PrintAD("User is limited to a form to which he/she has no access! (FORCEFORM)");
			EndHTML();
			exit;
		}
	}
	// LOCALFORCEFORM is set in edit.php, when a user opens an entity "for the first time" e.g. not after submitting it.
	if (is_numeric($GLOBALS['LOCALFORCEFORM'])) {
		if (in_array($GLOBALS['LOCALFORCEFORM'],$GLOBALS['UC']['ADDFORMLIST'])) {
			qlog(INFO, "Form set to " . $GLOBALS['LOCALFORCEFORM'] . " due to force_form setting on user or profile. (form was " . $editformID . ")");
			$editformID = $GLOBALS['LOCALFORCEFORM'];
		} else {
			// PANIC!
			qlog(ERROR, "User is limited to a form to which he/she has no access. (LOCALFORCEFORM)");
			PrintAD("User is limited to a form to which he/she has no access! (LOCALFORCEFORM)");
			EndHTML();
			exit;
		}
	}
		

	$t = db_GetRow("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) ."'");
	if ((is_numeric($eid) && $eid!=0 && $t['eid'] == $eid) || $eid == "_new_") {

		
		
		if ($_REQUEST['browsearray']) {
			$bra = PopStashValue($_REQUEST['browsearray']);
			unset($btp);

			$btp .= "<input type='hidden' name='browsearray' value='" . $_REQUEST['browsearray'] . "'>";
			$bla = @array_search($eid, $bra);
			if ($bla>0) {
				$btp .= "<button onclick=\"document.location='edit.php?e=" . $bra[$bla-1] ."&amp;browsearray=" . $_REQUEST['browsearray'] . "';return(false);\" onclick='return(false);' value='' >&lt;&lt;</button>";
				$prt = true;
			} else {
				$btp .= "<button onclick='return(false);' value='' disabled='disabled'>&lt;&lt;</button>";
				$prt = true;
			}

			if ($bla<sizeof($bra)-1) {
				$btp .= "<button onclick=\"document.location='edit.php?e=" . $bra[$bla+1] ."&amp;browsearray=" . $_REQUEST['browsearray'] . "';return(false);\" value=''>&gt;&gt;</button>";
				$prt = true;
			} else {
				$btp .= "<button onclick='return(false);' value='' disabled='disabled'>&gt;&gt;</button>";
				$prt = true;
			}


			if ($prt) {
				$btp .= "&nbsp;" . ($bla+1) . "/" . (sizeof($bra)) . "";
			}
		}

		$x = str_replace("<!-- %ARROWS% -->", ($btp),  BuildCustomEditForm($editformID,$eid));
		$x = str_replace("{WS}", $_REQUEST['wordsearch'], $x);

		$tmpX = "<input type='hidden' name='Pag_Moment' value='" . htme($_REQUEST['Pag_Moment']) . "'>";
		$tmpX .= "<input type='hidden' name='fs' value='" . htme($_REQUEST['fs']) . "'><input  type='hidden' name='fromlisturl' value='" . htme($_REQUEST['fromlist']) . "'><input type='hidden' name='fromlistnow' value='1'>";
		if ($_REQUEST['nonavbar']) {
			$tmpX .="<input type='hidden' name='close_on_next_load' value='1'><input type='hidden' name='ParentAjaxHandler' value='" . $_REQUEST['ParentAjaxHandler'] . "'><input type='hidden' name='nonavbar' value='1'>";
		}

		$x = str_replace("<!-- %FROMLIST% -->", $tmpX, $x);

		return($x);

	} elseif ($eid == "_new_" && $eid != 0) {
		return(BuildCustomEditForm($editformID,$eid));
	} else {
		printAD("CustomEditForm::This entity doesn't exist: $eid");
		qlog(ERROR, "ERROR: CustomEditForm::This entity doesn't exist.");
		log_msg("CustomEditForm::This entity doesn't exist.");
	}
}
function ExpireReportCache() {
	mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "publishedpagescache WHERE reportmd5!=''", $db);
}
function ExpireFormCache($eid, $reason="unknown", $tabletype="entity", $excludeuser=false) {

	if (is_numeric($eid) || $eid == "%") {
		
		if ($tabletype == "all" && $eid == "%") {
			if (is_numeric($excludeuser)) {
				$ins = " WHERE user='" . mres($excludeuser) . "'";
			}
			mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache " . $ins);
			qlog(INFO, "Expiring *ALL* form cache of user $excludeuser (reason: " . $reason . ")");
		} else {
			if (is_numeric($tabletype)) {
				$tabletype = "flextable" . $tabletype;
			}


			qlog(INFO, "Expiring form cache of " . $tabletype . " record " . $eid . " (reason: " . $reason . ")");

			$sql_ins = " tabletype LIKE '%" . mres($tabletype) . "%'";

			if (is_numeric($excludeuser)) {
				$sql_ins .= "AND user!=" . mres($excludeuser);
			}
			if ($tabletype == "%") {
				$sql_ins = " 1=1";
			}

			if ($eid == "%") {
				mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache WHERE " . $sql_ins, $db);
			} elseif ($eid!="_new_") {
				mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache WHERE eid='" . mres($eid) . "' AND " . $sql_ins, $db);
				if ($tabletype == "entity") {
					ExpirePublishedPageCache($eid);
				}
			}
		}
	} else {
		qlog(INFO, "INFO: ExpireFormCache called with empty eid param!");
	}
	if ($tabletype == "entity") {
		ExpireDashboardCache();
	}


}

function ExpireDashboardCache() {
		if ($GLOBALS['VERSION'] >= "4.1.0") {
			mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "loginusers SET DASHBOARDCACHE=''", $db);
		}
}
function SetDashboardCache($cache) {
		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "loginusers SET DASHBOARDCACHE='" . mres($cache) . "' WHERE id='" . mres($GLOBALS['USERID']) . "'", $db);
}
function GetDashboardCache($cache) {
		$a = db_GetRow("SELECT DASHBOARDCACHE FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($GLOBALS['USERID']) . "'", $db);
		return($a[0]);
}
function ExpirePublishedPageCache($eid) {
	if (is_numeric($eid) || $eid == "%") {
		qlog(INFO, "Expiring form published page cache of entity " . $eid);
		if ($eid == "%") {
			mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "publishedpagescache", $db);
		} else {
			mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "publishedpagescache WHERE eid='" . mres($eid) . "'", $db);
		}
	} else {
		qlog(INFO, "INFO: ExpirePublishedPageCache called with empty eid param!");
	}
}
function ExpireFormCacheByForm($formid) {
	if (is_numeric($formid)) {
		qlog(INFO, "Expiring form cache of form " . $eid);
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache WHERE formid='" . mres($formid) . "'", $db);
		ExpirePublishedPageCacheByForm($formid);
	} else {
		qlog(INFO, "INFO: ExpireFormCacheByForm called with empty formid param!");
	}
	ExpireDashboardCache();
}
function ExpirePublishedPageCacheByForm($formid) {
	if (is_numeric($formid)) {
		qlog(INFO, "Expiring form cache of form " . $eid);
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "publishedpagescache WHERE formid='" . mres($formid) . "'", $db);
	} else {
		qlog(INFO, "INFO: ExpireFormCacheByForm called with empty formid param!");
	}
}
function ExpireFormCacheByUser($userid) {
	if (is_numeric($userid)) {
		qlog(INFO, "Expiring form cache of form " . $eid);
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache WHERE user='" . mres($userid) . "'", $db);
	} else {
		qlog(INFO, "INFO: ExpireFormCacheByUser called with empty userid param!");
	}
	ExpireDashboardCache();
}
function CustomCustomerForm($formid,$cid,$c_add) {

	qlog(INFO, "Start parsing custom made customer form (customer $cid)");
	$formaction = "customers.php";
	$readonly = false;
	
	$tmp2 = ParseCustomerFormTemplate($formid,$cid,$formaction,$readonly,$c_add);
	$tmp2 = ParseTemplateCleanUp(ParseTemplateGeneric($tmp2));
	$tmp .= $tmp2;

	qlog(INFO, "Done parsing custom made customer form (customer $cid)");
	return($tmp2);
}
function db_GetValue($query, $db_ident=false, $limit=true) {
	global $db;
	if (!$db_ident) {
		$db_ident = $db;
	}
	if (!stristr("LIMIT 1", $query) && $limit) {
		$query .= " LIMIT 1";
	}
	$res = mcq($query,$db_ident);
	$rest = mysql_fetch_array($res);
	return($rest[0]);
}
function db_GetRow($query, $db_ident=false, $limit=true) {
	global $db;
	if (!$db_ident) {
		$db_ident = $db;
	}
	if (!stristr("LIMIT 1", $query) && $limit) {
		$query .= " LIMIT 1";
	}
	$res = mcq($query,$db_ident);
	return(@mysql_fetch_array($res));
}
function db_GetArray($query, $db_ident=false, $limit=true) {
	global $db;
	
	if (!$db_ident) {
		$db_ident = $db;
	}

	$res = mcq($query,$db_ident);
	$ret = array();
	while ($row = mysql_fetch_array($res)) {
		$ret[] = $row;
	}
	return($ret);
}
function ParseCustomerFormTemplate($fileid,$cid=false,$formaction='index.php?logout=1',$readonly=true, $c_add="NO") {
	global $lang, $nonavbar;

	// First, check cache
	/*
	if (!base64_decode($_REQUEST['fromlist'])) {
		$tmp = GetFormCache ($cid, "1", "customer", $template);

		if ($tmp['content']) {
			return(EvaluateTemplatePHP($tmp['content']));
		}8/1/2012
	}
	*/
	// GET TEMPLATE
	$template = GetTemplate($fileid);
	$template = ReturnTemplateStyleSheet($fileid) . $template;
	$template = ParseTemplateCustomer($template, $cid, false, "htme", false);

	if (CheckCustomerAccess($cid) != "ok" && CheckCustomerAccess($cid) != "readonly") {
		$template =  "<img src='images/error.gif' alt=''> Access denied<br><br>";
		qlog(INFO, "Access was denied - this user has no rights to access this customer.");
		//$template .= returnAD("Access to customer denied.");
	} elseif (CheckCustomerAccess($cid) == "readonly") {
		$roins = 'disabled="disabled"';
		$readonly = "yes";
	}

	$roins .= " onchange=\"UpdateAjaxFields(this.id);\"";






	// First, parse all fields of type "comment", because these comments could add new fields
	// First, parse all fields of type "comment", because these comments could add new fields

	foreach (GetExtraCustomerFields(false, true) AS $f) {
//		print "Check EFID" . $f['id'] . "<br>";
		if ($f['fieldtype'] == "comment") {
			if (strstr($template, "#EFID" . $f['id'] . "#")) {
				$ins = GetSingleExtraFieldFormBox($cid,$f['id'],$readonly,"customer",false);
				$ins = ParseTemplateAliases($ins);
				$template = str_replace("#EFID" . $f['id'] . "#", $ins, $template);
//				print "Replace EFID" . $f['id'] . "<br>";
			} 
		}
	}



		$fields_at_hand = GetExtraCustomerFields();
		// GET CUSTOMER DETAILS
		$custrow = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($cid) . "'");
		AddBreadCrum($lang['customer'] . ": " . $custrow['custname']);

		// BUILD BOXES
		$savebutton = "<input type='button' onclick=\"CheckForm('EditEntity');\" $roins value='" . $lang['save'] . "'>";
		$cancelbutton = "<input type='button' $roins value='" . $lang['cancel'] . "' onclick='window.close();'>";
		$sid = PushStashValue("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($cid) . "'");
		$pdficon = "<a title='$lang[downloadpdf]' href=\"javascript:popPDFwindow('customers.php?pdf=1&amp;stashid=" . $sid . "')\"><img src='images/pdf.gif'  alt=''></a>";

		$activityicon = "<a href='javascript:popActivityCustomerGraph(" . $cid .");' title='Show activity graph'><img src='images/graph.gif' style='border: 1px' alt=''></a>";
		if (CheckFunctionAccess("DenyJournalAccess") != "ok" || is_administrator()) {
			$journalicon = "<a title='Journal' href='javascript:popcustomerjournal($cid);'><img src='images/journal.gif'  alt=''></a>&nbsp;";
		} else {
			$journalicon = "<!-- user is not allowed to see the journal -->";
		}


		if (IsValidCID($cid)) {
			$template = str_replace('#FILEBOX#',AjaxBox("DisplayFileList", false, "&Cust=true&eid=" . $cid),$template);
			$template = str_replace('#FILELIST#',AjaxBox("DisplayFileList", false, "&Cust=true&List=true&eid=" . $cid),$template);
			$template = StripNewOnlyTags($template);
		} else {
			$filebox = "<input name='userfile[]' multiple='multiple' type='file' $roins>";
			$template = str_replace('#FILEBOX#',$filebox,$template);
			$template = StripExistingOnlyTags($template);
			$template .= "<input type='hidden' name='hash' value='" . randomstring(32, false) . "'>";
		}

		if ($readonly) {
			$template = StripRWOnlyTags($template);
		} else {
			$template = StripROOnlyTags($template);
		}
	
		$CustomValidationFunctionPHP = GetAttribute("system", "CustomernameCustomValidationFunctionPHP", 2);
		if (substr($CustomValidationFunctionPHP,0,8) != "{{none}}" && trim($CustomValidationFunctionPHP) != "") {
			$roins_CUSTNAMENEW = "onchange=\"UpdateAjaxFields(this.id);ValidateByAjax('" . $cid ."','JS_custnamenew',this.value,'" . htme($curval) . "', false);\"";
		} else {
			$roins_CUSTNAMENEW = $roins;
		}
		$customerbox = "<input type='text' name='custnamenew' id='JS_custnamenew' value='" . htme($custrow['custname']) . "' $roins_CUSTNAMENEW size='50'>";
		$contactbox  = "<input type='text' name='contactnew' id='JS_contactnew' value='" . htme($custrow['contact']) . "' $roins size='50'>";
		$contacttitlebox = "<input type='text' name='contact_titlenew' id='JS_contact_titlenew' value='" . htme($custrow['contact_title']) . "' $roins size='50'>";
		$conactphonebox = "<input type='text' name='contact_phonenew' id='JS_contact_phonenew' value='" . htme($custrow['contact_phone']) . "' $roins size='50'>";
		$contactemailbox = "<input type='text' name='contact_emailnew' id='JS_contat_emailnew' value='" . htme($custrow['contact_email']) . "' $roins size='50'>";
		$customeraddressbox = "<textarea name='cust_addressnew' id='JS_cust_addressnew' " . $roins . " rows='4' cols='30'>" . htme($custrow['cust_address']) . "</textarea>";
		$remarksbox = "<textarea name='cust_remarksnew' id='JS_cust_remarksnew' " . $roins . " rows='4' cols='30'>" . htme($custrow['cust_remarks']) . "</textarea>";
		$homepagebox = "<input type='text' name='cust_homepagenew' id='JS_cust_homepagenew' value='" . htme($custrow['cust_homepage']) . "' " . $roins . " size='50'>";


		$customerownerbox = "<select name='customer_ownernew' " . $roins . " id='JS_customer_ownernew'>";

		$list = ReturnListOfAllowedUsers(false, true);

		if ($custrow['customer_owner'] == "" || $custrow['customer_owner'] == 0) {
			$custrow['customer_owner'] = $GLOBALS['USERID'];
		}
		foreach ($list AS $some_array) {
			if ($some_array[id]==$custrow['customer_owner']) {
					$a = 'selected="selected"';
					$owner = $cust['customer_owner'];
			} else {
					$a = "";
			}
			 $customerownerbox .= "<option value='" . $some_array['id'] . "' " . $a . ">" . htme($some_array['FULLNAME']) . "</option>";
		}
		$customerownerbox .= "</select>";

		if ($custrow['readonly']=="yes") {
			$set = 'checked="checked"';
		} else {
			unset($set);
		}
		if ($custrow['active'] == "yes" || $cid == "_new_") $cyn = 'checked="checked"';
		$activebox = "<input type='checkbox' $roins class='radio' name='activenew' id='JS_activenew' value='yes' $cyn><input name='activesubmitted' id='JS_activesubmitted' type='hidden' value='1'>";
		if ($custrow['readonly'] == "yes") $set = 'checked="checked"';
		$readonlybox = "<input type='checkbox' $roins name='readonlycust' " . $set . " value='yes' id='JS_readonlycust'>";

		if ($GLOBALS['DELETE_CONFIRMATIONMSG']) {
			$insert1 = " if (confirm('" . htme($GLOBALS['DELETE_CONFIRMATIONMSG']) . "')) { ";
			$insert2 = "}";
		}
		$deletebutton = "<input type='button' $roins onclick=\"" . $insert1 . "document.location='customers.php?deleteconfirm=" . $cid . "'; " . $insert2 . "\" name='do' value='" . $lang['delete'] . "'>";

		if ($custrow['email_owner_upon_adds'] == "yes") $set2 = 'checked="checked"';
		$emailownercheckbox = "<input class='radio' $set2 type='checkbox' value='yes' name='email_owner_upon_adds' $roins>";
		//#NUM_OF_ENT#
		if (strstr($template, "NUM_OF_ENT") && is_numeric($cid)) {
			$bla = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE CRMcustomer=" . $cid . " AND deleted!='y'");
			$num_of_ent = $bla[0];
		}
		// REPLACEMENTS
		if ($nonavbar) {
			$template = str_replace('#CANCELBUTTON#',$cancelbutton,$template);
		} else {
			$template = str_replace('#CANCELBUTTON#',"",$template);
		}

		$template = str_replace('#NUM_OF_ENT#',$num_of_ent,$template);
		$template = str_replace('#PDFICON#',$pdficon,$template);

		$template = str_replace('#JOURNALICON#',$journalicon,$template);
		$template = str_replace('#FILELIST#',$filelist,$template);
		$template = str_replace('#FILEBOX#',$filebox,$template);
		$template = str_replace('#SAVEBUTTON#',	$savebutton,$template);
		$template = str_replace('#DELETEBUTTON#',$deletebutton,$template);
		$template = str_replace('#CID#',$cid,$template);
		$template = str_replace('#CUSTOMER#',$customerbox,$template);
		$template = str_replace('#CUST_OWNER#',$customerownerbox,$template);
		$template = str_replace('#CUSTOMER_CONTACT#',$contactbox,$template);
		$template = str_replace('#CONTACT_TITLE#',$contacttitlebox,$template);
		$template = str_replace('#CONTACT_PHONE#',$conactphonebox,$template);
		$template = str_replace('#CONTACT_EMAIL#',$contactemailbox,$template);
		$template = str_replace('#CUSTOMER_ADDRESS#',$customeraddressbox,$template);
		$template = str_replace('#CUST_REMARKS#',$remarksbox,$template);
		$template = str_replace('#CUST_HOMEPAGE#',$homepagebox,$template);
		$template = str_replace('#READONLY#',$readonlybox,$template);
		$template = str_replace('#ACTIVE#',$activebox,$template);
		$template = str_replace('#ACTICON#',$activityicon,$template);
		$template = str_replace('#REPORTICON#',$reporticon,$template);
		$template = str_replace('#EMAILOWNERCHECKBOX#',$emailownercheckbox,$template);
		$template = str_replace('@LISTOFCONTACTS@',$contactlist,$template);

		$fields_at_hand = GetExtraCustomerFields();
		if (base64_decode($_REQUEST['fromlist'])) {
			$template .= "<input type='hidden' name='fromlist' value='" . $_REQUEST['fromlist'] . "'>";
		}

		$template .= "<input type='hidden' name='Pag_Moment' value='" . $_REQUEST['Pag_Moment'] . "'>";
		$template .= "<input type='hidden' name='fs' value='" . $_REQUEST['fs'] . "'>";

		if ($_REQUEST['ShowInlineAddScreen']) {
			$template .= "<input type='hidden' name='SelectField' value='" . $_REQUEST['SelectField'] . "'>";
			$template .= "<input type='hidden' name='PlainField' value='" . $_REQUEST['PlainField'] . "'>";
			$template .= "<input type='hidden' name='ShowField' value='" . $_REQUEST['ShowField'] . "'>";
			$template .= "<input type='hidden' name='ShowInlineAddScreen' value='CloseOnNextLoad'>";
		}
		if ($_REQUEST['CalendarAdd'] && $_REQUEST['CalendarField']) {
			$template .= "<input type='hidden' name='CalendarAdd' value='" . htme($_REQUEST['CalendarAdd']) . "'>";
			$template .= "<input type='hidden' name='CalendarField' value='" . htme($_REQUEST['CalendarField']) . "'>";
		}
		if ($_REQUEST['close_on_next_load']) {
			$template .= "<input type='hidden' name='close_on_next_load' value='" . htme($_REQUEST['close_on_next_load']) . "'>";
		}
		if ($_REQUEST['nonavbar']) {
			$template .= "<input type='hidden' name='nonavbar' value='" . htme($_REQUEST['nonavbar']) . "'>";
		}
		if ($_REQUEST['ParentAjaxHandler']) {
			$template .= "<input type='hidden' name='ParentAjaxHandler' value='" . htme($_REQUEST['ParentAjaxHandler']) . "'>";
		}

		$ceflist = GetExtraCustomerFields();

		if (strstr($template, "#ALL_EXTRA_FIELDS#")) {
			$f = "<table width='100%'>";
			foreach ($ceflist AS $field) {
				if (!strstr($template,"#EFID" . $field['id'] . "#")) {
					$f .= "<tr><td>" . $field['name'] . "</td><td>#EFID" . $field['id'] . "#</td></tr>";
				}
			}
			$f .= "</table>";
			$template = str_replace("#ALL_EXTRA_FIELDS#", $f, $template);
		}
		$fields_array = array();

		for ($x=0;$x<sizeof($ceflist);$x++) {
			$field = $ceflist[$x];
			$tmp = GetSingleExtraFieldFormBox($cid,$field['id'],$readonly,"customer");
			if (strstr($template,"#EFID" . $field['id'] . "#")) {
				array_push($fields_array, $field);
				$template = str_replace("#EFID" . $field['id'] . "#",$tmp,$template);
				unset($tmp);
			}
		}


		// Flextable References
		// Flextables of type one-entity-to-many can be referred as #FLEXTABLExx# (xx = flextable nr)



		$list = GetFlexTableDefinitions(false, "one-to-many");
		foreach ($list AS $flextable) {
			$rep = "";
		//	print "process #FLEXTABLE" . $flextable['recordid'] . "#";
			if (strstr($template,"#FLEXTABLE" . $flextable['recordid'] . "#")) {
				

				if ((CheckFlexTableAccess($flextable['recordid']) == "ok" || CheckFlexTableAccess($flextable['recordid']) == "readonly") && IsValidCID($cid)) {
					qlog(INFO, "FLEXTABLE : " . $flextable['recordid'] . " found in template");
					

					$name = GetFlexTableNames($flextable['recordid']);
					
					$rep .= AjaxBox("ReturnCompleteFlextable", true, "&refer=" . $cid . "&ShowTable=" . $flextable['recordid']);

					$template = str_replace("#FLEXTABLE" . $flextable['recordid'] . "#", $rep, $template);
				} else {
					$rep = "<!-- This user is not allowed to view this flextable! -->";
					$template = str_replace("#FLEXTABLE" . $flextable['recordid'] . "#", $rep, $template);
					qlog(INFO, "Flextable is in template but this user is not allowed to see it! -> $cid " . CheckFlexTableAccess($flextable['recordid']) . " -> " . IsValidCID($cid));

				}
			} else {
				qlog(INFO, "No reference to flextable " . $flextable['recordid'] . " in this template");
			}

		}

		if ($c_add == "YES") {
			$ins = "<input type='hidden' name='addfilled' value='1'>";
		} else {
			$ins = "<input type='hidden' name='editfilled' value='" . $cid . "'>";
		}

		if (strtoupper($GLOBALS['UC']['HIDECUSTOMERTAB'])!="YES" || is_administrator()) {
//			$link .= "<a href='customers.php?$epoch' class='arrow'>" . $lang['customers'] . "</a>";
		} else {
			unset($link);
		}

		//$template = "<table><tr><td>" . $link . "<br></td></tr></table>" . $template . "<table><tr><td></td></tr></table>";
//		$template .= "";
		$template = "<form method='post' action='" . $formaction . "' enctype='multipart/form-data' id='EditEntity'><div class='showinline'>" . $ins . "<input type='hidden' name='e_button' id='JS_e_button' value=''><input type='hidden' name='changed' id='JS_changed'><input type='hidden' name='run_autosave' id='JS_run_autosave' value='0'><input type='hidden' name='det' value='1'><input type='hidden' name='c_id' value='" . $cid . "'><input  type='hidden' name='concerningrecord' id='JS_concerningrecord' value='" . $cid . "'>" . $template . "</div></form>";

				
		$list = GetFlexTableDefinitions(false, "one-to-many");
		
		foreach ($list AS $flextableref) {
			if (strstr($template,"#INLINEFLEXTABLE" . $flextableref['recordid'] . "#")) {
				if ((CheckFlexTableAccess($flextableref['recordid']) == "ok" || $cid != "_new_") && !$templated_add_action) {
					qlog(INFO, "INLINEFLEXTABLE : " . $flextableref['recordid'] . " found in template");
					$name = GetFlexTableNames($flextableref['recordid']);
					$rep = AjaxBox("ReturnInlineFlextableForm", true, "&ilft=" . $flextableref['recordid'] . "&refer=" . $cid, false, false, 0);
					$template = str_replace("#INLINEFLEXTABLE" . $flextableref['recordid'] . "#", $rep, $template);
				} else {
					$rep = "<!-- This user is not allowed to view this flextable! -->";
					$template = str_replace("#INLINEFLEXTABLE" . $flextableref['recordid'] . "#", $rep, $template);
					qlog(INFO, "Flextable is in template but this user is not allowed to see it!");

				}
			}
		}

	$template = ParseTemplateCleanup($template);
	// ("EditEntity",$type="customer",$fields_array,true,$cid)
	$template = "\n<!-- START TEMPLATE HERE -->" . "\n\n\n" . $template;

	SetFormCache ($cid, "1", "customer", $template);

		
	$template = EvaluateTemplatePHP($template, $cid);
	return($template);
}

function ParseFormDirectives($template, $eid) {
	$ret = array();
	$ret['ExcludeStatus']     = array();
	$ret['ExcludePriority']   = array();
	$ret['DefaultOverride']   = array();
	$ret['EFDefaultOverride'] = array();
	$ret['EFOptionsExclude']  = array();

	$t = GetStatusses();
	foreach($t AS $status) {
		if (strstr($template, "\$\$EXCLUDE|STATUS|" . trim($status) . "\$\$")) {
			array_push($ret['ExcludeStatus'], $status);
		}
	}

	$t = GetPriorities();
	foreach($t AS $prio) {
		if (strstr($template, "\$\$EXCLUDE|PRIORITY|" . trim($prio) . "\$\$")) {
			array_push($ret['ExcludePriority'], $prio);
		}
	}

	$t = GetExtraFields();
	foreach ($t AS $ef) {
		if (strstr($template, "\$\$DEFAULT|EFID" . $ef['id'] . "|")) {
			$tmp = explode("\$\$DEFAULT|EFID" . $ef['id'] . "|", $template);
			$tmp1 = (explode("\$\$", $tmp[1]));
			$ret['EFDefaultOverride'][$ef['id']] = trim($tmp1[0]);
			if ($ef['fieldtype'] == "date" && ($ret['EFDefaultOverride'][$ef['id']] == "[today]" || $ret['EFDefaultOverride'][$ef['id']] == "@TODAY@")) {
				$ret['EFDefaultOverride'][$ef['id']] = TransformDate(date('d-m-Y'));
			}
			if ($ef['fieldtype'] == "date/time" && ($ret['EFDefaultOverride'][$ef['id']] == "[today]" || $ret['EFDefaultOverride'][$ef['id']] == "@NOW@")) {
				$ret['EFDefaultOverride'][$ef['id']] = date('Y-m-d') . " " . date('H:i:s');
			}
		}
		if (strstr($template, "\$\$EXCLUDE|EFID" . $ef['id'] . "|")) {

			preg_match_all('/\$\$EXCLUDE\|EFID(.*?)\$\$/', $template, $matches);
			foreach ($matches[1] AS $directives) {
				$tmp = explode("|", $directives);
				$ret['EFOptionsExclude'][$ef['id']][] = trim($tmp[1]);
			}
		}
	}

	$t = array("category", "duedate", "startdate", "content", "assignee", "owner", "status", "priority", "customer");
	foreach ($t AS $df) {
		if (strstr($template, "\$\$DEFAULT|" . strtoupper($df) . "|")) {
			$tmp = explode("\$\$DEFAULT|" . strtoupper($df) . "|", $template);
			$tmp1 = (explode("\$\$", $tmp[1]));
			$ret['DefaultOverride'][$df] = trim($tmp1[0]);
			if ($df == "startdate" || $df == "duedate") {
				if ($ret['DefaultOverride'][$df] == "[today]") {
					$ret['DefaultOverride'][$df] = date('d-m-Y');
				}
			}
		}
	}

	return($ret);

}

function ParseFormTemplate($fileid,$eid=false,$formaction='index.php?logout=1',$readonly=true,$flextable=false) {

	global $lang, $nonavbar;


	$AutoSaveFunc = "@@@@@AUTOSAVE@@@@@";

	$REQ_DEF_FLDS = array();
	$AMF = array();
	$AMF = @unserialize($GLOBALS['REQUIREDDEFAULTFIELDS']);
	foreach ($AMF AS $field)
	{
		if ($field['forcing'] == "y")
		{
			$REQ_DEF_FLDS[$field['name']] = 1;
		}
	}


	$e = $eid;
	$e = trim($e);
	$eid = $e;


	

	$FTC = array(); // Fields to save in auto-save

	$tmp = "<form id=\"EditEntity\" name=\"EditEntity\" method=\"post\" action=\"" . $formaction . "\" enctype=\"multipart/form-data\"><div class=\"showinline\">";
	$tmp .= "<div id='AutoSaveDiv'></div>" . $template;
	$tmp .= "<div id='IsChanged' style='display: none'>";
	$tmp .= " ";
	$tmp .= "</div><input type='hidden' name='changed' id='JS_changed' value='0'>";

	if ($_REQUEST['CalendarAdd'] && $_REQUEST['CalendarField']) {
		$tmp .= "<input type='hidden' name='CalendarAdd' value='" . htme($_REQUEST['CalendarAdd']) . "'>";
		$tmp .= "<input type='hidden' name='CalendarField' value='" . htme($_REQUEST['CalendarField']) . "'>";
	}

	if ($GLOBALS['USE_AUTOSAVE'] == "Yes" && is_numeric($eid)) {
		$tmp .= "<input type='hidden' name='run_autosave' id='JS_run_autosave' value='1'>";
	} else {
		$tmp .= "<input type='hidden' name='run_autosave' id='JS_run_autosave' value='0'>";
	}


	if ($eid == "_new_") {
		$tmp .= "<input type='hidden' name='formid' value='" . $fileid . "'>";
		array_push($FTC, "formid");
	}

	// Init displayed fields
	$fields_array = array();

	if ($eid == "_new_" && !CheckIfFormMainBePrintedOnAddList($fileid) && !$flextable) {
		if ($GLOBALS['UC']['ALLOWEDADDFORMS'] != "") {
			printAD("This form does not allow you to add entities");
			qlog(ERROR, "ERROR: Somehow somebody tried to use form " . $fileid . " to add an entity, which is not allowed.");
			return(false);
		}
	}

	if (CheckLock($eid) != false) {
			$lockicon = "<img src='images/lock.png' title='This entity is locked by " . GetUserName(CheckLock($eid)) . ", you cannot alter it at this time' alt='This entity is locked, you cannot alter it at this time'>";
			$readonly = true;
			$roins = 'disabled="disabled"';
	}
	$template = GetTemplate($fileid);
	
	$template = ReturnTemplateStyleSheet($fileid) . $template;
	
	
	// First, parse all fields of type "comment", because these comments could add new fields

	foreach (GetExtraFields() AS $f) {
		if ($f['fieldtype'] == "comment") {
			if (strstr($template, "#EFID" . $f['id'] . "#")) {
				$ins = GetSingleExtraFieldFormBox($eid,$f['id'],$readonly,"entity",false,false,false,false,false,$referfield);

				$ins = EvaluateTemplatePHP(ParseTemplateEntity(ParseTemplateGeneric(ParseTemplateAliases($ins)), $eid, false, false, false, "htme", true));
				$template = str_replace("#EFID" . $f['id'] . "#", $ins, $template);
			} 
		}
	}

	// Parse template aliases
	$template = ParseTemplateAliases($template);

	// Parse default values
	
	// Parse PHP
	//$template = EvaluateTemplatePHP($template);

	// Parse directives from form, use them later
	$directives = ParseFormDirectives($template, $eid);

	$cl = GetClearanceLevel();

	// Find all tags
	preg_match_all('/(#|@)[A-Za-z0-9_]+(#|@)/', $template, $matches);
	$list_of_tags = $matches[0];

	// This must be done before all tags are replaced
	if ($GLOBALS['USECUSTOMERSELECTPOPUP'] != "Yes") {
		if (!in_array("CannotChangeCustomer",$cl)) {
			if (in_array("#CSBOX#", $list_of_tags))	$template = str_replace('#CSBOX#',ReturnDropDownSearchField("JS_customer"), $template);
		}
	} else {
		$template = str_replace("#CSBOX#", "<!-- Local customer search box deleted by parser (CustomerSelectPopup in use) -->", $template);
	}

	if (!in_array("NoOwnNoAssign",$cl) && !in_array("CannotChangeOwner",$cl)) {
		if (in_array("#OWNER#", $list_of_tags))		$template = str_replace('#OSBOX#',ReturnDropDownSearchField("JS_owner"), $template);
	}
	if (!in_array("NoOwnNoAssign",$cl) && !in_array("CannotChangeAssignee",$cl)) {
		if (in_array("#ASSIGNEE#", $list_of_tags))	$template = str_replace('#ASBOX#',ReturnDropDownSearchField("JS_assignee"), $template);
	}

	if (in_array("#STATUS#", $list_of_tags))		$template = str_replace('#SSBOX#',ReturnDropDownSearchField("JS_status"), $template);
	if (in_array("#PRIORITY#", $list_of_tags))	$template = str_replace('#PSBOX#',ReturnDropDownSearchField("JS_priority"), $template);


	$template = $tmp . "" . $template;

	// Check for dates, and if they're there, add them to fields_array
	if (in_array("#DUEDATE#", $list_of_tags)) {
		$fields_array[0]['fieldtype'] = "duedate";
	}
	if (in_array("#STARTDATE#", $list_of_tags)) {
		$fields_array[1]['fieldtype'] = "startdate";
	}

	if ($eid == "_new_") {
		$template = StripExistingOnlyTags($template);
	} else {
		$template = StripNewOnlyTags($template);
	}

	if ($readonly) {
		$template = StripRWOnlyTags($template);
	} else {
		$template = StripROOnlyTags($template);
	}


		// Next &amp; previous arrows
	if ($_REQUEST['browsearray']) {
		$bra = @unserialize(PopStashValue($_REQUEST['browsearray']));
		unset($btp);
		$btp .= "<input type='hidden' name='browsearray' value='" . $_REQUEST['browsearray'] . "'>";
		$bla = @array_search($eid, $bra);
		if ($bla>0) {
			$btp .= "<a href='edit.php?e=" . $bra[$bla-1] ."&amp;browsearray=" . $_REQUEST['browsearray'] . "' title='Previous search result'><button value=''>&lt;&lt;</button></a>";
			$prt = true;
		} else {
			$btp .= "<button value='' disabled='disabled'>&lt;&lt;</button>";
			$prt = true;
		}

		if ($bla<sizeof($bra)-1) {
			$btp .= "<a href='edit.php?e=" . $bra[$bla+1] ."&amp;browsearray=" . $_REQUEST['browsearray'] . "' title='Next search result'><button value=''>&gt;&gt;</button></a>";
			$prt = true;
		} else {
			$btp .= "<button value='' disabled='disabled'>&gt;&gt;</button>";
			$prt = true;
		}

		if ($prt) {
			$btp .= "&nbsp;" . ($bla+1) . "/" . (sizeof($bra)) . "";
		}
	}

	// Auto-changing category text
	if (in_array("#CATEGORY#", $list_of_tags) && in_array("@CATEGORY_AUTOCHANGE@", $list_of_tags)) {
		$cat_span = "<span id='cat_span'>" . htme(GetEntityCategory($eid)) . "</span>";
		$template = str_replace("@CATEGORY_AUTOCHANGE@", $cat_span, $template);
	}

	if ($readonly) {
//			$template = str_replace("#FILEBOX#", "#FILELIST#", $template);
	}


	if ($readonly) {
		$roins = ' disabled="disabled" ';
	}
	if (1==0) {
			// nothin' :)
	} else {
		if ($eid!="" && $eid!="_new_") {
			$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'";
			$result= mcq($sql,$db);
			$ea = mysql_fetch_array($result);
			AddBreadCrum($eid . ": " . $ea['category'], "edit.php?e=" . $eid);
		} else {
			
			$tmp = GetExtraFields();
			foreach ($tmp AS $field) {
				if ($_GET['EFID' . $field['id']] != "") {
					$ea['EFID' . $field['id']] = $_GET['EFID' . $field['id']];
				}
			}
			$tmp = array("category", "status", "priority", "duedate", "startdate", "assignee", "owner");
			foreach ($tmp AS $field) {
				if ($_GET[$field] != "") {
					$ea[$field] = $_GET[$field];
				}
			}

		}



		$t = array("category", "duedate", "startdate", "content", "assignee", "owner", "status", "priority", "customer");

		foreach ($t AS $deffield) {
			if ($directives['DefaultOverride'][$deffield] && !$ea[$deffield]) {
				$ea[$deffield] = $directives['DefaultOverride'][$deffield];
				if ($deffield == "customer") {
					$ea['CRMcustomer'] = $directives['DefaultOverride'][$deffield];
					unset($ea['customer']);
				}

			}

		}

		if ($_REQUEST['SetCustTo']) {
			$ea['CRMcustomer'] = $_REQUEST['SetCustTo']; // pre-set customer from customers page
			$cust_only = $_REQUEST['SetCustTo'];
		}
		if ($_GET['SetDateTo']) {
			$ea['duedate'] = $_GET['SetDateTo'];
		}
		if ($_GET['SetTimeTo']) {
			$ea['duetime'] = $_GET['SetTimeTo'];
		}

		if (is_array($GLOBALS['UC']['LIMITTOCUSTOMERS']) && count($GLOBALS['UC']['LIMITTOCUSTOMERS']) == 1) {
			// Only access to one customer, we might as well set it
			$ea['CRMcustomer'] = $GLOBALS['UC']['LIMITTOCUSTOMERS'][0];
		}



		$ownerbox = GetSingleDefaultFieldBox($eid, "owner", $readonly, $ea, false, $directives);
		$assigneebox = GetSingleDefaultFieldBox($eid, "assignee", $readonly, $ea, false, $directives);
		$categorybox = GetSingleDefaultFieldBox($eid, "category", $readonly, $ea, false, $directives);
		$privatebox = GetSingleDefaultFieldBox($eid, "private", $readonly, $ea, false, $directives);
		
		$readonlybox = GetSingleDefaultFieldBox($eid, "readonly", $readonly, $ea, false, $directives);

		$customerbox = GetSingleDefaultFieldBox($eid, "customer", $readonly, $ea, false, $directives);

		$duedatebox = GetSingleDefaultFieldBox($eid, "duedate", $readonly, $ea, false, $directives);
		$startdatebox = GetSingleDefaultFieldBox($eid, "startdate", $readonly, $ea, false, $directives);
		$duetimebox = GetSingleDefaultFieldBox($eid, "duetime", $readonly, $ea, false, $directives);

		$statusbox = GetSingleDefaultFieldBox($eid, "status", $readonly, $ea, false, $directives);
		$prioritybox = GetSingleDefaultFieldBox($eid, "priority", $readonly, $ea, false, $directives);

		$deletedbox = GetSingleDefaultFieldBox($eid, "deleted", $readonly, $ea, false, $directives);

		$emailpoplink = "[[ emailpoplink deprecated - use triggers ]]";




		if ($GLOBALS['EnableEntityRelations'] == "Yes" && !$readonly && in_array("#PARENTBOX#", $list_of_tags)) {
			if ($eid != "_new_") {
				$arr = GetEntityFamily($eid) ;
			}

			$vincinity .= ReturnEntityVincinityAjaxBox($eid);
			$handler = $GLOBALS['LASTAJAXBOXDIVID'];

			$parent = GetEntityParent($eid);
			$parentbox .= "<a name='anchor_parent'></a><img src='images/parent.gif' alt=''> <select name='parent' id='JS_parent' style='width: 150px;' onmouseover=\"this.style.width='auto';this.focus();\" onblur=\"this.style.width='150px';\" onchange=\"AlertUser('IsChanged'); AutoSaveField(this); UpdateAjaxFields(this.id);  setTimeout('refresh_" . $handler . "()', 1000);\">";
			$parentbox .= "<option value='0'>- no parent -</option>";
			$sql = "SELECT eid, category FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid!='" . mres($eid) . "' AND deleted!='y' ORDER BY eid";
			$res = mcq($sql, $db);
			while ($row = mysql_fetch_array($res)) {
				if ($eid != "_new_") {
					if ($row['eid'] == $parent || $row['eid'] == $_GET['parent']) {
						$ins = 'selected="selected"';
					} else {
						unset($ins);
					}
					if (!in_array($row['eid'], $arr)) {
						if (CheckEntityAccess($row['eid'])=="ok" || CheckEntityAccess($row['eid'])=="readonly") {
							$parentbox .=  "<option " . $ins . " value='" . $row['eid'] . "'>" . $row['eid'] . ": " . htme($row['category']) . "</option>";
						}
					}
				} else {
					if (CheckEntityAccess($row['eid'])=="ok" || CheckEntityAccess($row['eid'])=="readonly") {
							$parentbox .=  "<option " . $ins . " value='" . $row['eid'] . "'>" . $row['eid'] . " - " . htme($row['category']) . "</option>";
					}
				}
			}
			$parentbox .=  "</select>";
			$parentbox .= ReturnDropDownSearchField("JS_parent");
			$parentbox .= $vincinity;

		} elseif ($readonly) {
			$parentbox = $eid . ":" . GetEntityCategory(GetEntityParent($eid));
			$parentbox .= PrintChilds($eid, $nbsp, true);
			$parentbox .= PrintSisters($e, $nbsp, true);
			$parentbox .= "<input type='hidden' name='parent'>";
		} else {
			$parentbox = "<input type='hidden' name='parent'>";
		}

		$dr_closeAtTop = "true";
		$dr_buttonImageOnly = "false";


		
		

		if (!$readonly) {
			if (strtoupper($GLOBALS['ShowIconsAboveMainContentBox'])=="YES") {
				$contentbox = "<a name='anchor_content'></a><a onclick='InsertDateTime();' title='Insert date, time and your name'><img src='images/timedate.gif' alt=''></a>";
				$contentbox .= "<img src='images/decrease.gif' height='16' width='16' onclick=\"decreaseNotesHeight(document.forms['EditEntity'].elements['content'], 50);\" style='cursor:pointer' title='Make Notes field smaller' alt=''>";
				$contentbox .= "<img src='images/increase.gif' height='16' width='16' onclick=\"increaseNotesHeight(document.forms['EditEntity'].elements['content'], 50);\" style='cursor:pointer' title='Make Notes field bigger' alt=''><br>";
			} 
		} else {
			$contentbox = "<!-- read-only, no icons -->";
		}


		if (strtoupper($GLOBALS['AutoInsertDateTime'])=="YES") {
			$roins44 = "onkeyup='InsertDateTimeOnce();'";
		}

		if (CheckEntityAccess($eid) == "ok") {
			//Jeroen 2010-04-14 wrap='virtual' verwijderd
			$contentbox .= "<textarea  " . $roins44 . " " . $roins . " " . $ro_lock . " style='height: 250px;' rows='13' cols='118' name='content' id='JS_content' onkeyup=\"AlertUser('IsChanged');\" onchange=\"AutoSaveField(this);UpdateAjaxFields(this.id);\"";
			if ($REQ_DEF_FLDS['content'] == 1)
			{
				$contentbox .= " class='RequiredField'";
			}
			$contentbox .= ">" . htme($ea['content']) . "</textarea>";
		} else {
			$contentbox .= "<table border='1' width='100%'><tr><td><div style='overflow: auto; height: 200px; border: .2em;'>" . nl2br(htme($ea['content'])) . "</div></td></tr></table>";
		}

		$savebutton = "<input type='button' onclick=\"CheckForm('EditEntity');\" $roins value='" . $lang['save'] . "'>";
		$saveasnewbutton = "<input type='hidden' name='saveasnew' value=''><input id='JS_saveasnew' type='button' onclick=\"document.getElementById('JS_changed').value='0';document.forms['EditEntity'].elements['saveasnew'].value='1';CheckForm('EditEntity');\" name='sb2' value='" . $GLOBALS['lang']['saveasnewentity'] . "'  $roins>";
		$cancelbutton = "<input type='button' $roins value='" . $lang['cancel'] . "' onclick='window.close();'>";

		$reporticon = "<a " . PrintToolTipCode("Generate RTF report") . " href=\"javascript:poplittlewindow('entityreport.php?SingleEntity=" . $eid . "')\"><img src='images/word.gif'  alt=''></a>";


	
		if (strtoupper($GLOBALS['EnableEntityJournaling'])=="YES") {
				if (CheckFunctionAccess("DenyJournalAccess") != "ok" || is_administrator()) {
					$journalicon = "<a " . PrintToolTipCode("Show journal") . " href='javascript:popjournal($e);'><img src='images/journal.gif'  alt=''></a>&nbsp;";
				} else {
					$journalicon = "<!-- user is not allowed to see the journal -->";
				}
		}

		$pdficon = "<a " . PrintToolTipCode("Generate PDF report") . " href=\"javascript:poplittlewindow('parsepdf.php?SingleEntity=" . $eid . "&tid=entity')\"><img src='images/pdf.gif'  alt=''></a>";

		$acticon = "<a href='javascript:popActivityGraph(" . $e .");' " . PrintToolTipCode("Show activity graph") . "><img src='images/graph.gif' style='border: 1px' alt=''></a>";

		if (CheckLock($eid) != false) {
			$lockicon = "<img src='images/lock.png' title='This entity is locked by " . GetUserName(Addlock($eid)) . ", you cannot alter it at this time' alt='This entity is locked by " . GetUserName(Addlock($e)) . ", you cannot alter it at this time'>";
			$readonly = true;
			$roins = 'disabled="disabled"';

		} else {
			$lockicon = "";
		}


		if (strtoupper($GLOBALS['EnableEntityJournaling'])=="YES" && $eid!="_new_") {
			if (CheckFunctionAccess("DenyJournalAccess") != "ok" || is_administrator()) {
				$journalicon = "<a " . PrintToolTipCode("Show journal") . " href='javascript:popjournal(" . htme($eid) . ");'><img src='images/journal.gif'  alt=''></a>&nbsp;";
			} else {
				$journalicon = "<!-- user is not allowed to see the journal -->";
			}
		} else {
			$journalicon = "";
		}

//		$cancelbutton = "<input type='submit' value='" . $lang['save'] . "'>";


		$error_msg = "Error parsing template! ";
		if (in_array("#CATEGORY#", $list_of_tags)) {
			if (!$readonly) array_push($FTC, "category");
			$template = str_replace('#CATEGORY#',$categorybox,$template);
		}

		if (in_array("#OWNER#", $list_of_tags)) {
				$cl = GetClearanceLevel();

				if (in_array("NoOwnNoAssign",$cl)) {
					//2147483647
					$ownerbox = "<input type='hidden' name='owner' id='JS_owner' value='2147483647'>". GetUserName($ea['owner']);
					$template = str_replace('#OWNER#',$ownerbox,$template);
				} elseif (in_array("CannotChangeOwner",$cl)) {
					if (!is_numeric($ea['owner'])) $ea['owner'] = $GLOBALS['USERID'];
					$ownerbox = "<input type='hidden' name='owner' id='JS_owner' value='" . $ea['owner'] . "'>" . GetUserName($ea['owner']);
					$template = str_replace('#OWNER#',$ownerbox,$template);
				} else {
					if (!$readonly) array_push($FTC, "owner");
					$template = str_replace('#OWNER#',$ownerbox,$template);
				}
		} else {
			$ownerbox = "<input type='hidden' name='owner' id='JS_owner' value='2147483647'>";
			$template = str_replace('#OWNER#',$ownerbox,$template);
		}
		if (in_array("#ASSIGNEE#", $list_of_tags)) {
				$cl = GetClearanceLevel();

				if (in_array("NoOwnNoAssign",$cl)) {
					//2147483647
					$assigneebox = "<input type='hidden' name='assignee' id='JS_assignee' value='2147483647'>" . GetUserName($ea['assignee']);
					$template = str_replace('#ASSIGNEE#',$assigneebox,$template);
				} elseif (in_array("CannotChangeAssignee",$cl)) {

					if (!is_numeric($ea['assignee'])) $ea['assignee'] = $GLOBALS['USERID'];
					$assigneebox = "<input type='hidden' name='assignee' id='JS_assignee' value='" . $ea['assignee'] . "'>" . GetUserName($ea['assignee']);
					$template = str_replace('#ASSIGNEE#',$assigneebox,$template);
				} else {
					if (!$readonly) array_push($FTC, "assignee");
					$template = str_replace('#ASSIGNEE#',$assigneebox,$template);
				}

		} else {
//			array_push($FTC, "assigneeNEW");
			$assigneebox = "<input type='hidden' name='assignee' id='JS_assignee' value='2147483647'>";
			$template = str_replace('#ASSIGNEE#',$assigneebox,$template);
		}
		$cl = GetClearanceLevel($user);
		if ($eid == "_new_" && in_array("#CUSTOMER#", $list_of_tags)) {
			$template = str_replace('#CUSTOMER#', $customerbox,$template);
		} elseif (in_array("#CUSTOMER#", $list_of_tags) && (!in_array("CannotChangeCustomer",$cl) && $eid != "_new_")) {
			if (!$readonly) array_push($FTC, "customer");
			$template = str_replace('#CUSTOMER#', $customerbox,$template);
		} elseif (in_array("@CUSTOMER@", $list_of_tags) && is_numeric($eid)) {
			$customerbox = "<input type='hidden' name='customer' id='JS_customer' value='" . $ea['CRMcustomer'] . "'>";
			$template = str_replace('@CUSTOMER@','@CUSTOMER@' . $customerbox,$template);
		} elseif (!$flextable && !in_array("CannotChangeCustomer",$cl)) {
			//$error = true;
			//$error_msg .= "Customer tag #CUSTOMER# is mandatory for new entities and for existing entities you need at least @CUSTOMER@. \n";
		} elseif (in_array("CannotChangeCustomer",$cl)) {
			//$template = str_replace("#CUSTOMER#", GetCustomerName(GetEntityCustomer($eid)));
		}

		$cl = GetClearanceLevel($GLOBALS['USERID']);

		if (in_array("#DUEDATE#", $list_of_tags)) {
			$template = str_replace('#DUEDATE#',	$duedatebox,$template);
			if (!$readonly) array_push($FTC, "duedate");
		}
		if (in_array("#STARTDATE#", $list_of_tags)) {
			$template = str_replace('#STARTDATE#',	$startdatebox,$template);
			if (!$readonly) array_push($FTC, "startdate");
		}
		if (in_array("#COMMENTBOX#", $list_of_tags) && $addcommentbox) {
			$template = str_replace('#COMMENTBOX#',	$addcommentbox,$template);
		}
		if (in_array("#DUETIME#", $list_of_tags)) {
			$template = str_replace('#DUETIME#',	$duetimebox,$template);
			if (!$readonly) array_push($FTC, "duedate");
		}
		if (in_array("#STATUS#", $list_of_tags)) {
			$template = str_replace('#STATUS#',$statusbox,$template);
			if (!$readonly) array_push($FTC, "status");
		}
		if (in_array("#PRIORITY#", $list_of_tags)) {
			$template = str_replace('#PRIORITY#',	$prioritybox,$template);
			if (!$readonly) array_push($FTC, "priority");
		}
		if (in_array("#CONTENTS#", $list_of_tags)) {
			$template = str_replace('#CONTENTS#',	$contentbox,$template);
			if (!$readonly) array_push($FTC, "content");
		}
		if (in_array("@LISTOFCONTACTS@", $list_of_tags) && $eid != "_new_") {
			$template = str_replace('@LISTOFCONTACTS@',	$contactlist ,$template);
		}

		if ($nonavbar) {
			$template = str_replace('#CANCELBUTTON#',$cancelbutton,$template);
		} else {
			$template = str_replace('#CANCELBUTTON#',"",$template);
		}
		if (in_array("#PARENTBOX#", $list_of_tags)) {
			$template = str_replace('#PARENTBOX#',	$parentbox,$template);
			if (!$readonly) array_push($FTC, "parent");
		}


		if ($eid != "_new_") {

			$template = str_replace('#ARROWS#',		"<!-- %ARROWS% -->",$template);

			$template = str_replace('#PDFICON#',$pdficon,$template);

			$template = str_replace('#WEBDAVICON#',"",$template);

			$template = str_replace('#ACTICON#',$acticon,$template);
			if (strtoupper($GLOBALS['EnableEntityReporting'])=="YES") {
				$template = str_replace('#REPORTICON#',$reporticon,$template);
			} else {
				$template = str_replace('#REPORTICON#',"",$template);
			}

			$template = str_replace('#JOURNALICON#',$journalicon,$template);


			$template = str_replace('#LOCKICON#',$lockicon,$template);
			$template = str_replace('#EMAILPOPLINK#',$emailpoplink, $template);

		} else {
			$template = str_replace('#ARROWS#',		"",$template);
			$template = str_replace('#PARENTBOX#',	"",$template);
			$template = str_replace('#PDFICON#',    "",$template);
			$template = str_replace('#WEBDAVICON#', "",$template);

			$template = str_replace('#ACTICON#',    "",$template);
			$template = str_replace('#REPORTICON#', "",$template);
			$template = str_replace('#PRINTICON#',  "",$template);

			$template = str_replace('#JOURNALICON#',"",$template);
			$template = str_replace('#FILELIST#',"",$template);
			$template = str_replace('#LOCKICON#',"",$template);

		}
		//if (CheckEntityAccess($eid) == "ok") {
		if (IsValidEID($eid)) {

			$ws = "&searchfile={WS}";

			if (in_array("#FILEBOX#", $list_of_tags)) {
				$template = str_replace('#FILEBOX#',AjaxBox("DisplayFileList", false, "&eid=" . $eid . $ws),$template);
			} else {
				$template = str_replace('#FILELIST#',AjaxBox("DisplayFileList", false, "&List=true&eid=" . $eid . $ws),$template);
			}
		} else {
			$filebox = "<input name='userfile[]' multiple='multiple' type='file' " . $roins . ">";
			$template = str_replace('#FILEBOX#',$filebox,$template);

		}
//		} else {
//			$template = str_replace('#FILEBOX#',"<!-- Entity read-only, no file uploads -->",$template);
//		}

		$template = str_replace('#SAVEBUTTON#',	$savebutton,$template);
		if ($eid != "_new_") {
			$template = str_replace('#SAVEASNEWBUTTON#',$saveasnewbutton,$template);
		} else {
			$template = str_replace('#SAVEASNEWBUTTON#',"<!-- save as new entity button not shown, this entity is new -->",$template);
		}


		$template = str_replace('#EID#',$eid,$template);
		$template = str_replace('#INSERTTIMEICON#',$inserttimeicon, $template);
		if (in_array("#DELETEBOX#", $list_of_tags)) {
			if (!$readonly) array_push($FTC, "deleted");
			$template = str_replace('#DELETEBOX#',$deletedbox, $template);
		}
		if (in_array("#PRIVATEBOX#", $list_of_tags)) {
			if (!$readonly) array_push($FTC, "private");
			$template = str_replace('#PRIVATEBOX#',$privatebox, $template);
		}
		if (in_array("#READONLYBOX#", $list_of_tags)) {
			if (!$readonly) array_push($FTC, "readonly");
			$template = str_replace('#READONLYBOX#',$readonlybox, $template);
		}



		$template = str_replace('#EMAILDROPDOWN#',$emaildropdown, $template);

		$fields_at_hand = GetExtraFields();
		if (in_array("#ALL_EXTRA_FIELDS#", $list_of_tags)) {
			$f = "<table width='100%'>";
			foreach ($fields_at_hand AS $field) {
				if (!in_array("#EFID" . $field['id'] . "#", $list_of_tags)) {
					$f .= "<tr><td>" . $field['name'] . "</td><td>#EFID" . $field['id'] . "#</td></tr>";
				}
			}
			$f .= "</table>";
			$template = str_replace("#ALL_EXTRA_FIELDS#", $f, $template);
		}


		for ($x=0;$x<sizeof($fields_at_hand);$x++) {
			$field = $fields_at_hand[$x];
			if (in_array("#EFID" . $field['id'] . "#", $list_of_tags)) {
				
				$tmp = GetSingleExtraFieldFormBox($eid,$field['id'],$readonly,"entity", $directives);
				$template = str_replace("#EFID" . $field['id'] . "#",$tmp,$template);
				if (!strstr($tmp, "<!--") && $tmp != "") {
					if ($field['fieldtype'] != "Computation (ajax autorefresh)" && $field['fieldtype'] != "Button" && $field['fieldtype'] != "diary" &&  $field['fieldtype'] != "Booking calendar" && $field['fieldtype'] != "Computation" && !strstr($field['fieldtype'], "multiselect")) {
							if (!$readonly) {
								array_push($FTC, "EFID" . $field['id']);
//								print "PUSH EFID" . $field['id'] . " :: $tmp<br>";
							}
					}

					array_push($fields_array, $field);

				}
				unset($tmp);
			} else {

			}


			// a hidden field looks like this : #HEFID90[Zacherias]#
			// which is" #HEFID FIELDID [ value ] #

			if (strstr($template,"#HEFID" . $field['id'] . "[")) {
				$tag = "#HEFID" . $field['id'] . "[";
//				print "breakup by $tag";
				// Break up template
				$tmp = explode($tag, $template);

				$value = $tmp[1];
				$value = explode("]#", $value);
				$value = $value[0];
				$tag .= $value . "]#";
				$template = str_replace($tag, "", $template);
				$template .= "<input type='hidden' name='EFID" . $field['id'] . "' value='" . htme($value) . "'>";
				if (!$readonly) array_push($FTC, "EFID" . $field['id']);
				qlog(INFO, "Parsed hidden field " . $field['id']);
			} else {
				qlog(INFO, "No hidden fields found");
			}
		}

		// Flextable References
		// Flextables of type one-entity-to-many can be referred as #FLEXTABLExx# (xx = flextable nr)

		$list = GetFlexTableDefinitions(false, "one-to-many");
		foreach ($list AS $flextable) {
			if (in_array("#FLEXTABLE" . $flextable['recordid'] . "#", $list_of_tags)) {
			//  Let op, dit moet ook nog in PDF enzo goed naar voren komen! (GetExtraFieldValue ofzo?)
				if ((CheckFlexTableAccess($flextable['recordid']) == "ok" || CheckFlexTableAccess($flextable['recordid']) == "readonly") && IsValidEID($eid)) {
					qlog(INFO, "FLEXTABLE : " . $flextable['recordid'] . " found in template");
					$name = GetFlexTableNames($flextable['recordid']);
					$rep = AjaxBox("ReturnCompleteFlextable", true, "&refer=" . $eid . "&ShowTable=" . $flextable['recordid']);
					$template = str_replace("#FLEXTABLE" . $flextable['recordid'] . "#", $rep, $template);
				} else {
					$rep = "<!-- This user is not allowed to view this flextable! -->";
					$template = str_replace("#FLEXTABLE" . $flextable['recordid'] . "#", $rep, $template);
					qlog(INFO, "Flextable is in template but this user is not allowed to see it!");

				}
			}
		}
		foreach ($list AS $flextable) {
			if (in_array("#INLINEFLEXTABLE" . $flextable['recordid'] . "#", $list_of_tags)) {
				if ((CheckFlexTableAccess($flextable['recordid']) == "ok" || CheckFlexTableAccess($flextable['recordid']) == "readonly") && IsValidEID($eid)) {
					qlog(INFO, "INLINEFLEXTABLE : " . $flextable['recordid'] . " found in template");
					$name = GetFlexTableNames($flextable['recordid']);
					$rep = AjaxBox("ReturnInlineFlextableForm", true, "&ilft=" . $flextable['recordid'] . "&refer=" . $eid, false, false, 0);
					$template = str_replace("#INLINEFLEXTABLE" . $flextable['recordid'] . "#", $rep, $template);
				} else {
					$rep = "<!-- This user is not allowed to view this flextable! -->";
					$template = str_replace("#INLINEFLEXTABLE" . $flextable['recordid'] . "#", $rep, $template);
					qlog(INFO, "Flextable is in template but this user is not allowed to see it!");

				}
			}
		}

		if ($_REQUEST['nonavbar']) {
			$template .="<input type='hidden' name='close_on_next_load' value='1'><input type='hidden' name='ParentAjaxHandler' value='" . $_REQUEST['ParentAjaxHandler'] . "'><input type='hidden' name='nonavbar' value='1'>";
			
		}


		if ($eid=="_new_") {
				$template .= "<input type='hidden' name='e' value='" . $e . "'>";
				$template .= "<input type='hidden' name='concerningrecord' id='JS_concerningrecord' value='_new_'>";
				$template .= "<input type='hidden' name='action' value='add'>";
				$template .= "<input type='hidden' name='hash' value='" . randomstring(32, false) . "'>";
		} else {
				$template .= "<input type='hidden' name='action' value='edit'>";
				$template .= "<input type='hidden' name='e' value='" . $eid . "'>";
				$template .= "<input type='hidden' name='eid' id = 'JS_eid' value='" . $eid . "'>";
				$template .= "<input type='hidden' name='concerningrecord' id='JS_concerningrecord' value='" . $eid . "'>";
				$template .= "<input type='hidden' name='formid' value='" . $ea['formid'] . "'>";
		}
		$template .= "<input type='hidden' name='e_button' id='JS_e_button' value=''>";
	

		$template .= "<input type='hidden' name='unlock' value=''><input type='hidden' name='did_time' id='JS_did_time' value='not yet'>";
	} // end if valid


	$template .= "<!-- %FROMLIST% -->";


	$template = ParseTemplateEntity($template, $ea['eid'], false, false, false, "htme");
	$template = ParseTemplateCustomer($template,$ea['CRMcustomer'], false, "htme");

	

	$url = $_SERVER['SCRIPT_NAME'];
	if (!stristr($url,"php?")) {
		$url = str_replace("php","php?a=1",$url);
	}

		$template = "<!-- START TEMPLATE HERE -->" . $template;




		if (is_numeric($eid) && $GLOBALS['USE_AUTOSAVE'] == "Yes") {
			$template = ParseAjaxAutoSaveJavascript($FTC, $template, $eid);
		} else {
			$ret .= '<script type="text/javascript">';
			$ret .= "" . 'function AutoSave(i) {' . "";
			$ret .= "}";
			$ret .= "function AutoSaveField(el) {";
			$ret .= "}";

			$ret .= '</script>';

			$template = $ret . $template;

		}
		//print_r($FTC);


	$template = EvaluateTemplatePHP($template);

	if ($error) {
		qlog(INFO, str_replace("\n"," - " , $error_msg));
		PrintAD($error_msg);
		return(false);
	} else {
		return($template);
	} 
}

function GetSingleDefaultFieldBox($eid, $field, $readonly, $ea, $for_main_list=false, $directives=false, $interactive_field_list_element=false) {
	if ($readonly) {
		$roins = " disabled='disabled'";
	}

	$type = "entity";
	$javascript_onchange_calls = "";

	if (!$interactive_field_list_element) {

		if ($type == "entity" || is_numeric($type)) {
			$javascript_onchange_calls .= "AutoSaveField(this);";
		}

		$javascript_onchange_calls .= "AlertUser('IsChanged');UpdateAjaxFields(this.id);";

		$fieldId = " name=\"" . $field . "\" id=\"JS_" . $field . "\"";
		
		if (GetExtraFieldType($field) == "date") {
			$javascript_onchange_calls .= "CheckDateLocal('JS_startdate', '" . $GLOBALS['UC']['DateFormat'] . "');";
		}
	

	} else {

		$javascript_onchange_calls .= "UpdateFieldValue(" . $eid .",'" . $field . "',document.getElementById('INT_EL_" . $eid . "_" . $field . "').value,'" . htme($curval) . "');SwitchIAback(" . $eid . ",'" .  $field . "');";

		$fieldId = " name='INT_EL_" . $eid . "_" . $field . "' id='INT_EL_" . $eid . "_" . $field . "' ";
		$javascript_onchange_calls .= "SwitchIAback(" . $eid . ",'" .  $field . "');";
		$javascript_onblur_calls = "SwitchIAback(" . $eid . ",'" .  $field . "')";
	}
	
	if ($field == "category") {
		$CustomValidationFunctionPHP = GetAttribute("system", "CategoryCustomValidationFunctionPHP", 2);
	} elseif ($field == "owner") {
		$CustomValidationFunctionPHP = GetAttribute("system", "OwnerCustomValidationFunctionPHP", 2);
	} elseif ($field == "assignee") {
		$CustomValidationFunctionPHP = GetAttribute("system", "AssigneeCustomValidationFunctionPHP", 2);
	} elseif ($field == "duedate") {
		$CustomValidationFunctionPHP = GetAttribute("system", "DuedateCustomValidationFunctionPHP", 2);
	} elseif ($field == "customer") {
		$CustomValidationFunctionPHP = GetAttribute("system", "EntityCustomerCustomValidationFunctionPHP", 2);
	} elseif ($field == "custname") {
		$CustomValidationFunctionPHP = GetAttribute("system", "CustomernameCustomValidationFunctionPHP", 2);
	} elseif ($field == "status") {
		$CustomValidationFunctionPHP = GetAttribute("system", "StatusCustomValidationFunctionPHP", 2);
	} elseif ($field == "priority") {
		$CustomValidationFunctionPHP = GetAttribute("system", "PriorityCustomValidationFunctionPHP", 2);
	}

	if (substr($CustomValidationFunctionPHP,0,8) != "{{none}}" && trim($CustomValidationFunctionPHP) != "") {
		$javascript_onchange_calls .= "ValidateByAjax('" . $eid ."','" . $field. "',this.value,'" . htme($curval) . "', false);";
	}


	$REQ_DEF_FLDS = array();
	$AMF = array();
	$AMF = @unserialize($GLOBALS['REQUIREDDEFAULTFIELDS']);

	foreach ($AMF AS $veld)
	{
		if ($veld['forcing'] == "y")
		{
			$REQ_DEF_FLDS[$veld['name']] = 1;
		}
	}

	if ($eid == "_new_") {
		if ($_GET[$field] != "") {
			$ea[$field] = $_GET[$field];
		}
	}

	
	switch ($field) {
		case "owner":
			$ownerbox = "<a name='anchor_owner'></a><select " . $fieldId . " " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";

			if ($eid=="_new_") {
				if (is_numeric($_GET['owner'])) {
					$ea['owner'] = $_GET['owner'];
				} else {
					$ea['owner'] = $GLOBALS['USERID'];
				}
			}



			$list = ReturnListOfAllowedUsers($ea['owner'], true);
			foreach ($list AS $some_array) {
					if ($some_array['id'] == $ea['owner']) {
						$a = 'selected="selected"';
						$ok = 1;
					} else {
						$a = "";
					}
				if (!trim($some_array['FULLNAME'])== "") {
					$ownerbox .= "<option value='" . $some_array['id'] . "'  $a>" . htme($some_array['FULLNAME']) . "</option>";
				}
			}
			if (!$ok && $ea['owner'] > 0) {
				$ownerbox .= "<option value='" . $ea['owner'] . "' selected=\"selected\">" . htme(GetUserName($ea['owner'])) . "</option>";
			}
			if (!$ok && !$e=="_new_") {
					$ownerbox .= "<option value='2147483647' selected=\"selected\"> - </option>";
			}
			unset($ok);
			$ownerbox .= "</select>";
			$ret = $ownerbox;
		break;
		case "assignee":
			if ($eid=="_new_") {
				if (is_numeric($_GET['assignee'])) {
					$ea['assignee'] = $_GET['assignee'];
				} else {
					$ea['assignee'] = $GLOBALS['USERID'];
				}
			}


			$assigneebox = "<a name='anchor_assignee'></a><select " . $fieldId . " $roins onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";

			$list = ReturnListOfAllowedUsers($ea['assignee'], true);
			foreach ($list AS $some_array) {
					if ($e=="_new_") {
						$ea['assignee'] = $GLOBALS['USERID'];
					}
					if ($some_array['id']==$ea['assignee']) {
									$a = 'selected="selected"';
									$ok = 1;
					} else {
									$a = "";
					}
				if (!trim($some_array['FULLNAME'])== "") {
					$assigneebox .= "<option value='" . $some_array['id'] . "'  $a>" . htme($some_array['FULLNAME']) . "</option>";
				}
			}
			if (!$ok && $ea['assignee'] > 0) {
				$assigneebox .= "<option value='" . $ea['owner'] . "' selected=\"selected\">" . htme(GetUserName($ea['assignee'])) . "</option>";
			}
			if (!$ok && !$e=="_new_") {
					$assigneebox .= "<option value='2147483647' selected=\"selected\"> - </option>";
			}
			$assigneebox .= "</select>";
			$ret = $assigneebox;
		break;
		case "category":
			$category_onchange_add = ";UpdateCategory(this.value);";

			if ($GLOBALS['AutoCompleteCategory'] == "Yes") {
				$class_ins = "autocomplete";
			}
			if ($REQ_DEF_FLDS['cat'] == 1)
			{
				if ($class_ins != "")
				{
					$class_ins .= " ";
				}
				$class_ins .= "RequiredField";
			}

			$Placeholder = GetAttribute("system", "CategoryPlaceholder", 2);
			if ($Placeholder != "") {
				if ($eid == "_new_") {
					$Placeholder = StripExistingOnlyTags($Placeholder);
				} else {
					$Placeholder = StripNewOnlyTags($Placeholder);
				}
				$Placeholder = " placeholder=\"" . htme(strip_tags($Placeholder)) . "\"";
			}

			$categorybox = "<a name='anchor_category'></a><input type='text' " . $fieldId . " " . $Placeholder . " value='" . htme($ea['category']) . "' " . $roins . " size='" . $GLOBALS['CATEGORYBOXSIZE'] . "' onchange=\"" . $javascript_onchange_calls . $category_onchange_add . "\" onblur=\"" . $javascript_onblur_calls . "\""; 
			
			$categorybox .= " class=\"" . $class_ins . "\"";
			
			$categorybox .= ">";

			if (strtoupper($GLOBALS['ForceCategoryPulldown'])=="YES") {
				$categorybox = "<a name='anchor_category'></a><select " . $fieldId . " " . $roins . " class='text' id='JS_category' width='50' onchange=\"AlertUser('IsChanged');AutoSaveField(this);UpdateAjaxFields(this.id);\">";
				$list = Getsetting("Category pulldown list");
				$list = @explode(",",$list);
				if (sizeof($list)>0 && $list[0]!="") {
					for ($t=0;$t<sizeof($list);$t++) {
						if ($ea[category]==$list[$t]) {
							$roitns = 'selected="selected"';
						} else {
							unset($roitns);
						}
						$categorybox .= "<option " . $roitns . " value='" . $list[$t] . "'>" . $list[$t] . "</option>";
					}

				}
				$categorybox .= "</select>";
			}
			$ret = $categorybox;
		break;
		case "customer":
		
			$cl = GetClearanceLevel($user);

			if (in_array("CannotChangeCustomer",$cl) && $eid != "_new_") { 
				$dis = 'disabled="disabled"';
			}

			if (in_array("CannotChangeCustomer",$cl) && $eid != "_new_") { 
				$customerbox = "<a name='anchor_customer'></a>" . GetCustomerName($ea['CRMcustomer']);

			} else {

				if ($_REQUEST['SetCustTo']) {

					$ea['CRMcustomer'] = $_REQUEST['SetCustTo']; // pre-set customer from customers page
				
				} 
				
				if (db_GetValue("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE active='yes'") == 1) {
					
					$ea['CRMcustomer'] = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE active='yes'");
				
				}
	
				if ($GLOBALS['USECUSTOMERSELECTPOPUP'] == "Yes" && !$for_main_list && in_array("CannotChangeCustomer",$cl)) {
						
						
						if ($eid == "_new_") {
							$num = ReturnListOfAllowedCustomers();
							if (count($num) == 1) { // if the user only has access to one customer, set it immediately
								$ea['CRMcustomer'] = $num[0];
								$nopop = true;
							} 
						}
						$custname = GetCustomerName($ea['CRMcustomer']);
						
				} elseif ($cust_only) {
						$sqlcust = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE active='yes' AND id = '" . $cust_only . "' ORDER BY custname";
						$dis = 'disabled="disabled"';
						$resultcust = mcq($sqlcust,$db);
				} else {
						$sqlcust = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE active='yes' ORDER BY custname";
						$resultcust = mcq($sqlcust,$db);
				}
				
				if ($GLOBALS['USECUSTOMERSELECTPOPUP'] == "Yes" && !$for_main_list) {
					if ($readonly) {
						$customerbox = "<a name='anchor_customer'></a><div style='display: inline;' id='customerTS'>" . htme(GetCustomerName($ea['CRMcustomer'])) . "</div>";
					} else {
						$customerbox = "<a name='anchor_customer'></a><a onclick=\"popCustomerInlineSelectTable('JS_customer','customerTS');\"><div style='display: inline;' id='customerTS'>" . htme(GetCustomerName($ea['CRMcustomer'])) . "</div>";
					}
					$customerbox .= "<input type='hidden' value='" . htme($ea['CRMcustomer']) . "' " . $fieldId . "  onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
					$customerbox .= "&nbsp;&nbsp;";
					if (!$readonly && !$nopop) {
						$customerbox .= " [select]</a>";
					}
					if ((in_array("CustomerAdd", $cl) || is_administrator()) && !$readonly) {
						$customerbox .= "&nbsp;&nbsp;<a " . PrintToolTipCode($lang['addcust']) . " onclick=\"popCustomerInlineAddScreen('JS_customer', 'customerTS');\"><img src='images/icon-add.gif' alt=''></a>";
					}


				} elseif (!$cust_only) {

					$customerbox = "<a name='anchor_customer'></a><select " . $dis . " " . $fieldId . " " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
					if (!is_array($GLOBALS['UC']['LIMITTOCUSTOMERS'])) {

						$count = 0;


						while ($some_array= mysql_fetch_array($resultcust)) {
							$auth = CheckCustomerAccess($some_array['id']);
							if ($auth == "ok" || $auth == "readonly") {

								$count ++;
								
								$customerbox .= "<option value='" . $some_array['id'] . "' ";
								if ($some_array['id'] == $ea['CRMcustomer']) {
										$customerbox .= 'selected="selected"';
										$found = true;

								}
								$customerbox .= ">" . htme($some_array['custname']) . "</option>";
							} else {
								// print "<!-- Access to customer " . $some_array['id'] . " : " . $auth . " //-->\n";						
							}

						}
					} else {
												
						
						$count=0;
						foreach($GLOBALS['UC']['LIMITTOCUSTOMERS'] AS $customer) {

							if ($customer != "") {
								$customerbox .= "<option value='" . $customer . "' ";
								if ($customer == $ea['CRMcustomer']) {
											$customerbox .= 'selected="selected"';
											$found = true;

									}
								$customerbox .= ">" . GetCustomerName($customer) . "</option>";
								$count++;
							}
							
						}
						if ($count == 1) {
							$customerbox = "<input type='hidden' " . $fieldId . " value='" . htme($customer) . "'>";
							$customerbox .= "<a name='anchor_customer'></a>" . htme(GetCustomerName($customer)) . "";		
						}
					}
					if (!$found && $eid!="_new_" && $count > 1) {
						$customerbox .= "<option value='" . $ea['CRMcustomer'] . "' selected=\"selected\">" . GetCustomerName($ea['CRMcustomer']) . " [inactive]</option>";
					}
					$customerbox .= "</select>";
					//DA(($customerbox));

				} else {

					$customerbox = "<input type='hidden' " . $fieldId . " value='" . htme($cust_only) . "'>";
					$customerbox .= "<a name='anchor_customer'></a><input type='text' disabled=\"disabled\" name='bogus' value='" . htme(GetCustomerName($cust_only)) . "'>";
				}
			}
			
			$ret = $customerbox;
			
		break;
		case "duedate":
			$duedatebox = "<input " . $roins . " type=\"text\" " . $fieldId . " value=\"" . TransformDate($ea['duedate']) . "\" onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" class=\"datepicker"; 
			if ($REQ_DEF_FLDS['duedate'] == 1)
			{
				$duedatebox .= " RequiredField";
			}
			$duedatebox .= "\">";
			$ret = $duedatebox;
		break;
		case "duetime":
			$duetimebox = "<a name=\"anchor_duetime\"></a><select " . $fieldId . " " . $roins . " onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";

			for ($i=$GLOBALS['CAL_MINHOUR'];$i<$GLOBALS['CAL_MAXHOUR']+1;$i+=.5) {
				if ($i<10) {
					$val = "0";
					$txt = "0";
				}
				if ($ch) {
					$val .= floor($i) . "30";
					$txt .= floor($i) . ":30h";
					unset($ch);
				} else {
					$val .= floor($i) . "00";
					$txt .= floor($i) . ":00h";
					$ch=1;
				}
				if ($ea['duetime'] == $val) {
					$sel = 'selected="selected"';
				} else {
					unset($sel);
				}
				$duetimebox .= "<option value='". $val . "' $sel>" . $txt . "</option>";
				unset($val);
				unset($txt);
			}
			$duetimebox .= "</select>";
			$ret = $duetimebox;
		break;
		case "startdate":
			
			$startdatebox = "<input " . $roins . " type=\"text\" " . $fieldId . " value=\"" . TransformDate($ea['startdate']) . "\" onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\" class=\"datepicker"; 
			//edit Jeroen 2010-04-29
		
			if ($REQ_DEF_FLDS['startdate'] == 1)
			{
				$startdatebox .= " RequiredField";
			}
			$startdatebox .= "\">";
			$ret = $startdatebox;
		break;
		case "readonly":
			if ($ea['readonly']=='y') {
				$readonlybox = "<a name='anchor_readonly'></a><input type='hidden' name='readonly_posted' value='1'><input type='checkbox' class='radio' " . $fieldId . " value='y' checked='checked' $roins onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
			} else {
				$readonlybox = "\n<a name='anchor_reandonly'></a><input type='hidden' name='readonly_posted' value='1'><input type='checkbox' class='radio' " . $fieldId . " value='y' $roins  onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
			}
			$ret = $readonlybox;
		break;
		case "private":
			if ($ea['private']=='y') {
				$privatebox = "\n<a name='anchor_private'></a><input type='hidden' name='private_posted' value='1'><input type='checkbox' class='radio' " . $fieldId . " value='y' checked='checked' $roins onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
			} else {
				$privatebox = "<a name='anchor_private'></a><input type='hidden' name='private_posted' value='1'><input type='checkbox' class='radio' " . $fieldId . " value='y' $roins onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
			}
			$ret = $privatebox;
		break;
		case "status":
			$statusbox = "<a name='anchor_status'></a><select " . $fieldId . " $roins onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
			$sql = "SELECT varname,id,color FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
			$result= mcq($sql,$db);
			while($options = mysql_fetch_array($result)) {
				if (strtoupper(($ea['status']))==strtoupper($options['varname'])) { $a='selected="selected"'; } else { $a=""; }
				if ($ea['status'] != "" && ($directives['DefaultOverride']['status'] == $options['varname'])) { $a = 'selected="selected"'; }

				if ($a!='selected="selected"' && !@in_array("All",$GLOBALS['UC']['USER_ALLOWED_STATUSSES']) && !@in_array($options['id'],$GLOBALS['UC']['USER_ALLOWED_STATUSSES'])) {
					qlog(INFO, "Access to status variable " . $options['varname'] . " is denied.");
				} elseif (!in_array($options['varname'], $directives['ExcludeStatus'])) {
					$statusbox .= "<option style='background:" . $options['color'] . "' value='" . htme($options['varname']) . "' $a>" . htme($options['varname']) . "</option>";
				}
			}
			$statusbox .= "</select>";
			$ret = $statusbox;
		break;
		case "priority":
			$prioritybox = "<a name='anchor_priority'></a><select " . $fieldId . " $roins onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
			$sql = "SELECT varname,id,color FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars ORDER BY listorder, varname";
			$result= mcq($sql,$db);
			while($options = mysql_fetch_array($result)) {

				if (strtoupper(($ea['priority']))==strtoupper($options['varname'])) { $a='selected="selected"'; } else { $a=""; }
				if ($ea['priority'] != "" && ($directives['DefaultOverride']['priority'] == $options['varname'])) { $a = 'selected="selected"'; }

				if ($a!='selected="selected"' && !@in_array("All",$GLOBALS['UC']['USER_ALLOWED_PRIORITIES']) && !@in_array($options['id'],$GLOBALS['UC']['USER_ALLOWED_PRIORITIES'])) {
					qlog(INFO, "Access to priority variable " . $options['varname'] . " is denied.");
				} elseif (!in_array($options['varname'], $directives['ExcludePriority'])) {
					$prioritybox .= "<option style='background:" . $options['color'] . "' value='" . htme($options['varname']) . "' $a>" . htme($options['varname']) . "</option>";
				}
			}
			$prioritybox .= "</select>";
			$ret = $prioritybox;
		break;
		case "deleted":
			if ($ea['deleted']=='y') {
				$deletedbox = "<a name='anchor_deleted'></a><input type='hidden' name='deleted_posted' value='1'><input type='checkbox' class='radio' " . $fieldId . " value='y' checked='checked' $roins onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
			} else {
				$deletedbox = "<a name='anchor_deleted'></a><input type='hidden' name='deleted_posted' value='1'><input type='checkbox' class='radio' " . $fieldId . " value='y' $roins onchange=\"" . $javascript_onchange_calls . "\" onblur=\"" . $javascript_onblur_calls . "\">";
			}
			$ret = $deletedbox;
		break;
	}
	return($ret);
}

function ValidateHTMLForm($fileid,$type="entity") {

		$template = GetTemplate($fileid);
		$template = ReturnTemplateStyleSheet($fileid) . $template;

		if (stristr($template,"<form>") || stristr($template,"</form>")) {
			$error = true;
			$error_msg .= "Form tags (&lt;form&gt; and &lt;/form&gt;) are not allowed in templates.\n";
		}

		if (strstr($template,"#CUSTOMER#")) {

		} elseif (!strstr($template,"#CUSTOMER#") && strstr($template,"@CUSTOMER@")) {
			$warning = true;
			$warning_msg .= "This template will only work on EXISTING entities. You cannot create a new \nentity with this form because the #CUSTOMER# tag is missing.\n";
		} else {
			$error = true;
			$error_msg .= "This template will only work. Both #CUSTOMER# and @CUSTOMER@ tags are missing, one of both is required.\n";
		}
		if (strstr($template,"#COMMENTBOX#") && !strstr($template,"#CONTENTS#")) {
			$error = true;
			$error_msg .= "You must enable the #CONTENTS# box in order to use the #COMMENTBOX# feature.";
		}
		if (strstr($template,"#SAVEBUTTON#")) {

		} else {
			$warning = true;
			//$error_msg .= "Save button (#SAVEBUTTON#) is handy. How to save your entity without it?\n";
			$warning_msg .= "Save button (#SAVEBUTTON#) is handy. How to save your entity without it?\n";
		}
		if ($type=="entity") {
			if (strstr($template,"#OWNER#")) {

			} else {
				$warning = true;
				//$error_msg .= "Owner tag (#OWNER#) is handy (form will work without it)\n";
				$warning_msg .= "Owner tag (#OWNER#) is handy (form will work without it)\n";
			}
			if (strstr($template,"#ASSIGNEE#")) {

			} else {
				$warning = true;
				//$error_msg .= "Assignee tag (#ASSIGNEE#) is handy (form will work without it).\n";
				$warning_msg .= "Assignee tag (#ASSIGNEE#) is handy (form will work without it).\n\n";
			}
		}
		if ($error) {
			return("<span class='noway'>This template will not work (...as an entity template).</span>\n" . $error_msg);
		} elseif ($warning) {
			return("<span style='color: #FF9933;'>Warnings.</span>\n" . $error_msg . "\n" . $warning_msg);
		} else {
			return("<span style='color: #66CC00;'>Template looks good!</span>");
		}
}
function CheckDatabaseSettings() {

	if ($GLOBALS['EnableMailMergeAndInvoicing'] == "Yes") {
		//print "Mail merging and invoicing is enabled\n";
	}

	if ($GLOBALS['cronpassword'] == "*NONE*" || $GLOBALS['cronpassword'] == "") {
		$ret .= "WARNING : The cron password is not set!\n";
	}
	if ($GLOBALS['logtext'] == true) {
		$ret .="WARNING : LOGTEXT is enabled. This slows " . $GLOBALS['PRODUCT'] . " down by 25%!\n";
	}
	if ($GLOBALS['logqueries'] == true) {
		$ret .= "WARNING : LOGQUERIES is enabled. This slows stuff down.\n";
	}
	$fp = @fopen($GLOBALS['PATH_TO_BASE'] . "qlist.txt","r");
	if ($fp) {
		$ret .= "WARNING : SECURITY HAZARD: Your qlist.txt file is world-readable.\n";
		fclose($fp);
	}

	if (ini_get("magic_quotes_gpc") == 1) {
			$ret .= "ERROR   : Magic quotes is on! Should be off!\n";
	} else {
			//$ret .= "ERROR   : Magic quotes is off!\n";
	}

	if (GetSetting("TimestampLastDuedateCron") < (date('U') - 86400)) {
			$ret .= "ERROR   : It's more than a day ago since the duedate notifier script ran! (last run: " . date('Y-m-d H:i:s', GetSetting("TimestampLastDuedateCron")) . ")\n";
	}
	if (GetSetting("TimestampLastHousekeeping") < (date('U') - 3600)) {
			$ret .= "ERROR   : It's more than an hour ago since the housekeeping script ran! (last run: " . date('Y-m-d H:i:s', GetSetting("TimestampLastHousekeeping")) . ")\n";
	}

	if ($ret) {
		return($ret . "\n");
	} else {
		return("No messages\n\n");
	}
}
function GetProfileMembers($prof_num) {
	$prof_members = array();
	if ($prof_num == 0) {
		$sql = "SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE administrator='yes' AND name NOT LIKE 'deleted_user_%' ORDER BY FULLNAME";
	} else {
		$sql = "SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE PROFILE='" . mres($prof_num) ."' AND name NOT LIKE 'deleted_user_%' ORDER BY FULLNAME";
	}
	$result = mcq($sql,$db);
	while ($row = mysql_fetch_array($result)) {
		array_push($prof_members, $row['id']);
	}
	return($prof_members);
}
function DeleteProfile($prof_num) {
	$members = GetProfileMembers($prof_num);
	if (sizeof($members) > 0) {
		print "This group cannot be deleted because the following user(s) still inherit it:<br>";
		foreach ($members AS $user) {
			print "<br>" . GetUserName($user);
		}
		print "<br><br>";
	} elseif ($prof_num != 0) {
		$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . mres($prof_num) . "'";
		mcq($sql,$db);
		print "Group " . $prof_num . " was successfully deleted.";

	}
}
function PrintAltToolTipCode($txt, $bla=false) {
	//edit Jeroen, alt naar title omdat deze in <a></a> gebruikt wordt en daar mag geen alt in staan
	return(" title='" . htme($txt) . "' ");
}

function PrintToolTipCode($txt, $ovrw=false, $widepx=false) {

		$GLOBALS['ttc']++;
		$ret = " title=\"" . htme($txt) . "\"";
		return($ret);
}
function ShowJournal($eid, $flextableid=false, $datajournal=false) {
		global $lang;
		
		if ($_REQUEST['datajournal'] == "1") {
			$datajournal = true;
		}

		if ($datajournal) {
			$cspan = '4';
			$dlink = "<a href='edit.php?journal=1&amp;eid=" . $eid . "&height=300&width=850&amp;TB_iframe=true&amp;custid=" . $_REQUEST['custid'] . "'>normal journal</a>";
			$name = "Data journal";
		} else {
			$cspan = '2';
			$dlink = "<a href='edit.php?journal=1&amp;eid=" . $eid . "&height=300&width=850&amp;TB_iframe=true&amp;datajournal=1&amp;custid=" . $_REQUEST['custid'] . "'>data journal</a>";
			$name = "Journal";
		}

		if (!is_numeric($eid) && !is_numeric($_REQUEST['custid'])) {
			PrintAD("Reference to entity or customer not found");
		} elseif (CheckFunctionAccess("DenyJournalAccess") == "ok"  && !is_administrator()) {
			PrintAD("You are not allowed to view journal information");
		} else {

		if (CheckFunctionAccess("ShowOnlyOwnJournalRecords") == "ok" && !is_administrator()) {
			// This means a user is only allowed to see his/her own updates in the journal
			if ($datajournal) {
				$sql_ins = " AND " . $GLOBALS['TBL_PREFIX'] . "datajournal.by_user='" . mres($GLOBALS['USERID']) . "' ";
			} else {
				$sql_ins = " AND " . $GLOBALS['TBL_PREFIX'] . "journal.user='" . mres($GLOBALS['USERID']) . "' ";
			}
		}

			// First check if this is legal
			if (strtoupper($GLOBALS['EnableEntityJournaling'])!="YES") {
				PrintAD("You are not allowed to view this information");
				log_msg("WARNING: Illegal attempt to access entity journal #$eid","");
				qlog(WARNING, "WARNING: Illegal attempt to access entity journal #$eid");
			} else {


				if ($_REQUEST['custid']) {
					if (CheckCustomerAccess($_REQUEST['custid']) == "ok" || CheckCustomerAccess($_REQUEST['custid']) == "readonly") {
						$ret .= "<table class='crm'><thead><tr><td colspan='" . $cspan . "'>" . $name . " for " . $lang['customer'] . "  #$eid " . $dlink . "</td><td> " . $lang['search'] . ": &nbsp;<img src='images/searchbox.png' alt='' class='search_img'><input type='text' class='search_input' value='" . htme($_REQUEST['search']) . "' id='search_journal' onchange=\"document.location='edit.php?journal=1&amp;custid=" . htme($_REQUEST['custid']) . "&amp;search=' + this.value;\"></td></td></tr>";
						
						if ($datajournal) {
							$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Field</strong></td><td><strong>From value</strong></td><td><strong>To value</strong></td></tr></thead>";
						} else {
							$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Action</strong></td></tr></thead>";
						}
						$ttsf = "customer";
					}
				} elseif ($flextableid) {
						if ($flextableid == "trigger") {
							MustBeAdmin();

							$ret .= "<table class='crm'><thead><tr><td colspan='" . $cspan . "'>" . $name . " for trigger #$eid " . $dlink . "</td><td> " . $lang['search'] . ": &nbsp;<img src='images/searchbox.png' alt='' class='search_img'><input type='text' class='search_input' value='" . htme($_REQUEST['search']) . "' id='search_journal' onchange=\"document.location='edit.php?journal=1&amp;FlexTable=trigger&amp;recordid=" . $eid . "&amp;search=' + this.value;\"></td></td></tr>";
							
							if ($datajournal) {
								$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Field</strong></td><td><strong>From value</strong></td><td><strong>To value</strong></td></tr></thead>";
							} else {
								$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Action</strong></td></tr></thead>";
							}
							$ttsf = "trigger";

						} elseif ($flextableid == "user") {
							MustBeAdmin();

							$ret .= "<table class='crm'><thead><tr><td colspan='" . $cspan . "'>" . $name . " for user #$eid " . $dlink . "</td><td> " . $lang['search'] . ": &nbsp;<img src='images/searchbox.png' alt='' class='search_img'><input type='text' class='search_input' value='" . htme($_REQUEST['search']) . "' id='search_journal' onchange=\"document.location='edit.php?journal=1&amp;FlexTable=trigger&amp;recordid=" . $eid . "&amp;search=' + this.value;\"></td></td></tr>";

							if ($datajournal) {
								$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Field</strong></td><td><strong>From value</strong></td><td><strong>To value</strong></td></tr></thead>";
							} else {
								$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Action</strong></td></tr></thead>";
							}

							$ttsf = "user";

						} elseif ($flextableid == "group") {
							MustBeAdmin();

							$ret .= "<table class='crm'><thead><tr><td colspan='" . $cspan . "'>" . $name . " for group #$eid " . $dlink . "</td><td> " . $lang['search'] . ": &nbsp;<img src='images/searchbox.png' alt='' class='search_img'><input type='text' class='search_input' value='" . htme($_REQUEST['search']) . "' id='search_journal' onchange=\"document.location='edit.php?journal=1&amp;FlexTable=trigger&amp;recordid=" . $eid . "&amp;search=' + this.value;\"></td></td></tr>";
	
							if ($datajournal) {
								$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Field</strong></td><td><strong>From value</strong></td><td><strong>To value</strong></td></tr></thead>";
							} else {
								$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Action</strong></td></tr></thead>";
							}

							$ttsf = "group";


						} else {
							$t1 = CheckFlexTableAccess($flextableid);
							$t2 = CheckFlextableRecordAccess($flextableid, $eid);
							if ( ($t2 == "ok" || $t2 == "readonly") && ($t1 == "ok" || $t1 == "readonly") ) {
								
								$ret .= "<table class='crm'><thead><tr><td colspan='" . $cspan . "'>" . $name . " for flextable record #$eid " . $dlink . "</td><td> " . $lang['search'] . ": &nbsp;<img src='images/searchbox.png' alt='' class='search_img'><input type='text' class='search_input' id='search_journal' value='" . htme($_REQUEST['search']) . "' onchange=\"document.location='edit.php?journal=1&amp;FlexTable=" . $flextableid . "&amp;recordid=" . $eid . "&amp;search=' + this.value;\"></td></td></tr>";

								if ($datajournal) {
									$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Field</strong></td><td><strong>From value</strong></td><td><strong>To value</strong></td></tr></thead>";
								} else {
									$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Action</strong></td></tr></thead>";
								}


								$ttsf = "flextable" . $flextableid;
							} else {
								PrintAD("Not allowed to view this!");
								EndHTML();
								exit;
							}
						}
				} else {
					if (CheckEntityAccess($eid) == "ok" || CheckEntityAccess($eid) == "readonly") {
						
						$ret .= "<table class='crm'><thead><tr><td colspan='" . $cspan . "'>" . $name . " for " . $lang['entity'] . " #$eid " . $dlink . "</td><td> " . $lang['search'] . ": &nbsp;<img src='images/searchbox.png' alt='' class='search_img'><input type='text' class='search_input' id='search_journal' onchange=\"document.location='edit.php?journal=1&amp;eid=" . $eid . "&amp;search=' + this.value;\"></td></tr>";
	
						if ($datajournal) {
							$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Field</strong></td><td><strong>From value</strong></td><td><strong>To value</strong></td></tr></thead>";
						} else {
							$ret .= "<tr><td><strong>Time</strong></td><td><strong>User</strong></td><td><strong>Action</strong></td></tr></thead>";
						}

						$ttsf = "entity";
					} else {
						PrintAD("Not allowed to view this entity.");
						EndHTML();
						exit;
					}
				}
				
				if ($datajournal) {
					$sql = "SELECT by_user AS user,field,from_val, to_val,date_format(" . $GLOBALS['TBL_PREFIX'] . "datajournal.timestamp_last_change, '%a %M %e, %Y %H:%i') AS ts FROM " . $GLOBALS['TBL_PREFIX'] . "datajournal, " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE " . $GLOBALS['TBL_PREFIX'] . "datajournal.by_user=" . $GLOBALS['TBL_PREFIX'] . "loginusers.id AND record='" . mres($eid) . "' AND " . $GLOBALS['TBL_PREFIX'] . "datajournal.table='" . $ttsf . "' AND " . $GLOBALS['TBL_PREFIX'] . "datajournal.by_user=" . $GLOBALS['TBL_PREFIX'] . "loginusers.id " . $sql_ins;

				} else {
					$sql = "SELECT user,message,date_format(" . $GLOBALS['TBL_PREFIX'] . "journal.timestamp_last_change, '%a %M %e, %Y %H:%i') AS ts FROM " . $GLOBALS['TBL_PREFIX'] . "journal, " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE " . $GLOBALS['TBL_PREFIX'] . "journal.user=" . $GLOBALS['TBL_PREFIX'] . "loginusers.id AND eid='" . mres($eid) . "' AND " . $GLOBALS['TBL_PREFIX'] . "journal.type='" . $ttsf . "' " . $sql_ins;
				}

				if ($_REQUEST['search']) {
					if ($datajournal) {
						$sql .= " AND (from_val LIKE '%" . mres($_REQUEST['search']) . "%' OR to_val LIKE '%" . mres($_REQUEST['search']) . "%'";
						$sql .= " OR FULLNAME LIKE '%" . mres($_REQUEST['search']) . "%')";
					} else {
						$sql .= " AND (message LIKE '%" . mres($_REQUEST['search']) . "%'";
						$sql .= " OR FULLNAME LIKE '%" . mres($_REQUEST['search']) . "%')";
					} 
				}
				
				if ($datajournal) {
					$sql .= " ORDER BY " . $GLOBALS['TBL_PREFIX'] . "datajournal.timestamp_last_change DESC";
				} else {
					$sql .= " ORDER BY " . $GLOBALS['TBL_PREFIX'] . "journal.timestamp_last_change DESC, " . $GLOBALS['TBL_PREFIX'] . "journal.id DESC";
				}

				$result= mcq($sql,$db);
				while ($jn= mysql_fetch_array($result)) {
					if ($datajournal) {
						
						$ret .= "<tr><td valign='top'>" . $jn['ts'] . "</td><td valign='top'>" . $jn['user'] . " : " . GetUserName($jn['user']) . "</td><td>" . GetExtraFieldName($jn['field']) . "</td><td>" . htme($jn['from_val']) . "</td><td>" . htme($jn['to_val']) . "</td></tr>";
					} else {
						$ret .= "<tr><td valign='top'>" . $jn['ts'] . "</td><td valign='top'>" . $jn['user'] . " : " . GetUserName($jn['user']) . "</td><td>" . nl2br(htme($jn['message'])) . "</td></tr>";
						
					}
				}
				$ret .= "</table>";
				return($ret);
			}
		}
}



function ShowAuthHeadersRSS($cust=" - login") {
	global $title;
	$title .= $cust;
	header('WWW-Authenticate: Basic realm="' . $GLOBALS['PRODUCT'] . ' ' . $title . '"');
    header('HTTP/1.0 401 Unauthorized');
	echo "Access denied.";
}
function ShowRSSDetail($FeedNumber, $entity) {
		PrintHTMLHeader();
		if (strlen($lang['CHARACTER-ENCODING'])>2) {
			qlog(INFO, "Character-encoding override in effect: " . $lang['CHARACTER-ENCODING']);
			$charset = $lang['CHARACTER-ENCODING'];
			$GLOBALS['CHARACTER-ENCODING'] = $lang['CHARACTER-ENCODING'];
		} else {
			$charset = "ISO-8859-1";
			$GLOBALS['CHARACTER-ENCODING'] = "ISO-8859-1";
		}
		header("Content-Type: text/html; charset=" . $charset . "");
		print "<title>" . $GLOBALS['PRODUCT'] . " - " . htme($GLOBALS['title']) . "</title>\n";
		?>

<meta charset="UTF-8">
<link rel="shortcut icon" href="favicon.ico">
		<?php
		DisplayCSS();
		$arr = @unserialize($GLOBALS['RSS_FEEDS']);
		$sql = base64_decode($arr[$FeedNumber]['sql']);
		$name = base64_decode($arr[$FeedNumber]['description']);
		$bodytemplate = base64_decode($arr[$FeedNumber]['template']);
		if ($sql == "") {
			log_msg("ERROR: (fatal) RSS Feed " . $FeedNumber . " is not defined!","");
			qlog(ERROR, "ERROR: (fatal) RSS Feed " . $FeedNumber . " is not defined!");
			PrintAD("ERROR: RSS Feed " . $FeedNumber . " is not defined! Contact your " . $GLOBALS['PRODUCT'] . " administrator.");
			exit;
		}
		print "\n\n</head><body><div>";

		print EvaluateTemplatePHP(ParseTemplateAll(ReturnTemplateStyleSheet($bodytemplate) . GetTemplate($bodytemplate), $entity, false, "htme"));

		print EndHTML();
		exit;


}
function GenerateRSSFeed($FeedNumber, $MaxElements=10) {
		global $lang;
		header("Content-type: text/xml");


		qlog(INFO, "Feeding RSS to client " . $_SERVER['REMOTE_ADDR']);
		$arr = @unserialize($GLOBALS['RSS_FEEDS']);

		$sql = base64_decode($arr[$FeedNumber]['sql']);
		$name = base64_decode($arr[$FeedNumber]['description']);
		$bodytemplate = base64_decode($arr[$FeedNumber]['template']);
		if ($sql == "") {
			log_msg("ERROR: (fatal) RSS Feed " . $FeedNumber . " is not defined!","");
			qlog(ERROR, "ERROR: (fatal) RSS Feed " . $FeedNumber . " is not defined!");
			PrintAD("ERROR: RSS Feed " . $FeedNumber . " is not defined! Contact your " . $GLOBALS['PRODUCT'] . " administrator.");
			exit;
		}
//		print_r($arr);

		$subdir = str_replace("rss.php","",$_SERVER['SCRIPT_NAME']);
		$sql = str_replace("deleted", "@@@TMP@@@", $sql);

		if (stristr($sql,"delete") || stristr($sql,"drop") || stristr($sql,"truncate") || stristr($sql,"insert") || stristr($sql,"update") || stristr($sql,"alter")) {
			print "QUERY NOT ALLOWED - $sql";
			log_msg("RSS ERROR: Query not allowed: " . $sql . " - who is messing here??","");
			qlog(INFO, "RSS ERROR: Query not allowed: " . $sql . " - who is messing here??");
			exit;
		}
		$sql = str_replace("@@@TMP@@@", "deleted", $sql);
		$sql = str_replace("@CURUSER@", $GLOBALS['USERID'], $sql);

		if ($_SERVER['HTTPS']=="on") {
			$http = "https://";
		} else {
			$http = "http://";
		}
		$tmp = $_SERVER['SERVER_NAME'] . $subdir . "/";
		$tmp = str_replace("//", "/" , $tmp);
		$link = $http . $tmp;

		print "<?phpxml version=\"1.0\" encoding=\"" . $GLOBALS['CHARACTER-ENCODING'] . "\" ?>\n";
		?>
		<rss version="2.0">
		<channel>
		<title><?php echo $GLOBALS['PRODUCT'];?> <?php echo htme($GLOBALS['title']);?> <?php echo htme($name);?></title>
		<link><?php echo $link;?></link>
		<description><?php echo htme($name);?></description>
		<copyright>No Copyright</copyright>
		<language>en-us</language>
		<lastBuildDate></lastBuildDate>
		<category>News</category>
		<ttl>1</ttl>
		<?php
		$result = mcq($sql,$db);
		while ($row = mysql_fetch_array($result)) {
			if (CheckEntityAccess($row['eid']) != "nok") {
				print "<item>\n";
				print "<title>[" . $row['eid'] . "] " . htme(GetUserName($row['assignee'])) . " : " . htme($row['category']) . " (" . htme(GetCustomerName($row['CRMcustomer'])) . ") </title>";
				print "<description>";
				print $lang['customer'] . ": " . htme(GetCustomerName($row['CRMcustomer'])) . "\n";
				print $lang['owner'] . ": " . htme(GetUserName($row['owner'])) . "\n";
				print $lang['assignee'] . ": " . htme(GetUserName($row['assignee'])) . "\n";
				print $lang['duedate'] . ": " . htme(GetUserName($row['duedate'])) . "\n\n";

				print htme($row['content']) . "\n";

				$arr = GetFileListArray($row['eid']);
				if (sizeof($arr)>0) {
					print "\nFiles:\n";
					foreach ($arr AS $file) {
						print htme($file['filename']) . " (" . FormatNumber($file['filesize']) . " bytes)\n";
					}
				}

				print "</description>";

				print "<link>" . $link . "rss.php?detail=" . $row['eid'] . "&amp;rep=" . $GLOBALS['repository_nr'] . "&amp;FN=" . $GLOBALS['FN']. "</link>";
				print "</item>\n";
			}
		}
		print "</channel></rss>";
}
function FirstBoot() {
	$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity";
	$res = mcq($sql,$db);
	$res = mysql_fetch_array($res);
	if ($res[0] == 0) {


		
		$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "settings";
		$res = mcq($sql,$db);
		$res = mysql_fetch_array($res);
		$num_settings = $res[0];
		?>
		<div id="page" class="welcomemsg">

			<center><img src="images/crmlogo_transparant.png" alt=""></center>

			<h3>
			Welcome to <?php echo $GLOBALS['PRODUCT'];?>.
			</h3>
			<p>
			This message is displayed because this installation appears to be empty (e.g. zero entities). This message
			assumes you're new to <?php echo $GLOBALS['PRODUCT'];?>.</p>
			
			<p>
			To get started, you need to adjust some settings, which are listed here. The settings area
			can be accessed by pressing ALT-S (MS IE, ALT-SHIFT-S for FireFox users), or by navigating to "Administration" (on this dashboard) and than
			to "Global System Values". The manual can be accessed at all times by pressing ALT-M (again, ALT-SHIFT-M for FireFox users).</p>
			<p>		
			This <?php echo $GLOBALS['PRODUCT'];?> installation has a total of <?php echo $num_settings;?> adjustable setting variables in the global setting
			table. Next to that, about 300 other things can be adjusted to let <?php echo $GLOBALS['PRODUCT'];?> behave like you want
			it to. Don't get discouraged by the large numbers; it's fairly easy. You don't have to
			read the whole manual - just check it if you're stuck.</p>
			<h3>Things needed to configure your own <?php echo $GLOBALS['PRODUCT'];?> repository</h3>
			<p>
			You will need some time, some coffee, and basic knowledge of HTML and a little about CSS. That's all. Support can be obtained at <a href="http://www.interleave.nl/en/">http://www.interleave.nl/en/</a>.
			</p>

			<h3>Getting started with your own workflow</h3>
			This list contains steps about the process you will have to walk through to get started with <?php echo $GLOBALS['PRODUCT'];?>. Eventually you'll need the <a href="docs_examples/CRM-CTT_Interleave_Adminmanual.pdf">manual</a> but this should give you an idea of what to do. <br><br>The steps are as follows. Please note that these steps cover the part on creating you own usable database, triggers and forms. They don't describe how to install <?php echo $GLOBALS['PRODUCT'];?> or how to adjust settings like language etcetera. Please refer to the manual for these things.<br>
			<ol>
				<li>Determine the fields you need</li>
				<li>Enter the fields on the <a href="extrafields.php?tabletype=entity&amp;ti=1">extra fields management page</a></li>
				<li>Create or alter the form you use on the <a href="admin.php?templates=1&amp;nav=all&amp;t1=all">templates page</a> and add the new fields to the template</li>
				<li>Give users the right to use that form on the <a href="useradmin.php?cur=true">user management page</a></li>
				<li>Define triggers for these fields using the <a href="trigger.php">triggers management page</a> to actually create a work flow</li>
			</ol>
			<p>All information on how to exactly do this is in the manual.</p>
</div>

		<?php

	}
}
function PrintAD($numORmsg) {

	$tmp = debug_backtrace();
	qlog(INFO, "TRACE:\n\n" . GetBackTrace());

	$line = $tmp[0]['line'];

	qlog(WARNING, "PrintAD called with message \"" . $numORmsg . "\"");
	log_msg("WARNING: PrintAD called with message \"" . $numORmsg . $GLOBALS['AccessDeniedReason'] . "\"\n" . string_r($tmp) . "");
	if ($GLOBALS['BODY_ADMIN_ERRORMSG'] == "") {
		print "<div id=\"msgContainer\">";
				print "<div id='msgFormId'>";
					print "<div id=\"baseMessage\">";
						print "<div class=\"ErrorMsg\">" . $numORmsg . "</div><div style=\"float: right;\" class=\"showinline\"><a href=\"#\" onclick=\"toggleLayer('msgContainer');\">close</a></div>";
						
						if ($GLOBALS['AccessDeniedReason']) {
							if ($GLOBALS['ShowMinimalErrorMessages'] == "No") {
								print "<br>" . nl2br($GLOBALS['AccessDeniedReason']) . "<br>";		
							}
						}
					
					print "<br><br>";
					print "<a onclick=\"hideLayer('baseMessage');showLayer('reportForm');\">This is not correct</a>";
					print "</div>";

					print "<div id='reportForm' style='display: none;'>";
					print "<div class='ErrorMsg'>By submitting this form you will report this event to your " . $GLOBALS['PRODUCT'] . " administrator.</div><div style=\"float: right;\" class=\"showinline\"><a href=\"#\" onclick=\"toggleLayer('msgContainer');\">close</a></div><br><br>";
					?>
					You can add comments below. Technical details about what caused this message will be included automatically.<br><br>
					<form id='req_adm_act' method='post' action='message.php'>
						<table>
						<tr><td>From:</td><td><input type='text' style="width: 400px;" name='from_user' readonly='readonly' value='<?php print $GLOBALS['USERID'] . ": " . GetUserName($GLOBALS['USERID']);?>'></td></tr>
						<tr><td>Repository:</td><td><input type='text' style="width: 400px;" readonly='readonly' name='from_repos' value='<?php print $GLOBALS['title'];?>'></td></tr>
						<tr><td>Location:</td><td><input type='text' style="width: 400px;" name='url' readonly='readonly' value='<?php print htme($_SERVER['REQUEST_URI']) . ":"  . $line;?>'>
						
						<?php
						$exmsg = "\n\nDescision trace: (if found)\n\n";
						if (is_array($GLOBALS['DECISIONTRACE'])) {
							foreach ($GLOBALS['DECISIONTRACE'] AS $line) {
								$exmsg .= $line . "\n";
							}
						}

						$traceid = PushStashValue(GetBackTrace() . "\n\nReason: (if found)\n\n" . $GLOBALS['AccessDeniedReason'] . $exmsg);


						print "<input type='hidden' name='trace' value='" . $traceid . "'>";

						if ($GLOBALS['ShowMinimalErrorMessages'] == "No") {
							$GLOBALS['ShowTraceLink'] = true;
						}
						
						if ($_REQUEST['nonavbar']) {
						?>	
							<input type='hidden' name='nonavbar' value='<?php print $_REQUEST['nonavbar'];?> '></td></tr>
						<?php
						}
						?>


						<tr><td>Message:</td><td><input type='text' style="width: 400px;" name='message' readonly='readonly' value='<?php print htme($numORmsg);?>'></td></tr>
						<tr><td valign='top'>Action request:</td><td>
						<textarea name='content' style="width: 400px; height: 200px;"><?php
						print "Hi,\n\nI just received the following message from ". $GLOBALS['PRODUCT'] . ":\n\n\"" . $numORmsg . "\"\n\nIs there anything you can do about that?\n\nRegards,\n" . GetUserName($GLOBALS['USERID']) . "\n" . GetUserEmail($GLOBALS['USERID']);?></textarea></td></tr>
						<tr><td valign='top' align='right' colspan='2'><input type='submit' name='knop' value='Request administrative action'><input type='hidden' name='req_adm_act' value='1'></td></tr>

						</table>
					</form>
					<?php
				print "</div>";
		print "</div>";

	} else {
		print str_replace("@ERRORMSG@", $numORmsg, $GLOBALS['BODY_ADMIN_ERRORMSG']);
	}
}
function ShowMainPageMessagesList() {
	global $lang;
	$outp = "<fieldset>" . FB_Legend($lang['last5messages'] . " <a class='arrow' href='index.php?UserMessage'>" . $lang['messageinbox'] . "</a>	");
	$outp .= "<table class='sortable' width='100%'>";
	$outp .= "<tr><td><strong>From</strong></td><td><strong>Subject</strong></td><td><strong>Date/time</strong></td></tr>";
	$msglist = GetMessage($GLOBALS['USERID'], "all", "to", 5);
	foreach ($msglist AS $msg) {
		if ($msg['read'] == "n") {
			$font_ins1 = "<span style='color: #3300FF;'>";
			$font_ins2 = "</span>";
		} else {
			unset($font_ins1);
			unset($font_ins2);
		}
		$outp .=  "<tr onclick=\"document.location='index.php?UserMessage&amp;ReadInternalMessage=" . $msg['id'] . "'\" class='pointer' onmouseover=\"style.background='#cccccc';\"  onmouseout=\"style.background='#FFFFFF';\"><td>$font_ins1" . htme(GetUserName($msg['from'])) . "$font_ins2</td><td>$font_ins1" . htme($msg['subject']) . "$font_ins2</td><td>$font_ins1" . $msg['time'] . "$font_ins2</td></tr>";
		$x++;
	}
	if (is_administrator()) {
		$msglist = GetMessage("admin", "all", "to", 5);
			foreach ($msglist AS $msg) {
				if ($msg['read'] == "n") {
					$font_ins1 = "<span style='color: #3300FF;'>";
					$font_ins2 = "</span>";
				} else {
					unset($font_ins1);
					unset($font_ins2);
				}

				$outp .= "<tr onclick=\"document.location='index.php?UserMessage&amp;ReadInternalMessage=" . $msg['id'] . "'\" class='pointer' onmouseover=\"style.background='#CCCCCC';\"  onmouseout=\"style.background='#FFFFFF';\"><td>$font_ins1" . htme(GetUserName($msg['from'])) . "$font_ins2</td><td>$font_ins1" . htme($msg['subject']) . "$font_ins2</td><td>$font_ins1" . $msg['time'] . "$font_ins2</td></tr>";
				$x++;
			}
	}
	$outp .= "</table></fieldset>";
	if ($x>0) {
		print $outp;
	} else {
		print "<fieldset>" . FB_Legend($lang['last5messages'] . " <a class='arrow' href='index.php?UserMessage'>" . $lang['messageinbox'] . "</a>");
		print $lang['nomessages'];
		print "</fieldset>";
	}
}
function AddMessage($to, $from, $subject, $body) {
	// Adds a message to the message table
	// Returns message number
	if (strlen($body) > 0) {
		if ($to == "admin") {
			$to = 0;
		}
		if ($from == "") $from = "0";

		$subbody = substr($body, 0, 500);

		$res = db_GetRow("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages WHERE " . $GLOBALS['TBL_PREFIX'] . "internalmessages.to='" . mres($to) . "' AND `from`='" . mres($from) . "' AND `subject`='" . mres($subject) . "' AND LEFT(body, 500) = '" . mres($subbody) . "'");

		if ($res['id'] > 0) {
			mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "internalmessages SET dub_count = (dub_count+1), `read`='n' WHERE id=" . $res['id'] . "", $db);
		} else {
			mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "internalmessages(`to`, `from`, `subject`, `body`, `read`) VALUES (" . mres($to) . "," . mres($from) . ",'" . mres($subject) . "','" . mres($body) . "','n')", $db);
		}
		$msgnum = mysql_insert_id();
		ExpireDashboardCache();
		return($msgnum);
	}
}
function GetMessage($user, $id = "all", $direction = "to", $max=99999999) {
	// returns all or 1 messages in an array

	if ($direction == "from") {
		$sql_ins = " WHERE `from=`'" . mres($user) . "' ";
	} else {
		$sql_ins = " WHERE `to`='" . mres($user) . "' ";
	}
	if ($id == "all") {
		if ($user == "admin") {
			$user = 0;
		}

		$retarray = array();
		$res = mcq("SELECT *, date_format(timestamp_last_change, '%a %M %e, %Y %H:%i') AS time_formatted FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages " . $sql_ins . " ORDER BY id DESC LIMIT " . $max . " ", $db);
		while ($row = mysql_fetch_array($res)) {
			array_push($retarray, $row);
		}
		return($retarray);
	} elseif (is_numeric($id)) {
		// returns 1 message row in an array
		return(db_GetRow("SELECT *, date_format(timestamp_last_change, '%a %M %e, %Y %H:%i') AS time_formatted FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages " . $sql_ins . " AND id='" . mres($id) . "' ORDER BY id DESC"));
	}
}
function DeleteMessage($id, $user, $direction, $readorall) {
	if ($user == "admin") {
		$user = "0";
	}
	qlog(INFO, "Deleting internal message " . $id . " of user " . $user);
	if ($id == "all") {
		if ($readorall == "read") {
			if ($direction == "from") {
				mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages WHERE " . $GLOBALS['TBL_PREFIX'] . "internalmessages.from='" . mres($user) . "' AND `read`='y'", $db);
			} elseif ($direction == "to") {
				mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages WHERE " . $GLOBALS['TBL_PREFIX'] . "internalmessages.to='" . mres($user) . "' AND `read`='y'", $db);
			}
		} elseif ($readorall == "all") {
			if ($direction == "from") {
				mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages WHERE " . $GLOBALS['TBL_PREFIX'] . "internalmessages.from='" . mres($user) . "'", $db);
			} elseif ($direction == "to") {
				mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages WHERE " . $GLOBALS['TBL_PREFIX'] . "internalmessages.to='" . mres($user) . "'", $db);
			}
		}
	} elseif (is_numeric($id) || $id == "0") {
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages WHERE " . $GLOBALS['TBL_PREFIX'] . "internalmessages.to='" . mres($user) . "' AND id='" . mres($id) . "'", $db);
		if (is_administrator()) {
			mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages WHERE " . $GLOBALS['TBL_PREFIX'] . "internalmessages.to='0' AND id='" . mres($id) . "'", $db);
		}
	}
	ExpireDashboardCache();
}
function MarkMessageRead($id) {
	if ($id) {
		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "internalmessages SET `read`='y', `timestamp_last_change`=`timestamp_last_change` WHERE id='" . mres($id) . "'", $db);
		ExpireDashboardCache();
	}
}
function UserMessage() {
	global $lang;
	AddBreadCrum($lang['messageinbox']);
	print "<div id=\"usermessages\">";


	if ($_REQUEST['UserMessageBody'] && $_REQUEST['UserMessageTo']) {
		
		/*
		$cl = GetClearanceLevel($GLOBALS['USERID']);
			if (in_array("SendMessagesToAllUsers", $cl)) {
				print "<option value='all_users'  $a>- all users -</option>";
				foreach (GetGroups() AS $group) {
						print "<option value='group_" . $group['id'] . "'  $a>- all users in group " . mres($group['name']) ." -</option>";
				}
			}			
			*/
		

		if ($_REQUEST['UserMessageTo'] == "all_users" || substr($_REQUEST['UserMessageTo'], 0, 6) == "group_") {
			$group_ins = "";
			if (substr($_REQUEST['UserMessageTo'], 0, 6) == "group_") {
				$group_ins = " AND PROFILE='" . str_replace("group_", "", $_REQUEST['UserMessageTo']) . "'";
				
			}
			$cl = GetClearanceLevel($GLOBALS['USERID']);
			if (in_array("SendMessagesToAllUsers", $cl) || is_administrator()) {
				$sndcnt = 0;
				foreach(db_GetFlatArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user%' " . $group_ins) AS $user) {
					
					AddMessage($user, $GLOBALS['USERID'], $_REQUEST['UserMessageSubject'], $_REQUEST['UserMessageBody']);
					$sndcnt++;
				}
				$msg_id = "(" . $sndcnt . " messages send)";
			} else {
				PrintAD("You're not allowed to send messages to multiple receipients.");
				EndHTML();
				exit;
			}
		} else {
			$msg_id = AddMessage($_REQUEST['UserMessageTo'], $GLOBALS['USERID'], $_REQUEST['UserMessageSubject'], $_REQUEST['UserMessageBody']);
		}
		print "<h2>" . $lang['yourmessagewassend'] . " " . $msg_id . "</h2>";
		$_REQUEST['ReadInternalMessage'] = "";
		$_REQUEST['ComposeNewMessage'] = "";
	}
	if ($_REQUEST['PurgeMessages'] == "readtome") {
//		DeleteMessage("all", $GLOBALS['USERID'], "from", "read");
	} elseif ($_REQUEST['PurgeMessages'] == "readfromme") {
		DeleteMessage("all", $GLOBALS['USERID'], "to", "read");
		if (is_administrator()) {
			DeleteMessage("all", "admin", "to", "read");
		}
	} elseif ($_REQUEST['PurgeMessages'] == "allfromme") {
		DeleteMessage("all", $GLOBALS['USERID'], "to", "all");
		if (is_administrator()) {
			DeleteMessage("all", "admin", "to", "all");
		}
	} elseif (is_numeric($_REQUEST['PurgeMessages'])) {

		DeleteMessage($_REQUEST['PurgeMessages'], $GLOBALS['USERID'], 0, 0);
	}
	if (is_numeric($_REQUEST['ReadInternalMessage'])) {

		$msg = GetMessage($GLOBALS['USERID'], $_REQUEST['ReadInternalMessage'], "to");
		if (!is_array($msg) && is_administrator()) {
			$msg = GetMessage("admin", $_REQUEST['ReadInternalMessage'], "to");
			qlog(INFO, "This is an administrative message");
		}
		print "<div id=\"messageform\">";
			print "<p>[<a href=\"index.php?UserMessage\">" . strtolower($lang['messageinbox']) . "</a>]</p>";
			print "<h1>" . htme(strip_tags($msg['subject'])) . "</h1>";
			print "<table class=\"crm5\">";
			print "<tr><td>From:</td><td>" . htme(GetUserName($msg['from'])) . "</td></tr>";
			if ($msg['to'] > 0) {
				print "<tr><td>To:</td><td>" . htme(GetUserName($msg['to'])) . "</td></tr>";
			}
			print "<tr><td>Date:</td><td>" . htme($msg['time_formatted']) . "</td></tr>";
			if ($msg['to'] == 0) {
				print "<tr><td>Times received:</td><td>" . htme($msg['dub_count']) . "</td></tr>";
			}
			print "</table>";
			if ($msg['from'] != 0) {
				print "<div id=\"replyform\" style=\"display: none;\">";
				print "<h2>Reply</h2>";
				print "<table class=\"crm5\">";

				print "<tr><td colspan='2'><form id='UserMessageForm' method='post' action=''><div class='showinline'><input type='hidden' name='UserMessage' value='Yes'>";
				print "<input type='hidden' name='UserMessageTo' value='" . htme($msg['from']) . "'>";
				print "<tr><td>To:</td><td>" . htme(GetUserName($msg['from'])) . "</td></tr>";
				print "<tr><td>Subject:</td><td><input type='text' name='UserMessageSubject' size='50' value='RE: " . htme(strip_tags($msg['subject'])) . "'></td>";
				print "<tr><td colspan='2'>Message:<br><textarea rows='10' cols='100' name='UserMessageBody'>\n\n\n-------------------\n" . htme(strip_tags($msg['body'])) . "</textarea>";
				print "<tr><td></td><td class=\"rightalign\"><input type='submit' name='knop' value='" . $lang['sendmessage'] . "'></td></tr></table>";
				print "</div>";
			}
			print "<div id=\"messagediv\">";
				print "<h2>Message</h2>";
				print "<p>[<a href=\"#\" onclick=\"toggleLayer('messagediv');toggleLayer('replyform');\">reply</a>] [<a href='index.php?UserMessage&amp;PurgeMessages=" . $msg['id'] . "'>" . strtolower($lang['delete']) . "</a>]</p>";
				
				print "<table>";
				print "<tr><td colspan='2'><textarea readonly='readonly' rows='10' cols='100'>".  htme(strip_tags($msg['body'])) . "</textarea></td></tr>";
				print "</table>";
				print "</div>";
		print "</div>";
		qlog(INFO, "Reading message " . $msg['id'] . " - marking it as read");
		MarkMessageRead($msg['id']);
	} elseif ($_REQUEST['ComposeNewMessage']) {
		print "<div id=\"messageform\">";
		print "<form id='UserMessageForm' method='post' action=''><div class='showinline'><input type='hidden' name='UserMessage' value='Yes'>";
		print "<table><tr><td>To</td><td><select name='UserMessageTo' id='JS_UserMessageTo'>";
			
			$result = ReturnListOfAllowedUsers(false, false, false, false);

			print "<option value='admin'  $a>- any administrator -</option>";
			$cl = GetClearanceLevel($GLOBALS['USERID']);
			if (in_array("SendMessagesToAllUsers", $cl) || is_administrator()) {
				print "<option value='all_users'  $a>- all users -</option>";
				foreach (GetGroups() AS $group) {
						print "<option value='group_" . $group['id'] . "'  $a>- all users in group " . mres($group['name']) ." -</option>";
				}
			}			
			foreach ($result AS $row) {
				if (!trim($row['FULLNAME'])== "" && $row['FULLNAME'] != "[n/a]") {
					print "<option value='" . $row['id'] . "'  $a>" . htme($row['FULLNAME']) . "</option>";
				}
			}
		print "</select>&nbsp;" . ReturnDropDownSearchField("JS_UserMessageTo") . "</td></tr>";
		print "<tr><td>Subject</td><td><input type='text' name='UserMessageSubject' size='50'></td>";
		print "<tr><td>Message</td><td><textarea cols='50' rows='10' name='UserMessageBody'></textarea></td></tr>";
		print "<tr><td></td><td class=\"rightalign\"><input type='submit' value='" . $lang['go'] . "'></td></tr>";
		print "</div></form></table>";
		print "</div>";


	} else {

		print "<ul><li><a href='index.php?UserMessage&amp;ComposeNewMessage=true'>" . $lang['composenewmessage'] . "</a></li>";
		print "<li><a href='index.php?UserMessage&amp;PurgeMessages=readfromme'>" . $lang['deleteallreadfrominbox'] . "</a></li>";
		print "<li><a href='index.php?UserMessage&amp;PurgeMessages=allfromme'>" . $lang['deleteallfrominbox'] . "</a></li></ul>";
		print "<h1>" . $lang['incomingmessages'] . "</h1>";
		print "<div id=\"messageslist\">";
		print "<table class='crm' width='100%'>";

		print "<thead><tr><td>id</td><td>From</td><td>To</td><td>Subject</td><td>Date/time</td><td>Times received</td><td>&nbsp;</td></tr></thead>";

		$msglist = GetMessage($GLOBALS['USERID'], "all", "to");
		$shown = 0;

		foreach ($msglist AS $msg) {
			if ($msg['read'] == "n") {
				print "<tr onclick=\"document.location='index.php?UserMessage&amp;ReadInternalMessage=" . $msg['id'] . "'\" class='pointer' onmouseover=\"style.background='#CCCCCC';\"  onmouseout=\"style.background='#FFFFFF';\"><td><span style='color: #3300FF;'>" . $msg['id'] . "</span></td><td class=\"nwrp\"><span style='color: #3300FF;'>" . htme(GetUserName($msg['from'])) . "</span></td><td class=\"nwrp\"><span style='color: #3300FF;'>" . htme(GetUserName($msg['to'])) . "</span></td><td class=\"nwrp\"><span style='color: #3300FF;'>" . ($msg['subject']) . "</span></td><td class=\"nwrp\"><span style='color: #3300FF;'>" . $msg['time_formatted'] . "</span></td><td>" . $msg['dub_count'] . "</td><td><a href='index.php?UserMessage&amp;PurgeMessages=" . htme($msg['id']) . "'><img src='images/delete.gif'  alt=''></a></td></tr>";
			} else {
				print "<tr onclick=\"document.location='index.php?UserMessage&amp;ReadInternalMessage=" . $msg['id'] . "'\" class='pointer' onmouseover=\"style.background='#CCCCCC';\"  onmouseout=\"style.background='#FFFFFF';\"><td>" . $msg['id'] . "</td><td class=\"nwrp\">" . htme(GetUserName($msg['from'])) . "</td><td class=\"nwrp\">" . htme(GetUserName($msg['to'])) . "</td><td class=\"nwrp\">" . $msg['subject'] . "</td><td class=\"nwrp\">" . $msg['time_formatted'] . "</td><td>" . $msg['dub_count'] . "</td><td><a href='index.php?UserMessage&amp;PurgeMessages=" . $msg['id'] . "'><img src='images/delete.gif'  alt=''></a></td></tr>";
			}
			$shown++;
		}
		if (is_administrator()) {
			$msglist = GetMessage(0, "all", "to");

			foreach ($msglist AS $msg) {
				if ($msg['read'] == "n") {
					print "<tr onclick=\"document.location='index.php?UserMessage&amp;ReadInternalMessage=" . $msg['id'] . "'\" class='pointer' onmouseover=\"style.background='#CCCCCC';\"  onmouseout=\"style.background='#FFFFFF';\"><td><span style='color: #3300FF;'>" . $msg['id'] . "</span></td><td class=\"nwrp\"><span style='color: #3300FF;'>" . htme(GetUserName($msg['from'])) . "</span></td><td class=\"nwrp\"><span style='color: #3300FF;'>" . htme(GetUserName($msg['to'])) . "</span></td><td class=\"nwrp\"><span style='color: #3300FF;'>" . ($msg['subject']) . "</span></td><td class=\"nwrp\"><span style='color: #3300FF;'>" . $msg['time_formatted'] . "</span></td><td>" . $msg['dub_count'] . "</td><td><a href='index.php?UserMessage&amp;PurgeMessages=" . $msg['id'] . "'><img src='images/delete.gif'  alt=''></a></td></tr>";
				} else {
					print "<tr onclick=\"document.location='index.php?UserMessage&amp;ReadInternalMessage=" . $msg['id'] . "'\" class='pointer' onmouseover=\"style.background='#CCCCCC';\"  onmouseout=\"style.background='#FFFFFF';\"><td>" . $msg['id'] . "</td><td class=\"nwrp\">" . htme(GetUserName($msg['from'])) . "</td><td class=\"nwrp\">" . htme(GetUserName($msg['to'])) . "</td><td class=\"nwrp\">" . $msg['subject'] . "</td><td class=\"nwrp\">" . $msg['time_formatted'] . "</td><td>" . $msg['dub_count'] . "</td><td><a href='index.php?UserMessage&amp;PurgeMessages=" . $msg['id'] . "'><img src='images/delete.gif'  alt=''></a></td></tr>";
				}
				$shown++;
			}
			
		}
		if ($shown == 0) {
			print "<tr><td colspan=\"7\">" . $lang['nomessages'] . "</td></tr>";
		}
		print "</table></div>";
	}
	print "</div>";
}
function FB_Legend($title) {
	return("<legend><img src='images/crmlogosmall.gif' alt=''> " . $title . "</legend>");
}
function ColorizeSQL($query)
{
   if( $query == '' ) return 0;
   global $SQL_INT;
   if( !isset($SQL_INT) ) $SQL_INT = 0;
   //[dv] this has to come first or you will have goofy results later.
   $query = preg_replace("/['\"]([^'\"]*)['\"]/i", "'<span style='color: #FF6600;'>$1</span>'", $query, -1);
   $query = str_replace(
                           array (
                                   '*',
                                   'SELECT ',
                                   'UPDATE ',
                                   'DELETE ',
                                   'INSERT ',
                                   'INTO',
                                   'VALUES',
                                   'FROM',
                                   'from',
                                   'LEFT',
                                   'JOIN',
                                   'WHERE',
                                   'where',
                                   'LIMIT',
                                   'ORDER BY',
                                   'AND',
                                   'OR ', //[dv] note the space. otherwise you match to 'COLOR' ;-)
                                   'DESC',
                                   'ASC',
                                   'ON ',
								   'LIKE'
                                 ),
                           array (
                                   "<span class='noway'><strong>*</strong></span>",
                                   "<span style='color: #00AA00;'><strong>SELECT</strong> </span>",
                                   "<span style='color: #00AA00;'><strong>UPDATE</strong> </span>",
                                   "<span style='color: #00AA00;'><strong>DELETE</strong> </span>",
                                   "<span style='color: #00AA00;'><strong>INSERT</strong> </span>",
                                   "\n\t<span style='color: #00AA00;'><strong>INTO</strong></span>",
                                   "<span style='color: #00AA00;'><strong>VALUES</strong></span>",
                                   "\n\t<span style='color: #00AA00;'><strong>FROM</strong></span>",
                                   "\n\t<span style='color: #00AA00;'><strong>FROM</strong></span>",
                                   "<span style='color: #00CC00;'><strong>LEFT</strong></span>",
                                   "<span style='color: #00CC00;'><strong>JOIN</strong></span>",
                                   "\n\t<span style='color: #00AA00;'><strong>WHERE</strong></span>",
                                   "\n\t<span style='color: #00AA00;'><strong>WHERE</strong></span>",
                                   "<span style='color: #AA0000;'><strong>LIMIT</strong></span>",
                                   "\n\t<span style='color: #00AA00;'><strong>ORDER BY</strong></span>",
                                   "\n\t<span style='color: #0000AA;'><strong>AND</strong></span>",
                                   "<span style='color: #0000AA;'><strong>OR</strong> </span>",
                                   "<span style='color: #0000AA;'><strong>DESC</strong></span>",
                                   "<span style='color: #0000AA;'><strong>ASC</strong></span>",
                                   "<span style='color: #00DD00;'><strong>ON</strong> </span>",
                                   "<span style='color: #00DD00;'><strong>LIKE</strong> </span>"
                                 ),
                           $query
                         );

   foreach ($GLOBALS['TABLES_IN_USE'] AS $tab) {
		$query = str_replace($tab, "<br><span style='color: #808080;'><strong>" . $tab . "</strong></span>", $query);
   }
   $SQL_INT++;
   return("<span style='color: #0000FF;'><strong>SQL[".$SQL_INT."]:</strong>\n\t".$query."<span class='noway'>;</span></span><br>\n");
} //SQL_DEBUG


function do_language() {
	global $lang;

	if ($GLOBALS['Language_done'] == true && sizeof($lang)>10) {
		qlog(INFO, "Quitting with loading languages, already done!");
		return($lang);
	}

	$system_language = db_GetValue("SELECT TEXT FROM " . $GLOBALS['TBL_PREFIX'] . "languages WHERE TEXTID='current-language' AND LANGID='GLOBAL'");
	$system_language_mask = db_GetValue("SELECT TEXT FROM " . $GLOBALS['TBL_PREFIX'] . "languages WHERE TEXTID='current-language-mask' AND LANGID='GLOBAL'");



	$user_language =				GetAttribute("user", "LanguagePack", $GLOBALS['USERID']);
	$user_language_mask =			GetAttribute("user", "LanguageMask", $GLOBALS['USERID']);

	if ($user_language == "") 		SetAttribute("user", "LanguagePack", "{{system}}", $GLOBALS['USERID']);
	if ($user_language_mask == "")	SetAttribute("user", "LanguageMask", "{{system}}", $GLOBALS['USERID']);

	if (is_numeric($GLOBALS['UC']['USERPROFILE'])) {
		
		$group_language =				GetAttribute("group", "LanguagePack", $GLOBALS['UC']['USERPROFILE']);
		$group_language_mask =			GetAttribute("group", "LanguageMask", $GLOBALS['UC']['USERPROFILE']);
		
		if ($group_language == "") 		SetAttribute("group", "LanguagePack", "{{system}}", $GLOBALS['UC']['USERPROFILE']);
		if ($group_language_mask == "")	SetAttribute("group", "LanguageMask", "{{system}}", $GLOBALS['UC']['USERPROFILE']);
	
	}
	

	if ($group_language != "{{system}}" && $group_language != "") {
		$ltl = $group_language;
	} elseif ($user_language != "{{system}}" && $user_language != "") {
		$ltl = $user_language;
	} elseif ($system_language != "") {
		$ltl = $system_language;
	} else {
		$ltl = "ENGLISH";
	}
	if ($group_language_mask != "{{system}}" && $group_language_mask != "") {
		$mtl = $group_language_mask;
	} elseif ($user_language_mask != "{{system}}" && $user_language_mask != "") {
		$mtl = $user_language_mask;
	} elseif ($system_language_mask != "") {
		$mtl = $system_language_mask;
	} else {
		$mtl == "";
	}
	

	$tel = 0;
	$sql= "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "languages WHERE LANGID='" . mres($ltl) . "'";
	$result= mcq($sql,$db);
	while ($row = mysql_fetch_array($result)){
			$lang[$row['TEXTID']] = str_replace("\015","",(str_replace("\n","",$row['TEXT'])));
			$tel++;
	}
	qlog(INFO, "Loaded language " . $ltl . " (" . $tel . " tags)");

	if ($mtl != "") {
		$tel = 0;
		$sql= "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "languages WHERE LANGID='" . mres($mtl) . "'";
		$result= mcq($sql,$db);
		while ($row = mysql_fetch_array($result)){
				$lang[$row['TEXTID']] = str_replace("\015","",(str_replace("\n","",$row['TEXT'])));
				$tel++;
		}
		qlog(INFO, "Loaded language mask " . $mtl . " (" . $tel . " tags)");
	}

	$GLOBALS['Language_done'] = true;
	return($lang);
}


// FIX FOR: "Unknown function: memory_get_usage()"
// FIX -BEGIN-
if( !function_exists('memory_get_usage') ){
	function memory_get_usage(){
		return(false);
	}
}
// FIX -END-
// MODULE INCLUDE EXTRA CODE

function GetModules() {
		return(DB_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "modules"));
}
function DeleteModule($mid) {
		MustBeAdmin();
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "modules WHERE mid='" . mres($mid) . "'", $db);
		qlog(INFO, "Module " . $_REQUEST['delmod'] . " was deleted.");
		log_msg("Module " . $_REQUEST['delmod'] . " was deleted.");
		print "<br>&nbsp;&nbsp;&nbsp;<img src='images/info.gif' alt=''> Module " . $_REQUEST['delmod'] . " was deleted.";
}
function RunModule($mid, $eid=false, $return=false, $flextablerecord=false, $flextableid=false, $customerid=false) {
	global $lang;

	$cnt = GetAttribute("module", "ModuleRunCount", $mid);
	if (!is_numeric($cnt)) { 
		$cnt = 1;
	} else {
		$cnt++;
	}
	SetAttribute("module", "ModuleRunCount", $cnt, $mid);

	// This function will run a module
	$park = $GLOBALS['NOINLINEPHPEVAL'];
	$GLOBALS['NOINLINEPHPEVAL'] = true;
	if (is_numeric($_REQUEST['dqs'])) {
		$q = PopStashValue($_REQUEST['dqs']);
		$q = str_replace("*,", "", $q);
		$q = str_replace("* ,", "", $q);

		$tmp = db_GetArray($q);
		$GLOBALS['eids'] = array();
		$GLOBALS['ids'] = array();
		$GLOBALS['ftids'] = array();
		$GLOBALS['recordids'] = array();
		foreach ($tmp AS $row) {
			$GLOBALS['eids'][] = $row[0];
			$GLOBALS['ids'][] = $row[0];
			$GLOBALS['ftids'][] = $row[0];
			$GLOBALS['recordids'][] = $row[0];

		}
	}



	$tmp = CheckModuleAccess($mid);
	if ($tmp == "ok") {
		if (!$mid) {
			qlog(ERROR, "ERROR : No module ID received. Cowardly quitting.");
			log_msg("ERROR : No module ID received. Cowardly quitting.");
		} else {
			$_REQUEST['keeplocked'] = true;
			qlog(INFO, "Bravely running module " . $mid);

			$RunAsUser = GetAttribute("module", "RunAsUser", $mid);
			if (is_numeric($RunAsUser) && $RunAsUser != $GLOBALS['USERID']) {
				// This module needs to be ran using the credentials of another user
				$cur_user = $GLOBALS['USERID'];
				$GLOBALS['USERID'] = $RunAsUser;
				InitUser();
				$revert_user = true;				
			}

			$module = db_GetRow("SELECT module_code,module_name FROM " . $GLOBALS['TBL_PREFIX'] . "modules WHERE mid='" . mres($mid) . "'");
			if ($module['module_name'] == "import_admin_messages") {
				$module['module_code'] = str_replace("\"config.inc.php\"", "\"config/config.inc.php\"", $module['module_code']);
				$module['module_code'] = str_replace("\"config-vars.php\"", "\"config/config-vars.php\"", $module['module_code']);
			}

			$code = $module['module_code'];

			$code = str_replace("@MID@", $mid, $code);

			if (IsValidEID($eid)) {
				$code = ParseTemplateAliases($code);
			    $code = ParseTemplateEntity($code, $eid, false, false, "plain", false, false);
			    $code = ParseTemplateCustomer($code, GetEntityCustomer($eid), false, "plain");
			}
			if (IsValidCID($customerid)) {
				$code = ParseTemplateCustomer($code, $customerid, false, "plain");
			}
			if ($flextablerecord) {
				$record = $flextablerecord;
				$recordid = $flextablerecord;
				$flextable = $flextableid;
			}
			ob_start();
			eval("?>" . $code . "");

			if ($_REQUEST['AjaxHandler']) {
				
				//$output = html_entity_decode(iconv("UTF-8", $GLOBALS['CHARACTER-ENCODING'], ob_get_contents()));
				$output = ob_get_contents();
			} else {
				$output = ob_get_contents();
			}

			if (!$return) {
				ob_end_flush();
			} else {
				ob_end_clean();
			}


			qlog(INFO, "Done running module");
			// Restore privileges to avoid hacking.
			include($GLOBALS['CONFIGFILE']);
			SwitchToRepos($GLOBALS['ORIGINAL_REPOSITORY']);
			
			if ($revert_user) {
				$GLOBALS['USERID'] = $cur_user;
				InitUser();
			}

			
			$lr = date('U');
			if (stristr($output, "eval()'d code")) {
				mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "modules SET module_last_run_date='" . $lr . "', module_last_run_result='ERROR' WHERE mid='" . mres($mid) . "'", $db);
			} else {
		//		print "No errors detected while running this module";
				mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "modules SET module_last_run_date='" . $lr . "', module_last_run_result='OK' WHERE mid='" . mres($mid) . "'", $db);
			}
			
			if ($return) {
				$GLOBALS['NOINLINEPHPEVAL'] = $park;
				return(ParseTemplateLanguageTags($output));
			}
		}
	} else {
		qlog(INFO, "Running module " . $mid . " denied because of insufficient access rights");
		log_msg("Running module " . $mid . " denied because of insufficient access rights");
		if (!$return) {
			PrintAD("You don't have access to this module (" . $mid . ")");
		} else {
			$GLOBALS['NOINLINEPHPEVAL'] = $park;
			return("<!-- No access -->");
		}
	}
	$GLOBALS['NOINLINEPHPEVAL'] = $park;
}
function ValidateAndInsertNewModule($module_definition_file_location) {
	// This function will validate a module definition and insert it when it's ok
	MustBeAdmin();
	//$filecontent=fopen($module_definition_file_location, "r");

	$file = fopen($module_definition_file_location, "r");
    while(!feof($file)) {
          $total = $total . fgets($file, 4096);
    }
    fclose ($file);
	$mod_row = @unserialize($total);
	if ($mod_row['module_name'] && $mod_row['module_code']) {
		mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "modules (module_name,module_description,module_add_by,module_add_date,module_code) VALUES ('" . mres($mod_row['module_name']) . "','" . mres($mod_row['module_description']) . "','" . mres($GLOBALS['USERID']) . "','" . date('U') . "','" . mres($mod_row['module_code']) . "')", $db);
		print "<br>&nbsp;&nbsp;&nbsp;<img src='images/info.gif' alt=''> Module " . $mod_row['module_name'] . " added.<br>";
		qlog(INFO, "Inserted module definition file " . $module_definition_file_location);
		log_msg("Module added from " . $module_definition_file_location);
	} else {
		qlog(ERROR, "ERROR parsing module definition file " . $module_definition_file_location);
		print "<img src='images/error.gif' alt=''> Module definition file " . $module_definition_file_location . " could not be parsed.";
	}
}

function Upgrade($db_ver_from, $db_ver_to, $sqla, $remarks=false) {
		global $legend,$name,$limit_to_db;
		include($GLOBALS['CONFIGFILE']);
		// OK, now browse through available repositories
		$t = 0;

		if (!$GLOBALS['IGNORE_VERSION']) {
			array_push($sqla,"INSERT INTO PRFX@@@@@@@uselog (id, ip, url, useragent, timestamp_last_change, qs, user ) VALUES ('', 'upgrade', 'upgrade', 'upgrade', NOW( ) , 'Upgrade from " . $db_ver_from . " to " . $db_ver_to . "', 'upgrade script')");
		}
		// Add cache delete queries
		array_push($sqla,"TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "cache");
		array_push($sqla,"TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "accesscache");
		array_push($sqla,"TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "entityformcache");
		array_push($sqla,"TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "publishedpagescache");
		array_push($sqla,"TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "entitylocks");

		for ($t=0;$t<64;$t++) {


			if ($slave[$t]) {
				array_push($host, $slave[$t]);
				array_push($user, $user[$t]);
				array_push($pass, $pass[$t]);
				array_push($database, $database[$t]);
				array_push($table_prefix, $table_prefix[$t]);
			}
			if (($limit_to_db != "" && $limit_to_db == $database[$t]) || $limit_to_db=="") {

				if ($database[$t]) {
					$a = "<p>Processing mysql://$user[$t]@$host[$t]/$database[$t]/$table_prefix[$t]*<br>";
					if ($GLOBALS['CL']) {
						print "Processing mysql://$user[$t]@$host[$t]/$database[$t]/$table_prefix[$t]*\n";
					}
					if ($slavedb[$t]) {
						$slav = false;
					} else {
						$slav = true;
					}
					if (!$db = mysql_connect($host[$t], $user[$t], $pass[$t])) {
						$a .= "Database connection failed totally.<br>";
						if ($GLOBALS['CL']) {
							print "\tDatabase connection failed totally\n";
						}
						$cancel = true;
					}
					if (!mysql_select_db($database[$t],$db)) {
						$a .= "<span class='noway'>Database could not be selected</span><br>";
						$cancel = true;
						if ($GLOBALS['CL']) {
							print "\tDatabase could not be selected\n";
						}

					}
					// Catch half-configured installations:
					if ($table_prefix[$t]=="") {
						$prefix = "CRM";
						$a .= "<span class='noway'>Warning - no table prefix configured. Assuming 'CRM'.</span><br>";
						if ($GLOBALS['CL']) {
							print "\tWarning: table prefix is not configured!\n";
						}
					} else {
						$prefix = $table_prefix[$t];
					}
					$sql = "SELECT value FROM " . $table_prefix[$t] . "settings WHERE setting='MAINTENANCE_MODE'";
					$result= mcq_upg($sql,$db);
					$dbv = @mysql_fetch_array($result);
					if ($dbv[0] == "No" && !$GLOBALS['IGNORE_VERSION']) {
						$cancel = true;
						$a .= "<span class='noway'>Maintenance mode not enabled.</span><br>";
						if ($GLOBALS['CL']) {
							print "\tMaintenance mode not enabled.\n";
						}
					}

					// Check if the title can be found
					$sql = "SELECT value FROM " . $table_prefix[$t] . "settings WHERE setting='title'";
					if (!$cancel) {
						if ($result= mysql_query($sql)) { // OK, it can be found
							$sql = "SELECT value FROM " . $table_prefix[$t] . "settings WHERE setting='DBVERSION'";
							$result= mcq_upg($sql,$db);
							$dbv = mysql_fetch_array($result);
							if ($dbv[0]!=$db_ver_from && !$GLOBALS['IGNORE_VERSION']) {
								$cancel = true;
								$a .= "<span class='noway'>Wrong database version. Expected " . $db_ver_from . " but got " . $dbv[0] . ".</span><br>";
								if ($GLOBALS['CL']) {
									print "\tWrong database version: looking for " . $db_ver_from . " but got " . $dbv[0] . "... skipping!\n";
								}
							} else {


								if ($db_ver_from == "5.4.0" && $db_ver_to == "5.4.1") {

									// UNCOMPRESS ANY COMPRESSED TEMPLATES FIRST

									$tmp_data = db_GetFlatArray("SELECT " . $table_prefix[$t] . "binfiles.fileid FROM " . $table_prefix[$t] . "blobs, " . $table_prefix[$t] . "binfiles WHERE " . $table_prefix[$t] . "binfiles.fileid=" . $table_prefix[$t] . "blobs.fileid AND " . $table_prefix[$t] . "binfiles.koppelid=0 AND " . $table_prefix[$t] . "blobs.gz='y'");

									foreach ($tmp_data AS $compressedtemplate) {
										$sql = "SELECT * FROM " . $table_prefix[$t] . "blobs WHERE fileid='" . mres($compressedtemplate) . "'";
										$result= mcq_upg($sql,$db);
										$result1= mysql_fetch_array($result);

										if ($result1['gz'] == "y") {
											print "Uncompressing template " . $compressedtemplate . ".\n";
											$b = strlen($result1['content']);
											$blob = gzinflate($result1['content']);
											$a = strlen($blob);
											$sql = "UPDATE " . $table_prefix[$t] ."blobs SET content='" . mres($blob) . "', gz='n' WHERE fileid='" . mres($compressedtemplate) . "'";
											mcq_upg($sql, $db);
										}
									}
								}

								// ACTUALLY UPGRADE THE REPOSITORY HERE
								if ($db_ver_from == "5.3.2" && $db_ver_to == "5.4.0") {
									if ($GLOBALS['CL']) print "\015\tEF Data table maintenance...";
									DeleteDoubleEFValues($prefix);
									if ($GLOBALS['CL']) print " done.\n";
								}
								if ($db_ver_from == "5.5.0.1" && $db_ver_to == "5.5.0.2") {
									ConvertDatabaseToUTF8();
								}


								if ($GLOBALS['CL']) {
									print "\015\tRunning SQL queries: ";
								}
								$top = sizeof($sqla);
								unset($top2);

								for ($q=0;$q<sizeof($sqla);$q++) {
									$sql_to_query = str_replace("PRFX@@@@@@@",$prefix,$sqla[$q]);
									$sql_to_query = str_replace("@@@@LAST_ID@@@@",$last_ins,$sql_to_query);

									mcq_upg($sql_to_query,$db);
									$last_ins = mysql_insert_id();
									if (!is_numeric($last_ins)) {
										unset($last_ins);
									}


									$top2++;
									if ($GLOBALS['CL']) {
										print "\015\tRunning SQL queries: " . $top2 . "/" . $top;
									}

								}
								if ($GLOBALS['CL']) {
									print "\n";
								}
								if ($db_ver_from == "5.4.1" && $db_ver_to == "5.4.2") {
									FixLanguageTags();
								} elseif ($db_ver_from == "5.2.0" && $db_ver_to == "5.3.0") {

										$defaultcustomerform = "<table cellspacing='0' cellpadding='4' border='0'>    <tbody>        <tr>            <td><strong>Active</strong>&nbsp;&nbsp;#ACTIVE#</td>        </tr>        <tr>            <td><fieldset><legend>&nbsp;[[customer]]</legend>#CUSTOMER#</fieldset></td>        </tr>        <tr>            <td><fieldset><legend>&nbsp;[[contact]]</legend>#CUSTOMER_CONTACT#</fieldset></td>            <td><fieldset><legend>&nbsp;[[contacttitle]]</legend>#CONTACT_TITLE#</fieldset></td>        </tr>        <tr>            <td><fieldset><legend>&nbsp;[[contactphone]]</legend>#CONTACT_PHONE#</fieldset></td>            <td><fieldset><legend>&nbsp;[[contactemail]]</legend>#CONTACT_EMAIL#</fieldset></td>        </tr>        <tr>            <td colspan='2'><fieldset><legend>&nbsp;[[customeraddress]]</legend>#CUSTOMER_ADDRESS#&nbsp;</fieldset></td>        </tr>        <tr>            <td colspan='2'><fieldset><legend>&nbsp;[[custremarks]]</legend>#CUST_REMARKS#&nbsp;</fieldset></td>        </tr>        <tr>            <td><fieldset><legend>&nbsp;[[custhomepage]]</legend>#CUST_HOMEPAGE#</fieldset></td>        </tr>        <tr>            <td colspan='2'>#ALL_EXTRA_FIELDS#<br><br></td>        </tr>        <tr>            <td>[[customer]] [[owner]]:</td>            <td>#CUST_OWNER#</td>        </tr>        <tr>            <td>[[readonly]]:</td>            <td>#READONLY#</td>        </tr>        <tr>            <td>E-mail Owner:</td>            <td>#EMAILOWNERCHECKBOX#</td>        </tr>        <tr>            <td colspan='2'><fieldset><legend>[[attachfile]]</legend>#FILEBOX#</fieldset><br></td>        </tr>    </tbody></table><br> #SAVEBUTTON# #DELETEBUTTON#";

										mcq_upg("INSERT INTO " . $prefix . "binfiles(koppelid, filename, username, type, filetype, show_on_add_list) VALUES('0','Default customer form', 'Upgrade routine',	'entity', 'TEMPLATE_HTML_CFORM', 'n'", $db);
										$t = $GLOBALS['Last_Insert'];

										mcq_upg("INSERT INTO " . $prefix . "blobs(fileid, content) VALUES('" . $t . "','" . mres($defaultcustomerform) . "')", $db);

										mcq_upg("UPDATE " . $prefix . "settings SET value='" . mres($t) . "' WHERE setting='CUSTOMCUSTOMERFORM' AND value=''", $db);


								} elseif ($db_ver_from == "4.2.0" && $db_ver_to == "4.3.0") {

									mcq_upg("INSERT INTO " . $prefix . "binfiles(koppelid,filename,username,file_subject,filetype) VALUES('','Default Dashboard Template','Hidde Fennema','Default Interleave Dashboard Template','TEMPLATE_DASHBOARD')", $db);

									$t = $GLOBALS['Last_Insert'];

									mcq_upg("INSERT INTO " . $prefix . "blobs(fileid,content) VALUES('" . $t . "','<table cellspacing=\"1\" cellpadding=\"1\" border=\"0\" align=\"\" style=\"width: 977px; height: 377px;\" summary=\"\"><tbody><tr><td><fieldset width=\"100%\"><legend>@TITLE@&nbsp; @USER@ #CLOCK#</span></legend><table width=\"100%\" cellspacing=\"1\" cellpadding=\"1\" border=\"0\" align=\"\" style=\"\" summary=\"\"><tbody><tr><td colspan=\"4\"> #FIRSTBOOT#</td></tr><tr><td valign=\"top\">Entities due today or overdue<br>#TODAY#<br></td><td valign=\"top\">#CALENDAR#</td></tr><tr><td valign=\"top\">Recently accessed entities<br>#RECENT#<br><br></td><td valign=\"top\">Personal statistics<br>#PERSSTATS#</td></tr><tr><td valign=\"top\"><br>#MESSAGES#<br><br><table width=\"100%\" cellspacing=\"1\" cellpadding=\"1\" border=\"0\" align=\"\" summary=\"\" style=\"\"><tbody><tr><td>Search ([[entity]]) </td><td>#ENTITYSEARCH#</td></tr><tr><td>Search ([[customer]])</td><td>#CUSTOMERSEARCH#</td></tr></tbody></table><br></td><td valign=\"top\">#REPOS#<br><br>#NAV#</td></tr><tr><td style=\"vertical-align: top;\">&nbsp;</td><td valign=\"top\" style=\"vertical-align: top;\">#DASHBOARDOPTIONS#</td></tr></tbody></table></fieldset> <a href=\"admin.php?templates=1&amp;nav=dashtemplates&amp;t1=dash\">Edit this dashboard template</a> </td></tr></tbody></table>')", $db);

									mcq_upg("UPDATE " . $GLOBALS['TBL_PREFIX'] . "settings SET value='" . $t . "' WHERE setting='DASHBOARDTEMPLATE'", $db);
									mcq_upg("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "internalmessages WHERE body LIKE '%processes%'", $db);

								} elseif ($db_ver_from == "3.4.2" && $db_ver_to == "3.4.3") {
									
									// Create master template, update entities
									if ($GLOBALS['CL']) {
										//print "\nConverting all entities to HTML forms....";
									}
									mcq_upg("INSERT INTO " . $prefix . "binfiles(koppelid,filename,username,file_subject,filetype) VALUES('','Default form','Hidde Fennema','Default form','TEMPLATE_HTML_FORM')", $db);

									$GLOBALS['Last_Insert'] = $t;

									if ($GLOBALS['CL']) {
										//print "\nCreated file $t ...\n";
									}
									mcq_upg("INSERT INTO " . $prefix . "blobs(fileid,content) VALUES('" . $t . "','<br><fieldset><legend>&nbsp;&nbsp;Entity @EID@ #LOCKICON# &nbsp;</legend><table width=\"90%\">    <tbody>        <tr>            <td>            <table>                <tbody>                    <tr>                        <td valign=\"top\"><fieldset><legend>&nbsp;&nbsp;Customer&nbsp;</legend>#CUSTOMER#</fieldset></td>                        <td valign=\"top\"><fieldset><legend>&nbsp;&nbsp;Priority&nbsp;</legend>#PRIORITY#</fieldset></td>                        <td valign=\"top\"><fieldset><legend>&nbsp;&nbsp;Status&nbsp;</legend>#STATUS#</fieldset></td>                        <td valign=\"top\" class=\"nwrp\"><fieldset><legend>&nbsp;&nbsp;Owner&nbsp;</legend>#OWNER#</fieldset></td>                        <td valign=\"top\"><fieldset><legend>&nbsp;&nbsp;Assignee&nbsp;</legend>#ASSIGNEE#</fieldset></td>                        <td class=\"nwrp\">#PDFICON# #WEBDAVICON# #ACTICON# #REPORTICON# #PRINTICON# #JOURNALICON# #EMAILPOPLINK#</td>                    </tr>                </tbody>            </table>            </td>        </tr>    </tbody></table><table>    <tbody>        <tr>            <td><fieldset><legend>&nbsp;&nbsp;Category&nbsp;</legend>#CATEGORY# &nbsp;</fieldset> </td>            <td><fieldset><legend>&nbsp;&nbsp;Due date&nbsp;</legend>#DUEDATE# #DUETIME#&nbsp; </fieldset> </td>        </tr>    </tbody></table><p><br>#CONTENTS#<br>#COMMENTBOX#</p><p>#ALL_EXTRA_FIELDS#</p><table>    <tbody>        <tr>            <td><br><fieldset>            <table>                <tbody>                    <tr><td>#DELETEBOX# Deleted entity&nbsp;&nbsp;&nbsp;&nbsp;</td><tr>                        <td>#READONLYBOX# Read-only to other users&nbsp;&nbsp;&nbsp;&nbsp;</td>                    </tr>                    <tr>                        <td>#PRIVATEBOX# Private</td>                    </tr>                </tbody>            </table>            </fieldset></td>        </tr>    </tbody></table><table>    <tbody>        <tr>            <td colspan=\"6\"><fieldset>            <p><legend>&nbsp;Attach file&nbsp;</legend>#FILEBOX#<br>#FILELIST#</p>            </fieldset></td>        </tr>    </tbody></table><table width=\"90%\">    <tbody>        <tr>            <td>#EMAILDROPDOWN# #SAVEBUTTON#</td>        </tr>    </tbody></table></fieldset>')", $db);
									mcq_upg("UPDATE " . $prefix . "entity SET formid=" . $t . " WHERE formid=0", $db);
									$res = mcq_upg("SELECT id,ADDFORMS FROM " . $prefix . "loginusers", $db);
									while ($row = mysql_fetch_array($res)) {
										$u = @unserialize($row['ADDFORMS']);
										for ($y=0;$y<sizeof($u);$y++) {
											if ($u[$y] == "default") {
												$u[$y] = $t;
											}
										}
										mcq_upg("UPDATE " . $prefix . "loginusers SET ADDFORMS='" . mres(serialize($u)) . "' WHERE id=" . $row['id'], $db);
									}
									$res = mcq_upg("SELECT id,ADDFORMS FROM " . $prefix . "userprofiles", $db);
									while ($row = mysql_fetch_array($res)) {
										$u = @unserialize($row['ADDFORMS']);
										for ($y=0;$y<sizeof($u);$y++) {
											if ($u[$y] == "default") {
												$u[$y] = $t;
											}
										}
										mcq_upg("UPDATE " . $prefix . "userprofiles SET ADDFORMS='" . mres(serialize($u)) . "' WHERE id=" . $row['id'], $db);
									}
								} elseif ($db_ver_from == "3.4.0" && $db_ver_to == "3.4.1") {
									// COPY FILES HERE
									if ($GLOBALS['CL']) {
										print "\tStart copying files to bin large objects table (this may take a while)\n";
									}
									$sql = "SELECT fileid FROM " . $prefix . "binfiles";
									$res = mcq_upg($sql,$db);
										while ($row = mysql_fetch_array($res)) {
										$sql2 = "SELECT content FROM " . $prefix . "binfiles WHERE fileid=" . $row['fileid'];
										$res2 = mcq_upg($sql2,$db);
										$row2 = mysql_fetch_array($res2);
										if ($GLOBALS['CL']) {
											print "\015\tDuplicate file ... " . $row['fileid'] . "                                ";
										}
										mcq_upg("INSERT INTO " . $prefix . "blobs(fileid, content) VALUES('" . $row['fileid'] . "', '" . mres($row2['content']) . "')", $db);
										$fcpd++;
										unset($row2);
										//print "\015\tDelete orignal file ... " . $row['fileid'] . "                             ";
										mcq_upg("UPDATE " . $prefix . "binfiles SET content=''  WHERE fileid=" . $row['fileid'], $db);
									}
									if ($GLOBALS['CL']) {
										print "\n\tAlter old table, drop now empty content... \n";
									}
									mcq_upg("ALTER TABLE " . $prefix . "binfiles DROP content", $db);
									if ($GLOBALS['CL']) {
										print "\n\tOptimize table to free space... \n";
									}
									mcq_upg("OPTIMIZE TABLE " . $prefix . "binfiles", $db);
									$text = "(" . $fcpd . " files copied)";
								}

								if (!$GLOBALS['IGNORE_VERSION']) {
									$sql = "UPDATE " .  $prefix . "settings SET value='" . $db_ver_to . "' WHERE setting='DBVERSION'";
									mcq_upg($sql,$db);
								}

								$a .= "Repository successfully upgraded $text " . $remarks . "</p>";
								if ($GLOBALS['CL']) {
									print "Repository successfully upgraded. $text $remarks\n";
								}
							}
						} else {
							$a .= "<span class='noway'>Tables not found.</span><br>";
							if ($GLOBALS['CL']) {
								print "\tTables not found.\n";
							}

							$cancel = true;
						}
					}

					if ($cancel) {
						$legend = "<img src='images/error.gif' alt=''>";
						$a .= "Repository not touched.<br>";
						if ($GLOBALS['CL']) {
							print "\tRepository not touched.\n";
						}
					} else {
						$legend = "<span style='color: #33FF00;'>OK&nbsp;</span>";
					}

					unset($cancel);
					if ($GLOBALS['CL']) {
						print "Done.\n";
					} else {
						print $a;

					}
				}
		} else { // end of if limit

		}
	}
	if ($GLOBALS['CL']) {
		print "All done.\n";
	} else {
		$legend = "CRM&nbsp;";
		print "<p><a class='arrow' href='index.php?logout=1'>to login page</a>&nbsp;<a class='arrow' href='upgrade.php?11=11'>to main upgrade page</a></p>";
	}
}
function mcq_upg($sql,$db) {
	global $mysql_query_counter, $logqueries, $name, $debug, $title, $host, $pass, $user, $slave, $lang;
	$a = mysql_query($sql);
	$GLOBALS['Last_Insert'] = mysql_insert_id();
	return($a);
}
function ReturnReposList($only_fo_dbs = false) {
//	global $user, $pass, $host, $database, $table_prefix;
	include($GLOBALS['CONFIGFILE']);
	$a .= " MM = Maintenance mode Yes/No. F/O = Fail-over database configured Yes/No\n";
	$a .= "---------------------------------------------------------------------------------------------------------------------\n";
	$a .= " Num |  Version    | Database name        | # Ent. | MM   | F/O | Size   | Repository                               |\n";
	$a .= "---------------------------------------------------------------------------------------------------------------------\n";
	for ($t=0;$t<64;$t++) {
			if (DB_Connect($t, false) && $host[$t]) {
							if (($only_fo_dbs && $slave[$t]) || !$only_fo_dbs) {
								$database[$t] = trim($database[$t]);

								$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='title'";
								$result= mcq($sql,$db);
								$maxU1 = mysql_fetch_array($result);
								$title = $maxU1[0];
								$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='DBVERSION'";
								$result= mcq($sql,$db);
								$maxU1 = mysql_fetch_array($result);
								$version = $maxU1[0];

								$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='MAINTENANCE_MODE'";
								$result= mcq($sql,$db);
								$maxU1 = mysql_fetch_array($result);
								$mm = $maxU1[0];
								if ($version=="") { $version="Prior to 1.9.0."; }
								$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity";
								$result= mcq($sql,$db);
								$res = mysql_fetch_array($result);
								$enum = $res[0];
								if ($slave[$t] != "") {
									$fo = "Yes";
								} else {
									$fo = "No ";
								}
								$size = GetCurrentDBTotalSize();
//											ver dbnam ent mm
								$a .= " " . fillout($t, 3) . " |  " . fillout($version,10) . " | " . fillout($database[$t],20) . " | " . fillout($enum,6) . " | " . fillout($mm,4) . " | " . $fo . " | " . fillout($size, 5) . "M | " . fillout($title,40) . " |\n";
							}
			}
	}
	$a .= "---------------------------------------------------------------------------------------------------------------------\n";
	return($a);
}
function SwitchToRepos($repository_nr) {
	include($GLOBALS['CONFIGFILE']);
	$GLOBALS['LastUserInitCall'] = "";
	ClearAllRunningCache();
	if (is_resource($db)) {
		mysql_close($db);
	}
	if (is_resource($db1)) {
		mysql_close($db1);
	}
	if (is_resource($db2)) {
		mysql_close($db2);
	}

	if ($host[$repository_nr]) {
		qlog(INFO, "Trying to connect to repository " . $repository_nr);
		if (DB_Connect($repository_nr, false) && !$GLOBALS['FORCE_SLAVE_USAGE']) {
	//		print "connect master\n";
			$GLOBALS['RUNNING_ON_MASTER'] = true;
			qlog(INFO, "Using mysql://" . $user[$repository_nr] . "@" . $host[$repository_nr] . ":" . $database[$repository_nr] . "/" . $table_prefix[$repository_nr] . "*");
			$GLOBALS['DBNAME'] = $database[$repository_nr];
			$GLOBALS['DBUSER'] = $user[$repository_nr];
			$GLOBALS['DBPASS'] = $pass[$repository_nr];
			$GLOBALS['DBHOST'] = $host[$repository_nr];
			$GLOBALS['repository_nr'] = $repository_nr;
			$GLOBALS['USE_FAILOVER'] = "Yes";
			$GLOBALS['FO_DB'] =  $slave[$repository_nr];
			$GLOBALS['TBL_PREFIX'] = $table_prefix[$repository_nr];
			$GLOBALS['SYNC_DISABLED_UNTIL'] = false;

			$sql= "SELECT setting, value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting!='STASH'";
			$result= @mcq($sql,$db);
			while ($resarr=@mysql_fetch_array($result)){
					$$resarr['setting'] = $resarr['value'];
					$GLOBALS[$resarr['setting']] = $resarr['value'];
			}
			$GLOBALS['PDF_DEFAULTFOOTER']			= $GLOBALS['PRODUCT'] . " :: " . $GLOBALS['title'] . ": ";

			

			// Temporary durt hack
			if (!isset($GLOBALS['PAGINATEOPTIONSLIST'])) {
				mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "settings (setting,value,discription) VALUES('PAGINATEOPTIONSLIST','5,10,25,30,50,100','Pagination options (comma separated)')", $db);
			}
			if (!isset($GLOBALS['WRONGSERVERMESSAGE'])) {
				mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "settings (setting,value,discription) VALUES('WRONGSERVERMESSAGE','','The message which is shown when a user is not working on the server mentioned in BASEURL.')", $db);
			}

			if (!isset($GLOBALS['STATISTICIMAGES'])) {
				mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "settings (setting,value,discription) VALUES('STATISTICIMAGES','','Do not edit (internal)')", $db);
			}

			if (!isset($GLOBALS['CHAT_HISTORY'])) {
				mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "settings (setting,value,discription) VALUES('CHAT_HISTORY','','Do not edit (internal)')", $db);
			}
			if (!isset($GLOBALS['DELETE_CONFIRMATIONMSG'])) {
				mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "settings (setting,value,discription) VALUES('DELETE_CONFIRMATIONMSG','Are you sure?','The message which is displayed when the user tries to delete something')", $db);
			}
			qlog(INFO, "DATABASE DISCISION  : MASTER");
			// all ok, now authenticate!
			$GLOBALS['REPOSNR'] = $repository_nr;
			$d = date('U');
	//		$GLOBALS['SYNC_DISABLED_UNTIL'] = false;
			/*
			if ($slave[$repository_nr] && ($d > ($GLOBALS['SYNC_DISABLED_UNTIL']) && is_numeric($GLOBALS['SYNC_DISABLED_UNTIL']))) {
					if (DB_Connect($repository_nr, true)) {
						// all ok
						DB_Connect($repository_nr, false);
						unset($GLOBALS['FO_DB_IS_DOWN']);
						qlog(INFO, "Found failover database : " . $slave[$repository_nr]);
						$GLOBALS['FO_DB'] = $slave[$repository_nr];
						if (!$GLOBALS['PUBLISHING']) {
							//SynchroniseFailOverDatabase();
						}
					} else {
						$GLOBALS['FO_DB_IS_DOWN'] = true;
						DB_Connect($repository_nr, false);
						qlog(INFO, "SLAVE DATABASE IS DOWN!");
						UpdateSetting("SYNC_DISABLED_UNTIL", (date('U') + ($GLOBALS['SYNC_TIMEOUT'] * 60)));
						AddMessage("admin", $GLOBALS['USERID'], "Slave database down, sync delayed", "Interleave detected that the configured slave database is down. <br><br>Synchronisation is switched off for " . $GLOBALS['SYNC_TIMEOUT']. " minutes. All jobs will be cached in the mean time. The slave database will be brought up-to-date when it is up again.<br><br>You can also check and restart synchronisation manually on the <a href='admin.php?failoverman=1'>fail-over admin page</a>.");
					}
			} elseif ($d < ($GLOBALS['SYNC_DISABLED_UNTIL']) && is_numeric($GLOBALS['SYNC_DISABLED_UNTIL'])) {
				*/
			//	$GLOBALS['FO_DB_IS_DOWN'] = true;
				qlog(INFO, "SLAVE DATABASE STATUS UNKNOWN");
			
			//}

		} elseif ($slave[$repository_nr]) {
	//		print "connect slave\n";
			qlog(INFO, "Trying slave database...");
			@mysql_close($db);
			if (DB_Connect($repository_nr, true)) {
				$GLOBALS['DBNAME'] = $database[$repository_nr];
				$GLOBALS['DBUSER'] = $user[$repository_nr];
				$GLOBALS['DBPASS'] = $pass[$repository_nr];
				$GLOBALS['DBHOST'] = $slave[$repository_nr];
				$GLOBALS['TBL_PREFIX'] = $table_prefix[$repository_nr];
				$GLOBALS['repository_nr'] = $repository_nr;
				if ($slave[$repository_nr]) {
						$GLOBALS['FO_DB'] = $host[$repository_nr];
				}
				$sql= "SELECT setting, value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting!='STASH'";
				$result= @mcq($sql,$db);
				while ($resarr=@mysql_fetch_array($result)){
						$$resarr['setting'] = $resarr['value'];
						$GLOBALS[$resarr['setting']] = $resarr['value'];
				}


				if (!$GLOBALS['FORCE_SLAVE_USAGE']) {
					$GLOBALS['USE_FAILOVER'] = "Yes";
					qlog(INFO, "DATABASE DISCISION  : SLAVE");

					$GLOBALS['RUNNING_ON_SLAVE'] = true;
					// all ok, now authenticate!
					$GLOBALS['REPOSNR'] = $repository_nr;
					$sql= "SELECT setting, value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting!='STASH'";
					$result= @mcq($sql,$db);
					while ($resarr=@mysql_fetch_array($result)){
							$$resarr['setting'] = $resarr['value'];
							$GLOBALS[$resarr['setting']] = $resarr['value'];
					}

					qlog(INFO, "RUNNING ON SLAVE DATABASE - MASTER DIDN'T RESPOND! (SLAVE IS NOW MASTER AND MASTER IS NOW SLAVE)");
					log_msg("ERROR: Database could not be contacted. Switching to fail-over database!");
					UpdateSetting("SYNC_DISABLED_UNTIL", (date('U') + ($GLOBALS['SYNC_TIMEOUT'] * 60)));

				} else {

				}
			} else {
					qlog(INFO, "Connection error");
					$GLOBALS['FO_DB_IS_DOWN'] = true;
					return(false);
			}
		} else {
			qlog(INFO, "Connection error");
			$GLOBALS['FO_DB_IS_DOWN'] = true;
			return(false);
		}

		if ($GLOBALS['title']) {
			$GLOBALS['repository_nr'] = $repository_nr;
			qlog(INFO, "Connection succeeded");
			SetTIU("");
			if (is_numeric($GLOBALS['USERID'])) {
				InitUser();
			}
			return(true);
		} else {
			// No title means no business
			qlog(INFO, "Title error");
			return(false);
		}
	} else {
//		print "Help! Called without repository number. I'm clueless! [$repository_nr]";
		return(false);
	}
}
function CheckDB() {
	global $web, $short, $serr, $auto;
	unset($serr);
	SafeModeInterruptCheck();

	if ($_REQUEST['input']) {
		// OK two arrays of to-delete data were submitted.
		// Namely:
		// file_td	:	files to delete
		// cf_td 	:	custom fields to delete

		$file_td =		unserialize(base64_decode($_REQUEST['file_td']));
		$cf_td =		unserialize(base64_decode($_REQUEST['cf_td']));
		$cf_td_cust =	unserialize(base64_decode($_REQUEST['cf_td_cust']));
		$journal_td =	unserialize(base64_decode($_REQUEST['journal_td']));
		
		$calendar_td =	unserialize(base64_decode($_REQUEST['calendar_td']));
		$deldoubles =	unserialize(base64_decode($_REQUEST['deldoubles']));

		$queries = array();

		foreach ($file_td as $file) {
			array_push($queries,"DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE fileid='" . mres($file) . "'");
			array_push($queries,"DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "blobs WHERE fileid='" . mres($file) . "'");
		}

		if (!$given_query) { $given_query = array(); }

		if (sizeof($given_query>0)) {
			foreach ($given_query as $row) {
				array_push($queries,$row);
			}
		}
		//print_r($queries);

		$queries = array_merge($queries, $deldoubles);

		for ($x=0;$x<sizeof($tables);$x++) {
			array_push($queries, "OPTIMIZE TABLE " . $tables[$x]);
		}

		foreach($queries as $sql) {
			mcq($sql,$db);
		}



		print "<pre>" . sizeof($queries) . " database queries executed.\n</pre>";

	} else {
		IntermediateDatabaseUpgrade();
		if ($web) {
		    print "<pre>";
		}
		if (!isset($_REQUEST['CheckColumnsOnly'])) {

			$sql = "SELECT COUNT(eid) FROM " . $GLOBALS['TBL_PREFIX'] . "entity";
			$result = mcq($sql,$db);
			$result = mysql_fetch_array($result);
			$maxid = $result[0];
			$op=1;
			$sql = "SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='TITLE'";
			$result = mcq($sql,$db);
			$result = mysql_fetch_array($result);
			$tit = $result[0];
			mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET deleted='n' WHERE deleted=''", $db);
			print "\nStarting recursive reference check - repository \"" . $tit . "\".\n";

			if (!$short) print "Checking entity user references...\n";
			$eids = array();
			$sql = "SELECT eid,CRMcustomer,owner,assignee FROM " . $GLOBALS['TBL_PREFIX'] . "entity";
			$ret = mcq($sql,$db);
			while ($row = mysql_fetch_array($ret)) {
				if (GetUserName($row['owner']) == "n/a" && $row['owner']!="2147483647") {
					//print "\nUser     reference error (non-existing user): " . $row['owner'] . "\n";
					$err = 1;
				}
				if (GetUserName($row['assignee']) == "n/a" && $row['assignee']!="2147483647") {
					//print "\nUser     reference error (non-existing user): " . $row['assignee'] . "\n";
					$err = 1;
				}
				array_push($eids,$row['eid']);
				if (!$web) {
					if (!$short) print "\015" . $op . "/" . $maxid;
					$op++;
				}

			}
			if (!$err) {
				if (!$short) print "\nUser references OK\n\n";
			}
			unset($err);

			$ftd = array();

			$op=1;
			$oldpc=0;
			$sql = "SELECT count(*) FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid!='0' AND type='entity'";
			$result = mcq($sql,$db);
			$row = mysql_fetch_array($result);
			$top = $row[0];
			if (!$short) print "\n\nChecking file references (entity)...\n";



			$sql = "SELECT koppelid,fileid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid!='0' AND type='entity'";
			$result = mcq($sql,$db);
			$pc1 = $top/100; // 1% van totaal
			while ($row = mysql_fetch_array($result)) {
				//print "Check " . $row['koppelid'] . "\n";
				if (!$web) {
					if (!$short) print "\015" . $op . "/" . $top;
					$op++;
				}
				$sql = "SELECT eid from " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($row['koppelid']) . "'";
				$result1 = mcq($sql,$db);
				$result1 = mysql_fetch_array($result1);
				if (!$result1[0]) {
					//print "File  reference error for fileid " . fillout($row['fileid'],6) . "! Entity " . fillout($row['koppelid'],6) . " doesn't exist..\n";
					$err=1;
					$serr = 1;
					array_push($ftd,$row['fileid']);
				}
			}
			if (!$short) print "\n";
			$sql = "SELECT count(*) FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid!='0' AND type='cust'";
			$result = mcq($sql,$db);
			$row = mysql_fetch_array($result);
			$top = $row[0];
			if (!$short) print "Checking file references (customer)...\n";
			$sql = "SELECT koppelid,fileid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE koppelid!='0' AND type='cust'";
			$result = mcq($sql,$db);
			$pc1 = $top/100; // 1% van totaal
			$op = 0;
			while ($row = mysql_fetch_array($result)) {
				if (!$web) {
					if (!$short) print "\015" . $op . "/" . $top;
					$op++;
				}
				$sql = "SELECT id from " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($row['koppelid']) . "'";
				$result1 = mcq($sql,$db);
				$result1 = mysql_fetch_array($result1);
				if (!$result1[0]) {
					//print "File  reference error for customer fileid " . fillout($row['fileid'],6) . "! Entity " . fillout($row['koppelid'],6) . " doesn't exist..\n";
					$err=1;
					$serr = 1;
					array_push($ftd,$row['fileid']);
				}
			}

			if (!$short) print "\n";
			if (!$err) {
				if (!$short) print "File references OK\n\n";
				if (!$short) print "Checking calendar references...\n";
			} else {
				if (!$short) print "Found errors in file references\n\n";
				if (!$short) print "Checking calendar references...\n";
			}
			unset($err);
			$op=1;

		
			unset($err);
			$blobids = array();
			$binids = array();
			if (!$short) print "\nChecking binary large object references (blobs table)...\n";
			$res = mcq("SELECT fileid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles",$db);
			while ($row = mysql_fetch_array($res)) {
				array_push($binids,$row['fileid']);
			}
			$res = mcq("SELECT fileid FROM " . $GLOBALS['TBL_PREFIX'] . "blobs",$db);
			while ($row = mysql_fetch_array($res)) {
				array_push($blobids,$row['fileid']);
			}
			foreach ($blobids AS $id) {
				$xc++;
				if (!$web) {
					if (!$short) print "\015" . $xc . "/" . sizeof($blobids);
				}
				if (!in_array($id,$binids)) {
					if (!$short) print "\nFile ID $id exists in BLOB table, but it doesn't exist in BIN table (binary content will be deleted)\n";
					array_push($ftd,$id);
					$err=1;
					$serr=1;
				}
			}
			if (!$short) print "\nChecking binary large object references (binfiles table)...\n";
			foreach ($binids AS $id) {
				$xxc++;
				if (!$web) {
					if (!$short) print "\015" . $xxc . "/" . sizeof($blobids);
				}
				if (!in_array($id,$blobids)) {
					if (!$short) print "\nFile ID $id exists in BIN table, but it doesn't exist in BLOB table (file will be empty)\n";
				}
			}
			if (!$short) print "\n";

			if (!$short) print "Checking for double language tags....";
			$res1 = mcq("SELECT DISTINCT(CONCAT(LANGID,';',TEXTID)) AS ErrorneousValues FROM " . $GLOBALS['TBL_PREFIX'] . "languages GROUP BY ErrorneousValues HAVING COUNT(CONCAT(LANGID,TEXTID)) > 1",$db);

			$deldoubles = array();
			while ($res2 = mysql_fetch_array($res1)) {
				$item = explode(";", $res2[0]);
				print "Language " . $item[0] . ", tag " . $item[1] . " - double entry. Oldest must be deleted.\n";
					if ($item[0]) {
						$sql = "SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "languages WHERE LANGID='" . mres($item[0]) . "' AND TEXTID='" . mres($item[1]) . "'";
						$all = mcq($sql, $db);
						$delnums = array();
						while ($row = mysql_fetch_array($all)) {
							array_push($delnums, $row[0]);
						}
					}
				@sort($delnums);

					array_push($deldoubles,"DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "languages WHERE LANGID='" . mres($item[0]) . "' AND TEXTID='" . mres($item[1]) . "' AND id<" . $delnums[sizeof($delnums)-1] . " AND id!=" . $delnums[sizeof($delnums)-1]);
					$doubles++;
					$serr = 1;

			}

			if (!$short) print "\n" . sizeof($deldoubles) . " double entries found. Oldest values will be deleted.\n";

			qlog(INFO, "Checking database");
		}
		$efs = GetExtraFields(false, true, true, true); // Get *all* fields including buttons and don't use cache while at it

		// Check if all fields are represented in the CRM entity table
		print "Checking extra field columns...\n";
		$tmp = db_GetArray("SHOW FIELDS FROM " . $GLOBALS['TBL_PREFIX'] . "entity");

		foreach ($efs AS $ef) {
			$found = "";
			$foundname = "";
			foreach ($tmp AS $row) {
				if ($row['Field'] == "EFID" . $ef['id']) {
					$found = true;
					$foundname = $row['Field'];
				}
			}
			if (!$found) {
				if ($ef['fieldtype'] == "date/time") {
					$ft = "DATETIME";
				} else {
					$ft = "LONGTEXT";
				}
				mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . "entity ADD EFID" . $ef['id'] . " " . $ft . " NOT NULL", $db);
				print "Fixed missing column in entity table for field EFID" . $ef['id'] . "\n";
			} else {
				//print "OK: Field EFID" . $ef['id'] . " found in entity table structure: " . $foundname . "!\n";
			}
		}
		print "OK.\n";
		print "Checking extra customer field columns...\n";
		$efs = GetExtraCustomerFields(false); // Get customer fields

		// Check if all fields are represented in the CRM customer table

		$tmp = db_GetArray("SHOW FIELDS FROM " . $GLOBALS['TBL_PREFIX'] . "customer");
		foreach ($efs AS $ef) {
			$found = "";
			foreach ($tmp AS $row) {
				if ($row['Field'] == "EFID" . $ef['id']) {
					$found = true;
					//continue;
				}
			}
			if (!$found) {
				if ($ef['fieldtype'] == "date/time") {
					$ft = "DATETIME";
				} else {
					$ft = "LONGTEXT";
				}
				mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . "customer ADD EFID" . $ef['id'] . " " . $ft . " NOT NULL", $db);
				print "Fixed missing column in customer table for field EFID" . $ef['id'] . "\n";
			}
		}
		print "OK.\n";
		// Check if all fields are represented all flextables
		
		$list = GetFlexTableDefinitions();
		
		foreach ($list AS $flextable) {
			print "Checking extra flextable " . $flextable['recordid'] . " field columns...\n";
			$efs = GetExtraFlextableFields($flextable['recordid']);

			$tmp = db_GetArray("SHOW FIELDS FROM " . $GLOBALS['TBL_PREFIX'] . "flextable"  . $flextable['recordid']);
			foreach ($efs AS $ef) {
				$found = "";
				foreach ($tmp AS $row) {
					if ($row['Field'] == "EFID" . $ef['id']) {
						$found = true;
						//continue;
					}
				}
				if (!$found) {
					if ($ef['fieldtype'] == "date/time") {
						$ft = "DATETIME";
					} else {
						$ft = "LONGTEXT";
					}
					mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextable['recordid'] . " ADD EFID" . $ef['id'] . " " . $ft . " NOT NULL", $db);
					print "Fixed missing column in flextable " . $flextable['recordid'] . " for field EFID" . $ef['id'] . "\n";
				}
			}
			print "OK.\n";
		}

		if (!isset($_REQUEST['CheckColumnsOnly'])) {
			print "\n\nFiles which can be deleted: " . sizeof($ftd) . "\n";
	//		print "Custom enitity field sets which can be deleted: " . sizeof($cftd) . "\n";
	//		print "Custom customer fields sets which can be deleted: " . sizeof($cftdcust) . "\n";
			print "Journal sets which can be deleted: " . sizeof($journaltd) . "\n";


			print "Unused language tags which will be deleted: " . sizeof($deldoubles) . "\n";


			if (!$web && !$serr) {
				print "\nNothing to do. Bye!\n\n";
				return("exit");
			}

			if ($web) {
				print "</pre>";

				if ($serr) {
					print "<form id='cont' method='post' action=''><div class='showinline'>";
					print "<input name='file_td' type='hidden' value='" . base64_encode(serialize($ftd)) . "'>";
					print "<input name='cf_td' type='hidden' value='" . base64_encode(serialize($cftd)) . "'>";
					print "<input name='cf_td_cust' type='hidden' value='" . base64_encode(serialize($cftdcust)) . "'>";
					print "<input name='journal_td' type='hidden' value='" . base64_encode(serialize($journaltd)) . "'>";

					print "<input name='calendar_td' type='hidden' value='" . base64_encode(serialize($calendartd)) . "'>";
					print "<input name='deldoubles' type='hidden' value='" . base64_encode(serialize($deldoubles)) . "'>";

					print "<input name='input' type='hidden' value='1'>";
					print "<input name='checkdb' type='hidden' value='1'>";
					print "<input type='submit' value='Delete excess data (back-up first)'></div></form>";
				} else {
					print "No errors found which can be fixed automatically.<br><br>";

				}
				//EndHTML();
			} else {
				if (!$auto) {
					print "Return status: $serr\n";
					print "\nDo you want to delete these (obviously unreachable) records? [y|n]\n" . $GLOBALS['PRODUCT'] . " > ";
					$a = readln();
					if (strtoupper($a)!='Y') {
						print "\nOK\n";
						return("exit");
					}
					unset($serr);
					unset($doubles);
					//unset($deldoubles);
				}


				$queries = array();

				SetTIU("");
				$tables = $GLOBALS['TABLES_IN_USE'];

				foreach ($ftd as $file) {
					array_push($queries,"DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE fileid='" . mres($file) . "'");
					array_push($queries,"DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "blobs WHERE fileid='" . mres($file) . "'");
				}
				foreach ($journaltd as $jtd) {
					array_push($queries,"DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "journal WHERE eid='" . mres($jtd) . "'");
				}
				$queries = array_merge($queries, $deldoubles);
				//print_r($queries);
				foreach($queries as $sql) {
					mcq($sql,$db);
					//print $sql . "\n\n";
					$sqlc++;
					if (!$web) print "Executing queries, please be patient. (" . $sqlc . "/" . sizeof($queries) . ")\015";
				}
				print "\n" . sizeof($queries) . " database queries executed.\n";

				unset($queries);

				for ($x=0;$x<sizeof($tables);$x++) {
					if (!$web) print "\015Optimizing tables..(" . $x . "/" . sizeof($tables) . ")";
					$sql = "OPTIMIZE TABLE " . $tables[$x];
					mcq($sql,$db);
					//print "Optimizing table  ... " . $tables[$x] . "\n";
				}
				print " ... done\n\n";
				log_msg("Database checked. " . sizeof($queries) . " delete statements executed","");
				qlog(INFO, "Database checked. " . sizeof($queries) . " delete statements executed");

			}
		}
	} // End if not submitted
} //end function CheckDB

function UpdateAllCacheTables($db_to_process) {
		global $user, $pass, $host, $database,$table_prefix, $fc, $lang;
		if (sizeof($pass)>0) {
			for ($r=0;$r<64;$r++) {
					if ($db_to_process == $database[$r] || $db_to_process == "") {
						if ($db = DB_Connect($r, false)) {

								$GLOBALS['TBL_PREFIX'] = $table_prefix[$r];
								if ($GLOBALS['TBL_PREFIX']=="")  $GLOBALS['TBL_PREFIX'] ="CRM";

								do_language();
								//print_r($lang);
								print "\nUpdating access cache tables on database " . $database[$r] . ":\n";
								if (!$fc) {
									print "\nUpdating access cache tables on database " . $database[$r] . ":\n";
									UpdateCacheTables(true,false);
								} else {
									print "\nUpdating entity form cache on database " . $database[$r] . ":\n";
									UpdateEntityFormCache(true,false);
								}

							} else {
								print "\n" . $r . "Host: " . $host[$r] . " Database: " . $database[$r] . " - Couldn't select database - Database could not be contacted\n";
							}

					} else {
						//print "\nSkipping " . $database[$r] . " on request.\n";
					}
				}
		}
}
function CheckForInstalledPatches($script_name) {
	if ($script_name == "modules.php") {
		// do nothing, is not good for your web server :-)
	} else {


		qlog(INFO, "Checking for patches for " . $script_name);
		$mod = db_GetRow("SELECT mid FROM " . $GLOBALS['TBL_PREFIX'] . "modules WHERE module_name='patch_" . $GLOBALS['VERSION'] . "_" . $script_name ."'");

		if ($mod['mid']) {
			$uri = "ExecInsModule=" . $mod['mid'] . "&amp;";
			foreach ($_GET AS $row1=>$row2) {
				$uri .= $row1 . "=" . $row2 . "&amp;";
			}
			foreach ($_POST AS $row1=>$row2) {
				$uri .= $row1 . "=" . $row2 . "&amp;";
			}
			?>
			<script type="text/javascript">
				document.location = 'modules.php?<?php echo $uri;?>';
			</script>
			<?php
		}
	}

}


function GetFileEarlierVersions($fileid) {
		$x = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE version_belonging_to='" . mres($fileid) . "' ORDER BY timestamp_last_change DESC, fileid DESC");
		return($x);
}


function FlextableSearch($table, $search) {
	$ftf = GetExtraFlexTableFields($table);
	$filterlist = explode(" ", trim($search));
	foreach ($filterlist AS $filter) {
		if (substr($filter,0,1) == "-") {
			$invert = " NOT ";
			$filter = substr($filter, 1, strlen($filter)-1);
		} else {
			$invert = "";
		}
		unset($nf);
		if ($firstdone) $and_ins .= " AND ";
		
		$and_ins .= " ((";

		$firstdone = true;
		foreach ($ftf AS $field) {

			if ($nf) {
				if ($invert) {
					$and_ins .= " AND ";
				} else {
					$and_ins .= " OR ";
				}
			}
			$join++;
			if ($field['fieldtype'] == "User-list of all CRM-CTT users" || $field['fieldtype'] == "User-list of administrative CRM-CTT users" || strstr($field['fieldtype'] , "Users of profile ")) {
				$joins .= " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "loginusers AS tb" . $join . " ON (" . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . ".EFID" . $field['id'] . "=tb" . $join . ".id OR tb" . $join . ".id IS NULL)";
				$and_ins .= " tb" . $join . ".FULLNAME LIKE '%" . mres($filter) . "%'";
				$nf = true;
			} elseif ($field['fieldtype'] == "List of all active customers") {
				$joins .= " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "customer AS tb" . $join . " ON (" . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . ".EFID" . $field['id'] . "=tb" . $join . ".id OR tb" . $join . ".id IS NULL)";
				$and_ins .= " tb" . $join . ".custname " . $invert . " LIKE '%" . mres($filter) . "%'";
				$nf = true;
			} else {
				$and_ins .= " EFID" . $field['id'] . " " . $invert . " LIKE '%" . mres($filter) . "%'";
				$nf = true;
			}

		}
		$and_ins .= ")";
		
		$and_ins .= " OR " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . ".recordid " . $invert . " IN (SELECT koppelid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE (MATCH(extractedascii) AGAINST ('%" . mres($filter) . "%') OR " . $GLOBALS['TBL_PREFIX'] . "binfiles.filename  LIKE '%" . mres($filter) . "%') AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.type='flextable" . $table . "')";

		
		$and_ins .= ")";
	}






	$sql = "SELECT *," . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . ".recordid AS BASE_RECORD, " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . ".refer AS BASE_REFER, " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . ".readonly AS BASE_READONLY, " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . ".timestamp_last_change AS BASE_TIMESTAMP_LAST_CHANGE FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . $joins;

	if ($ref && $and_ins) {
		$and_ins .= " AND " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . ".refer='" . mres($ref) . "'";
	} elseif ($ref) {
		$and_ins .= " " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . ".refer='" . mres($ref) . "'";
	}
	if ($and_ins) {
		$sql .= " WHERE " . $and_ins . " AND (deleted='n' OR deleted IS NULL)";
	} else {
		$sql .= " WHERE (deleted='n' OR deleted IS NULL) ";
	}
	return($sql);
}
function NormalCustomerSearch($fs, $search_through_underlying_flextables=true, $include_inactive=false) {
			if (!$include_inactive) {
				if ($GLOBALS['ShowInactiveCustomers'] == "Yes") {
					$include_inactive = true;
				}
			}
			$fslist = explode(" ", $fs);
			$query = "SELECT " . $GLOBALS['TBL_PREFIX'] . "customer.* FROM " . $GLOBALS['TBL_PREFIX'] . "customer  LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "loginusers AS uj1 ON (" . $GLOBALS['TBL_PREFIX'] . "customer.customer_owner = uj1.id OR uj1.id IS NULL) %%JOINS%% WHERE ";
			
			if ($include_inactive == "Yes" || $_REQUEST['fs'] != "") {
				$query .=  "(" . $GLOBALS['TBL_PREFIX'] . "customer.active='yes' OR " . $GLOBALS['TBL_PREFIX'] . "customer.active='no')";
			} else {
				$query .= "(" . $GLOBALS['TBL_PREFIX'] . "customer.active='yes')";
			}

			foreach ($fslist AS $fs) {
				if (substr($fs,0,1) == "-") {
					$invert = " NOT ";
					$fs = substr($fs, 1, strlen($fs)-1);
				} else {
					$invert = "";
				}
				
				$fd = false;
				$query .= " AND ((";
				$customerdefaultfields = explode(" ", "custname contact contact_title contact_phone contact_email cust_address cust_remarks cust_homepage");
				foreach ($customerdefaultfields AS $field) {
						if ($fd) {
							if ($invert) {
								$query .= " AND ";
							} else {
								$query .= " OR ";
							}
						}
						$query .= " " . $GLOBALS['TBL_PREFIX'] . "customer." . $field . " " . $invert . " LIKE '%" . mres($fs) . "%' ";
						$fd = true;

				}

				$fields = GetExtraCustomerFields();

				foreach ($fields AS $f) {
					$join++;
					if ($fd) {
						if ($invert) {
							$query .= " AND ";
						} else {
							$query .= " OR ";
						}
					}			
					if ($f['fieldtype'] == "User-list of all CRM-CTT users" || $f['fieldtype'] == "User-list of administrative CRM-CTT users" || strstr($f['fieldtype'] , "Users of profile ")) {
						$cjoins .= " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "loginusers AS tb" . $join . " ON (" . $GLOBALS['TBL_PREFIX'] . "customer.EFID" . $f['id'] . "=tb" . $join . ".id OR tb" . $join . ".id IS NULL)";
						$query .= " tb" . $join . ".FULLNAME " . $invert . " LIKE '%" . mres($fs) . "%'";
						$nf = true;
					} elseif ($f['fieldtype'] == "List of all active customers") {
						$cjoins .= " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "customer AS tb" . $join . " ON (" . $GLOBALS['TBL_PREFIX'] . "customer.EFID" . $f['id'] . "=tb" . $join . ".id OR tb" . $join . ".id IS NULL)";
						$query .= " tb" . $join . ".custname " . $invert . " LIKE '%" . mres($fs) . "%'";
						$nf = true;
					} else {
						$query .= " " . $GLOBALS['TBL_PREFIX'] . "customer.EFID" . $f['id'] . " " . $invert . " LIKE '%" . mres($fs) . "%'";
						$nf = true;
					}

					//$query .= $field . " LIKE '%" . mres($_REQUEST['fs']) . "%'";
					$fd = true;
				}
				$query .= ")";

				if ($GLOBALS['DISABLE_BINARY_SEARCH'] != "Yes") {
					if ($invert) {
						$query .= " AND ";
					} else {
						$query .= " OR ";
					}
					$query .= " " . $GLOBALS['TBL_PREFIX'] . "customer.id " . $invert . " IN (SELECT koppelid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE " . $GLOBALS['TBL_PREFIX'] . "binfiles.filename  LIKE '%" . mres($fs) . "%'  AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.type='cust')";
					if ($invert) {	
						$query .= " AND ";
					} else {
						$query .= " OR ";
					}
					$query .= " " . $GLOBALS['TBL_PREFIX'] . "customer.id " . $invert . " IN (SELECT koppelid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE " . $GLOBALS['TBL_PREFIX'] . "binfiles.type='cust' AND MATCH(extractedascii) AGAINST ('%" . mres($fs) . "%'))";

				}

				if ($search_through_underlying_flextables) {
					// Flextable references
					$t = GetExtraCustomerFields();
					foreach ($t AS $f) {

							if ($f['fieldtype'] == "Reference to FlexTable") {
								if ($nf) {
									if ($invert) {
										$query .= " AND ";
									} else {
										$query .= " OR ";
									}
								}
								$join++;
								$cjoins .= " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "flextable" . $f['options'] . " AS ft" . $join . " ON (" . $GLOBALS['TBL_PREFIX'] . "customer.EFID" . $f['id'] . "=ft" . $join . ".recordid OR ft" . $join . ".recordid IS NULL) ";

								$tmp = GetExtraFlextableFields($f['options']);
								$nnf = false;
								foreach ($tmp AS $field) {
									if ($nnf) {
										if ($invert) {
											$query .= " AND ";
										} else {
											$query .= " OR ";
										}
									}

									$query .= " ft" . $join . ".EFID" . $field['id'] . "  " . $invert . " LIKE '%" . mres($fs) . "%'";
									$nnf = true;
								}
								$nf = true;
							} 


					}

					

					$met = GetFlexTableDefinitions();
					foreach ($met AS $me) {

						if ($me['refers_to'] == "customer" && $me['orientation'] == "one_entity_to_many") {
		
							
							//$query .= " " . $GLOBALS['TBL_PREFIX'] . "customer.id IN (SELECT refer FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $me['recordid'] . " WHERE ";
							$tmpq = "SELECT DISTINCT(refer) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $me['recordid'] . " WHERE 1=0 OR";
							$tmp = GetExtraFlextableFields($me['recordid']);
							$nnf = false;
							foreach ($tmp AS $field) {
								if ($nnf) {
									if ($invert) {
										$tmpq .= " AND ";
									} else {
										$tmpq .= " OR ";
									}
								}

								$tmpq .= " " . $GLOBALS['TBL_PREFIX'] . "flextable" . $me['recordid'] . ".EFID" . $field['id'] . "  " . $invert . " LIKE '%" . mres($fs) . "%'";
								$nnf = true;
							}
							if ($nnf) {
								if ($invert) {
									$tmpq .= " AND ";
								} else {
									$tmpq .= " OR ";
								}
							}
							$tmpq .= " recordid IN (SELECT koppelid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE (MATCH(extractedascii) AGAINST ('%" . mres($fs) . "%') OR " . $GLOBALS['TBL_PREFIX'] . "binfiles.filename  LIKE '%" . mres($fs) . "%')  AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.type='flextable" . $me['recordid'] . "' )";
							$nf = true;

							// Pre-selecting is FAR MORE speedy than a join
							$rids = db_GetFlatArray($tmpq);

							$nnnf = false;

							if (sizeof($rids) > 0) {
								if ($nf) {
									if ($invert) {
										$query .= " AND ";
									} else {
										$query .= " OR ";
									}
								}
								$query .= " " . $GLOBALS['TBL_PREFIX'] . "customer.id IN (";
								foreach ($rids AS $uli) {
									if ($nnnf) $query .= ",";
									$query .= $uli;
									$nnnf = true;
								}
								$query .= ")";
							}

							
						
						}
					}
				}

				$query .= ")";
			}

			$query = str_replace("%%JOINS%%", $cjoins, $query);

			return($query);
}


function NormalSearch($includedeleted, $wildsearch=false, $force_speed=false, $search_through_underlying_flextables=true) {
	global $lang;

	$cl = GetClearanceLevel();


	if ($includedeleted == true && !in_array("NoViewDeleted", $cl)) {
		$del_ins = "(" . $GLOBALS['TBL_PREFIX'] . "entity.deleted='n' OR " . $GLOBALS['TBL_PREFIX'] . "entity.deleted='y') ";
		qlog(INFO, "Also searching through deleted entities");
	} else {
		$del_ins = $GLOBALS['TBL_PREFIX'] . "entity.deleted!='y' ";
		qlog(INFO, "Only searching through non-deleted entities");
	}

	//print_r($_REQUEST);

	$and_args		= array();
	$or_args		= array();
	$result			= array();
	$result_entity	= array();
	$result_ef		= array();

	if (!$force_speed) {

		$human_readable_filter = array();

		if ($_REQUEST['owner'] && $_REQUEST['owner'] != "all") {
			array_push($and_args, "owner=" . $_REQUEST['owner']);
			$entity_element = true;
			$human_readable_filter[] = $lang['owner'] . ": " . GetUserName($_REQUEST['owner']);
		}
		if ($_REQUEST['assignee'] && $_REQUEST['assignee'] != "all") {
			array_push($and_args, "assignee=" . $_REQUEST['assignee']);
			$entity_element = true;
			$human_readable_filter[] = $lang['assignee'] . ": " . GetUserName($_REQUEST['assignee']);
		}
		if ($_REQUEST['CRMcustomer'] && $_REQUEST['CRMcustomer'] != "all") {
			array_push($and_args, "CRMcustomer=" . $_REQUEST['CRMcustomer']);
			$human_readable_filter[] = $lang['customer'] . ": " . GetCustomerName($_REQUEST['CRMcustomer']);
			$entity_element = true;
		}
		if ($_REQUEST['duedate'] && $_REQUEST['duedate'] != "n/a") {
			$duedatesql = NLDate2INTLDate($_REQUEST['duedate']);
			if ($_REQUEST['duedate_operand'] == "GT") {
				array_push($and_args, "sqldate > '" . $duedatesql . "'");
				$human_readable_filter[] = $lang['duedate'] . " &gt; " . $_REQUEST['duedate'];
			} elseif ($_REQUEST['duedate_operand'] == "LT") {
				array_push($and_args, "sqldate < '" . $duedatesql . "'");
				$human_readable_filter[] = $lang['duedate'] . " &lt; " . $_REQUEST['duedate'];
			} else {
				array_push($and_args, "sqldate = '" . $duedatesql . "'");
				$human_readable_filter[] = $lang['duedate'] . ": " . $_REQUEST['duedate'];
			}
			array_push($and_args, "sqldate != ''");
			array_push($and_args, "sqldate != '3003-01-01'"); // Yes, dirty!
			$entity_element = true;
		}
		if ($_REQUEST['startdate'] && $_REQUEST['startdate'] != "n/a") {
			$startdatesql = NLDate2INTLDate($_REQUEST['startdate']);
			if ($_REQUEST['startdate_operand'] == "GT") {
				array_push($and_args, "sqlstartdate > '" . $startdatesql . "'");
				$human_readable_filter[] = $lang['startdate'] . " &gt; " . $_REQUEST['startdate'];
			} elseif ($_REQUEST['startdate_operand'] == "LT") {
				array_push($and_args, "sqlstartdate < '" . $startdatesql . "'");
				$human_readable_filter[] = $lang['startdate'] . " &lt; " . $_REQUEST['startdate'];
			} else {
				array_push($and_args, "sqlstartdate = '" . $startdatesql . "'");
				$human_readable_filter[] = $lang['startdate'] . ": " . $_REQUEST['duedate'];
			}
			array_push($and_args, "sqlstartdate != ''");
			array_push($and_args, "sqlstartdate != '3003-01-01'"); // Yes, dirty!
			$entity_element = true;
		}
		if ($_REQUEST['status']) {
			$add = " (";
			foreach ($_REQUEST['status'] AS $stat) {
				if ($t) {
					$add .= " OR ";
				}
				$add .= "status = '" . mres($stat) . "'";
				$t = true;
			}
			$add .= ")";
			$entity_element = true;
			array_push($and_args, $add);

			unset($add);
			unset($t);
		}
		if ($_REQUEST['prio']) {
			$add = " (";
			foreach ($_REQUEST['prio'] AS $prio) {
				if ($t) {
					$add .= " OR ";
				}
				$add .= "priority = '" . mres($prio) . "'";
				$t = true;
			}
			$add .= ")";
			$entity_element = true;
			array_push($and_args, $add);

			unset($add);
			unset($t);

		}

		if ($_REQUEST['category'] && $_REQUEST['category'] != "all") {
			array_push($and_args, "category LIKE '%" . $_REQUEST['category'] ."%'");
			$entity_element = true;
			$human_readable_filter[].= $lang['category'] . " ~ \"" . $_REQUEST['category'] . "\"";
		}
		if ($_REQUEST['creation_date'] && $_REQUEST['creation_date'] != "n/a") {
			$cdate =  NLDate2INTLDate($_REQUEST['creation_date']);
			if ($_REQUEST['creation_date_operand'] == "GT") {
				array_push($and_args, "cdate > '" . $cdate . "'");
			} elseif ($_REQUEST['creation_date_operand'] == "LT") {
				array_push($and_args, "cdate < '" . $cdate . "'");
			} else {
				array_push($and_args, "cdate = '" . $cdate . "'");
			}
			array_push($and_args, "cdate != ''");
			$entity_element = true;
		}
		$t = GetExtraFields();
		foreach ($t AS $field) {
			if ($_REQUEST['EFID' . $field['id']] && $_REQUEST['EFID' . $field['id']] != "all") {
				array_push($and_args, " EFID" . $field['id'] . " LIKE '%" . $_REQUEST['EFID' . $field['id']] . "%'");
				$human_readable_filter[] = GetExtraFieldName($field['id']) . ": \"" . $_REQUEST['EFID' . $field['id']] . "\"";
				$entity_element = true;
			}
		}
		

	} else {// end if !force_speed
		//$entity_element = true;
	}


	if ($wildsearch) {
				
			$human_readable_filter[] = strtolower($lang['mustcontain']) . ": " . $_REQUEST['wildsearch'];
			if ($wildsearch) {
				$ws = ($wildsearch);
			} else {
				$ws = ($_REQUEST['wildsearch']);
			}

			$wslist = explode(" ", trim($ws)); // make it an array
			$firstdone = "";

			$ws_query = array();
			$qc = 0;
			
			$entityfields = array();
			$tmp = GetExtraFields();
			foreach ($tmp AS $ef) {
				$entityfields[] = "EFID" . $ef['id'];
			}
			$entityfields[] = "category";
			$entityfields[] = "content";

			foreach ($wslist AS $ws) {

				if (substr($ws,0,1) == "-") {
					$invert = " NOT ";
					$ws = substr($ws, 1, strlen($ws)-1);
				} else {
					$invert = "";
				}
				

				$firstdone = true;
				
				$nf = false;

				foreach ($entityfields AS $f) {

					if ($f != "table" && !in_array($f, $skip_fields)) {
						
						if ($nf) {
							if ($invert) {
								$ws_query[$qc] .= " AND ";
							} else {
								$ws_query[$qc] .= " OR ";
							}
						}
						$ws_query[$qc] .= " " . $GLOBALS['TBL_PREFIX'] . "entity." . $f . " " . $invert . " LIKE '%" . mres($ws) . "%' ";
						$nf = true;
					}
				}
				$customerdefaultfields = explode(" ", "custname contact contact_title contact_phone contact_email cust_address cust_remarks cust_homepage");
				foreach ($customerdefaultfields AS $field) {
						if ($invert) {
							$ws_query[$qc] .= " AND ";
						} else {
							$ws_query[$qc] .= " OR ";
						}
						$ws_query[$qc] .= " " . $GLOBALS['TBL_PREFIX'] . "customer." . $field . "  " . $invert . " LIKE '%" . mres($ws) . "%' ";
						$fd = true;

				}

				$t = GetExtraCustomerFields();

				foreach ($t AS $f) {

						if ($nf) {
							if ($invert) {
								$ws_query[$qc] .= " AND ";
							} else {
								$ws_query[$qc] .= " OR ";
							}
						}
						$join++;

						if ($f['fieldtype'] == "User-list of all CRM-CTT users" || $f['fieldtype'] == "User-list of administrative CRM-CTT users" || strstr($f['fieldtype'] , "Users of profile ")) {
							$cjoins .= " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "loginusers AS tb" . $join . " ON (" . $GLOBALS['TBL_PREFIX'] . "customer.EFID" . $f['id'] . "=tb" . $join . ".id OR tb" . $join . ".id IS NULL)";
							$ws_query[$qc] .= " tb" . $join . ".FULLNAME  " . $invert . " LIKE '%" . mres($ws) . "%'";
							$nf = true;
						} elseif ($f['fieldtype'] == "List of all active customers") {
							$cjoins .= " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "customer AS tb" . $join . " ON (" . $GLOBALS['TBL_PREFIX'] . "customer.EFID" . $f['id'] . "=tb" . $join . ".id OR tb" . $join . ".id IS NULL)";
							$ws_query[$qc] .= " tb" . $join . ".custname  " . $invert . " LIKE '%" . mres($ws) . "%'";
							$nf = true;
						} else {
							$ws_query[$qc] .= " " . $GLOBALS['TBL_PREFIX'] . "customer.EFID" . $f['id'] . " " . $invert . "  LIKE '%" . mres($ws) . "%'";
							$nf = true;
						}

						//$ws_query[$qc] .= "CRMcustomer." . $f . " LIKE '%" . mres($ws) . "%' ";
						
				}



				if ($search_through_underlying_flextables) {
					// Flextable references
					$t = GetExtraFields();
					foreach ($t AS $f) {

							if ($f['fieldtype'] == "Reference to FlexTable") {
								
								$tmp = GetExtraFlextableFields($f['options']);

								if (GetAttribute("flextable", "IncludeThisTableInSearchesFromParentTable", $f['options']) != "No") {
									
									if ($nf & count($tmp) > 0) {
										if ($invert) {
											$ws_query[$qc] .= " AND ";
										} else {
											$ws_query[$qc] .= " OR ";
										}
									}
									$join++;
									$joins .= " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "flextable" . $f['options'] . " AS ft" . $join . " ON (" . $GLOBALS['TBL_PREFIX'] . "entity.EFID" . $f['id'] . "=ft" . $join . ".recordid OR ft" . $join . ".recordid IS NULL) ";
									
									$nnf = false;
									foreach ($tmp AS $field) {
										if ($nnf) {
											if ($invert) {
												$ws_query[$qc] .= " AND ";
											} else {
												$ws_query[$qc] .= " OR ";
											}
										}

										$ws_query[$qc] .= " ft" . $join . ".EFID" . $field['id'] . "  " . $invert . " LIKE '%" . mres($ws) . "%'";
										$nnf = true;
									}
									$nf = true;
								}
							} 


					}
					$met = GetFlexTableDefinitions();
					foreach ($met AS $me) {

						if ($me['refers_to'] == "entity" && $me['orientation'] == "one_entity_to_many" && GetAttribute("flextable", "IncludeThisTableInSearchesFromParentTable", $me['recordid']) != "No") {
		
							if ($nf) {
								if ($invert) {
									$ws_query[$qc] .= " AND ";
								} else {
									$ws_query[$qc] .= " OR ";
								}
							}
							$ws_query[$qc] .= " " . $GLOBALS['TBL_PREFIX'] . "entity.eid IN (SELECT refer FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $me['recordid'] . " WHERE ";
							$tmp = GetExtraFlextableFields($me['recordid']);
							$nnf = false;
							foreach ($tmp AS $field) {
								if ($nnf) {
									if ($invert) {
										$ws_query[$qc] .= " AND ";
									} else {
										$ws_query[$qc] .= " OR ";
									}
								}

								$ws_query[$qc] .= " EFID" . $field['id'] . "  " . $invert . " LIKE '%" . mres($ws) . "%'";
								$nnf = true;
							}
							if ($invert) {
								$ws_query[$qc] .= " AND ";
							} else {
								$ws_query[$qc] .= " OR ";
							}
							$ws_query[$qc] .= "  " . $GLOBALS['TBL_PREFIX'] . "flextable" . $me['recordid'] . ".recordid IN (SELECT koppelid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE " . $GLOBALS['TBL_PREFIX'] . "binfiles.koppelid=" . $GLOBALS['TBL_PREFIX'] . "flextable" . $me['recordid'] . ".refer AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.type='flextable" . $me['recordid'] . "' AND (MATCH(extractedascii) AGAINST ('" . mres($ws) . "') OR " . $GLOBALS['TBL_PREFIX'] . "binfiles.filename  LIKE '%" . mres($ws) . "%') GROUP BY " . $GLOBALS['TBL_PREFIX'] . "binfiles.koppelid)";
							$ws_query[$qc] .= ")";

							//if ($invert) {
						//		$ws_query[$qc] .= " AND ";
						//	} else {
						//		$ws_query[$qc] .= " OR ";
						//	}
							//$ws_query[$qc] .= " eid " . $invert . " IN (SELECT koppelid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE " . $GLOBALS['TBL_PREFIX'] . "binfiles.filename  LIKE '%" . mres($ws) . "%'  AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.type='entity')";
							$nf = true;
						
						}
					}
				}
				
				
			//	if ($invert) {
			//		$ws_query[$qc] .= " AND ";
			//	} else {
			//		$ws_query[$qc] .= " OR ";
			//	}
				//$ws_query[$qc] .= " eid " . $invert . " IN (SELECT koppelid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE (MATCH(extractedascii) AGAINST ('%" . mres($fs) . "%') OR " . $GLOBALS['TBL_PREFIX'] . "binfiles.filename  LIKE '%" . mres($ws) . "%')  AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.type='entity')";
				
				if ($invert) {	
					$ws_query[$qc] .= " AND ";
				} else {
					$ws_query[$qc] .= " OR ";
				}
				
				$ws_query[$qc] .= "  " . $GLOBALS['TBL_PREFIX'] . "entity.eid " . $invert . " IN (SELECT koppelid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE " . $GLOBALS['TBL_PREFIX'] . "binfiles.koppelid=" . $GLOBALS['TBL_PREFIX'] . "entity.eid AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.type='entity' AND (" . $GLOBALS['TBL_PREFIX'] . "binfiles.filename LIKE '%" . mres($ws) . "%' OR MATCH(extractedascii) AGAINST ('" . mres($ws) . "')) GROUP BY " . $GLOBALS['TBL_PREFIX'] . "binfiles.koppelid)";

				$qc++;
			}
			$nf = "";
			foreach ($ws_query AS $q) {
				if ($nf) $query .= " AND ";
				$query .= "(" . $q . ")";
				$nf = true;
			}
			$ws_and = $query;
//			print "<h1>" . $ws_and . "</h1>";
	//		}

	}
	$joins .= "LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "loginusers AS uj1 ON (" . $GLOBALS['TBL_PREFIX'] . "entity.assignee = uj1.id OR uj1.id IS NULL) LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "loginusers AS uj2 ON (" . $GLOBALS['TBL_PREFIX'] . "entity.owner = uj2.id OR uj2.id IS NULL)";

	$entity_sql = "SELECT " . $GLOBALS['TBL_PREFIX'] . "entity.* FROM " . $GLOBALS['TBL_PREFIX'] . "entity " . $joins  . ", " . $GLOBALS['TBL_PREFIX'] . "customer ". $cjoins . " WHERE " . $del_ins . " AND " . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer = " . $GLOBALS['TBL_PREFIX'] . "customer.id AND (1=1 ";

	unset($first);
	foreach ($and_args AS $arg) {
			$entity_sql .= " AND ";
			$entity_sql .= $arg;
	}

	$entity_sql .= ") ";
	
	if ($query != "") {
		$entity_sql .= "AND (" . $query . ")  ";
	}

	

	$tmp = GetLastUserFilter();
	if (is_array($tmp['datefilter'])) {
		$aq = CreateSQLFromDateFilterArray($tmp['datefilter']);
		if ($aq != "") {
			$entity_sql .= " AND " . $aq;
		}

	}
	//$entity_sql .= " GROUP BY " . $GLOBALS['TBL_PREFIX'] . "entity.eid";
//	print "<h1>" . ($entity_sql) . "</h1>";
	
	$nf = false;
	foreach ($human_readable_filter AS $hrf) {
		$GLOBALS['HumanReadableFilterText'] .= ($nf) ? ", " : "";
		$GLOBALS['HumanReadableFilterText'] .= $hrf;
		$nf = true;
	}
	return($entity_sql);
}

function CalculateAllComputedExtraFields($includedeleted=true, $printprogress=false, $onlytable=false) {
	if (!$includedeleted) {
		$sqladd = " WHERE deleted != 'y'";
	}

	if ((!$onlytable || $onlytable == "entity") && HasComputedFields("entity")) {
		$sql = "SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity" . $sqladd;
		$res = mcq($sql, $db);
		
		while ($row = mysql_fetch_array($res)) {
			//print "\015 eid: " . $row['eid'] . "    ";
			if ($printprogress) print "\015" . date('r') . ": Entity fields... " . $row['eid'];
			CalculateComputedExtraFields($row['eid']);
		}
		if ($printprogress) print "\n";
	} elseif ($printprogress) {
		print "" . date('r') . ": Table 'entity' has no computed extra fields or needs to be ignored.\n";
	}
	if ((!$onlytable || $onlytable == "customer") && HasComputedFields("customer")) {
		$sql = "SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer";
		$res = mcq($sql, $db);
		
		while ($row = mysql_fetch_array($res)) {
			if ($printprogress) print "\015" . date('r') . ": Customer fields... " . $row['id'];
			CalculateComputedExtraCustomerFields($row['id']);
		}
		if ($printprogress) print "\n";
	} elseif ($printprogress) {
		print "" . date('r') . ": Table 'customer' has no computed extra fields or needs to be ignored.\n";
	}

	$ft = GetFlexTableDefinitions(false, false, true);
	foreach ($ft AS $flextable) {
		$flexid = $flextable['recordid'];
		if ((!$onlytable || $onlytable == $flexid) && HasComputedFields($flexid)) {
			$tb = db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flexid . " WHERE (readonly='no' OR readonly IS NULL) AND recordid != 0 AND (deleted='n' OR deleted IS NULL)");
			foreach ($tb AS $record) {
				if ($printprogress) print "\015" . date('r') . ": Flextable " . $flextable['tablename'] . " fields... " . $record;
				CalculateComputedExtraFields($record, $flexid);
			}
			if ($printprogress) print "\n";
		} elseif ($printprogress) {
			print "" . date('r') . ": Table 'flextable" . $flexid . "' has no computed extra fields or needs to be ignored.\n";
		}

	}
	CalculateComputedGroupAndUserFields();
}

function CalculateComputedFlextableFields($flextable, $recordid = false) {
	if (is_numeric($flextable)) {
		$ft = GetFlexTableDefinitions($flextable, false, true);
	} else {
		$ft = GetFlexTableDefinitions(false, false, true);
	}

	if (is_numeric($recordid)) {
		$sql_ins = " AND recordid=" . $recordid;
	}
	foreach ($ft AS $flextable) {
		$flexid = $flextable['recordid'];
		$tb = db_GetFlatArray("SELECT DISTINCT(recordid) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flexid . " WHERE (deleted='n' OR deleted IS NULL) " . $sql_ins);
		foreach ($tb AS $record) {
			$changed_records = CalculateComputedExtraFields($record, $flexid);
		}
	}
	return($changed_records);
}

//CalculateComputedExtraFields(454, 2);

function HasComputedFields($table) {
	$table = str_replace("flextable", "", $table);

	$res = db_GetValue("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE tabletype ='" . mres($table) . "' AND (fieldtype='Computation' OR fieldtype='Computation (ajax autorefresh)' AND deleted!='y')");

	if ($res > 0) {
		return true;
	}
	return(false);

}

function CalculateComputedExtraFields($eid, $flextable=false) {
	// This function looks for extra fields of type "computation" and will (re-)calculate
	// the resulting values (when the formula is valid)

	$changed_records = 0;

	if (!is_array($GLOBALS['PageCache']['CurrentlyCalculatingFields'])) {
		$GLOBALS['PageCache']['CurrentlyCalculatingFields'] = array();
	}


	if ((IsValidEID($eid) || $flextable) && $GLOBALS['PageCache']['CurrentlyCalculatingFields'][$eid . "-" . $flextable] != 1) {

		$GLOBALS['PageCache']['CurrentlyCalculatingFields'][$eid . "-" . $flextable] = 1;

		if ($flextable) {
			qlog(INFO, "Recalculating computed fields for flextable " . $flextable . ", record " . $eid);
			$ef = GetExtraFlexTableFields($flextable, false, true, true);
			$tabletype = "flextable" . $flextable;
			$id = "recordid";
			$t = GetFlexTableDefinitions($flextable);
		} else {
			qlog(INFO, "Recalculating computed fields for entity " . $eid);
			$ef = GetExtraFields(false, true, true, true);
			$tabletype = "entity";
			$id = "eid";
			$sql_add = ",timestamp_last_change=timestamp_last_change ";

		}

		foreach ($ef AS $extrafield) {
			if (($extrafield['fieldtype'] == "Computation" || $extrafield['fieldtype'] == "Computation (ajax autorefresh)")) { // bingo!
				$formula = $extrafield['options'];
				$orig_formula = $formula;

				if (strstr($formula, "@") || strstr($formula, "%")) { // If the formula contains @'s it probably contains tags

					$formula = ParseTemplateAliases($formula);

					if ($flextable) {
						$formula = ParseFlexTableTemplate($flextable, $eid, $formula, false, true, true, "plain");
						
						$ft = GetFlexTableDefinitions($flextable);
						
						$name = $ft[0]['tablename'];
						$reference = $ft[0]['refers_to'];
						$orientation = $ft[0]['orientation'];
						$formid = $ft[0]['formid'];
						$currow = GetFlexTableRow($flextablerecord, $flextableid);
						$ent = $currow['refer'];
						

						if (IsValidEID($ent) && $ent != "_new_" && $reference == "entity") {
							// Flexrecord is joined to a valid eid
							$tmp_eid = $ent;
							$tmp_cid = GetEntityCustomer($eid);
						} elseif ($reference == "customer" && IsValidCID($ent)) {
							$tmp_cid = $ent;
							$cid = $ent;
							$id = $ent;
						} else {
							unset($ent);
						}
						if (IsValidEID($tmp_eid)) {
							$formula = ParseTemplateEntity($formula, $eid, true, false, false, "plain");
						}
						if (IsValidCID($tmp_cid)) {
							$formula = ParseTemplateCustomer($formula, $tmp_cid, true, "plain");
						}
					} else {
						$formula = ParseTemplateEntity($formula, $eid, true, false, false, "plain");
						if (strstr($formula, "@")) { // More tags?
							$formula = ParseTemplateCustomer($formula, GetEntityCustomer($eid), true, "plain");
						}
					}
				}

				$current_value = db_GetValue("SELECT EFID" . $extrafield['id'] . " FROM " . $GLOBALS['TBL_PREFIX'] . $tabletype . " WHERE " . $id . "='" . $eid . "'");

				$formula .= "\n\n\n\$AABD5256DE226CC23BCEE2 = true;\n"; // Add variable to formula to see if it runs
				unset($result); // $result will hold resulting value

				if ($flextable) {
					$recordid = $eid;
					$record = $eid;
				}

				// Actually calculate here
				@eval($formula);

				if (strlen($result) > 0) {
					if (trim($current_value) != trim($result)) {
						$IgnoreValueChangesWhenRecalculating = GetAttribute("extrafield", "IgnoreValueChangesWhenRecalculating", $extrafield['id']);
						if ($IgnoreValueChangesWhenRecalculating != "Yes") {
							$changed_records++;
						}
						// Return value has a value which must be stored in the database
						mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='" . mres($result) . "' " . $sql_add . " WHERE " . $id . "='" . mres($eid) . "'", $db);
						journal($eid, "Field EFID" . $extrafield['id'] . " updated from [" . $current_value . "] to [" . $result . "] (computation)", $tabletype);
						if ($GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] != "") {
							$GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] .= " Changed: table " . $tabletype . ", field " . $extrafield['id'] . "\n";
						}
					}

				} elseif (!$AABD5256DE226CC23BCEE2) {
					// Return value was empty, and execution return false which indicates a parser error
					mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='" . "ERROR IN FORMULA" . "' " . $sql_add . " WHERE " . $id . "='" . mres($eid) . "'", $db);
					log_msg("ERROR Parsing EF Formula " . $extrafield['id'] . ":\nEntity: " . $eid . "\nOriginal formula: " . $orig_formula . "\nResulting formula: " . $formula . "\nResult: " . $result . "");
					journal($eid, "Computed field(s) recalculated, resulting in error.", $tabletype);
					qlog(INFO, "Computed field(s) recalculated, resulting in error.");
					if ($GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] != "") {
						$GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] .= " Error in calculation: table " . $tabletype . ", field " . $extrafield['id'] . "\n";
					}
				} elseif (!isset($result)) {
					// The formula didn't return any result whatsoever. Don't change a thing.
					journal($eid, "Field EFID" . $extrafield['id'] . " left alone (computation without any set result)", $tabletype);
					if ($GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] != "") {
						$GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] .= " No result\n";
					}

				} else {
					qlog(INFO, "Formula returned an empty string (e.g. nothing)");
					if (trim($current_value) != trim($result)) {
						$IgnoreValueChangesWhenRecalculating = GetAttribute("extrafield", "IgnoreValueChangesWhenRecalculating", $extrafield['id']);
						if ($IgnoreValueChangesWhenRecalculating != "Yes") {
							$changed_records++;
						}
						// Return value has a value which must be stored in the database
						mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='' " . $sql_add . " WHERE " . $id . "='" . mres($eid) . "'", $db);
						journal($eid, "Field EFID" . $extrafield['id'] . " updated from [" . $current_value . "] to [] (computation)", $tabletype);
						if ($GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] != "") {
							$GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] .= " Empty result (original value wasn't empty): table " . $tabletype . ", field " . $extrafield['id'] . "\n";
						}
					}
				}
				unset($AABD5256DE226CC23BCEE2);
				//ExpireFormCache($eid);
			}
		}
		$GLOBALS['PageCache']['CurrentlyCalculatingFields'][$eid . "-" . $flextable] = 0;
		return($changed_records);

	} else {
		if ($GLOBALS['PageCache']['CurrentlyCalculatingFields'][$eid . "-" . $flextable] == 1) {
			// print "NOT RECALCULATING MYSELF";
		} else {
			log_msg("WARNING: CalculateComputedExtraFields called with invalid EID! (" . $eid . ")");
			qlog(WARNING, "WARNING: CalculateComputedExtraFields called with invalid EID! (" . $eid . ")");
		}
		return(false);
	}
}
function CalculateComputedExtraCustomerFields($cid) {

	// This function looks for extra fields of type "computation" and will (re-)calculate
	// the resulting values (when the formula is valid)
	// This function is called from withtin ExpireFormCache()
	
	$changed_records = 0;

	if (IsValidCID($cid)) {


		qlog(INFO, "Recalculating computed fields for customer " . $cid);
		$ef = GetExtraCustomerFields();
		$tabletype = "customer";
		$id = "id";

		foreach ($ef AS $extrafield) {
			if ($extrafield['fieldtype'] == "Computation" || $extrafield['fieldtype'] == "Computation (ajax autorefresh)"){ // bingo!

				$current_value = db_GetValue("SELECT EFID" . $extrafield['id'] . " FROM " . $GLOBALS['TBL_PREFIX'] . $tabletype . " WHERE " . $id . "='" . $cid . "'");

				$formula = $extrafield['options'];
				$orig_formula = $formula;

				if (strstr($formula, "@")) { // If the formula contains @'s it probably contains tags
					$formula = ParseTemplateAliases($formula);
					$formula = ParseTemplateCustomer($formula, $cid, true, "plain", false);
				}
				$formula .= "\n\n\n\$AABD5256DE226CC23BCEE2 = true;\n"; // Add variable to formula to see if it runs
				unset($result); // $result will hold resulting value
				
				$customer = $cid;
				$customerid = $cid;
				unset($eid);

				// Actually calculate here
				@eval($formula);

				if (strlen($result) > 0) {
					// Return value has a value which must be stored in the database
					//mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='" . mres($result) . "' " . $sql_add . " WHERE " . $id . "='" . mres($eid) . "'", $db);
					//qlog(INFO, "Successfull");
					if (trim($current_value) != trim($result)) {
						$IgnoreValueChangesWhenRecalculating = GetAttribute("extrafield", "IgnoreValueChangesWhenRecalculating", $extrafield['id']);
						if ($IgnoreValueChangesWhenRecalculating != "Yes") {
							$changed_records++;
						}
						mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='" . mres($result) . "' " . $sql_add . " WHERE " . $id . "='" . mres($cid) . "'", $db);
						journal($cid, "Field EFID" . $extrafield['id'] . " updated from [" . $current_value . "] to [" . $result . "] (computation)", $tabletype);
						if ($GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] != "") {
							$GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] .= " Changed: table " . $tabletype . ", field " . $extrafield['id'] . "\n";
						}
					}

				} elseif (!$AABD5256DE226CC23BCEE2) {
					// Return value was empty, and execution return false which indicates a parser error
					mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='" . "ERROR IN FORMULA" . "' " . $sql_add . " WHERE " . $id . "='" . mres($cid) . "'", $db);
					log_msg("ERROR Parsing EF Formula " . $extrafield['id'] . ":\nCustomer: " . $cid . "\nOriginal formula: " . $orig_formula . "\nResulting formula: " . $formula . "\nResult: " . $result . "");
					journal($cid, "Computed field(s) recalculated, resulting in error.", $tabletype);
					qlog(INFO, "Computed field(s) recalculated (customer), resulting in error.");
					if ($GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] != "") {
						$GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] .= " Error in calculation: table " . $tabletype . ", field " . $extrafield['id'] . "\n";
					}
				} else {
					qlog(INFO, "Formula returned an empty string (e.g. nothing)");
					if (trim($current_value) != trim($result)) {
						$IgnoreValueChangesWhenRecalculating = GetAttribute("extrafield", "IgnoreValueChangesWhenRecalculating", $extrafield['id']);
						if ($IgnoreValueChangesWhenRecalculating != "Yes") {
							$changed_records++;
						}
						
						// Return value has a value which must be stored in the database
						mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='' " . $sql_add . " WHERE " . $id . "='" . mres($cid) . "'", $db);
						journal($cid, "Field EFID" . $extrafield['id'] . " updated from [" . $current_value . "] to [] (computation)", $tabletype);
						if ($GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] != "") {
							$GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] .= " Empty result (original value wasn't empty): table " . $tabletype . ", field " . $extrafield['id'] . "\n";
						}
					}
				}
				unset($AABD5256DE226CC23BCEE2);
				//ExpireFormCache($eid);
			}
		}
		return($changed_records);
	} else {
		log_msg("WARNING: CalculateComputedExtraCustomerFields called with invalid CID! (" . $cid . ")");
		qlog(WARNING, "WARNING: CalculateComputedExtraCustomerFields called with invalid CID! (" . $cid . ")");
		return(false);
	}
}

function ParseTemplateGroupAndUserFields($template, $user, $group=false) {
	if ($group) {
		$list = GetExtraGroupFields();
		foreach ($list AS $field) {
			if (in_array("@EFID" . $field['id'] . "@", $list_of_tags)) {
				print "process @EFID" . $field['id'] . "@";
				$val = GetExtraFieldValue($user, $field['id'], true, false, false);
				$template = str_replace("@EFID" . $field['id'] . "@", $val, $template);
			}
		}
	} else {
		if ($user == 0) {
			$user = $GLOBALS['USERID'];
		}
		$list = GetExtraUserFields();
		preg_match_all('/(#|@|\[|%)[^\s^@^#]+(#|@|\]|%)/', $template, $matches);
		$list_of_tags = $matches[0];
		
		if (count($list_of_tags) > 0) {
			foreach ($list AS $field) {
				if (in_array("@EFID" . $field['id'] . "@", $list_of_tags)) {

					$val = GetExtraFieldValue($user, $field['id'], true, false, false);
					$template = str_replace("@EFID" . $field['id'] . "@", $val, $template);
				}

			}
			if (GetGroup($user) > 0) {
				$list = GetExtraGroupFields();
				foreach ($list AS $field) {
					if (in_array("@EFID" . $field['id'] . "@", $list_of_tags)) {

						$val = GetExtraFieldValue(GetGroup($user), $field['id'], true, false, false);
						$template = str_replace("@EFID" . $field['id'] . "@", $val, $template);
					}
				}
			}
		}
	}
	return($template);
}
function CalculateComputedGroupAndUserFields() {


	// This function looks for extra fields of type "computation" and will (re-)calculate
	// the resulting values (when the formula is valid)
	
	$changed_records = 0;

	qlog(INFO, "Recalculating computed fields for groups");

	$ef = GetExtraGroupFields();
	$tabletype = "userprofiles";
	$id = "id";

	$list = db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . $tabletype . " WHERE name NOT LIKE 'deleted_user_%' ORDER BY id");

	foreach ($ef AS $extrafield) {
		if ($extrafield['fieldtype'] == "Computation" || $extrafield['fieldtype'] == "Computation (ajax autorefresh)"){ // bingo!
			foreach ($list AS $curid) {
				$current_value = db_GetValue("SELECT EFID" . $extrafield['id'] . " FROM " . $GLOBALS['TBL_PREFIX'] . $tabletype . " WHERE " . $id . "='" . $curid . "'");

				$formula = $extrafield['options'];
				$orig_formula = $formula;

				if (strstr($formula, "@")) { // If the formula contains @'s it probably contains tags
					$formula = ParseTemplateAliases($formula);
					$formula = ParseTemplateGeneric($formula);
					$formula = ParseTemplateGroupAndUserFields($formula, $curid, true);
				}
				$formula .= "\n\n\n\$AABD5256DE226CC23BCEE2 = true;\n"; // Add variable to formula to see if it runs
				unset($result); // $result will hold resulting value
					
				$group_id = $curid;
				// Actually calculate here
				@eval($formula);

				if (strlen($result) > 0) {
					// Return value has a value which must be stored in the database
					if (trim($current_value) != trim($result)) {
						$changed_records++;
						mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='" . mres($result) . "' " . $sql_add . " WHERE " . $id . "='" . mres($curid) . "'", $db);
						journal($id, "Field EFID" . $extrafield['id'] . " updated from [" . $current_value . "] to [" . $result . "] (computation)", "group");
					}

				} elseif (!$AABD5256DE226CC23BCEE2) {
					// Return value was empty, and execution return false which indicates a parser error
					mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='" . "ERROR IN FORMULA" . "' " . $sql_add . " WHERE " . $id . "='" . mres($curid) . "'", $db);
					log_msg("ERROR Parsing EF Formula " . $extrafield['id'] . ":\nGroup: " . $curid . "\nOriginal formula: " . $orig_formula . "\nResulting formula: " . $formula . "\nResult: " . $result . "");
					journal($id, "Computed field(s) recalculated, resulting in error.", "group");
					qlog(INFO, "Computed field(s) recalculated (customer), resulting in error.");
				} else {
					qlog(INFO, "Formula returned an empty string (e.g. nothing)");
					if (trim($current_value) != trim($result)) {
						$changed_records++;
						
						// Return value has a value which must be stored in the database
						mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='' " . $sql_add . " WHERE " . $id . "='" . mres($curid) . "'", $db);
						journal($id, "Field EFID" . $extrafield['id'] . " updated from [" . $current_value . "] to [] (computation)", "group");
					}
				}
				unset($AABD5256DE226CC23BCEE2);
			}
		}
	}
	qlog(INFO, "Recalculating computed fields for users");

	$ef = GetExtraUserFields();
	$tabletype = "loginusers";
	$id = "id";

	$list = db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . $tabletype . " WHERE name NOT LIKE 'deleted_user_%' ORDER BY id");

	foreach ($ef AS $extrafield) {
		if ($extrafield['fieldtype'] == "Computation" || $extrafield['fieldtype'] == "Computation (ajax autorefresh)"){ // bingo!

			foreach ($list AS $curid) {
				$current_value = db_GetValue("SELECT EFID" . $extrafield['id'] . " FROM " . $GLOBALS['TBL_PREFIX'] . $tabletype . " WHERE " . $id . "='" . $curid . "'");

				$formula = $extrafield['options'];
				$orig_formula = $formula;

				if (strstr($formula, "@")) { // If the formula contains @'s it probably contains tags
					$formula = ParseTemplateAliases($formula);
					$formula = ParseTemplateGeneric($formula);
					$formula = ParseTemplateGroupAndUserFields($formula, $curid, false);
				}
				$formula .= "\n\n\n\$AABD5256DE226CC23BCEE2 = true;\n"; // Add variable to formula to see if it runs
				unset($result); // $result will hold resulting value
					
				$user_id = $curid;
				// Actually calculate here
				@eval($formula);

				if (strlen($result) > 0) {
					// Return value has a value which must be stored in the database
					if (trim($current_value) != trim($result)) {
						$changed_records++;
						mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='" . mres($result) . "' " . $sql_add . " WHERE " . $id . "='" . mres($curid) . "'", $db);
						journal($id, "Field EFID" . $extrafield['id'] . " updated from [" . $current_value . "] to [" . $result . "] (computation)", "user");
					}

				} elseif (!$AABD5256DE226CC23BCEE2) {
					// Return value was empty, and execution return false which indicates a parser error
					mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='" . "ERROR IN FORMULA" . "' " . $sql_add . " WHERE " . $id . "='" . mres($curid) . "'", $db);
					log_msg("ERROR Parsing EF Formula " . $extrafield['id'] . ":\nUser: " . $curid . "\nOriginal formula: " . $orig_formula . "\nResulting formula: " . $formula . "\nResult: " . $result . "");
					journal($id, "Computed field(s) recalculated, resulting in error.", "user");
					qlog(INFO, "Computed field(s) recalculated (customer), resulting in error.");
				} else {
					qlog(INFO, "Formula returned an empty string (e.g. nothing)");
					if (trim($current_value) != trim($result)) {
						$changed_records++;
						
						// Return value has a value which must be stored in the database
						mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $extrafield['id'] . "='' " . $sql_add . " WHERE " . $id . "='" . mres($curid) . "'", $db);
						journal($id, "Field EFID" . $extrafield['id'] . " updated from [" . $current_value . "] to [] (computation)", "user");
					}
				}
				unset($AABD5256DE226CC23BCEE2);
			}
		}
	}
	return($changed_records);
}
function GetSetting($setting) {
	$row = db_GetRow("SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting LIKE '%" . mres($setting) . "%'");
	if ($row['value'] == "") { // It might also be an attribute
		$row['value'] = GetAttribute("system", $setting, 2);
	}
	return($row['value']);
}
function UpdateSetting($setting, $value) {
	$val = db_GetFlatArray("SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "settings WHERE setting='" . $setting . "'");
	if (count($val) == 0) {
		mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "settings(setting) VALUES('" . $setting . "')", $db);
	}

	mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "settings SET value='" . mres($value) . "' WHERE setting='" . mres($setting) . "'", $db);
}

function ThingsToDoAtLogin() {
	mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "loginusers SET TRACE='Off' WHERE id='" . mres($GLOBALS['USERID']) . "'", $db);
	ExpireDashboardCache();
}
function ShowAssignedEntitiesList() {
	global $lang;
	
	return(ShowListOfEids(db_GetFlatArray("SELECT DISTINCT(eid) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND assignee='" . mres($GLOBALS['USERID']) . "' " . $sort), 5, "AssignedList",  $lang['listofentities_assigned'], true, false));
}
function ShowOwnedEntitiesList() {
	global $lang;

	$tmpsort = GetAttribute("user", "LastListSort OwnedList", $GLOBALS['USERID']);
	if (trim($tmpsort) != "") {
		$sort = " ORDER BY " . $tmpsort;
	} else {
		$sort = " ORDER BY timestamp_last_change DESC";
	}

	return(ShowListOfEids(db_GetFlatArray("SELECT DISTINCT(eid) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND owner='" . mres($GLOBALS['USERID']) . "' " . $sort), 10, "OwnedList",  $lang['listofentities_owned'], true, false));
}
function ShowRecentEntities() {
	global $lang;

//	$eids = db_GetFlatArray("SELECT DISTINCT(" . $GLOBALS['TBL_PREFIX'] . "entity.eid)," . $GLOBALS['TBL_PREFIX'] . "journal.timestamp_last_change FROM " . $GLOBALS['TBL_PREFIX'] . "journal, " . $GLOBALS['TBL_PREFIX'] . "entity WHERE " . $GLOBALS['TBL_PREFIX'] . "entity.eid=" . $GLOBALS['TBL_PREFIX'] . "journal.eid AND " . $GLOBALS['TBL_PREFIX'] . "entity.deleted!='y' AND " . $GLOBALS['TBL_PREFIX'] . "journal.type ='entity' AND " . $GLOBALS['TBL_PREFIX'] . "journal.user='" . mres($GLOBALS['USERID']) . "' GROUP BY " . $GLOBALS['TBL_PREFIX'] . "entity.eid ORDER BY " . $GLOBALS['TBL_PREFIX'] . "journal.timestamp_last_change DESC LIMIT 50");

	$sql = "SELECT DISTINCT(eid) FROM " . $GLOBALS['TBL_PREFIX'] . "journal WHERE " . $GLOBALS['TBL_PREFIX'] . "journal.type ='entity' AND " . $GLOBALS['TBL_PREFIX'] . "journal.user='" . mres($GLOBALS['USERID']) . "' AND " . $GLOBALS['TBL_PREFIX'] . "journal.eid!=0 AND " . $GLOBALS['TBL_PREFIX'] . "journal.eid!='' ORDER BY id DESC LIMIT 50";
	
	if (isset($_REQUEST['debug']) && is_administrator()) {
		DA($sql); // Ok
	}


	$eids = db_GetFlatArray($sql);

	

	return(ShowListOfEids($eids, $GLOBALS['ShowRecentEditedEntities'],"RecentList", $lang['listofentities_recent'], true, true, true));


}

function ShowDashboardOptions() {
	global $lang;
	if ($GLOBALS['UC']['USEDASHBOARDASENTRY'] == "y") $ins1 = 'checked="checked"';
	if ($GLOBALS['UC']['HIDEOVERDUEFROMDUELIST'] == "y") $ins2 = 'checked="checked"';
	$ret .= "<br><form id='langform' method='get' action='dashboard.php'><div class='showinline'><table><tr><td>";
	if (strtoupper($GLOBALS['langoverride']) == "NO") {
		$ret .= "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . $lang['language'] . ": ";
		$ret .= "<select name='change_language' onchange=\"document.forms['langform'].submit();\">";
		$sql= "SELECT DISTINCT LANGID FROM " . $GLOBALS['TBL_PREFIX'] . "languages";
		$result= mcq($sql,$db);
		while ($resarr=mysql_fetch_array($result)) {
			if ((trim($resarr['LANGID'])=="") || ($resarr['LANGID'] == "GLOBAL")) {
				// GLOBAL is a global language setting which ought to be ignored
			} else {
				if ($GLOBALS['language'] ==$resarr['LANGID']) {
					$ins = 'selected="selected"';
				} else {
					unset($ins);
				}
				$ret .= "<option value='" . $resarr['LANGID'] . "' " . $ins . ">" . $resarr['LANGID'] . "</option>";
			}
		}
		$ret .= "</select>";
	}
			$ret .= "</td></tr><tr><td align='right'>Hide overdue entities from 'due today'-list</td><td><input " . $ins2 . " type='checkbox' name='hideoverdue' value='y'></td><td align='right'><input type='hidden' name='done_subm' value='True'>";
			$ret .= "</td></tr>";
			$ret .= "<tr><td colspan='2'><input type='submit' name='buttonSave' value='" . $lang['save'] . "'></td></tr></table></div></form>";

	return($ret);
}

function ShowTodaysEntities($dummy) {
	global $lang;
	if ($GLOBALS['UC']['HIDEOVERDUEFROMDUELIST'] == "y") {
		$res = db_GetFlatArray("SELECT " . $GLOBALS['TBL_PREFIX'] . "entity.eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE duedate = '" . date('d-m-Y') . "'");
	} else {
		$fieldname = 'duedate';

		$res= db_GetFlatArray("SELECT " . $GLOBALS['TBL_PREFIX'] . "entity.eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE STR_TO_DATE(duedate,'%d-%m-%Y')<='" . date('Y-m-d') . "' AND " . $GLOBALS['TBL_PREFIX'] . "entity.deleted!='y'");
	}
	return(ShowListOfEids($res, 5, "TodaysEntities",  $lang['listofentities_today'], true, false));
}


function ShowClock() {
 return("<span id=\"js_clock\"> <script type=\"text/javascript\"> function js_clock(){ var clock_time = new Date(); var clock_hours = clock_time.getHours(); var clock_minutes = clock_time.getMinutes(); var clock_seconds = clock_time.getSeconds(); var clock_suffix = \"\"; if (clock_hours > 11){ clock_suffix = \"\"; clock_hours = clock_hours; } if (clock_hours < 10){ clock_hours = \"0\" + clock_hours; } if (clock_minutes < 10){ clock_minutes = \"0\" + clock_minutes; } if (clock_seconds < 10){ clock_seconds = \"0\" + clock_seconds; } var clock_div = document.getElementById('js_clock'); clock_div.innerHTML = '" . TransformDate(date('d-m-Y')) . " ' + clock_hours + \":\" + clock_minutes + \":\" + clock_seconds + \" \" + clock_suffix; setTimeout(\"js_clock()\", 1000); } js_clock(); </script> </span> ");
}
function ShowShortCalendar() {

	$GLOBALS['MainPageCalendar'] = true;
	ob_start();
	require_once($GLOBALS['PATHTOINTERLEAVE'] . "calendar.php");
	$ret = ob_get_contents();
	ob_end_clean();
	return($ret);
}
function ShowPersonalStats() {
	global $lang;
	$ret .= "<table class='crm' width='95%'>";
	$maxE1 = DB_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND (assignee='" . mres($GLOBALS['USERID']) . "' OR owner='" . mres($GLOBALS['USERID']) . "')");

	$maxE = $maxE1[0];
	$ret .= "<tr><td>" . $lang['entities'] . " (owned or assiged)</td><td>" . $maxE . "</td><td>100%</td></tr>";
	$ret .= "<tr><td colspan='4'><em>$lang[ofwhich]</em></td></tr>";

	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars ORDER BY listorder, varname";
	$result= mcq($sql,$db);
    while ($e= mysql_fetch_array($result)) {

			$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted!='y' AND status='" . mres($e['varname']) . "' AND (assignee='" . mres($GLOBALS['USERID']) . "' OR owner='" . mres($GLOBALS['USERID']) . "')";
			$result1= mcq($sql,$db);
			$maxU1 = mysql_fetch_array($result1);
			$bla = $maxU1[0];
			$pc1 = ($maxE/100); // dit is 1 procent

			$pc2 = ($bla/100); // dit is 1 procent van not [deleted]

			$apc = round($bla/$pc1); // dit is het percentage
			//index.php?newfilter=1&amp;ShowEntityList&amp;pdfilterstatus=1.1+-+Awaiting+reaction
			$ret .= "<tr onmouseover=\"HL(this)\" onmouseout=\"UL(this)\" onclick='document.location=\"index.php?newfilter=1&amp;ShowEntityList&amp;pdfilterstatus=" . urlencode($e['varname']) . "\"' class='pointer'><td class=\"nwrp\" style='background-color: " . $e['color'] . ";' width='40%'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$e[varname]</td><td>$bla</td><td>$apc%</td></tr>";
			$totaal=$totaal+$bla;
	}
	if ($totaal!=$MaxE) {
		$bla = $maxE - $totaal;
		$apc = round($bla/$pc1); // dit is het percentage
		$ret .= "<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Unknown</td><td>$bla</td><td>$apc%</td></tr>";
	}
	$ret .= "<tr><td colspan='4'>&nbsp;</td></tr>";
	$apc = round($expE/$pc1); // dit is het percentage
	if ($apc>30) {
		$a1 = "<span style='color: #ff0000';'>";
		$a2 = "</span>";
	} else {
		unset($a1);
		unset($a2);
	}

	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars ORDER BY listorder, varname";
	$result= mcq($sql,$db);
    while ($e= mysql_fetch_array($result)) {

			$sql = "SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE deleted='n' AND priority='" . mres($e['varname']) . "' AND (assignee='" . mres($GLOBALS['USERID']) . "' OR owner='" . mres($GLOBALS['USERID']) . "')";
			$result1= mcq($sql,$db);
			$maxU1 = mysql_fetch_array($result1);
			$bla = $maxU1[0];
			$pc1 = ($maxE/100); // dit is 1 procent

			$pc2 = ($bla/100); // dit is 1 procent van not [deleted]

			$apc = round($bla/$pc1); // dit is het percentage

			$ret .= "<tr onmouseover=\"HL(this)\" onmouseout=\"UL(this)\" onclick='document.location=\"index.php?newfilter=1&amp;ShowEntityList&amp;pdfilterpriority=" . urlencode($e['varname']) . "\"' class='pointer'><td style='background-color: " . $e['color'] . ";' size='10'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$e[varname]</td><td>$bla</td><td>$apc%</td></tr>";
			$totaal=$totaal+$bla;
	}
	//$ret .= "<tr><td>&nbsp;</td></tr>";
	//$ret .= "<tr><td>$lang[edd]</td><td>$expE</td><td>$a1$apc%$a2</td></tr>/table>";
	$ret .= "</table>";
	return($ret);
}
function ShowMessagesList() {
	global $lang;
	$outp = "<div id=\"messageslist\">";
	$outp .= "<a href='index.php?UserMessage'>" . $lang['messageinbox'] . "</a>";
	$outp .= "<table class='crm'>";
	$outp .= "<thead><tr><td><strong>From</strong></td><td><strong>Subject</strong></td><td><strong>Date/time</strong></td></tr></thead>";
	$msglist = GetMessage($GLOBALS['USERID'], "all", "to", 8);
	foreach ($msglist AS $msg) {
		if ($msg['read'] == "n") {
			$font_ins1 = "<span style='color: #3300FF;'>";
			$font_ins2 = "</span>";
		} else {
			unset($font_ins1);
			unset($font_ins2);
		}
		$outp .=  "<tr onclick=\"document.location='index.php?UserMessage&amp;ReadInternalMessage=" . $msg['id'] . "'\" class='pointer' onmouseover=\"style.background='#cccccc';\"  onmouseout=\"style.background='#ffffff';\"><td>$font_ins1" . GetUserName($msg['from']) . "$font_ins2</td><td>$font_ins1" . $msg['subject'] . "$font_ins2</td><td>$font_ins1" . $msg['time_formatted'] . "$font_ins2</td></tr>";
		$x++;
	}
	if (is_administrator()) {
		$msglist = GetMessage("admin", "all", "to", 8);
			foreach ($msglist AS $msg) {
				if ($msg['read'] == "n") {
					$font_ins1 = "<span style='color: #3300FF;'>";
					$font_ins2 = "</span>";
				} else {
					unset($font_ins1);
					unset($font_ins2);
				}

				$outp .= "<tr onclick=\"document.location='index.php?UserMessage&amp;ReadInternalMessage=" . $msg['id'] . "'\" class='pointer' onmouseover=\"style.background='#cccccc';\"  onmouseout=\"style.background='#ffffff';\"><td>$font_ins1" . GetUserName($msg['from']) . "$font_ins2</td><td>$font_ins1" . $msg['subject'] . "$font_ins2</td><td>$font_ins1" . $msg['time_formatted'] . "$font_ins2</td></tr>";
				$x++;
			}
	}
	$outp .= "</table></div>";
	if ($x>0) {
		return($outp);
	} else {
		return("<a class='arrow' href='index.php?UserMessage'>" . $lang['messageinbox'] . "</a><br><br>" . $lang['nomessages']);
	}
}
function CheckIfFormMainBePrintedOnAddList($formid) {
	if (!in_array($formid, $GLOBALS['UC']['ALLOWEDADDFORMS']) && is_numeric($formid)) {
		return(false);
	}

	$res = db_GetRow("SELECT show_on_add_list FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templateid='" . mres($formid) . "'");

	if ($res[0] == "n") {
		qlog(INFO, "Form " . $formid . " may NOT BE PRINTED on add-form list. (" . $res[0] . ")");
		return(false);
	} else {
		qlog(INFO, "Form " . $formid . " may BE PRINTED on add-form list. (" . $res[0] . ")");
		return(true);
	}
}
function vsort($array, $id="id", $sort_ascending=true, $is_object_array = false) {
        $temp_array = array();
        while(count($array)>0) {
            $lowest_id = 0;
            $index=0;
            if($is_object_array){
                foreach ($array as $item) {
                    if (isset($item->$id)) {
                        if ($array[$lowest_id]->$id) {
							if ($item->$id<$array[$lowest_id]->$id) {
								$lowest_id = $index;
							}
                        }
                     }
                    $index++;
                }
            }else{
                foreach ($array as $item) {
                    if (isset($item[$id])) {
                        if ($array[$lowest_id][$id]) {
							if ($item[$id]<$array[$lowest_id][$id]) {
								$lowest_id = $index;
							}
                        }
                    }
                    $index++;
                }
            }
            $temp_array[] = $array[$lowest_id];
            $array = array_merge(array_slice($array, 0,$lowest_id), array_slice($array, $lowest_id+1));
        }
                if ($sort_ascending) {
            return $temp_array;
                } else {
                    return array_reverse($temp_array);
                }
}

function RestoreConfigurationSnaphot($db_to_process, $snapshotno, $cmdline=false) {
	MustBeAdmin();
	SafeModeInterruptCheck();
	SwitchToRepos($db_to_process);
	$q = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "configsnapshots WHERE id='" . mres($snapshotno) . "'");
	if ($q['usersincluded'] == "y") {
		$incude_users_and_groups = true;
	}
	// First, create a new snapshot
	CreateConfigurationSnapshot($db_to_process, "Auto-snapshot before restoring snapshot " . $snapshotno . ".", false, $incude_users_and_groups);

	$loq = explode("\n", $q['config']);
	$tot = count($loq);
	$t=0;
	foreach ($loq AS $query) {
		if (trim($query) != "") {
			mcq($query, $db);
			if ($cmdline) {
				$t++;
				print "\015" . $t . " / " . $tot;
			}
		}
	}
	if ($cmdline) {
		print "\nConfiguration snapshot restored.\n";
	}

}
function CreateConfigurationSnapshot($db_to_process, $comment, $cmdline = false, $snapshottype) {
		SwitchToRepos($db_to_process);
		ob_end_clean();

		if ($snapshottype != "wholedb" && $snapshottype != "dumpdb") {
			
			$ConfigTables = array("attributes", "extrafieldconditions", "extrafieldrequiredconditions", "extrafields", "flextabledefs", "languages", "modules", "priorityvars", "publishedpages", "settings", "statusvars", "tabmenudefinitions", "templates", "triggerconditions", "triggers");

			if ($snapshottype == "withusers") {
				array_push($ConfigTables, "loginusers");
				array_push($ConfigTables, "userprofiles");

				$snapshottype = "withusers";
			} else {
				$snapshottype = "nousers";
			}
			
			$CreateTables = array();

			foreach (GetFlextableDefinitions() AS $ft) {
				$CreateTables[] = $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid'];
			}

			// Add prefix
			for ($t=0;$t<count($ConfigTables);$t++) {
				$ConfigTables[$t] = $GLOBALS['TBL_PREFIX'] . $ConfigTables[$t];
			}

			

		} else {
			SetTIU();
			$ConfigTables = $GLOBALS['TABLES_IN_USE'];
			$CreateTables = $GLOBALS['TABLES_IN_USE'];
		}

		if ($snapshottype == "dumpdb") {
				header("Content-Type: text/data;" . $charset_suffix);
				header("Content-Disposition: attachment; filename=" . str_replace(" ", "_", $GLOBALS['title']) . "-SQL-DUMP.SQL");
				header("Window-target: _top");
		}
		$tot = array();
	
		if ($snapshottype != "dumpdb") {
			$file = tempnam("","CONFIGSNAPSHOT");
			//print "Writing to temp file " . $file . "";
			$filetowriteto = fopen($file, "w");
		}

		foreach ($CreateTables AS $table) {
				$x = db_GetRow("SHOW CREATE TABLE `" . $table . "`", false, false);
				if ($snapshottype == "dumpdb") {
					if (!strstr($table, "flextable") && $snapshottype != "dumpdb" || ($table == $GLOBALS['TBL_PREFIX'] . "flextabledefs")) {
						print "DROP TABLE IF EXISTS " . $table . ";\n";
					} else {
						$x[1] = str_replace("CREATE TABLE `CRM", "CREATE TABLE IF NOT EXISTS `CRM", $x[1]);
					}

					print str_replace("\n", "", $x[1]) . ";\n";
				} else {

					$x[1] = str_replace("\n", "", str_replace("CREATE TABLE `CRM", "CREATE TABLE IF NOT EXISTS `CRM", $x[1]));

					//array_push($tot, str_replace("\n", "", $x[1]));
					fwrite($filetowriteto, $x[1] . ";\n");
				}
		}
		foreach ($ConfigTables AS $table) {
				if ($snapshottype != "dumpdb") {
					fwrite($filetowriteto, "TRUNCATE TABLE `" . $table . "`;\n");
				}

				unset($qu);
				$fields = array();
				$sql = "EXPLAIN " . $table;
				$res = mcq($sql, $db);
				while ($row2 = mysql_fetch_array($res)) {
					if (!$first_done) {
						$first_done = true;
					} else {
						$qu .= ",";
					}
					$qu .= "`" . $row2['Field'] . "`";
					array_push($fields, $row2['Field']);
				}
				unset($first_done);
				if ($cmdline) print "\015Reading " . fillout($table,40) . "... mem: " . number_format(memory_get_usage()) . " bytes";


				$sql = "SELECT " . $qu . " FROM " . $table;

				$res = mcq($sql, $db);
				$num = 0;
				while ($row = mysql_fetch_array($res)) {
					$num++;
					$str = "INSERT INTO " . $table . "(" . $qu . ") VALUES (";
					foreach($fields AS $field) {
						if (!$first_done) {
							$first_done = true;
						} else {
							$str .= ", ";
						}
						$str .= "'" . mres($row[$field]) . "'";
					}
					if ($cmdline) print "\015Reading " . fillout($table,40) . "... mem: " . number_format(memory_get_usage()) . " bytes";
					$str .= ")";
					unset($first_done);
					if ($snapshottype == "dumpdb") {
						print $str . ";\n";
					} else {
						//array_push($tot, $str);
						fwrite($filetowriteto, $str . ";\n");
					}
					unset($str);
				}

				if ($cmdline) print " Records: " . fillout($num,6) . "\n";
				$records[$table] = $num;
				unset($num);
			}

		if ($snapshottype == "dumpdb") {
			EndHTML(false);
			exit;
		} else {
			fclose($filetowriteto);
		}
		if ($cmdline) print " done.\n ";
		// Create database record
		mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "configsnapshots(comment, config, snapshottype, timestamp_last_change) VALUES('" . mres($comment) . "','','" . mres($snapshottype) . "',NOW())", $db);
		$snapshot = mysql_insert_id();
		

		$fp = fopen($file, "r");
		fwrite($fp, "TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "cache;\n");
		fwrite($fp, "TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "accesscache;\n");
		fwrite($fp, "TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "entityformcache;\n");
		fwrite($fp, "TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "publishedpagescache;\n");
		fwrite($fp, "TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "entitylocks;\n");
		

		while (!feof($fp)) {
			$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "configsnapshots SET config=CONCAT(config, '" . mres(fread($fp, 65536)) . "') WHERE id='" . $snapshot . "'";
			mcq($sql, $db);
			//print "INSERT " . $count++ . "<br>\n";
		}
		fclose($fp);
		unlink($fp);

		

}
function CreateFailOverDatabase($master_repos, $sl_host) {
	$GLOBALS['USE_FAILOVER'] = false;
	require($GLOBALS['CONFIGFILE']);
	DB_Connect($master_repos, FALSE);
	SetTIU($table_prefix[$master_repos]);
	mysql_close();

	$dbuser = $user[$master_repos];
	$dbpass = $pass[$master_repos];
	$dbname = $database[$master_repos];

	$db1 = mysql_connect($host[$master_repos], $dbuser, $dbpass);
	$rv = mysql_select_db($dbname, $db1);

	$db2 = mysql_connect($sl_host, $dbuser, $dbpass, TRUE);


	$tp = $table_prefix[$db];

	$sql_slave_dc = "CREATE DATABASE " . $dbname;
	$res_slave_dc = mysql_query($sql_slave_dc, $db2) or die ("Error: Database could not be created!\n" . $sql_slave_dc . "\n". mysql_error());

	$rv = mysql_select_db($dbname, $db2);

	$tables = $GLOBALS['TABLES_IN_USE'];

	foreach ($tables AS $table) {
		$sql_master_tc = "SHOW CREATE TABLE " . $table . "";
		$res_master_tc = mysql_query($sql_master_tc, $db1) or print  ("Error in query (FOREPtcR-DELMA)\n" . $sql_master_tc . "\n". mysql_error());
		$row_master_tc = mysql_fetch_array($res_master_tc);

		$sql_slave_tc = $row_master_tc[1];
		$res_slave_tc = mysql_query($sql_slave_tc, $db2) or die ("Error: Database could not be created!\n" . $sql_slave_tc . "\n". mysql_error());
	}


	mysql_close($db1);
	mysql_close($db2);

	DB_Connect($master_repos, FALSE);

	SyncDbsIncremental($master_repos, true, $sl_host);

	DB_Connect($master_repos, FALSE);

	print "\nDone. Don't forget to add slave " . $sl_host . " to your config file (entry " . $master_repos . ").\n";

}
function SyncDbsIncremental($reposnr, $all_tables=false, $given_slave=false, $only_updated_records_since_last_sync=true) {
	global $db;
//	print "<pre>";
//	debug_print_backtrace();
//	print "</pre>";

		$epoch_when_started = date('U');

		$GLOBALS['USE_FAILOVER'] = false;
		include($GLOBALS['CONFIGFILE']);

		$original_database = $reposnr;
		mysql_close();

		$outp = "";

		$dbuser = $user[$reposnr];
		$dbpass = $pass[$reposnr];
		$dbname = $database[$reposnr];

		if ($given_slave) {
			$slave[$reposnr] = $given_slave;
		}

		$db1 = mysql_connect($host[$reposnr], $dbuser, $dbpass);
		$rv = mysql_select_db($dbname, $db1);

		$db2 = mysql_connect($slave[$reposnr], $dbuser, $dbpass, TRUE);

		if (!is_resource($db2) || !is_resource($db1)) {
			if (!is_resource($db2)) {
				print "Slave database (" . $slave[$reposnr]  . ") could not be reached, quitting.\n";
			} else {
				print "Master database could not be reached, quitting.\n";
			}
			mysql_close($db1);
			mysql_close($db2);
			DB_Connect($original_database);
			return(false);
		}
		$rv = mysql_select_db($dbname, $db2);

		$tp = $table_prefix[$reposnr];

		SetTIU($tp);
		
		if ($only_updated_records_since_last_sync) {
			$last_sync_master = mysql_query("SELECT value FROM " . $tp . "settings WHERE setting='LastIncrementalSync'", $db1) or print  ("Error in query (FORE-ChkLiS)\n" . mysql_error());
			$row_sync_master = mysql_fetch_array($last_sync_master);
			$lastsync  = $row_sync_master[0];
			if (is_numeric($lastsync)) {
				$select_record_ins = " WHERE UNIX_TIMESTAMP(timestamp_last_change) > " . $lastsync . " ";
				print "Last sync was " . date('r', $lastsync) . ".\n";
			} else {
				print "Last sync could not be determined; syncing full $lastsync.\n";
			}
		} else {
			print "Syncing with no regard to last sync time.\n";
		}

		$tables = $GLOBALS['TABLES_IN_USE'];
		
		foreach ($tables AS $ttc) {
			$sql_create_master = "SHOW CREATE TABLE " . $ttc . "";
			$res_create_master = mysql_query($sql_create_master, $db1) or print  ("Error in query (FORE-CREATE)\n" . $sql_create_master . "\n". mysql_error());
			$row_create_master = mysql_fetch_array($res_create_master);

			$csql = $row_create_master[1];

			$csql = str_replace("CREATE TABLE", "CREATE TABLE IF NOT EXISTS", $csql);
			mysql_query($csql, $db2) or print  ("Error in query (CREATE)\n" . $csql . "\n". mysql_error());

		}

		$all_tables = true;
		if (!$all_tables) {
			$insert_only_tables = array($tp . "uselog", $tp . "journal", $tp . "ejournal", $tp . "mailqueue");
		} else {
			$insert_only_tables = array();
			$skip_compare_tables = true;
		}

		$tables_to_check = array($GLOBALS['TBL_PREFIX'] . "entity", $GLOBALS['TBL_PREFIX'] . "customer");

		$master_flex = array();
		$sql_master_flex = "SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs WHERE exclude_from_rep!='y'";
		$res_master_flex = mysql_query($sql_master_flex, $db1) or print  ("Error in query (FOREPflexR-DELMA)\n" . $sql_master_flex . "\n". mysql_error());

		while ($row_master_flex = mysql_fetch_array($res_master_flex)) {
			array_push($tables_to_check, $GLOBALS['TBL_PREFIX'] . "flextable" . $row_master_flex['recordid']);
		}
//		print_r($tables_to_check);
		foreach ($tables_to_check AS $ttc) {

//			print "Check table structure $ttc ...\n";

			if (!$skip_compare_tables || $forseskip) {
				$sql_master_count = db_GetRow("SELECT * FROM " . $ttc . "");
				if ($sql_master_count > 25000) {
					$skip_compare_tables  = true;
					$forseskip = true;
				} else {
					$skip_compare_tables  = false;
				}
			}



			

			$master_ef = array();
			$sql_master_ef = "SHOW FIELDS FROM " . $ttc . " WHERE Field LIKE 'EFID%'";
			$res_master_ef = mysql_query($sql_master_ef, $db1) or print  ("Error in query (FOREPefR-DELMA)\n" . $sql_master_ef . "\n". mysql_error());
			while ($row_master_ef = mysql_fetch_array($res_master_ef)) {
				array_push($master_ef, $row_master_ef['Field']);
			}
			if (strstr($ttc, "flextable")) {
				array_push($master_ef, "formid");
			}

			// Check if all fields are represented in the CRM entity table
		//	print "Checking extra field columns...\n";
			$slave_ef = array();
			$sql_slave_ef = "SHOW FIELDS FROM " . $ttc;
			$res_slave_ef = mysql_query($sql_slave_ef, $db2) or print  ("Error in query (FOREPefR-DELSLA)\n" . $sql_slave_ef . "\n". mysql_error());
			while ($row_slave_ef = mysql_fetch_array($res_slave_ef)) {
				array_push($slave_ef, $row_slave_ef);
			}

			foreach ($master_ef AS $ef) {
				$found = "";
				$foundname = "";
				foreach ($slave_ef AS $row) {
					if ($row['Field'] == $ef) {
						$found = true;
						$foundname = $row['Field'];
					}
				}
				if (!$found && $ef != "formid") {
					mysql_query("ALTER TABLE " . $ttc . " ADD " . $ef . " longtext DEFAULT NULL", $db2) or (print mysql_error());
					//print "ALTER TABLE " . $ttc . " ADD " . $ef . " longtext NOT NULL\n";
					print "Fixed missing column in $ttc table for field " . $ef . "\n";
				} elseif (!$found && $ef == "formid") {
					mysql_query("ALTER TABLE `" . $ttc . "` ADD `formid` INT NOT NULL AFTER `refer`") or (print mysql_error());
					print "Fixed missing column in $ttc table for field " . $ef . "\n";
				} else {
					//print "FOUND column in $ttc table for field " . $ef . "\n";
				}
			}
		}
		print  "-----------------------------------------------------------------\n";
		print  " Table                | Updates   | Inserts  | Deletes | Errors |\n";
		print  "-----------------------------------------------------------------\n";
		foreach ($tables AS $table) {

			if (!in_array($table, $GLOBALS['EXCLUDE_FROM_REP'])) {
				

				print " Check AI table " . $table . "...                                    ";

				$res = mysql_query("EXPLAIN " . $table, $db1) or print  ("Error in query (FOREPAIR-EXP)\n" . mysql_error());
				$first_done = false;
				while ($row = mysql_fetch_array($res)) {
					if ($row['Key'] == "PRI") {
						//print  "Found key: " . $row['Field'] . "\n";
						$key = $row['Field'];
					}
				}
				$sql_master_ai = "SHOW TABLE STATUS WHERE Name='" . $table . "'";
				$res_master_ai = mysql_query($sql_master_ai, $db1) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_master_ai . "\n". mysql_error());
				$row_master_ai = mysql_fetch_array($res_master_ai);

				$m_ai = $row_master_ai['Auto_increment'];

				$sql_slave_ai = "SHOW TABLE STATUS WHERE Name='" . $table . "'";
				$res_slave_ai = mysql_query($sql_slave_ai, $db2) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_slave_ai . "\n". mysql_error());
				$row_slave_ai = mysql_fetch_array($res_slave_ai);

				$s_ai = $row_slave_ai['Auto_increment'];

				$sql_master_ai = "SELECT MAX(" . $key . ") FROM " . $table . "";
				$res_master_ai = mysql_query($sql_master_ai, $db1) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_master_ai . "\n". mysql_error());
				$row_master_ai = mysql_fetch_array($res_master_ai);

				$key_ai1 = $row_master_ai[0];

				$sql_slave_ai = "SELECT MAX(" . $key . ") FROM " . $table . "";
				$res_slave_ai = mysql_query($sql_slave_ai, $db2) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_slave_ai . "\n". mysql_error());
				$row_slave_ai = mysql_fetch_array($res_slave_ai);

				$key_ai2 = $row_slave_ai[0];


				if (($m_ai != $s_ai) && $m_ai != 0) {
					print  "\015 " . fillout($table,20) . " | Correcting auto-increment ($m_ai != $s_ai) |";
					mysql_query("DELETE FROM " . $table . " WHERE " . $key . " > " . ($key_ai1 - 2), $db2) or print  ("Error in query (AUTO-INCR)\n" . $sql_slave_ai . "\n". mysql_error());
					print  "\015 " . fillout($table,20) . " | Correcting auto-increment ...  (step 2) |";
					mysql_query("SET MYISAM_SORT_BUFFER_SIZE=1024000000", $db2);
					mysql_query("ALTER TABLE " . $table . " DISABLE KEYS", $db2);
					mysql_query("ALTER TABLE " . $table . " AUTO_INCREMENT = " . $m_ai, $db2) or print  ("Error in query (AUTO-INCR)\n" . $sql_slave_ai . "\n". mysql_error());
					mysql_query("ALTER TABLE " . $table . " ENABLE KEYS", $db2);

					print  "\015 " . fillout($table,20) . " | Auto-increment value corrected ($m_ai != $s_ai)             \n";
				} else {
					print "\015";
				}
			}

		}



		foreach ($tables AS $table) {
			if (!in_array($table, $GLOBALS['EXCLUDE_FROM_REP']) && !in_array($table, $insert_only_tables)) {
				$ok = false;
				while (!$ok) {

					print " Start work on table " . $table . "...";

					if (!$skip_compare_tables || $forseskip) {
						$sql_master_count_res = mysql_query("SELECT COUNT(*) FROM " . $table . "", $db1);
						$sql_master_count = mysql_fetch_array($sql_master_count_res);

						if ($sql_master_count[0] > 25000) {
							$skip_compare_tables  = true;
							$forseskip = true;
							print  " " . fillout($table,20) . " | Count is " . $sql_master_count[0] . ", delete check will be skipped.\n";
						} else {
							$skip_compare_tables  = false;
						}
					}

					$q_exec_u = 0;
					$q_exec_i = 0;

					$q_errors = 0;

					$q_deleted = 0;

					print  "\015 " . fillout($table,20) . " | " . fillout($q_exec_u, 10) . "| " . fillout($q_exec_i, 9) . "| " . fillout($q_deleted, 8) . "| " . fillout($q_errors, 7) . "| (reading)";

					$ret = array();
					$fields = array();
					$qu = "";
					$qu_hash = "";
					$keys = array();
					$key = "";

					// TABLE STRUCTURE (FIELDS &amp; KEYS)

					$res = mysql_query("EXPLAIN " . $table, $db1) or print  ("Error in query (FOREPAIR-EXP)\n" . mysql_error());
					$first_done = false;
					while ($row = mysql_fetch_array($res)) {
						if ($row['Key'] == "PRI") {
							
							$keys[] = $row['Field'];
						}
						if (!$first_done) {
							$first_done = true;
						} else {
							$qu .= ",";
							$qu_hash .= ",";
						}
						$qu .= $table . "." . $row['Field'] . "";
						$qu_hash .= " MD5(" . $table . "." . $row['Field'] . ") AS '" . $row['Field'] . "'";
						array_push($fields, $row['Field']);
					}
					if (count($keys) > 1) {
						$key = "CONCAT(";
						$nnf = false;
						foreach ($keys AS $lkey) {
							if ($nnf) $key .= ",";
							$key .= $lkey;
							$nnf = true;
						}
						$key .= ")";
					} else {
						$key = $keys[0];
					}
					if (!$key) {
						// Some things can be fixed ....
						if (strstr($table, "flextable")) {
							$key = "recordid";
						} else {
							print  " key column could not be determined {skip}";
						}
					}
//					print "\n KEY $key \n\n";
					// MASTER DATABASE vs SLAVE DATABASE
					if ($key) {

						$sql_count_master = "SELECT COUNT(*) FROM " . $table . "";
						$res_count_master = mysql_query($sql_count_master, $db1) or print  ("Error in query (FOREPAIR-SL)\n" . $sql_count_master . "\n". mysql_error());
						$row_count_master = mysql_fetch_array($res_count_master);

						if ($row_count_master[0] > 20000 && $select_record_ins == "" && !$GLOBALS['fullFull']) {
							print "\n Table too large. Processing last 20.000 records only. |\n";
							$select_record_ins = " ORDER BY timestamp_last_change DESC LIMIT 20000";
							$override = true;
						} elseif ($override) {
							$select_record_ins = "";
						}


						//print "RECORDS IN MASTER DATABASE TABLE: " . $row_count_master[0] . "\n";

						// Select concatonated hash keys per row from master database

						$sql_master = "SELECT MD5(CONCAT_WS(''," . $qu . ")) AS hash, " . $key . " AS key_id FROM " . $table. " " . $select_record_ins;
						//print $sql_master . "\n\n";
						$res_master = mysql_query($sql_master, $db1) or print ("Error in query (FOREPAIR-MA)\n" . $sql_master . "\n". mysql_error());
						$testcounter=0;
						while ($row_master = mysql_fetch_array($res_master)) {

							$slave_toquery = array();

							$sql_slave = "SELECT MD5(CONCAT_WS(''," . $qu . ")) AS hash, " . $key . " AS key_id FROM " . $table . " WHERE " . $key . " ='" . mres($row_master['key_id']) . "'";
//							print "\n\n\n" . $sql_slave . "\n\n\n";
							$res_slave = mysql_query($sql_slave, $db2) or ($q_errors++);
							$row_slave = mysql_fetch_array($res_slave);

							if ($row_slave['hash'] != $row_master['hash']) { // Mismatch on row level, get all data

								if ($row_slave['key_id'] == $row_master['key_id']) {
//									print $sql_slave . "\n";
									//print "MISMatch " . $row_slave['hash'] . " -> " . $row_master['hash'] . "\n";

									// Compare on field level

									$sql_hash_master = "SELECT " . $qu_hash . " FROM " . $table . " WHERE " . $key . " ='" . mres($row_master['key_id']) . "'";
									$res_hash_master = mysql_query($sql_hash_master, $db1) or print  ("Error in query (FOREPAIR-SL)\n" . $sql_hash_master . "\n". mysql_error());
									$row_hash_master = mysql_fetch_array($res_hash_master);

									$sql_hash_slave  = "SELECT " . $qu_hash . " FROM " . $table . " WHERE " . $key . " ='" . mres($row_master['key_id']) . "'";
									$res_hash_slave  = mysql_query($sql_hash_slave, $db2) or ($q_errors++);
									$row_hash_slave  = mysql_fetch_array($res_hash_slave);

									foreach ($fields AS $field) {
										if ($row_hash_slave[$field] == "") {
											$row_hash_slave[$field] = "d41d8cd98f00b204e9800998ecf8427e";
										}
										if ($row_hash_master[$field] == "") {
											$row_hash_master[$field] = "d41d8cd98f00b204e9800998ecf8427e";
										}
										//print "\nCMP "  . $row_hash_slave[$field] . " -> " .  $row_hash_master[$field] . "\n";
										if ($row_hash_slave[$field] != $row_hash_master[$field]) {
											//print  "HASH Mismatch on id " . $row_slave[$key] . " field " . $field . ": Master: " . $row_hash_master[$field] . " slave : " . $row_hash_slave[$field] . "\n";

											$sql_value_master = "SELECT " . $table . "." . $field . " FROM " . $table . " WHERE " . $key . " ='" . mres($row_master['key_id']) . "'";
											$res_value_master = mysql_query($sql_value_master, $db1) or ($q_errors++);
											$row_value_master = mysql_fetch_array($res_value_master);

											if (is_null($row_value_master[$field])) {
												$row_value_master[$field] = "{{{NULL}}}";
											}

											array_push($slave_toquery, array($field, $row_value_master[$field]));
										} else {
											// field values are the same
										}
									}

									if (count($slave_toquery) > 0) {
										$base = "UPDATE " . $table . " SET ";
										$first_done = "";
										foreach ($slave_toquery AS $query) {

											if (!$first_done) {
												$first_done = true;
											} else {
												$base .= ",";
											}
											if ($query[1] == "{{{NULL}}}") {
												$val = "NULL";
											} else {
												$val = "'" . mres($query[1]) . "'";
											}

											$base .= $table . "." . $query[0] . "=" . $val . "";
										}
										$base .= " WHERE " . $key . " = '" . mres($row_master['key_id']) . "'";
										mysql_query($base, $db2) or ($q_errors++);

										// print  $base . "\n\n\n\n";

										$q_exec_u++;
									} else {
										$base = "";
									}
								} else { // The record doesn't exist in the slave database
									//print "DNE ! SELECT " . $qu . " FROM " . $table . " WHERE " . $key . " ='" . mres($row_master['key_id']) . "''n";
									$sql_ins_master = "SELECT " . $qu . " FROM " . $table . " WHERE " . $key . " ='" . mres($row_master['key_id']) . "'";
									$res_ins_master = mysql_query($sql_ins_master, $db1) or print  ("Error in query (FOREPAIR-SL)\n" . $sql_master . "\n". mysql_error());
									$row_ins_master = mysql_fetch_array($res_ins_master);

									foreach ($fields AS $field) {
										if (is_null($row_value_master[$field])) {
											$row_value_master[$field] = "{{{NULL}}}";
										}
										array_push($slave_toquery, array($field, $row_ins_master[$field]));
									}

									$base = "INSERT INTO " . $table . "(" . $qu . ") VALUES(";
									$first_done = "";
									foreach ($slave_toquery AS $query) {

										if (!$first_done) {
											$first_done = true;
										} else {
											$base .= ",";
										}
										if ($query[1] == "{{{NULL}}}") {
											$val = "NULL";
										} else {
											$val = "'" . mres($query[1]) . "'";
										}

										$base .= "" . $val . "";
									}
									$base .= ")";
									mysql_query($base, $db2) or ($q_errors++);


									$q_exec_i++;

								}
							} else {
								//print  "Skipping, hash is identical\n";
								//print "HASH SLAVE " . $row_slave['hash'] . " == " .  $row_master['hash'] . "\n";
							}
							print  "\015 " . fillout($table,20) . " | " . fillout($q_exec_u, 10) . "| " . fillout($q_exec_i, 9) . "| " . fillout($q_deleted, 8) . "| " . fillout($q_errors, 7) . "| (comparing) " . $testcounter++ . "/" . $row_count_master[0];
						}
						print  "\015 " . fillout($table,20) . " | " . fillout($q_exec_u, 10) . "| " . fillout($q_exec_i, 9) . "| " . fillout($q_deleted, 8) . "| " . fillout($q_errors, 7) . "|                              ";

					} // end if key

					print  "\015 " . fillout($table,20) . " | " . fillout($q_exec_u, 10) . "| " . fillout($q_exec_i, 9) . "| " . fillout($q_deleted, 8) . "| " . fillout($q_errors, 7) . "| (done)     ";

					// and now check for records in the fail-over database which need to be deleted
					if (!$skip_compare_tables) {
						$master_list = array();
						$slave_list  = array();

						$sql_del_master = "SELECT " . $table . "." . $key . " FROM " . $table;
						$res_del_master = mysql_query($sql_del_master, $db1) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_del_master . "\n". mysql_error());
						while ($row_del_master = mysql_fetch_array($res_del_master)) {
							array_push($master_list, $row_del_master[$key]);
						}

						$sql_del_slave  = "SELECT " . $table . "." . $key . " FROM " . $table;
						$res_del_slave  = mysql_query($sql_del_slave, $db2) or print  ("Error in query (FOREPAIR-DELSL)\n" . $sql_del_slave . "\n". mysql_error());
						while ($row_del_slave = mysql_fetch_array($res_del_slave)) {
							array_push($slave_list, $row_del_slave[$key]);
						}
						$base = "";
						print  "\015 " . fillout($table,20) . " | " . fillout($q_exec_u, 10) . "| " . fillout($q_exec_i, 9) . "| " . fillout($q_deleted, 8) . "| " . fillout($q_errors, 7) . "| (comparing/deletes)     ";
						foreach ($slave_list AS $slave_rec) {
							if (!in_array($slave_rec, $master_list)) {
								$base = "DELETE FROM " . $table . " WHERE " . $table . "." . $key . "='" . $slave_rec . "'";
								//print $base . "\n";
								mysql_query($base, $db2) or ($q_errors++);
								$q_deleted++;
							}

						}
						print  "\015 " . fillout($table,20) . " | " . fillout($q_exec_u, 10) . "| " . fillout($q_exec_i, 9) . "| " . fillout($q_deleted, 8) . "| " . fillout($q_errors, 7) . "|                                 ";
					}
					print  "\n";
					if ($q_errors == 0) {
						$ok = true; 
					} else {
						if ($retry) {
							print " ERROR: Table " . $table . " is out of sync and this procedure couldn't fix it. Please re-copy this table manually!\n";
							$ok = true;
						} else {
							$base = "TRUNCATE TABLE " . $table . "";
							print " Couldn't fix it. Start complete rebuild.\n";
							$retry = true;
							mysql_query($base, $db2) or ($ok = true);
						}
					}
				}

			}
		}

		if (!$skip_compare_tables) {
			print  "-----------------------------------------------------------------\n";
			print  " Insert-only table    | Updates   | Inserts  | Deletes | Errors |\n";
			print  "-----------------------------------------------------------------\n";



			foreach ($insert_only_tables AS $table) {
				$ret = array();
				$fields = array();
				$qu = "";
				$qu_hash = "";
				$key = "";

				$q_exec_u  = 0;
				$q_exec_i  = 0;
				$q_deleted = 0;
				$q_errors  = 0;
				// TABLE STRUCTURE (FIELDS &amp; KEYS)

				$res = mysql_query("EXPLAIN " . $table, $db1) or print  ("Error in query (FOREPAIR-EXP)\n" . mysql_error());
				$first_done = false;
				while ($row = mysql_fetch_array($res)) {
					if ($row['Key'] == "PRI") {
						//print  "Found key: " . $row['Field'] . "\n";
						$key = $row['Field'];
					}
					if (!$first_done) {
						$first_done = true;
					} else {
						$qu .= ",";
						$qu_hash .= ",";
					}
					$qu .= $table . "." . $row['Field'] . "";
					$qu_hash .= " MD5(" . $table . "." . $row['Field'] . ") AS '" . $row['Field'] . "'";
					array_push($fields, $row['Field']);
				}
				if (!$key) {
					// Some things can be fixed ....
					if (strstr($table, "flextable")) {
						$key = "recordid";
					} else {
						print  " key column could not be determined {skip}";
					}
				}

				print  "\015 " . fillout($table,20) . " | " . fillout("n/a", 10) . "| " . fillout($q_exec_i, 9) . "| " . fillout($q_deleted, 8) . "| " . fillout($q_errors, 7) . "| (reading)     ";

				// and now check for records in the fail-over database which need to be deleted

				$sql_master_ai = "SELECT MAX(" . $key . ") FROM " . $table . "";
				$res_master_ai = mysql_query($sql_master_ai, $db1) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_master_ai . "\n". mysql_error());
				$row_master_ai = mysql_fetch_array($res_master_ai);

				$m_ai = $row_master_ai[0];

				$sql_slave_ai = "SELECT MAX(" . $key . ") FROM " . $table . "";
				$res_slave_ai = mysql_query($sql_slave_ai, $db2) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_slave_ai . "\n". mysql_error());
				$row_slave_ai = mysql_fetch_array($res_slave_ai);

				$s_ai = $row_slave_ai[0];

				if ($s_ai == $m_ai) {
					//  Max(key)'s are equal
				} elseif ($s_ai < $m_ai) {
					for ($keycounter=($s_ai+1);$keycounter!=$m_ai;$keycounter++) {
						$base = "";

						$sql_iot_ins_master = "SELECT " . $qu . " FROM " . $table . " WHERE " . $key . "=" . $keycounter;
						$res_iot_ins_master = mysql_query($sql_iot_ins_master, $db1) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_del_master . "\n". mysql_error());
						$row_iot_ins_master = mysql_fetch_array($res_iot_ins_master);

						$slave_toquery = array();

						foreach ($fields AS $field) {
							if (is_null($row_iot_ins_master[$field])) {
								$row_iot_ins_master[$field] = "{{{NULL}}}";
							}
							array_push($slave_toquery, array($field, $row_iot_ins_master[$field]));
						}

						$base = "INSERT INTO " . $table . "(" . $qu . ") VALUES(";
						$first_done = "";
						foreach ($slave_toquery AS $query) {

							if (!$first_done) {
								$first_done = true;
							} else {
								$base .= ",";
							}
							if ($query[1] == "{{{NULL}}}") {
								$val = "NULL";
							} else {
								$val = "'" . mres($query[1]) . "'";
							}

							$base .= "" . $val . "";
						}	
						$base .= ")";

						mysql_query($base, $db2) or ($q_errors++); 
						$q_exec_i++;
					}
				} else { // Slave has higher index than master

						$base = "\n\nDELETE FROM " . $table . " WHERE " . $table . "." . $key . ">'" . $m_ai . "'";
						//print $base . "\n";
						mysql_query($base, $db2) or ($q_errors++);
						$q_deleted++;

				}
			print  "\015 " . fillout($table,20) . " | " . fillout("n/a", 10) . "| " . fillout($q_exec_i, 9) . "| " . fillout($q_deleted, 8) . "| " . fillout($q_errors, 7) . "|              \n";
			}




		}
		foreach ($tables AS $table) {

			if (!in_array($table, $GLOBALS['EXCLUDE_FROM_REP'])) {
				

				print " Check AI table " . $table . "...                                    ";

				$res = mysql_query("EXPLAIN " . $table, $db1) or print  ("Error in query (FOREPAIR-EXP)\n" . mysql_error());
				$first_done = false;
				while ($row = mysql_fetch_array($res)) {
					if ($row['Key'] == "PRI") {
						//print  "Found key: " . $row['Field'] . "\n";
						$key = $row['Field'];
					}
				}
				$sql_master_ai = "SHOW TABLE STATUS WHERE Name='" . $table . "'";
				$res_master_ai = mysql_query($sql_master_ai, $db1) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_master_ai . "\n". mysql_error());
				$row_master_ai = mysql_fetch_array($res_master_ai);

				$m_ai = $row_master_ai['Auto_increment'];

				$sql_slave_ai = "SHOW TABLE STATUS WHERE Name='" . $table . "'";
				$res_slave_ai = mysql_query($sql_slave_ai, $db2) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_slave_ai . "\n". mysql_error());
				$row_slave_ai = mysql_fetch_array($res_slave_ai);

				$s_ai = $row_slave_ai['Auto_increment'];

				$sql_master_ai = "SELECT MAX(" . $key . ") FROM " . $table . "";
				$res_master_ai = mysql_query($sql_master_ai, $db1) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_master_ai . "\n". mysql_error());
				$row_master_ai = mysql_fetch_array($res_master_ai);

				$key_ai1 = $row_master_ai[0];

				$sql_slave_ai = "SELECT MAX(" . $key . ") FROM " . $table . "";
				$res_slave_ai = mysql_query($sql_slave_ai, $db2) or print  ("Error in query (FOREPAIR-DELMA)\n" . $sql_slave_ai . "\n". mysql_error());
				$row_slave_ai = mysql_fetch_array($res_slave_ai);

				$key_ai2 = $row_slave_ai[0];


				if (($m_ai != $s_ai) && $m_ai != 0) {
					print  "\015 " . fillout($table,20) . " | Correcting auto-increment ($m_ai != $s_ai) |";
					mysql_query("DELETE FROM " . $table . " WHERE " . $key . " > " . ($key_ai1 - 2), $db2) or print  ("Error in query (AUTO-INCR)\n" . $sql_slave_ai . "\n". mysql_error());
					print  "\015 " . fillout($table,20) . " | Correcting auto-increment ...  (step 2) |";
					mysql_query("SET MYISAM_SORT_BUFFER_SIZE=1024000000", $db2);
					mysql_query("ALTER TABLE " . $table . " DISABLE KEYS", $db2);
					mysql_query("ALTER TABLE " . $table . " AUTO_INCREMENT = " . $m_ai, $db2) or print  ("Error in query (AUTO-INCR)\n" . $sql_slave_ai . "\n". mysql_error());
					mysql_query("ALTER TABLE " . $table . " ENABLE KEYS", $db2);

					print  "\015 " . fillout($table,20) . " | Auto-increment value corrected ($m_ai != $s_ai)             \n";
				} else {
					print "\015";
				}
			}

		}


		$sql_master_ai = "UPDATE " . $tp . "settings SET value='" . $epoch_when_started . "' WHERE setting='LastIncrementalSync'";
		$res_master_ai = mysql_query($sql_master_ai, $db1) or print  ("Error in query (SETLiS)\n" . $sql_master_ai . "\n". mysql_error());
		$sql_slave_ai = "UPDATE " . $tp . "settings SET value='" . $epoch_when_started . "' WHERE setting='LastIncrementalSync'";
		$res_slave_ai = mysql_query($sql_slave_ai, $db2) or print  ("Error in query (SETLiS)\n" . $sql_slave_ai . "\n". mysql_error());


		



		print  "-----------------------------------------------------------------\n";

		mysql_close($db1);
		mysql_close($db2);
		mysql_close($db);
		$GLOBALS['LAST_DB_CONN'] = "";
		SwitchToRepos($original_database);
}

function RepairFailOverdatabase($db_to_process, $cmdline, $OnlyDamagedTables=true) {
		print "Call: " . $db_to_process . "\n\n";
		$GLOBALS['USE_FAILOVER'] = false;
		include($GLOBALS['CONFIGFILE']);
		print "Using " . $GLOBALS['CONFIGFILE'] . ", slave " . $slave[$db_to_process] . "\n";
		if ($slave[$db_to_process] == "" || !is_numeric($db_to_process)) {
			qlog(INFO, "Tried to copy database with no failover setting (slave/$db_to_process)");
			print("Tried to copy database with no failover setting (slave/$db_to_process)\n");
			return(false);
		}
	//	if ($cmdline) print "Enabling maintenance mode for repository " . $GLOBALS['title'] . ".\n";
		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "settings SET value='Yes' WHERE setting='MAINTENANCE_MODE'", $db);
		mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "failoverquerystore", $db);
		qlog(INFO, "Start building array of insert queries...");
		if ($cmdline) print "Start building array with queries ... \n";
		$qs = array();
		$tot = array();
		SetTIU();

		$tmparr = $GLOBALS['TABLES_IN_USE'];

		for ($i=0;$i<100;$i++) {
			if (strstr($tmparr[$i], "failoverquerystore") || strstr($tmparr[$i], "cache") || strstr($tmparr[$i], "uselog") || strstr($tmparr[$i], "todo")) {
				unset($tmparr[$i]);
			}
		}



		// Reduce number of tables if that's what's asked
		if ($OnlyDamagedTables) {
			print "Repairing incrementally, only tables with a wrong record count will be re-copied.\n";
			$tc= CompareSyncTables($db_to_process);
			foreach ($tc AS $table => $comparray) {
				if ($comparray['master'] == $comparray['slave']) {
					//print "Skipping table " . $table . ", it seems to bu up-to-date (count only).\n";
					for ($i=0;$i<100;$i++) {
						if ($tmparr[$i] == $table) {
							unset($tmparr[$i]);
						}
					}
				}
			}
			SwitchToRepos($db_to_process);
		}



		$GLOBALS['TABLES_IN_USE'] = $tmparr;

		if (sizeof($GLOBALS['TABLES_IN_USE']) == 0) {
			print "All tables are OK, nothing to do.\n";
			return(true);
		}
		$tot = array();
		foreach ($GLOBALS['TABLES_IN_USE'] AS $table) {
			$x = db_GetRow("SHOW CREATE TABLE `" . $table . "`", false, false);
			array_push($tot, "DROP TABLE IF EXISTS " . $table);
			array_push($tot, $x[1]);
		}

		foreach ($GLOBALS['TABLES_IN_USE'] AS $table) {

				unset($qu);
				$fields = array();
				$sql = "EXPLAIN " . $table;
				$res = mcq($sql, $db);
				while ($row2 = mysql_fetch_array($res)) {
					if (!$first_done) {
						$first_done = true;
					} else {
						$qu .= ",";
					}
					$qu .= "`" . $row2['Field'] . "`";
					array_push($fields, $row2['Field']);
				}
				unset($first_done);
				if ($cmdline) print "\015Reading " . fillout($table,40) . "... mem: " . number_format(memory_get_usage()) . " bytes";
				$sql = "SELECT " . $qu . " FROM " . $table;

				$res = mcq($sql, $db);
				$num = 0;
				while ($row = mysql_fetch_array($res)) {
					$num++;
					$str = "INSERT INTO " . $table . "(" . $qu . ") VALUES (";
					foreach($fields AS $field) {
						if (!$first_done) {
							$first_done = true;
						} else {
							$str .= ", ";
						}
						$str .= "'" . mres($row[$field]) . "'";
					}
					if ($cmdline) print "\015Reading " . fillout($table,40) . "... mem: " . number_format(memory_get_usage()) . " bytes";
					$str .= ")";
					unset($first_done);
					array_push($tot, $str);
					unset($str);
				}
				print " Records: " . fillout($num,6) . "\n";
				$records[$table] = $num;
				unset($num);
			}
		if ($cmdline) print " done.\n ";


		$tot_size = sizeof($tot);
		$tot_size_pc = $tot_size / 100;
		if ($cmdline) print " Build array of " . $tot_size . " elements. In memory now: " . number_format(memory_get_usage()) . " bytes.\n\n";
		$rephost = $slave[$GLOBALS['repository_nr']];
		$repuser = $user[$GLOBALS['repository_nr']];
		$reppass = $pass[$GLOBALS['repository_nr']];
		$repdb   = $database[$GLOBALS['repository_nr']];
		$cur = 0;
//		exit;
		if ($db = mysql_connect($rephost, $repuser, $reppass)) {
			if (mysql_select_db($repdb, $db)) {
				// all ok
				if ($cmdline) print "Connected to $repdb@$rephost. Starting copy. DO NOT INTERRUPT.\n\n";

				$until = sizeof($tot);
				for($x=0;$x<$until;$x++) {

					$a = mysql_query($tot[$x]) or (print "ERROR:\n" . mysql_error() ."\n");
					unset($tot[$x]); // Free memory ASAP
					if ($cmdline) {
							$progress = round($cur / $tot_size_pc);
							print "\015 " . $progress . "% (mem: " . number_format(memory_get_usage()) . " bytes)";
					}
					$cur++;
				}
			}
		}
		SetTIU();
		unset($tot);
		//if ($cmdline) print "\n\nDisabling maintenance mode for repository " . $GLOBALS['title'] . ".\n\nDone!\n";
		SwitchToRepos($GLOBALS['repository_nr']);
	//	mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "settings SET value='No' WHERE setting='MAINTENANCE_MODE'", $db);
}

function GenerateImageThumbnails($eid = "all", $print = false, $fileid="") {
		if ($GLOBALS['ENABLEIMAGETHUMBNAILS'] == "Yes") {
			qlog(INFO, "Start creating image thumbnails (" . $eid . ")");
			//if ($print) print "\nStart creating image thumbnails \n";
			if (is_numeric($fileid)) {
				qlog(INFO, "Generating thumbnail by file id...");
				$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] . "blobs.content, " . $GLOBALS['TBL_PREFIX'] . "blobs.fileid," . $GLOBALS['TBL_PREFIX'] . "binfiles.filetype FROM " . $GLOBALS['TBL_PREFIX'] . "blobs, " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE (" . $GLOBALS['TBL_PREFIX'] . "binfiles.filetype='image/jpeg' OR " . $GLOBALS['TBL_PREFIX'] . "binfiles.filetype='image/gif') AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] . "blobs.fileid AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.fileid=" . $fileid;
			} elseif ($eid == "all") {
				qlog(INFO, "Generating all thumbnails (new only)...");
				$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] . "blobs.content, " . $GLOBALS['TBL_PREFIX'] . "blobs.fileid," . $GLOBALS['TBL_PREFIX'] . "binfiles.filetype FROM " . $GLOBALS['TBL_PREFIX'] . "blobs, " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE (" . $GLOBALS['TBL_PREFIX'] . "binfiles.filetype='image/jpeg' OR " . $GLOBALS['TBL_PREFIX'] . "binfiles.filetype='image/gif') AND " . $GLOBALS['TBL_PREFIX'] . "blobs.thumbnail='' AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] . "blobs.fileid";
			} else {
				qlog(INFO, "Generating all thumbnails (new only, only eid " . $eid . ")...");
				$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] . "blobs.content, " . $GLOBALS['TBL_PREFIX'] . "blobs.fileid, " . $GLOBALS['TBL_PREFIX'] . "binfiles.filetype FROM " . $GLOBALS['TBL_PREFIX'] . "blobs, " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE (" . $GLOBALS['TBL_PREFIX'] . "binfiles.filetype='image/jpeg' OR " . $GLOBALS['TBL_PREFIX'] . "binfiles.filetype='image/gif') AND " . $GLOBALS['TBL_PREFIX'] . "blobs.thumbnail='' AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.koppelid='" . mres($eid) . "' AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] . "blobs.fileid";
			}
			$res = mcq($sql, $db);
			while ($row = mysql_fetch_array($res)) {
				$file = tempnam($GLOBALS['TMP_FILE_PATH'],"CRM_TMP_RESBIN_");
				$fp = fopen($file, "w");
				fputs($fp, $row['content']);
				fclose($fp);
				$tn = CreateImageThumbnail($file, $row['filetype']);
				unlink($file);
				if (strlen($tn) > 1) {
					mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "blobs SET thumbnail='" . mres($tn) . "' WHERE fileid=" . $row['fileid'] . " AND thumbnail=''", $db);
					if (is_numeric($fileid)) {
						$ret = $tn;
						qlog(INFO, "Returning thumbnail ...");
					}
					if ($print) print "\015Thumbnail created for file " . $row['fileid'] . " " . $GLOBALS['title'] . " " . $row['filetype'] . "";
				} else {
					if ($print) print "\015FAILED to create a thumbnail for file " . $row['fileid'] . " " . $GLOBALS['title'] . "";
					if (is_numeric($fileid)) {
						$ret = $tn;
						qlog(INFO, "NOT Returning thumbnail (failed!)");
					}
				}
				unset($tn);
			}
			if ($print) print "\015Done.                                                                                                          \n";
			qlog(INFO, "Finished thumbing...");
			return($ret);
		} else {
			qlog(INFO, "Image thumbnailing is disabled");
			return(false);
		}
}
function GetImageThumbnail($fileid) {
	if ($GLOBALS['ENABLEIMAGETHUMBNAILS'] == "Yes") {
		$row = db_GetRow("SELECT thumbnail FROM " . $GLOBALS['TBL_PREFIX'] . "blobs WHERE fileid='" . mres($fileid) . "' AND thumbnail!=''");
		if ($row['thumbnail'] != "") {
			qlog(INFO, "Fetched thumbnail " . $fileid . "from database");
			return($row['thumbnail']);
		} else {
			qlog(INFO, "Generating thumbnail " . $fileid . " on the fly");
			return(GenerateImageThumbnails("","",$fileid));
		}
	} else {
		qlog(INFO, "Image thumbnailing is disabled");
		return(false);
	}
}
function GetMiniThumbnail($fileid) {
	if (is_numeric($fileid)) {
		$row = db_GetRow("SELECT minithumbnail FROM " . $GLOBALS['TBL_PREFIX'] . "blobs WHERE fileid='" . mres($fileid) . "' AND minithumbnail!=''");
		if ($row['minithumbnail'] != "") {
			qlog(INFO, "Fetched minithumbnail " . $fileid . "from database");
			return($row['minithumbnail']);
		} else {
			qlog(INFO, "Generating minithumbnail " . $fileid . " on the fly");
			$fileondisk = CopyFileToDisk($fileid);
			$img = CreateImageThumbnail($fileondisk, GetFileType($fileid), 26);
			unlink($fileondisk);
			mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "blobs SET minithumbnail='" . mres($img) . "' WHERE fileid='" . mres($fileid) . "'", $db);
			return($img);
		}
	} else {
		return(false);
	}
}
function CreateImageThumbnail($img_path, $format, $maxwidth=160) {
		if ($GLOBALS['ENABLEIMAGETHUMBNAILS'] == "Yes") {
			$MaxThumbNailWidth = $maxwidth; // Breedte moet constant zijn

			if ($format == "image/jpeg") {
				$UploadedImageContents = imagecreatefromjpeg($img_path);
			} elseif ($format == "image/gif") {
				$UploadedImageContents = imagecreatefromgif($img_path);
			}
			// Get dimensions
			$Imagewidth = imagesx($UploadedImageContents);
			$Imageheight = imagesy($UploadedImageContents);

			if ($Imagewidth > $Imageheight) {
				// 	Width is greater than height (landscape image)
				$NewThumbImageWidth  = $MaxThumbNailWidth;
				$NewThumbImageHeight = ceil($Imageheight/($Imagewidth/$NewThumbImageWidth));
			} else {
				// Width is smaller than height (portrait)
				$NewThumbImageHeight = $MaxThumbNailWidth;
				$NewThumbImageWidth  = ceil($Imagewidth/($Imageheight/$NewThumbImageHeight));
			}

			// Create thumbnail
			$ThumbNailImage = imagecreatetruecolor($NewThumbImageWidth, $NewThumbImageHeight);
			imagecopyresampled($ThumbNailImage, $UploadedImageContents, 0, 0, 0, 0, $NewThumbImageWidth, $NewThumbImageHeight, $Imagewidth, $Imageheight);
			ob_start();
			imagejpeg($ThumbNailImage);
			$output = ob_get_contents();
			ob_end_clean();
			imagedestroy($UploadedImageContents);
			imagedestroy($ThumbNailImage);
			qlog(INFO, "Image thumbnail created");
			return $output;
		} else {
			qlog(INFO, "Image thumbnailing is disabled");
			return(false);
		}
}
function FixOpenIDURL($url) {
	$url = trim(strtolower($url));
	if (substr($url, 0, 7) != "http://" && substr($url, 0, 8) != "https://") {
		$url = "http://" . $url;
	}
	if (substr($url, strlen($url)-1,1) == "/") {
		$url = substr($url, 0, strlen($url)-1);
	}
	return($url);
}
function TryToFigureOutFileType($filename) {
	if (strtoupper(substr($filename, strlen($filename)-4,4)) == ".JPG") {
		return("image/jpeg");
	} elseif (strtoupper(substr($filename, strlen($filename)-4,4)) == ".GIF") {
		return("image/gif");
	} elseif (strtoupper(substr($filename, strlen($filename)-4,4)) == ".HTM") {
		return("text/html");
	} elseif (strtoupper(substr($filename, strlen($filename)-4,4)) == ".PDF") {
		return("application/pdf");
	} elseif (strtoupper(substr($filename, strlen($filename)-4,4)) == ".DOC") {
		return("application/MSWORD");
	} else {
		return("unknown");
	}
}
function GetCurrentDBTotalSize() {
	$sql = "SHOW TABLE STATUS";
//	$sql = "SHOW TABLE STATUS WHERE ";
	// This would be nice though older versions of MySQL do not support it
//	foreach($GLOBALS['TABLES_IN_USE'] as $table) {
//		$sql .= "Name='" . mres($table) . "' OR ";
//	}
//	$sql .= "1=0";

	$result= mcq($sql,$db);
	while ($stat = @mysql_fetch_array($result))
	{
		$size += $stat["Data_length"];
		$size += $stat["Index_lenght"];
	}

//	$tot_size += (($size/1024)/1024);
	return(ceil((($size/1024)/1024)));
}
function CompareSyncTables($repos) {
	include($GLOBALS['CONFIGFILE']);
	$ret = array();
	if ($slave[$repos]) {
		if (DB_Connect($repos, false)) {
			SetTIU($table_prefix[$repos]);

			foreach($GLOBALS['TABLES_IN_USE'] as $table) {
				if (!strstr($table, "failoverquerystore")) {
					$t = db_GetRow("SELECT COUNT(*) FROM " . $table);
					$ret[$table] = array();
					$ret[$table]['master'] = $t[0];
				}
			}
		}
		if (DB_Connect($repos, true)) {
			SetTIU($table_prefix[$repos]);

			foreach($GLOBALS['TABLES_IN_USE'] as $table) {
				if (!strstr($table, "failoverquerystore")) {
					$t = db_GetRow("SELECT COUNT(*) FROM " . $table);
					$ret[$table]['slave'] = $t[0];
				}
			}
		}

	}
	return($ret);
}

function DetermineBaseFilesystemPath() {
	$t = $_SERVER['SCRIPT_FILENAME'];
	$t = str_replace("\\","/", $t);
	$u = explode("/", $t);
	$path = "";
	for ($p=0;$p<sizeof($u)-1;$p++) {
		$path .= $u[$p] . "/";
	}
	$GLOBALS['PATHTOINTERLEAVE'] = $path;
}

function DeleteOldVersions() {
	print "<table><tr>&nbsp;&nbsp;</td><td>Not yet implemented</td></tr>";
	print "</table>";
}
function DropAllCache() {
	mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "cache", $db);
	mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "accesscache", $db);
	mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "entityformcache", $db);
	mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "publishedpagescache", $db);
//	mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "entitylocks", $db);
	mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "breadcrumtrail", $db);
	mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "sessions SET sessioncache=''");
	ExpireDashboardCache();
	DeleteExpiredTempFiles();
}
function GenerateUniqueEntityIdentifier($eid) {
	if (IsValidEID($eid)) {
		if (!$GLOBALS['ORIGINAL_REPOSITORY']) {
			$rep = $GLOBALS['repository_nr'];
		} else {
			$rep = $GLOBALS['ORIGINAL_REPOSITORY'];
		}
		$tmp = db_GetRow("select md5(concat(eid, createdby)) AS mdkey from " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'");
		$key = '$INTERLEAVE$' . $rep . '$' . $tmp[0] . '$';
		return($key);
	}
}
function ExtractUniqueKeyElements($input) {
	//  Key layout
	//	$INTERLEAVE$3$eb163727917cbba1eea208541a643e74$

	$tmp = explode('$', $input);
	for ($i=0;$i<sizeof($tmp);$i++) {
		if ($tmp[$i] == "INTERLEAVE") {
			$repository = $tmp[$i+1];
			$key = $tmp[$i+2];
		}
	}
	$key = str_replace("\n", "", trim($key));
	$key = str_replace("=", "", trim($key));

	$tmp = db_GetRow("select eid from " . $GLOBALS['TBL_PREFIX'] . "entity WHERE md5(concat(eid, createdby))='" . mres($key) . "'");

	$eid = $tmp[0];
	$return = array();
	$return['repository'] = $repository;
	$return['eid'] = $eid;
	return($return);
}

function GetFormCache ($eid, $formid, $table) {
	if (is_numeric($GLOBALS['USERID']) && $GLOBALS['DISABLEENTITYFORMCACHE'] != "Yes") {
		$x = db_GetRow("SELECT content FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache WHERE eid='" . mres($eid) . "' AND formid='" . mres($formid) . "' AND user='" . mres($GLOBALS['USERID']) . "' AND tabletype='" . mres($table) . "'");
		return($x);
	} else {
		return(false);
	}
}
function SetFormCache ($eid, $formid, $table, $parsed_result) {


	if ($GLOBALS['USERID'] && $GLOBALS['DISABLEENTITYFORMCACHE'] != "Yes" ) {
		if ($eid != "_new_" && is_numeric($eid) && (strlen($parsed_result) > 0) && (is_numeric($formid) || $formid === 0) && $table!="") {

//			mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "entityformcache WHERE eid='" . mres($eid) . "' AND formid='" . mres($formid) . "' AND user='" . mres($GLOBALS['USERID']) . "' AND tabletype='" . mres($table) . "'", $db);
//			mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "entityformcache(eid, formid, user, content, tabletype) VALUES('" . mres($eid) . "','" . mres($formid) . "','" . mres($GLOBALS['USERID']) . "','" . mres($parsed_result) . "','" . mres($table) . "')",$db);

			mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "entityformcache (eid, formid, user, tabletype, content, timestamp_last_change) VALUES('" . mres($eid) . "', '" . mres($formid) . "', '" . mres($GLOBALS['USERID']) . "', '" . mres($table) . "', '" . mres($parsed_result) . "', NOW()) ON DUPLICATE KEY UPDATE content='" . mres($parsed_result) . "', timestamp_last_change=NOW()", $db);

		} else {
			qlog(INFO, "Not saving form cache (reason unknown)");
		}
	} else {
		qlog(INFO, "Not saving form cache (reason unknown)");
	}

}

function IsDeletedField($fieldnum) {
	$t = db_GetValue("SELECT deleted FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($fieldnum) . "'");
	if ($t == "y") {
		return(true);
	} else {
		return(false);
	}
}

function GetExtraFieldType($fieldname) {
	qlog(INFO, "Start $fieldname");

	$fieldname = str_replace("EFID", "", $fieldname);
	$fieldname = str_replace($GLOBALS['TBL_PREFIX'] . "entity.", "", $fieldname);
	$fieldname = str_replace($GLOBALS['TBL_PREFIX'] . "custromer.", "", $fieldname);

	if ($GLOBALS['PageCache']['ExtraFieldTypes'][$fieldname] != "") {
		
		return($GLOBALS['PageCache']['ExtraFieldTypes'][$fieldname]);
	} else {

		$deffields = explode(" ", "category status priority duedate startdate creationdate lastupdate closedate timestamp_last_change cdate owner assignee deleted custname contact contact_title contact_phone contact_email cust_address cust_remarks cust_homepage active refer customer_owner content customer CRMcustomer");

		if (in_array($fieldname, $deffields)) {
			if ($fieldname == "duedate" || $fieldname == "startdate" || $fieldname == "creationdate") {
				$t = "date";
			} elseif ($fieldname == "assignee" || $fieldname == "owner" || $fieldname == "customer_owner") {
				$t = "User-list of all CRM-CTT users";
			} elseif ($fieldname == "custname") {
				$t = "textbox";
			} elseif ($fieldname == "CRMcustomer" || $fieldname == "customer") {
				$t = "List of all active customers";
			} elseif ($fieldname == "category") {
				$t = "textbox";
			} elseif ($fieldname == "cust_hompage") {
				$t = "hyperlink";
			} elseif ($fieldname == "contact_email") {
				$t = "mail";
			} elseif ($fieldname == "content") {
				$t = "text area";
			} elseif ($fieldname == "refer") {
				$t = "refer";
			} elseif ($fieldname == "deleted" || $fieldname == "active" || $fieldname == "status" || $fieldname == "priority") {
				$t = "drop-down";
			} elseif ($fieldname == "timestamp_last_change" || $fieldname == "lastupdate") {
				$t = "date/time";
			}
			$GLOBALS['PageCache']['ExtraFieldTypes'][$fieldname] = $t;

		} else {

			$t = db_GetArray("SELECT id,fieldtype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields");

			foreach ($t AS $f) {
				if (substr($f['fieldtype'], 0, 10) == "[copyfield") {
					
					$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $f['fieldtype']));
					qlog(INFO, "Field " . $t . " has a property copy setting - copy conditions from WHERE id='" . $field_to_copy . "'");
					$f['fieldtype'] = db_GetValue("SELECT fieldtype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . $field_to_copy . "'"); 

				}
				$GLOBALS['PageCache']['ExtraFieldTypes'][$f['id']] = $f['fieldtype'];
			}

			
			
		}
		qlog(INFO, "Done");
		return($GLOBALS['PageCache']['ExtraFieldTypes'][$fieldname]);
	}
}
function GetExtraFieldOptioncolors($fieldname) {
	qlog(INFO, "Start");
	if (is_array($GLOBALS['PageCache']['ExtraFieldOptioncolors'][$fieldname])) {
		qlog(INFO, "Done");
		return($GLOBALS['PageCache']['ExtraFieldOptioncolors'][$fieldname]);
	} else {

		$t = db_GetRow("SELECT optioncolors, fieldtype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($fieldname) . "'");
		
		$ret = unserialize($t[0]);

		if (strstr($t[1], "[copyfield")) {
			$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $t[1]));
			qlog(INFO, "Field " . $fieldname . " has a property copy setting - copy conditions from " . $field_to_copy);
			$ret = GetExtraFieldOptioncolors($field_to_copy);
		}
		if (!is_array($ret)) {
			$ret = array();
		}
		$GLOBALS['PageCache']['ExtraFieldOptioncolors'][$fieldname] = $ret;
		qlog(INFO, "Done");
		return($ret);
	}
}

function SortColorArray($a, $b) {

	if ($a['select'] == $b['select']) return(0);
	return ($a['select'] < $b['select']) ? -1 : 1;
}

function GetExtraFieldColor($field, $value) {

	$field = str_replace("EFID", "", $field);

	qlog(INFO, "Response to Ask field [$field]  value [not_printed] : INIT");

	if (!is_array($GLOBALS['PageCache']['OptionColors'][$field])) {
		
		$fi = db_GetRow("SELECT fieldtype,optioncolors FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($field) . "'");
		
		$GLOBALS['PageCache']['OptionColors'][$field] = unserialize($fi['optioncolors']);

		if (strstr($fi['fieldtype'], "[copyfield") ) {
			// && (count($GLOBALS['PageCache']['OptionColors'][$field]) == 0 || !is_array($GLOBALS['PageCache']['OptionColors'][$field]))
			unset($GLOBALS['PageCache']['OptionColors'][$field]);
			
			$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $fi['fieldtype']));

			//print "copy $field from $field_to_copy ";
			$GLOBALS['PageCache']['OptionColors'][$field] = GetExtraFieldColor($field_to_copy, $value);
			qlog(INFO, "Response to Ask field [$field]  value [not_printed] : return [" . $GLOBALS['PageCache']['OptionColors'][$field] . "] (cached) against [" . $row['select'] . "]");
			return($GLOBALS['PageCache']['OptionColors'][$field]);
		} else {
		//	print "NEG $field ". $fi['fieldtype'];
		//	DA($GLOBALS['PageCache']['OptionColors'][$field]);
		}
	} else {

		// print "skip cache $field";
		// DA($GLOBALS['PageCache']['OptionColors'][$field]);
	}
	$colors = $GLOBALS['PageCache']['OptionColors'][$field];
	
	if (!is_array($colors)) {
		qlog(INFO, "Response to Ask field [$field]  value [not_printed] : FALSE");
		return(false);
	} else {
		uasort($colors, "SortColorArray");

		$colors = array_reverse($colors, true); // preserve array keys but reverse array

		$ret = false;
		foreach ($colors AS $colvalue => $row) {
			if ($colvalue == $value) {
				qlog(INFO, "Response to Ask field [$field]  value [not_printed] : return [$row] against [" . $colvalue . "] COLVALUE=VALUE");
				return($row);
			} elseif (substr($colvalue,0,7) == "operand" && (is_numeric($value) || $value === 0 || $value == "" || is_numeric(NLDate2Epoch($value)))) {
				
				if (GetExtraFieldType($field) == "date") {
					$row['select'] = ParseDefaultValueTags($row['select'], "htme");
					if ($row['operand'] == "LT" || $row['operand'] == "GT") {
						$row['select'] = NLDate2Epoch($row['select']);
						$value = NLDate2Epoch($value);
						if ($value == 0) $value = "";
					}
				} else {
					// some condition exists
					if ($value == "") $value = 0;
						}
				if ($row['operand'] == "LT" && ($value < $row['select']) && $row['select'] != "" && $value != "") {
					$ret = $row['color'];
				} elseif ($row['operand'] == "GT" && ($value > $row['select'])  && $row['select'] != ""  && $value != "") {
					$ret = $row['color'];
				}
			} elseif (substr($colvalue,0,7) == "operand" && $row['operand'] == "HAS" && stristr($value, $row['select'])) {
				$ret = $row['color'];
				break;
			}
		}
		qlog(INFO, "Response to Ask field [$field]  value [not_printed] : return [$ret] against [" . $row['select'] . "]");
		return($ret);
	}	
}

function GetExtraFieldOptions($fieldname) {
	
	$deffields = explode(" ", "category status priority duedate startdate owner assignee deleted custname contact contact_title contact_phone contact_email cust_address cust_remarks cust_homepage active");

	if ($fieldname == "deleted") {
			$ret = array('n','y');
	} elseif ($fieldname == "active") {
			$ret = array('no','yes');
	} elseif ($fieldname == "status") {
			$ret = GetStatusses();
	} elseif ($fieldname == "priority") {
			$ret = GetPriorities();

	} elseif (is_numeric($fieldname)) {
		$t = db_GetRow("SELECT options,fieldtype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($fieldname) . "'");
		if ($tmp = unserialize($t[0])) {
			$ret = $tmp;
		} else {
			$ret = $t[0];
		}

		if (strstr($t[1], "[copyfield")) {
			$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $t[1]));
			qlog(INFO, "Field " . $fieldname . " has a property copy setting - copy conditions from " . $field_to_copy);
			$ret = GetExtraFieldOptions($field_to_copy);
		}
	}
	return($ret);
}
function GetExtraFieldTableType($fieldname) { // returns "34", "entity", or "customer", or "userprofiles", or "loginusers"
	
	$fieldname = str_replace("EFID", "", $fieldname);
	$fieldname = str_replace("JS_", "", $fieldname);

	if ($GLOBALS['PageCache']['ExtraFieldTableTypes'][$fieldname] != "") {
		return($GLOBALS['PageCache']['ExtraFieldTableTypes'][$fieldname]);
	} else {

		$Edeffields = explode(" ", "category status priority duedate startdate owner assignee deleted CRMcustomer customer");
		$Cdeffields = explode(" ", "custname contact contact_title contact_phone contact_email cust_address cust_remarks cust_homepage active custnamenew contactnew contact_titlenew contact_phonenew contact_emailnew cust_addressnew cust_remarksnew cust_homepagenew activeenew");

		if (is_numeric($fieldname)) {
			$t = db_GetRow("SELECT tabletype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres(str_replace("EFID", "" , $fieldname)) . "'");
			if ($t[0] == "user") $t[0] = "loginusers";
			if ($t[0] == "group") $t[0] = "userprofiles";
			$GLOBALS['PageCache']['ExtraFieldTableTypes'][$fieldname] = $t[0];
			return($t[0]);
		} elseif (in_array($fieldname, $Edeffields)) {
			$GLOBALS['PageCache']['ExtraFieldTableTypes'][$fieldname] = "entity";
			return("entity");
		} elseif (in_array($fieldname, $Cdeffields)) {
			$GLOBALS['PageCache']['ExtraFieldTableTypes'][$fieldname] = "customer";
			return("customer");
		} else {
			return(false);
		}
	}
}
function GetExtraFieldListName($fieldid) {
	$name = db_GetValue("SELECT displaylistname FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($fieldid) . "'");
	if (trim($name) == "") {
		return(GetExtraFieldName($fieldid));
	} else {
		return($name);
	}
}
function GetExtraFieldName($fieldid) {
	global $lang;
	
	$deffields = explode(" ", "category status priority duedate startdate owner assignee deleted custname contact contact_title contact_phone contact_email cust_address cust_remarks cust_homepage active refer");

	if (in_array($fieldid, $deffields)) {
		$tag = $lang[$fieldid];
		if ($tag != "") {
			return($tag);
		} else {
			if ($fieldid == "custname") {
				return($lang['customer']);
			} elseif ($fieldid == "cust_address") {
				return($lang['customeraddress']);
			} elseif ($fieldid == "active") {
				return("[active]");
			} elseif ($fieldid == "refer") {
				if ($lang['refer'] != "") {
					return($lang['refer']);
				} else {
					return("[refer]");
				}
			} else {
				return("LTMissing: " . $fieldid);
			}
		}
		
	} elseif (is_numeric($fieldid)) {
		if (!is_array($GLOBALS['PacheCache']['FieldNames'])) {

			$GLOBALS['PacheCache']['FieldNames'] = array();

			$t = db_GetArray("SELECT id,name FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE deleted='n'");

			foreach ($t AS $row) {
				$GLOBALS['PacheCache']['FieldNames'][$row['id']] = $row['name'];
			}
		} 
		
		return($GLOBALS['PacheCache']['FieldNames'][$fieldid]);
	} else {
		return($fieldid);
	}

}
function GetExtraFieldDisplayListName($fieldid) {
	$t = db_GetRow("SELECT IF(displaylistname!='',displaylistname,name) FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($fieldid) . "'");
	return($t[0]);
}

/**
Returns the extra field val for some flextable
**/
function GetFlextableFieldValue($rid, $fid, $tid, $raw=false, $html=true, $pregiven_value=false) {
	// This function is here for compaitbility only. 
	return(GetExtraFieldValue($rid, $fid, $html, $raw, $pregiven_value));
}
/**
Returns the extra field val for a customer
**/
function GetExtraCustomerFieldValue($rid, $fid, $html=false, $raw=true, $pregiven_value=false) {
	// This function is here for compaitbility only. 
	return(GetExtraFieldValue($rid, $fid, $html, $raw, $pregiven_value));
}

/**
Returns the extra field value of any field in any table
**/
function GetExtraFieldValue($eid, $fid, $html=true, $raw=false, $pregiven_value=false){
	qlog(INFO, "Start");
	// Optimization

	if (1==0) {
		return("");
	} else {

		$tmp = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($fid) . "' AND deleted != 'y'");
		
		$t[$fid] = $tmp;
		$t[0] = $tmp;


		if (!is_array($t[$fid])) {
			return("");
		}
		
		$table = GetExtraFieldTableType($fid);

		if ($table == "entity") {
			$id = "eid";
		} elseif ($table == "customer") {
			$id = "id";
		} elseif ($table == "loginusers") {
			$id = "id";
		} elseif ($table == "userprofiles") {
			$id = "id";
		} else {
			$id = "recordid";
			$flextableid = $table;
			$table = "flextable" . $table;
		}

		if ($raw == "dontformatnumbers" && strlen($raw) == 17) {
			unset($raw);
			$dontformatnumbers = true;
		} elseif ($raw) {
		//	$raw = true;
			qlog(INFO, "Processing RAW");
		}

		if ($eid == "new") {
			if ($t[$fid]['defaultval']) {
				return($t[$fid]['defaultval']);
			} else {
				return("");
			}
		}
		unset($GLOBALS['PageCache']['ExtraFieldValues']);

		if ($pregiven_value) {
			$val = trim($pregiven_value);
			qlog(INFO, "Using pre-given value, not fetching from database");
		} elseif (isset($GLOBALS['PageCache']['ExtraFieldValues'][$eid]["EFID" . $fid])) {
			$val = $GLOBALS['PageCache']['ExtraFieldValues'][$eid]["EFID" . $fid];
		} else {
			$query = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . $table . " WHERE " . $id . "='" . mres($eid) . "'";
			$row = db_GetRow($query);
			
			if (!is_array($row)) $row = array();

			foreach ($row AS $key => $val) {
				if (!is_numeric($key)) {
					$GLOBALS['PageCache']['ExtraFieldValues'][$eid][$key] = trim($val);
				}
			}
			$val = $GLOBALS['PageCache']['ExtraFieldValues'][$eid]["EFID" . $fid];
		}
		
		

		if ($t[0]['fieldtype'] == "Reference to FlexTable") {
			if (!$raw) {
				$table = $t[0]['options'];
				$y = GetFlexTableDefinitions($table);
				$layout = $y[0]['refer_field_layout'];

				$tmp = GetAttribute("extrafield", "BlindReferenceFieldLayout", $fid);
				if ($tmp != "" && $tmp != "-- set blind reference field layout in extra field attributes --") {
					$layout = $tmp;
				}


				if (trim($val) != "") {
					if (IsValidFlexTableRecord($val, $table)) {
						$val = ParseFlexTableTemplate($table, $val, $layout, true, false, false, "plain");
					} else {
						$val = "[unknown]";
					}
				} else {
					$val = "";
				}
				qlog(INFO, "Returned FlexTableRef field (parsed) $raw");
			} else {
				$val = $val;
				qlog(INFO, "Returning RAW flexref value");
			}
		} elseif ($t[0]['fieldtype'] == "Reference to FlexTable (multiselect)") {

			$table = $t[0]['options'];
			$y = GetFlexTableDefinitions($table);
			$layout = $y[0]['refer_field_layout'];

			$tmp = unserialize($val);
			unset($val);
			foreach ($tmp AS $element) {

				if ($first && !$raw) {
					$val .= ", ";
				} elseif ($first && $raw) {
					$val .= ";";
				}
				if (!$raw) {
					if (IsValidFlexTableRecord(base64_decode($element), $table)) {
						$val .= ParseFlexTableTemplate($table,base64_decode($element), $layout, true, false, false, "plain");
					}
				} else {
					$val .= base64_decode($element);
				}
				$first = true;
			}



		} elseif ($t[0]['fieldtype'] == "text area") {
			$val = $val;
		} elseif ($t[0]['fieldtype'] == "List of all groups" && !$raw) {
			$val = GetGroupName($val);
		} elseif (substr($t[0]['fieldtype'],0,16) == "Users of profile" && !$raw) {
			$val = GetUserName($val);
		} elseif ($t[0]['fieldtype'] == "List of all active customers" && !$raw) {
			$val = GetCustomerName($val);
		} elseif ($t[0]['fieldtype'] == "drop-down (multiselect)" || $t[0]['fieldtype'] == "SQL Query (multiselect)") {
			$tmp = unserialize($val);
			unset($val);
			foreach ($tmp AS $element) {

				if ($first) {
					$val .= ", ";
				}
				$val .= base64_decode($element);
				$first = true;
			}


		} elseif ($t[0]['fieldtype'] == "Customer contacts" && !$raw) {
			if (is_numeric($val) && !$raw) {
				$tttmp = GetContactPersonArray($val);
				$val = $tttmp['Lastname'] . ", " . $tttmp['Firstname'] . " (" . $tttmp['Telephone'] . ")";
			}
		} elseif ($t[0]['fieldtype'] == "date" && !$raw) {
			$val = TransformDate($val);
		} elseif ($t[0]['fieldtype'] == "date/time") {

			if ($val == "0000-00-00 00:00:00") {
				$val = "";
			} else {
				if (!$raw) {
					$val = SQLDateTimeToFormattedDateTime($val);
				}
			}
		} elseif ((strstr($t[0]['fieldtype'],"User-list") || substr($t[0]['fieldtype'],0,16) == "Users of profile") && !$raw) {
			$val = GetUserName($val);
		} elseif ($t[0]['fieldtype'] == "List of values") {
			$val = string_r(unserialize($val));
		} elseif ($t[0]['fieldtype'] == "diary" && !$raw) {
			$val2 = unserialize($val);
			if (!is_array($val2)) $val2 = array();
			$opt = array_reverse($val2);
			$val = "";
			if ($html) {

				$val = '<div class="diarycontainer">';
				$val .= "<table class=\"diarytable\">";
		
				if (count($opt) % 2) {//not even
					$grey = true;
				}
				foreach ($opt AS $diary_remark) {
					if ($grey) {
						$ins = " style='background: #E0E0E0'";
						unset($grey);
					} else {
						$grey = true;
						unset($ins);
					}
					if ($diary_remark[2] != "") {
						$val .= "<tr" . $ins . "><td class=\"diarycell\">" . TransformDate(date('d-m-Y', $diary_remark[0])) . " " . date('H:i', $diary_remark[0]) . "h</td><td class=\"diarycell\">" . GetUserName($diary_remark[1]) . "</td><td class=\"diarycellcontent\">" . nl2br(htme($diary_remark[2])) . "</td></tr>";
					}
				}
				$val .= "</table>";
				$val .= '</div>';

			} else {
				foreach ($opt AS $diary_remark) {
					$val .= TransformDate(date('d-m-Y', $diary_remark[0])) . " " . date('H:i', $diary_remark[0]) . "h : " . GetUserName($diary_remark[1]) . " : " . $diary_remark[2] . "\n";
				}
			}

		} elseif ($t[0]['fieldtype'] == "Booking calendar") {
			$plan = unserialize($val);
			unset($val);
			unset($hours);
			$sortedplan = array();
			foreach ($plan AS $planrow) {
						$id = ReturnEpochBasedOnDateAndTime($planrow['startdate'], $planrow['starttime']);
						if (!$raw && $t[0]['sort'] != "y") {
							if (strlen($planrow['starttime']) == 3) $planrow['starttime'] = "0" . $planrow['starttime'];
							if (strlen($planrow['endtime']) == 3) $planrow['endtime'] = "0" . $planrow['endtime'];

							$sortedplan[$id] = TransformDate($planrow['startdate']) . ":" . $planrow['starttime'] . " - " . TransformDate($planrow['enddate']) . ":" . $planrow['endtime'];
							if ($html) {
								$sortedplan[$id] .= "<br>";
							} else {
								$sortedplan[$id] .= ", ";
							}
						} elseif ($t[0]['sort'] != "y") {
							$sortedplan[$id] = TransformDate($planrow['startdate']) . "\t" . $planrow['starttime'] . "\t" . TransformDate($planrow['enddate']) . "\t" . $planrow['endtime'] . "\n";
						}
						$hours++;
			}
			if ($t[0]['sort'] != "y") {
				ksort($sortedplan);
				foreach ($sortedplan AS $planrow) {
					$val .= $planrow;
				}
			} else {
				if ($hours == "") $hours = "0";
				$val = $hours;
			}


		} elseif (!$raw && (is_numeric($val) || $val === 0) && !$dontformatnumbers) {
			$val = FormatNumber($val,2,$t[0]['id']);
		} else {
			$val = $val;
		}
		qlog(INFO, "Done");
		return(trim($val));
	} // end if !access
}

function GetParsedFlexRef($tid, $recordid, $referfield) {
	qlog(INFO, "Getting parsed flex ref...");
	$ft_arr = GetFlexTableDefinitions($tid);
	$layout = $ft_arr[0]['refer_field_layout'];

	$ref = true;

	$template = ParseFlexTableTemplate($tid, $recordid, $layout, false, false, false, "plain");

	return($template);
}
function GetMaxFlexTableRecordId($flextableid) {

	$max = db_GetRow("SELECT MAX(recordid) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . "");
	return($max[0]);
}

function FormatNumber($num, $decimals=2, $field_id=false, $returnZero=false, $dummy=false, $dummy=false) {
	if ($num == "" && !$returnZero) {
		return("");
	} elseif ($num == "") {
		$num = "0";
	}

	if (!$GLOBALS['DONTFORMATNUMBERS']) {
		if ($field_id) {
			if ($GLOBALS['PageCache']['NumberFormats'][$field_id] == "") {
				$tmp = db_GetArray("SELECT id, number_format FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields");
				foreach ($tmp AS $row) {
					$GLOBALS['PageCache']['NumberFormats'][$row['id']] = $row['number_format'];
				}
				$tmp = $GLOBALS['PageCache']['NumberFormats'][$field_id];
			} else {
				$tmp = $GLOBALS['PageCache']['NumberFormats'][$field_id];
			}
			if ($tmp == "don't format") {
				return($num);
			} elseif ($tmp == "no decimals") {
				$decimals = 0;
			} elseif ($tmp == "1 decimal") {
				$decimals = 1;
			} elseif ($tmp == "3 decimals") {
				$decimals = 3;
			} elseif ($tmp == "4 decimals") {
				$decimals = 4;
			} elseif ($tmp == "5 decimals") {
				$decimals = 5;
			} elseif (substr($tmp, 0, 8) == "currency") {
				$decimals = 2;
			}
/*
					"normal"		=> "Normal",
					"don't format"	=> "Don't format",
					"currency"		=> "Currency (without sign)",
					"currency EUR"	=> "Currency &euro;",
					"currency DOL"	=> "Currency $",
					"currency BRP"	=> "Currency &pound;",
					"currency YEN"	=> "Currency &yen;",
					"no decimals"	=> "No decimals",
					"1 decimal"		=> "1 decimal",
					"3 decimals"		=> "3 decimals",
					"4 decimals"		=> "4 decimals",
					"5 decimals"		=> "5 decimals",
*/
		}
		if ($GLOBALS['UC']['DateFormat'] == "dd-mm-yyyy") {
			$num = number_format($num,$decimals,',','.');
		} else {
			$num = number_format($num,$decimals,'.',',');
		}
		if (substr($tmp, 0, 8) == "currency" && substr($num, strlen($num) - 2, 2) == "00") {
//			$num[strlen($num)-1] = "-";
//			$num[strlen($num)-2] = "-";
		}

		if ($tmp == "currency EUR" && $num != "") {
			$num = "€ " . $num;
		} elseif ($tmp == "currency DOL" && $num != "") {
			$num = "$ " . $num;
		} elseif ($tmp == "currency BRP" && $num != "") {
			$num = "£ " . $num;
		} elseif ($tmp == "currency YEN" && $num != "") {
			$num = "¥ " . $num;
		}
		
	}
	return($num);
}

function GetFlexTableDefinitions($tableid = false, $orientation = false, $no_cache=false, $type="both") {
	if ($tableid) {
		$tableid = str_replace("flextable", "", $tableid); // just to be sure	
	}
	
	if (is_array($GLOBALS['PageCache']['FlextableDefinitions'][$tableid]) && is_numeric($tableid) && !$no_cache) {
		qlog(INFO, "CACHE Called with table " . $tableid);
		return($GLOBALS['PageCache']['FlextableDefinitions'][$tableid]);
	} elseif (is_array($GLOBALS['PageCache']['FlextableDefinitions-' . $orientation]) && !$no_cache) {
		qlog(INFO, "CACHE Called with table " . $tableid);
		return($GLOBALS['PageCache']['FlextableDefinitions-' . $orientation]);
	} elseif (is_array($GLOBALS['PageCache']['FlextableDefinitionsAll']) && !$no_cache && !$tableid && !$orientation) { 
		qlog(INFO, "CACHE All tables");
		return($GLOBALS['PageCache']['FlextableDefinitionsAll']);
	} else {
//		qlog(INFO, "No cache, determine");
		if ($orientation == "many-to-one") {
			$sqladd = " WHERE orientation='many_entities_to_one'";
			if (is_numeric($tableid)) {
				$sqladd .= " AND recordid='" . mres($tableid) . "'";
			}
		} elseif ($orientation == "one-to-many") {
			$sqladd = " WHERE orientation='one_entity_to_many'";
			if (is_numeric($tableid)) {
				$sqladd .= " AND recordid='" . mres($tableid) . "'";
			}
		} elseif (is_numeric($tableid)) {
			$sqladd = " WHERE recordid='" . mres($tableid) . "'";
		} else {
			$sqladd = " WHERE 1=1 ";
		}

		if ($type == "entity") {
			$sqladd .= " AND refers_to='entity' ";
		} elseif ($type == "customer") {
			$sqladd .= " AND refers_to='customer' ";
		}

		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs " . $sqladd;

		$t = db_GetArray($sql);

		if ($tableid) { 
			qlog(INFO, "Returned flextable definitions for table " . $tableid);
		} else {
			qlog(INFO, "Returned flextable definitions for all tables");
		}
		if ($tableid) {
			$GLOBALS['PageCache']['FlextableDefinitions'][$tableid] = $t;
		} elseif ($orientation) {
			$GLOBALS['PageCache']['FlextableDefinitions-' . $orientation] = $t;
		} else {
			$GLOBALS['PageCache']['FlextableDefinitionsAll'] = $t;
		}
		return($t);
	}	
}
function GetFormattedListOfFlexRecords($ft, $eidcid) {
	$fields = GetExtraFlexTableFields($ft);
	$totrow = "";
	$sql = "SELECT refer FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . " WHERE recordid='" . mres($eidcid) . "'";

	$list = db_GetFlatArray($sql);
	foreach($list AS $row) {
		foreach ($fields AS $field) {
			if ($nf) $totrow .= ";";
			//$totrow .=  GetFlextableFieldValue($row[0], $field['id'], $ft, false, false) . ";";
			$totrow .=  GetExtraFieldValue($row[0], $field['id'], false, false, false) . ";";
			$nf = true;
		}
		$totrow .= " - , -";
		unset($nf);
	}
	return($totrow);
}
function GetFlexTableName($tableid) {
	global $lang;
	if ($tableid == "customer") {
		return($lang['customer']);
	} elseif ($tableid == "entity") {
		return($lang['entity']);
	} elseif (is_numeric($tableid)) {
		$tmp = GetFlexTableNames($tableid);
		return($tmp[0]);
	} else {
		return(false);
	}
}
function GetFlexTableNames($tableid = false) {
	if (is_numeric($tableid)) {
		$sqladd = " WHERE recordid='" . mres($tableid) . "'";
	}
	$ret = array();
	$ar = mcq("SELECT tablename FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs" . $sqladd, $sql);
	while ($res = mysql_fetch_array($ar)) {
		array_push($ret, $res['tablename']);
	}
	return($ret);
}
function array_columnsort (&$array, $column=0, $order=SORT_ASC, $first=0, $last= -2)
{
  // $array  - the array to be sorted
  // $column - index (column) on which to sort
  //          can be a string if using an associative array
  // $order  - SORT_ASC (default) for ascending or SORT_DESC for descending
  // $first  - start index (row) for partial array sort
  // $last  - stop  index (row) for partial array sort
  // $keys  - array of key values for hash array sort

  $keys = array_keys($array);
  if($last == -2) $last = count($array) - 1;
  if($last > $first) {
   $alpha = $first;
   $omega = $last;
   $key_alpha = $keys[$alpha];
   $key_omega = $keys[$omega];
   $guess = $array[$key_alpha][$column];
   while($omega >= $alpha) {
     if($order == SORT_ASC) {
       while($array[$key_alpha][$column] < $guess) {$alpha++; $key_alpha = $keys[$alpha]; }
       while($array[$key_omega][$column] > $guess) {$omega--; $key_omega = $keys[$omega]; }
     } else {
       while($array[$key_alpha][$column] > $guess) {$alpha++; $key_alpha = $keys[$alpha]; }
       while($array[$key_omega][$column] < $guess) {$omega--; $key_omega = $keys[$omega]; }
     }
     if($alpha > $omega) break;
     $temporary = $array[$key_alpha];
     $array[$key_alpha] = $array[$key_omega]; $alpha++;
     $key_alpha = $keys[$alpha];
     $array[$key_omega] = $temporary; $omega--;
     $key_omega = $keys[$omega];
   }
   array_qsort ($array, $column, $order, $first, $omega);
   array_qsort ($array, $column, $order, $alpha, $last);
  }
}



if (!function_exists('str_ireplace')) {
	function str_ireplace($orig, $replace, $template) {
		return(eregi_replace($orig, $replace, $template));
	}
}

if (!function_exists('htmlspecialchars_decode')) {
	function htmlspecialchars_decode($x) {
		return($x);
	}
}
if (!function_exists('debug_print_backtrace')) {
   function debug_print_backtrace() {
        return("Your PHP version is too old. It cannot print backtraces.");
   }
}

function CheckIfPasswordMustBeChanged() {
	$max_exp = $GLOBALS['PASSWORDEXPIRE'] * 86400; // Days, in seconds

	if ($max_exp > 10 && is_numeric($GLOBALS['USERID']) && !$GLOBALS['RSS']) {
		$lastchange = db_GetRow("SELECT UNIX_TIMESTAMP(LASTPASSCHANGE), FORCEPASSCHANGE FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($GLOBALS['USERID']) . "'");
		if ((($lastchange[0] + $max_exp) < date('U')) || $lastchange['FORCEPASSCHANGE'] == "y" ) {
			qlog(INFO, "Password is expired and must be renewed.");
			return(true);
		} else {
			qlog(INFO, "Password is NOT expired.");
			return(false);
		}
	}
}

function ReturnDropDownSearchField($ElementID) {
	return("&nbsp;<img src='images/searchbox.png' alt='' class='search_img'><input type='search' class='search_input search_input_small' onkeydown=\"JSearch('" . $ElementID. "',this.value)\" onkeyup=\"JSearch('" . $ElementID . "',this.value)\" onblur=\"document.getElementById('" . $ElementID . "').onchange();\">");
}

function AddDefaultExtraFields($eid) {
	// An entity was added, so we have to create all standard fields. If we don't, stats will suffer.
	// Will be run only when adding an entity, BEFORE processing all POSTed extra fields.

	$qc=0;
	$list = GetExtraFields();
	$type = "entity";

	foreach ($list AS $field) {
		if (ParseDefaultValueTags($field['defaultval'], "plain") != "") {
			qlog(INFO, "Add value for field " . $field['name']);
			//$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "cu1stomaddons(eid,type,name,value,usr) VALUES('" . $eid . "','" . $type . "','" .  $field['id'] . "','" . $field['defaultval'] . "','" . $GLOBALS['USERID'] . "')";

			$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET EFID" . $field['id'] . "='" . mres(ParseDefaultValueTags($field['defaultval'], "plain")) . "' WHERE eid='" . mres($eid) . "' AND EFID" . $field['id'] . "=''";
			mcq($sql, $db);
			$qc++;
			//journal($eid, "Field EFID" . $field['id'] . " updated from [] to [" . ParseDefaultValueTags($field['defaultval']) . "] (default value)");
		} else {
			//journal($eid, "Field EFID" . $field['id'] . " updated from [] to [--nodef--] (default value)");
		}
	}
	qlog(INFO, "Updated " . $qc . " records (now contains the default value)");
}
function AddDefaultExtraCustomerFields($cid) {
	// An entity was added, so we have to create all standard fields. If we don't, stats will suffer.
	// Will be run only when adding an entity, BEFORE processing all POSTed extra fields.

	$qc=0;
	$list = GetExtraCustomerFields();
	$type = "customer";

	foreach ($list AS $field) {
		$val = ParseDefaultValueTags($field['defaultval'], "plain");
		if ($val != "") {
			qlog(INFO, "Add value for field " . $field['name']);
			journal($cid, "Added default value '" . $val . "' for field " . $field['name'], "customer");
			$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "customer SET EFID" . $field['id'] . "='" . mres($val) . "' WHERE id='" . mres($cid) . "' AND EFID" . $field['id'] . "=''";
			mcq($sql, $db);
			$qc++;
			//journal($cid, "Field EFID" . $field['id'] . " updated from [] to [" . ParseDefaultValueTags($field['defaultval']) . "] (default value)", "customer");
		} else {
			//journal($eid, "Field EFID" . $field['id'] . " updated from [] to [--nodef--] (default value)");
		}
	}
	qlog(INFO, "Updated " . $qc . " records (now contains the default value)");
}
function AddDefaultExtraFlexTableFields($flextable, $recordid) {
	// An entity was added, so we have to create all standard fields. If we don't, stats will suffer.
	// Will be run only when adding an entity, BEFORE processing all POSTed extra fields.

	$qc=0;
	$list = GetExtraFlexTableFields($flextable);
	$type = "flextable" . $flextable;

	foreach ($list AS $field) {
		$val = ParseDefaultValueTags($field['defaultval'], "plain");
		if ($val != "") {
			qlog(INFO, "Add value for field " . $field['name']);
			journal($recordid, "Added default value '" . $val . "' for field " . $field['name'], "flextable" . $flextable);
			$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextable . " SET EFID" . $field['id'] . "='" . mres($val) . "' WHERE recordid='" . mres($recordid) . "' AND (EFID" . $field['id'] . "='' OR EFID" . $field['id'] . "='0000-00-00 00:00:00')";
			mcq($sql);
			$qc++;
			//journal($recordid, "Field EFID" . $field['id'] . " updated from [] to [" . ParseDefaultValueTags($field['defaultval']) . "] (default value)", $type);
		}
	}
	qlog(INFO, "Created " . $qc . " records containing the default value.");
}
function ShowFlexTableContents($flextable, $ref=false, $filter=false, $excel=false, $customlink=false, $pdf=false, $allfields=false, $showaddlink=true, $dontpaginate=false, $given_query) {
	require_once("show_entitylist.php");
	return(ShowFlexTableList($flextable, $ref, $filter, $excel, $customlink, $pdf, $allfields, $showaddlink, $dontpaginate, $given_query));
}

function IsActiveCustomer($cid) {
	if (is_numeric($cid)) {
		$row = db_GetRow("SELECT active FROM " . $GLOBALS['TBL_PREFIX'] ."customer WHERE id='" . mres($cid) . "'");
		if ($row['active'] == "yes") {
			return(true);
		} else {
			return(false);
		}
	} else {
		return(true);
	}
}
function ClearAllRunningCache() {
	unset($GLOBALS['PageCache']);
	unset($GLOBALS['ADMINARRAY']);
	unset($GLOBALS['ALLTABLEDEFCACHE']);
	unset($GLOBALS['CACHECOUNTER']);
	unset($GLOBALS['CLLEVELS']);
	unset($GLOBALS['CheckedEntityAccessArray']);
	unset($GLOBALS['ECFLIST_CACHE']);
	unset($GLOBALS['EFLEXLIST_CACHE']);
	unset($GLOBALS['EFLIST_CACHE']);
	unset($GLOBALS['EFLIST_CACHE_SPEC']);
	unset($GLOBALS['EF_ACCESSCACHE']);
	unset($GLOBALS['TABLEDEFCACHE']);
	unset($GLOBALS['PageCache']['ValidCIDs']);
	unset($GLOBALS['VALIDEIDS']);
	unset($GLOBALS['customer_emails']);
	unset($GLOBALS['customer_owners']);
	unset($GLOBALS['customers']);
	unset($GLOBALS['numattch']);
	unset($GLOBALS['prioritycolor']);
	unset($GLOBALS['prioritynum']);
	unset($GLOBALS['statuscolor']);
	unset($GLOBALS['statusnum']);
	unset($GLOBALS['useremails']);
	unset($GLOBALS['usernames']);
	unset($GLOBALS['CEAVOLUMECACHE']);
	unset($GLOBALS['GECCACHE']);
	unset($GLOBALS['IACCACHE']);

}

function IsValidEID($eid) {

	if ($eid > 0) {

		if (!is_array($GLOBALS['PageCache']['ValidEIDs'])) {
			$GLOBALS['PageCache']['ValidEIDs'] = db_GetFlatArray("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity");
		} else {
			$ql = "CACHE ";
		}
		if (in_array($eid, $GLOBALS['PageCache']['ValidEIDs'])) {
			//qlog(INFO, $ql . $eid . " is a valid entity number");
			return(true);
		} else {
			
			$GLOBALS['PageCache']['ValidEIDs'] = db_GetFlatArray("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity");
			
			if (in_array($eid, $GLOBALS['PageCache']['ValidEIDs'])) {
				return(true);
			} else {
				//qlog(INFO, $ql . $eid . " is NOT a valid entity number");
				//print $eid . " is NOT a valid entity number<br><br>";
				return(false);
			}
		}
	} else {
		return(false);
	}
} 
function IsValidCID($cid) {
	if (!is_array($GLOBALS['PageCache']['ValidCIDs'])) {
		$GLOBALS['PageCache']['ValidCIDs'] = array();
		$sql = "SELECT id FROM " . $GLOBALS['TBL_PREFIX'] ."customer";
		$res = mcq($sql, $db);
		while ($row = mysql_fetch_array($res)) {
			array_push($GLOBALS['PageCache']['ValidCIDs'], $row['id']);
		}

	} else {
		$ql = "CACHE ";
	}
	if (in_array($cid, $GLOBALS['PageCache']['ValidCIDs'])) {
		qlog(INFO, $ql . $cid . " is a valid customer number");
		return(true);
	} else {
		qlog(INFO, $ql . $cid . " is NOT a valid customer number");
		return(false);
	}
}
function IsValidUser($userid) {
	$tmp = db_GetValue("SELECT name FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($userid) . "' AND name NOT LIKE 'deleted_user%'");
	if ($tmp != "") {
		return(true);
	} else {
		return(false);
	}
}
function IsValidStatus($txt) {
	$tmp = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "statusvars WHERE varname='" . mres($txt) . "'");
	if (is_numeric($tmp)) {
		return(true);
	} else {
		return(false);
	}
}
function IsValidPriority($txt) {
	$tmp = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "priorityvars WHERE varname='" . mres($txt) . "'");
	if (is_numeric($tmp)) {
		return(true);
	} else {
		return(false);
	}
}
function AddBreadCrum($text, $link=false) {
	if (!$link) {
		 $link = $_SERVER['REQUEST_URI'];
	}
	$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] ."breadcrumtrail WHERE user='" . mres($GLOBALS['USERID']) . "' AND text='" . mres($text) . "'";
	mcq($sql, $db);
	$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] ."breadcrumtrail(user, link, text) VALUES('" . mres($GLOBALS['USERID']) . "','" . mres($link) . "','" . mres($text) . "')";
	mcq($sql, $db);

	return(true);
}

function UnCompressFile($fileid) {

	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "blobs WHERE fileid='" . mres($fileid) . "'";
	$result= mcq($sql,$db);
	$result1= mysql_fetch_array($result);

	if ($result1['gz'] == "y") {
		qlog(INFO, "Requested file is compressed, uncompressing");
		$b = strlen($result1['content']);
		$blob = gzinflate($result1['content']);
		$a = strlen($blob);
		qlog(INFO, "Filesize was $b, is now $a");
		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] ."blobs SET content='" . mres($blob) . "', gz='n' WHERE fileid='" . mres($fileid) . "'";
		mcq($sql, $db);
	}

}
function UnCompressAllFiles() {
	$t = db_GetArray("SELECT fileid FROM " . $GLOBALS['TBL_PREFIX'] . "blobs WHERE gz='y'");
	foreach ($t AS $file) {
		UnCompressFile($file['fileid']);
		print "\015Uncompressing file " . $file['fileid'] . "   ";
	}
	mcq("OPTIMIZE TABLE " . $GLOBALS['TBL_PREFIX'] ."blobs");
	print "\n";
}

function CompressFile($fileid) {
	if (is_numeric($fileid)) {
		$blob = GetFileContent($fileid);
		qlog(INFO, "File size before compression: " . strlen($blob));
		if ($gzblob = gzdeflate($blob, 9)) {
			qlog(INFO, "File compression looks successful " . strlen($gzblob));
		} else {
			qlog(INFO, "File compression looks NOT successful");
		}


		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] ."blobs SET content='" . mres($gzblob) . "', gz='y' WHERE fileid='" . mres($fileid) . "'";
		mcq($sql, $db);

		$blobgz = GetFileContent($fileid); // GetFileContent decompresses it automatically!

		if ($blob == $blobgz) {
			// Values are the same
			$a = strlen($blob);
			$b = strlen($gzblob);
			qlog(INFO, "Successfully compressed file " . $fileid . ". Was: " . $a . " bytes, is now " . $b . " bytes.");
		} else {
			// Decode test didn't match; re-set to old values
			$a = strlen($blob);
			$b = strlen($blobgz);
			qlog(WARNING, "WARNING: Compressing file " . $fileid . " failed! (restored) $a $b");
			$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] ."blobs SET content='" . mres($blob) . "', gz='n' WHERE fileid='" . mres($fileid) . "'";
			mcq($sql, $db);
		}

	} else {
		log_msg("ERROR: CompressFile called with non-numeric file id!");
	}
}

function ProcessArchiving() {
	// File compression level
	// A  - Don't compress at all (except for old versions)
	// B1 - Compress files older than 1 year
	// B2 - Compress files older than 1 year and only if the entity is deleted
	// C1 - Compress files older than 6 months
	// C2 - Compress files older than 6 months and only if the entity is deleted
	// D  - Compress all files

	$now = date('U');
	$halfyearago = $now - 15811200;
	$yearago = $now - 31536000;

	//$GlOBALS['FILECOMPRESSIONLEVEL'] = "C2";

	switch (GetSetting("FILECOMPRESSIONLEVEL")) {
		case "A":
			qlog(INFO, "Not compressing any files.");
			return(true);
			break;
		case "B1":
			$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid FROM " . $GLOBALS['TBL_PREFIX'] ."binfiles, " . $GLOBALS['TBL_PREFIX'] ."blobs WHERE " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] ."blobs.fileid AND UNIX_TIMESTAMP(" . $GLOBALS['TBL_PREFIX'] ."binfiles.timestamp_last_change) < '" . $yearago . "' AND gz!='y' AND " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid!=0";
			break;
		case "B2":
			$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid FROM " . $GLOBALS['TBL_PREFIX'] ."blobs, " . $GLOBALS['TBL_PREFIX'] ."binfiles LEFT JOIN " . $GLOBALS['TBL_PREFIX'] ."entity ON " . $GLOBALS['TBL_PREFIX'] ."binfiles.koppelid=" . $GLOBALS['TBL_PREFIX'] ."entity.eid WHERE " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] ."blobs.fileid AND deleted IS NOT NULL AND deleted != 'n' AND UNIX_TIMESTAMP(" . $GLOBALS['TBL_PREFIX'] ."binfiles.timestamp_last_change) < '" . $yearago . "' AND gz!='y' AND " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid!=0";
			break;
		case "C1":
			$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid FROM " . $GLOBALS['TBL_PREFIX'] ."binfiles, " . $GLOBALS['TBL_PREFIX'] ."blobs WHERE " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] ."blobs.fileid AND UNIX_TIMESTAMP(" . $GLOBALS['TBL_PREFIX'] ."binfiles.timestamp_last_change) < '" . $halfyearago . "' AND gz!='y' AND " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid!=0";
			break;
		case "C2":
			$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid FROM " . $GLOBALS['TBL_PREFIX'] ."blobs, " . $GLOBALS['TBL_PREFIX'] ."binfiles LEFT JOIN " . $GLOBALS['TBL_PREFIX'] ."entity ON " . $GLOBALS['TBL_PREFIX'] ."binfiles.koppelid=" . $GLOBALS['TBL_PREFIX'] ."entity.eid WHERE " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] ."blobs.fileid AND deleted IS NOT NULL AND deleted != 'n' AND UNIX_TIMESTAMP(" . $GLOBALS['TBL_PREFIX'] ."binfiles.timestamp_last_change) < '" . $halfyearago . "' AND gz!='y' AND " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid!=0";
			break;
		case "D":
			$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid FROM " . $GLOBALS['TBL_PREFIX'] ."binfiles, " . $GLOBALS['TBL_PREFIX'] ."blobs WHERE " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] ."blobs.fileid AND gz!='y' AND " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid!=0";
			break;
		default:
			log_msg("ERROR: Not able to determine compression level. Quitting. -> " . GetSetting("FILECOMPRESSIONLEVEL"));
			print("ERROR: Not able to determine compression level. Quitting. -> " . GetSetting("FILECOMPRESSIONLEVEL"));
			return(true);
			break;
	}
		$list = db_GetArray($sql);

		foreach($list AS $file) {
			print "\015Compressing file " . $file['fileid'] . "   ";
			CompressFile($file['fileid']);
		}

		$sql = "SELECT " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid FROM " . $GLOBALS['TBL_PREFIX'] ."binfiles, " . $GLOBALS['TBL_PREFIX'] ."blobs WHERE " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] ."blobs.fileid AND version_no > 1 AND gz!='y' AND " . $GLOBALS['TBL_PREFIX'] ."binfiles.fileid!=0";
		$list = db_GetArray($sql);
		foreach($list AS $file) {
			CompressFile($file['fileid']);
			print "\015Compressing file " . $file['fileid'] . " (old version)   ";
		}
		print "\n";
		mcq("OPTIMIZE TABLE " . $GLOBALS['TBL_PREFIX'] ."blobs", $db);

		print "Done.\n";
}

function GetTriggerConditions($triggerid) {
	return(db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] ."triggerconditions WHERE triggerid='" . mres($triggerid) . "'"));
}

function CheckTriggerConditions($eid, $triggerid, $tabletype="entity") {
	qlog(INFO, "Checking conditions for trigger " . $triggerid . " entity/record " . $eid . " table " . $tabletype);
	$conditions = GetTriggerConditions($triggerid);
	//print_r($conditions);
	$passed = true;
	if (!IsValidEID($eid) && !is_numeric($tabletype)) {
		qlog(INFO, "CheckTriggerConditions called with empty EID param!");
		$not_to_pass = true; // if there ARE conditions, it should fail
	} else {
		if (sizeof($conditions)>0) {
			foreach ($conditions AS $condition) {

					if ($passed) {
						$passedAR = EvaluateCondition($condition, $eid, $tabletype);
						$passed = $passedAR['passed'];
						$value_it_is = $passedAR['value_it_is'];
					}

					if ($passed == false) {
						if ($condition['field'] == "status33") {
							$val = GetStatusName($condition['value']);
						} elseif ($condition['field'] == "priority33") {
							$val = GetPriorityName($condition['value']);
						} elseif ($condition['field'] == "CRMcustomer") {
							$val = GetCustomerName($condition['value']);
						} else {
							$val = $condition['value'];
						}
						$text .= "\nField [" . $condition['field'] . "] must ";
						if ($condition['trueorfalse'] == "false") {
							$text .= "NOT ";
						}
						$text .= "be [" . $val . "] but is [" . $value_it_is . "]";
					}

					if ($not_to_pass) {
						$passed = false;
						$text = "No valid EID but conditions exist!";
					}

					if ($passed == false)
					{
					    continue;
					}

				}
		} else {
			qlog(INFO, "This trigger does not have any conditions");
		}
		if ($passed) {
			qlog(INFO, "This entity passed the trigger conditions (if any)");
			//qlog(INFO, $text);
		} else {
			qlog(WARNING, "This entity DID NOT pass the trigger condition");
			// Only journal when it's not cron (or else too many messages will be written to journal)
			if (!$GLOBALS['CRON_RUNNING']) journal($eid, "Trigger " . $triggerid . " should fire but this entity doesn't match all conditions: " . $text, $tabletype);
		}
	}
	return($passed);
}

function GetExtrafieldConditions($efid) {
	$t = GetExtraFields($efid, true);
	if (strstr($t[0]['fieldtype'], "[copyfield")) {
		$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $ret[$i]['fieldtype']));
		qlog(INFO, "Field " . $ret[$i]['id'] . " has a property copy setting - copy conditions from " . $field_to_copy);
		$efid = $t[0]['id'];
	}
	$ret = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] ."extrafieldconditions WHERE efid='" . mres($efid) . "'");
	return($ret);
}
function GetExtrafieldRequiredConditions($efid) {
	$t = GetExtraFields($efid, true);

	if (strstr($t[0]['fieldtype'], "[copyfield")) {
		$field_to_copy = str_replace("]","",str_replace("[copyfield", "", $ret[$i]['fieldtype']));
		qlog(INFO, "Field " . $ret[$i]['id'] . " has a property copy setting - copy conditions from " . $field_to_copy);
		$efid = $t[0]['id'];
	}
	$ret = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] ."extrafieldrequiredconditions WHERE efid='" . mres($efid) . "'");
	return($ret);
}
function CheckExtrafieldRequiredConditions($eid, $extrafieldid, $tabletype='entity') {
	
	$conditions = GetExtrafieldRequiredConditions($extrafieldid);
	$passed = true;
	/*
	if ($tabletype == "entity" && (!IsValidEID($eid) && $eid != "_new_")) {
		// Conditions always fail if the entity ID is not valid BUT the field HAS conditions
	//	$not_to_pass = true;
	} elseif ($tabletype == "customer" && (!IsValidCID($eid) && $eid != "_new_")) {
		// Conditions always fail if the entity ID is not valid BUT the field HAS conditions
		//$not_to_pass = true;
	}
	*/
	if (sizeof($conditions)>0) {
		foreach ($conditions AS $condition) {
			unset($matches);
				
				
				if ($passed) {
					$passedAR = EvaluateCondition($condition, $eid, $tabletype);
					$passed = $passedAR['passed'];
					$value_it_is = $passedAR['value_it_is'];

				}

				
				if ($passed == false) {
					if ($condition['field'] == "status33") {
						$val = GetStatusName($condition['value']);
					} elseif ($condition['field'] == "priority33") {
						$val = GetPriorityName($condition['value']);
					} elseif ($condition['field'] == "CRMcustomer") {
						$val = GetCustomerName($condition['value']);
					} else {
						$val = $condition['value'];
					}
					$text .= "\nField [" . $condition['field'] . "] must ";
					if ($condition['trueorfalse'] == "false") {
						$text .= "NOT ";
					}
					$text .= "be [" . $val . "] but is [" . $value_it_is . "]";
				}

			}
			if ($not_to_pass) {
				$passed = false;
				qlog(INFO, "Field " . $extrafieldid . " not valid - it has (any) condition but the entity ID (" . $eid . ") is not valid");
			}
	} else {
		qlog(INFO, "Extra field " . $extrafieldid . " (eid: $eid, table: $tabletype) does not have any conditions");
		$passed = true;
	}
	if ($passed) {
		qlog(INFO, "Extra field " . $extrafieldid . " (eid: $eid, table: $tabletype) passed its conditions (it must be required)");
	} else {
		qlog(INFO, "Extra field " . $extrafieldid . " (eid: $eid, table: $tabletype) DID NOT pass its conditions (it will not be required for $eid)");

	}
	//journal($eid, "An extra field was evaluated for being required: $passed " . $text);
	return($passed);
}
function CheckExtrafieldConditions($eid, $extrafieldid, $tabletype='entity') {
	$conditions = GetExtrafieldConditions($extrafieldid);
	$passed = true;
	if ($tabletype == "entity" && (!IsValidEID($eid) && $eid != "_new_")) {
		// Conditions always fail if the entity ID is not valid BUT the field HAS conditions
		$not_to_pass = true;
	} elseif ($tabletype == "customer" && (!IsValidCID($eid) && $eid != "_new_")) {
		// Conditions always fail if the entity ID is not valid BUT the field HAS conditions
		$not_to_pass = true;
	}
	if (sizeof($conditions)>0) {
		foreach ($conditions AS $condition) {
			unset($matches);
				
				
				if ($passed) {
					$passedAR = EvaluateCondition($condition, $eid, $tabletype);
					$passed = $passedAR['passed'];
					$value_it_is = $passedAR['value_it_is'];
				}

				
				if ($passed == false) {
					if ($condition['field'] == "status33") {
						$val = GetStatusName($condition['value']);
					} elseif ($condition['field'] == "priority33") {
						$val = GetPriorityName($condition['value']);
					} elseif ($condition['field'] == "CRMcustomer") {
						$val = GetCustomerName($condition['value']);
					} else {
						$val = $condition['value'];
					}
					$text .= "Field [" . $condition['field'] . "] must ";
					if ($condition['trueorfalse'] == "false") {
						$text .= "NOT ";
					}
					$text .= "be [" . $val . "] but is [" . $value_it_is . "]";
				}

			}
			if ($not_to_pass) {
				$passed = false;
				qlog(INFO, "Field " . $extrafieldid . " not valid - it has (any) condition but the entity ID (" . $eid . ") is not valid");
			}
	} else {
		qlog(INFO, "Extra field " . $extrafieldid . " does not have any conditions");
	}
	if ($passed) {
		qlog(INFO, "Extra field " . $extrafieldid . " passed its conditions");
	} else {
		qlog(WARNING, "Extra field " . $extrafieldid . " DID NOT pass its conditions (" . str_replace("\n", "" , $text) . ")");
		//journal($eid, "An extra field should be shown but this entity doesn't match all conditions: " . $text);
	}

	return($passed);
}
function ParseAjaxAutoSaveJavascriptFlexTable($DisplayedFields, $template, $recordid, $flextable) {
	/*
	$t = PushStashValue(serialize($DisplayedFields));
	$ff = GetExtraFlexTableFields($flextable);

	$args = "&flextableid=" . $flextable . "&recordid=" . $recordid . "&FieldListStash=" . $t;
	foreach ($DisplayedFields AS $field) {
		$field_id = str_replace("EFID", "", str_replace("HEFID", "", $field));
		foreach ($ff AS $ef) {
			if ($ef['id'] == $field_id) {
				$type = $ef['fieldtype'];
				continue;
			}
		}
		if ($type == "drop-down") {
			$args .= "&" . $field . "=\" + urlencodejs(document.forms['EditEntity'].elements['" . $field . "'][document.forms['EditEntity'].elements['" . $field . "'].selectedIndex].value) + \"";
		} elseif ($type != "Computation (ajax autorefresh)") {
			$args .= "&" . $field . "=\" + urlencodejs(document.forms['EditEntity'].elements['" . $field . "'].value) + \"";
		}
		unset($type);
	}
	$ret .= AjaxBox("AutoSaveFlexTableForm", true, $args, true);
	*/
			$ret .= '<script type="text/javascript">
			function AutoSaveField(el) {
				UpdateEntityField(' . $recordid . ', el.name, el.value,' . $flextable . ');
			}
			</script>
		';

	return($template . $ret);
}
function ParseAjaxAutoSaveJavascript($DisplayedFields, $template, $eid) {
	//print_r($DisplayedFields);
	$t = PushStashValue(serialize($DisplayedFields));
	$args = "&e=" . $eid . "&FieldListStash=" . $t;
	foreach ($DisplayedFields AS $field) {

//		JS("alert(document.forms['EditEntity'].elements['" . $field . "'].value");

		if ($field == "assignee" || $field == "owner" || $field == "prioroty" || $field == "status" || ($field == "CRMcustomer" && $GLOBALS['USECUSTOMERSELECTPOPUP'] != "Yes") || $field == "parent") {
			$args .= "&" . $field . "=\" + urlencodejs(document.getElementById('JS_" . $field . "')[document.getElementById('JS_" . $field . "').selectedIndex].value) + \"";
		} else {
			
			if (substr($field, 0, 4) == "EFID") {
				$type = GetExtraFieldType(str_replace("EFID",  "", $field));
				$showasradio = db_GetValue("SELECT showasradio FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres(str_replace("EFID",  "", $field)) . "'");
			}

			if ($field == "readonly") {
				$args .= "&readonlychecked=\" + document.forms['EditEntity'].elements['readonly'].checked + \"";
			} elseif ($field == "deleted") {
				$args .= "&deletedchecked=\" + document.forms['EditEntity'].elements['deleted'].checked + \"";
			} elseif ($field == "private") {
				$args .= "&privatechecked=\" + document.forms['EditEntity'].elements['private'].checked + \"";
			} elseif ($type == "drop-down" && $showasradio == "y") {
				$args .= "&" . $field . "=\" + urlencodejs(getRadioValue('" . $field . "')) + \"";
			} else {
				$args .= "&" . $field . "=\" + urlencodejs(document.getElementById('JS_" . $field . "').value) + \"";
			}
		}
	}

	$ret .= AjaxBox("AutoSave", true, $args, true);

	//@@@@@AUTOSAVE@@@@@
	return($template . $ret);
}
function ProcessOldTodos() {
	$Todo = db_GetArray("SELECT todoid, onchange, to_value, eid, user, UNIX_TIMESTAMP(timestamp_last_change) AS tp FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE UNIX_TIMESTAMP(timestamp_last_change) < (UNIX_TIMESTAMP(NOW()) - 60)");
	foreach($Todo AS $do) {
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE todoid='" . mres($do['todoid']) . "'", $db);
		$current_user = $GLOBALS['USERID'];
		qlog(INFO, "Todo: switching to user credentials of user " . $do['user']);
		if (GetExtraFieldTableType($do['onchange']) != "entity" && GetExtraFieldTableType($do['onchange']) != "customer") {
			$ft = GetExtraFieldTableType($do['onchange']);
		} else {
			$ft = false;
		}

		$GLOBALS['USERID'] = $do['user'];
		$GLOBALS['NO_MSG'] = true;
		InitUser($do['user']);

		if ($do['eid']) {
			ProcessTriggers($do['onchange'],$do['eid'],$do['to_value'], false, $ft);
		} else {
			log_msg("ERROR: Todo item found without EID: " . $do['onchange'] . " value " . $do['to_value'] . " eid " . $do['eid']);
		}

		qlog(INFO, "Todo: switching back user credentials of user " . $current_user);
		$GLOBALS['USERID'] = $current_user;
		$GLOBALS['LastUserInitCall'] = "";
		InitUser($current_user);

		$GLOBALS['NO_MSG'] = false;
		qlog(INFO, "TODO *OLD* ProcessTrigger: " . $do['onchange'] . " value " . $do['to_value']);
	}
}
function DropTodos($eid, $onchange=false) {
	if (is_numeric($eid)) {
		$sqlins = "eid='" . $eid . "' AND ";
	}
	if ($onchange) {
		$sqlins = "onchange='" . mres($onchange) . "' AND ";
	}

	$ar = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE " . $sqlins . "user='" . mres($GLOBALS['USERID']) . "'");
	$ret = array();
	foreach ($ar AS $row) {
		if (!IsLocked($row['eid'])) {
			array_push($ret, $row);
		} else {
			qlog(INFO, "TODO: Skipping, entity is still locked");
		}
	}
	foreach ($ret AS $row) {
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE todoid='" . mres($row['todoid']) . "'", $db);
	}
	return(true);
}
function GetTodos($eid) {
	if (is_numeric($eid)) {
		$sqlins = "eid='" . $eid . "' AND ";
	}
	$ar = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE " . $sqlins . "user='" . mres($GLOBALS['USERID']) . "'");
	$ret = array();
	foreach ($ar AS $row) {
		if (!IsLocked($row['eid'])) {
			array_push($ret, $row);
			qlog(INFO, "TODO: Found a rule");
		} else {
			qlog(INFO, "TODO: Skipping, entity is still locked");
		}
	}
	return($ret);
}
function AddToDo($onchange, $to_value, $eid, $from_value) {
    if ($eid == 0 || $eid == "") {
         log_msg("ERROR: A ToDo was just logged with an empty EID! _REQ: "  . string_r($_REQUEST));
		 return(true);
    }
	//elseif ($to_value == $from_value) {
	//	return(false);
	//}
		
//	$to_value .= GetBacktrace();
	$t = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE eid='" . mres($eid) . "' AND onchange='" . mres($onchange) . "' AND user='" . mres($GLOBALS['USERID']) . "' AND from_value='" . mres($to_value) . "'", $db);

	if ($t['eid'] && ($onchange != "entity_change"  && $onchange != "limited_update"  && !strstr($onchange, "-Change"))) {
		qlog(INFO, "Todo's cancel each other out!");
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE eid='" . mres($eid) . "' AND onchange='" . mres($onchange) . "' AND user='" . mres($GLOBALS['USERID']) . "'", $db);
		// Check if there are more than 1 actions waiting. If it's only "entity_change", delete that one too
		$t = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE eid='" . mres($eid) . "'");
		foreach ($t AS $todo) {
			if (!strstr($todo['onchange'],"-Change") && $todo['onchange'] != "entity_change") {
				$something_else = true;
			}
		}
		if (!$something_else) {
			if (strstr($todo['onchange'],"-Change")) {
				// Concerns flextable
				mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE eid='" . mres($eid) . "' AND onchange LIKE '%-Change' AND user='" . mres($GLOBALS['USERID']) . "'", $db);
			} else {
				mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE eid='" . mres($eid) . "' AND onchange='entity_change' AND user='" . mres($GLOBALS['USERID']) . "'", $db);
			}
		}

	} else {
		mcq("DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "todo WHERE eid='" . mres($eid) . "' AND onchange='" . mres($onchange) . "' AND user='" . mres($GLOBALS['USERID']) . "'", $db);
		$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "todo(eid, onchange, to_value, from_value, user, timestamp_last_change) VALUES('" . mres($eid) . "', '" . mres($onchange) . "','" . mres($to_value) . "','" . mres($from_value) . "','" . mres($GLOBALS['USERID']) . "',NOW())";
		
		mcq($sql, $db);
	}
}
function AutoSaveFlexTableForm() {

	if ($_POST['SingleField']) { 
		$fields		 = array($_POST['SingleField']);
		$recordid    = $_POST['e'];
		$flextableid = $_POST['FlextableId'];
	} else {
		$func		 = "refresh_" . $_REQUEST['AjaxHandler'];
		$fields      = PopStashValue($_REQUEST['FieldListStash']);
		$recordid    = $_POST['recordid'];
		$flextableid = $_POST['flextableid'];
	}

	
	$record      = GetFlexTableRow($recordid, $flextableid);

	if (CheckFlexTableAccess($flextableid) == "ok" && CheckFlextableRecordAccess($flextableid, $recordid) == "ok") {

		if (IsValidFlexTableRecord($recordid, $flextableid)) {

			foreach ($fields AS $field) {
					//$_POST[$field] = html_entity_decode(iconv("UTF-8", $GLOBALS['CHARACTER-ENCODING'], $_POST[$field]));

					$dbfield = str_replace("HEFID", "EFID", $field);

					if ($dbfield == "FLEXTABLEREFERFIELD") {
						$dbfield="refer";
						$ffg = "Entity refer field ";
					} else {
						$ffg = GetExtraFieldName($dbfield);
					}
					$fieldnum = str_replace("EFID", "", $dbfield);
					$val = $record[$dbfield];

					if ($_POST[$field] != "undefined") {
						if (isset($_POST[$field]) && ValidateFieldInput(str_replace("EFID", "", $field), $_POST[$field], false,true, $recordid) != $_POST[$field]) {
							//print "Input check failed for $efield_varname. Reverting to old value.<br>";
							
							log_msg("INFO: Input check failed for $field; " . $_POST[$field] . " didn't validate. Not autosaving. Reason: " . ValidateFieldInput(str_replace("EFID", "", $field), $_POST[$field], false,true, $recordid));
							
						} else {

							if (trim($val) != trim($_POST[$field]) && CheckUniqueness($recordid, $field, $_POST[$field])) {
								//print "$val uS NOT " . $_POST[$field] . "<br>";
								journal($recordid, "Field $dbfield " . $ffg . " updated from [" . $val . "] to [" . trim($_POST[$field]) . "] (autosave)", "flextable" . $flextableid);
								DataJournal($recordid, $val, $_POST[$field], $fieldnum);

								if (GetExtraFieldType($dbfield) == "date") {
									$_POST[$field] = FormattedDateToNLDate($_POST[$field]);
								}
								if (GetExtraFieldType($dbfield) == "date/time" && $_POST[$field] != "") {
									$_POST[$field] = FormattedDateTimeToSQLDateTime($_POST[$field]);
								} 

								SetExtraFlextableFieldValueSimple($fieldnum, $recordid, $flextableid, trim($_POST[$field]));
								AddToDo("FlexTable" . $flextableid . "-Change", "", $recordid);
								AddToDo($dbfield, $_POST[$field], $recordid, $val);

								//print "added todo";
								$changed = true;
							} else {
								//print $field . " unchanged<br>";
								//qlog(INFO, "----------------- EF POSTED UNCHANGED:" . $dbfield . " -- " . $_POST[$field]);
							}
						}
					} else {
						journal($recordid, "Field $dbfield " . $ffg . " NOT UPDATED (given undefined) (autosave)", "flextable" . $flextableid);
					}
			}

			if ($changed) {
				ExpireFormCache($recordid, "Record updated", "flextable" . $flextableid);
			}

			if ($_REQUEST['Done'] == "true") {
				qlog(INFO, "TODO: Received DONE signal, processing triggers....");

				$Todo = GetTodos("%");
				if (is_array($Todo)) {
					qlog(INFO, "TODO: Processing triggers...");
					foreach($Todo AS $do) {
						ProcessTriggers($do['onchange'],$recordid,$do['to_value'], false, $flextableid);
						qlog(INFO, "TODO ProcessTrigger: " . $do['onchange'] . " value " . $do['to_value']);
					}
					DropTodos("%");
				} else {
					qlog(INFO, "NOT TODO: not an array");
				}

			}
		} else {
			qlog(INFO, "Not a valid FlexTable record - skipping autosave!");
		}
	} else {
		qlog(WARNING, "Tried to AutoSave a flextable field but access to table or record was denied!");
	}
}

function AutoSave() {

	$func = "refresh_" . $_REQUEST['AjaxHandler'];
	if ($_POST['SingleField']) { 
		$fields = array($_POST['SingleField']);
	} else {
		$fields = PopStashValue($_REQUEST['FieldListStash']);
	}
	$eid = $_POST['e'];
	qlog(INFO, "Entity is " . $eid);
	qlog(INFO, "number of fields is : " . sizeof($fields));
	$entity = GetEntityArray($eid);

	$cl = GetClearanceLevel();
	if (CheckEntityAccess($eid) == "ok" || (CheckEntityAccess($eid)=="readonly" && in_array("CommentsAdd", $cl))) {

		foreach ($fields AS $field) {

			qlog(INFO, "Processing " . $field);
			//qlog(INFO, "FIELD POSTED: " . $field . " size: " . strlen($_POST[$field]) . " bytes, value " . ($_POST[$field]) . "");

			if (!strstr($field, "EFID")) {
				$dbfield = $field;
				$where = " WHERE eid='" . mres($eid) . "'";

				if ($field == "assignee")	$dbfield = "assignee";
				if ($field == "owner")		$dbfield = "owner";
				if ($field == "category")	$dbfield = "category";
				if ($field == "priority")	$dbfield = "priority";
				if ($field == "contents")	$dbfield = "content";
				if ($field == "customer")	$dbfield = "CRMcustomer";

				$triggerfield = $dbfield;

				if ($dbfield == "duedate") {
			
					$_POST[$field] = FormattedDateToNLDate($_POST[$field]);

					$triggerfield = "duedate_change";
					$sql_extra = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET sqldate='" . mres(NLDate2INTLDate($_POST[$field])) . "' " . $where;
					mcq($sql_extra, $db);
				}

				if ($dbfield == "startdate") {
					$_POST[$field] = FormattedDateToNLDate($_POST[$field]);
				}

				if ($field == "readonly" && $_POST['readonlychecked'] == "true" && $entity['readonly'] == "n") {
					$dbfield = "readonly";
					$_POST['readonly'] = "y";
				} elseif ($field == "readonly" && $_POST['readonlychecked'] == "false" && $entity['readonly'] == "y") {
					$dbfield = "readonly";
					$_POST['readonly'] = "n";
				} elseif ($field == "readonly") {
					$skip = true;
				} elseif ($field == "private" && $_POST['privatechecked'] == "true" && $entity['private'] == "n") {
					$dbfield = "private";
					$_POST['private'] = "y";
				} elseif ($field == "private" && $_POST['privatechecked'] == "false" && $entity['private'] == "y") {
					$dbfield = "private";
					$_POST['private'] = "n";
				} elseif ($field == "private") {
					$skip = true;
				} elseif ($field == "deleted" && $_POST['deletedchecked'] == "true" && $entity['deleted'] == "n") {
					$dbfield = "deleted";
					$_POST['deleted'] = "y";

					$closedate = date('Y-m-d');
					$closeepoch = date('U');
					$addon = ",closedate='" . $closedate . "',closeepoch='" . $closeepoch . "'";

				} elseif ($field == "deleted" && $_POST['deletedchecked'] == "false" && $entity['deleted'] == "y") {
					$dbfield = "deleted";
					$_POST['deleted'] = "n";
					//	Do NOT DELETE THE CLOSEDATE/CLOSEEPOCH FIELDS HERE! REALLY, DON'T!
				} elseif ($field == "deleted") {
					$skip = true;
				}


				if (!$skip) {
					if (trim($entity[$dbfield]) != trim($_POST[$field])) {
						if ($_POST[$field] != "undefined" && (trim($entity[$dbfield]) != trim($_POST[$field]))) {

							if (isset($_POST[$field]) && ValidateFieldInput(str_replace("EFID", "", $field), $_POST[$field], false,true) != $_POST[$field]) {
								
								log_msg("ERROR: Input check failed for $field; " . $_POST[$field] . " didn't validate. Not autosaving. Reason: " . ValidateFieldInput(str_replace("EFID", "", $field), $_POST[$field], false,true));

							} else {

								$cl = GetClearanceLevel();
								if (CheckEntityAccess($eid) == "ok" || (CheckEntityAccess($eid)=="readonly" && in_array("CommentsAdd", $cl) && ($field == "content" || GetExtraFieldType(str_replace("EFID", "", $field)) == "diary"))) {

									$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "entity SET " . $dbfield . "='" . mres(trim($_POST[$field])) . "' " . $addon . " " . $where . "\n";
									mcq($sql, $db);
									if (CheckEntityAccess($eid) == "ok") {
										AddToDo("entity_change", "", $eid);
									} else {
										AddToDo("limited_update", "", $eid);
									}
									if ($field != "content") {
										AddToDo($triggerfield, $_POST[$field], $eid, $entity[$dbfield]);
									}
									journal($eid, "Field " . $dbfield . " updated from [" . $entity[$dbfield] . "] to [" . trim($_POST[$field]) . "] (autosave)");
									DataJournal($eid, $entity[$dbfield], trim($_POST[$field]), $dbfield);
									$changed = true;

								}
							}
							
						}
					} else {

						//qlog(INFO, "----------------- FIELD UNCHANGED:" . $dbfield . "CUR: " . $entity[$dbfield] . " NEW -- " . $_POST[$field]);
					}

				} else {
				}
				unset($skip);

			} else {

				$dbfield = str_replace("EFID", "", $field);
				$val = GetExtraFieldValue($eid, $dbfield, false, true);
				if (trim($val) != trim($_POST[$field]) && $_POST[$field] != "undefined") {

						if (CheckUniqueness($eid, $field, $_POST[$field])) {
							if (isset($_POST[$field]) && ValidateFieldInput(str_replace("EFID", "", $field), $_POST[$field], false,true) != $_POST[$field]) {
								if ($_POST[$field] != "undefined") {
									log_msg("ERROR: Input check failed for $field; " . $_POST[$field] . " didn't validate. Not autosaving. Reason: " . ValidateFieldInput(str_replace("EFID", "", $field), $_POST[$field], false,true));
								}

							} else {

								if (GetExtraFieldType($dbfield) == "date") {
									$_POST[$field] = FormattedDateToNLDate($_POST[$field]);
								}
								if (GetExtraFieldType($dbfield) == "date/time" && $_POST[$field] != "") {
									$_POST[$field] = FormattedDateTimeToSQLDateTime($_POST[$field]);
								} 

								journal($eid, "Field EFID" . $dbfield . " updated from [" . $val . "] to [" . $_POST[$field] . "] (autosave)");

								DataJournal($eid, $val, trim($_POST[$field]), $dbfield);

								SetExtraFieldValueSimple($dbfield, $eid, $_POST[$field]);
								$cl = GetClearanceLevel();

								if (CheckEntityAccess($eid)=="readonly" && in_array("CommentsAdd", $cl)) {
									AddToDo("limited_update", "", $eid);
								} else {
									AddToDo("entity_change", "", $eid);
								}
								AddToDo("EFID" . $dbfield, $_POST[$field], $eid, $val);

								$changed = true;
							}
						}

				} else {

				}
			}


		}

		if ($changed) {
			ExpireFormCache($eid, "Entity updated", "entity");
			ClearAccessCache($eid, "e", "all");
		}


		if ($_REQUEST['Done'] == "true") {
			qlog(INFO, "TODO: Received DONE signal, processing triggers....");

			$Todo = GetTodos("%");
			if (is_array($Todo)) {
				qlog(INFO, "TODO: Processing triggers...");
				foreach($Todo AS $do) {
					ProcessTriggers($do['onchange'],$eid,$do['to_value']);
					qlog(INFO, "TODO ProcessTrigger: " . $do['onchange'] . " value " . $do['to_value']);
				}
				DropTodos("%");
			} else {
				qlog(INFO, "NOT TODO: not an array");
			}

		}
	} else {
		qlog(WARNING, "Tried to AutoSave but access to entity was denied (at the moment at least)");
	}
}

function AjaxBox($url, $run=true, $args=false, $AutoSave=false, $divid=false, $autorefresh_in_seconds=0) {
	if ($GLOBALS['logtext']) {
		$add = "\n";
	} else {
		$add = "";
	}
	if (!$divid) {
		$divid = "AJX" . randomstring(8, true);
	}
	$GLOBALS['LASTAJAXBOXDIVID'] = $divid;


	if (!$AutoSave) {
		foreach ($_POST AS $var => $pv) {
			if ($var != "fromlist" && $pv != "" && $var != "refer" && $var != "username" && $var != "password" && $var != "FilterTable" & $var != "ft") {
				if (is_array($pv)) {
					foreach($pv AS $val) {
						$args .= "&" . $var . "[]=" . urlencode($val);
					}
				} else {
					$args .= "&" . $var . "=" . urlencode($pv);
				}
			}
		}
	}
	$args .= "&AjaxHandler=" . $divid;
	if (!$AutoSave) {
		foreach ($_GET AS $var => $gv) {
			if ($var != "Function" && $var != "Run" && $var != "fromlist" && $gv != "" && $var != "refer"  && $var != "username" && $var != "password" && $var != "FilterTable" & $var != "ft") {
				if (is_array($gv)) {
					foreach($gv AS $val) {
						$args .= "&" . $var . "[]=" . urlencode($val);
					}
				} else {
					$args .= "&" . $var . "=" . urlencode($gv);
				}
			}
		}
	}

	

	if ($add != "") $ret .= $add . $add . "<!-- AJAXBOX $url  -->" . $add . $add;
	
	$ret .= '<script type="text/javascript">' . $add;

	$ret .= 'function FUNC_' . $divid . '(url,params,id) {' . $add;
	$ret .= 'var xmlhttp' . $divid . ' = new GetXmlHttpObject(\'url\');' . $add;
	$ret .= 'xmlhttp' . $divid . '.open("POST",url,true);' . $add;
	$ret .= 'xmlhttp' . $divid . '.setRequestHeader("Content-type", "application/x-www-form-urlencoded");' . $add;
	$ret .= 'xmlhttp' . $divid . '.onreadystatechange= function() { ' . $add;
	$ret .= 'stateChanged(xmlhttp' . $divid . ', id);' . $add;
	$ret .= 'jQueryInit(); ' . $add;
	$ret .= 'if(typeof window.InitDatePicker == "function") { ' . $add;
	$ret .= 'InitDatePicker(); ' . $add;
	$ret .= '}';
	$ret .= '};' . $add;
	$ret .= 'xmlhttp' . $divid . '.send(params);' . $add;



	$ret .= '} ' . "";
	$ins .= '$(document).ready(function() { ' . $add;
	if ($run) {
		$ins .= 'FUNC_' . $divid . '("assist.php", "Function=' . htme($url) . '&' . $args . '&Run=true","' . $divid . '");' . $add;
	} else {
		$ins .= 'FUNC_' . $divid . '("assist.php", "Function=' . htme($url) . '&' . $args . '","' . $divid . '");' . $add;
	}
	$ins .= '});' . $add;
	$ret .= $ins;
	unset($ins);
	if ($AutoSave) {
		$ret .= $add . 'function AutoSave(doneargs) {' . $add;
			$ret .= "if (document.forms['EditEntity'] && document.getElementById('JS_run_autosave').value == '1') {" . $add;
			$ret .= 'refresh_' . $divid . "(doneargs);" . $add;
			$ret .= "}" . $add;
		$ret .= "}" . $add;


		$ret .= "function AutoSaveField(el) {" . $add;
		$ret .= "if (document.getElementById('JS_flextableid')) {" . $add;
		$ret .= "var ft = document.getElementById('JS_flextableid').value;" . $add;
		$ret .= "}" . $add;
		$ret .= "if (typeof document.getElementById(el.value) != \"undefined\") {" . $add;
		$ret .= "UpdateEntityField(document.getElementById('JS_eid').value, el.name, el.value, ft);" . $add;
		$ret .= "} }" . $add;

	}
	$ret .= $add . 'function refresh_' . $divid . "(urlargs, DontShowWaitImageDiv) {" . $add;;
	if (!$AutoSave) {
		$ret .= 'if (!DontShowWaitImageDiv || DontShowWaitImageDiv == false) {' . $add;
		$ret .= 'document.getElementById("WaitImageDiv").style.visibility="visible";' . $add;
		$ret .= '}' . $add;
	}

	$ret .= 'if (typeof urlargs === "undefined") {' . $add;
	$ret .= 'if (document.getElementById("JS_last_page_moment") && document.getElementById("JS_last_page_moment").value != "") {' . $add;
	$ret .= 'urlargs += "&Pag_Moment=" + document.getElementById("JS_last_page_moment").value;';
	$ret .= '}';
	$ret .= 'if (document.getElementById("JS_last_FilterTable") && document.getElementById("JS_last_FilterTable").value != "") {' . $add;
	$ret .= 'urlargs += "&FilterTable=" + document.getElementById("JS_last_FilterTable").value;' . $add;
	$ret .= '}' . $add;
	$ret .= '}' . $add;
		



	if ($run) {
		$ins .= 'FUNC_' . $divid . '("assist.php", "Function=' . htme($url) . '&' . $args . '&Run=true&" + urlargs,"' . $divid . '");' . $add;
	} else {
		$ins .= 'FUNC_' . $divid . '("assist.php", "Function=' . htme($url) . '&' . $args . '&" + urlargs,"' . $divid . '");' . $add;
	}

	$ins .= 'if (typeof UpdateAjaxFields == "function") {' . $add;
	$ins .= 'UpdateAjaxFields("' . $divid . '");'  . $add;
	$ins .= '}' . $add;

	$ret .= '' . $ins . $add;
	unset($ins);

	$ret .= "}" . $add	;
	if (!$AutoSave) {
		$ret .= 'document.getElementById("WaitImageDiv").style.visibility="visible";' . $add;
	}

	if ($autorefresh_in_seconds > 0) {
		$ret .= "window.setInterval(function(){\n";
		$ret .= "refresh_" . $divid . "('', true);" . $add;
		$ret .= "}, " . ($autorefresh_in_seconds * 1000) . ");" . $add;

	}

	//$ret .= '//-->';
	$ret .= '</script>';
//	$ret .= "<!-- END AJAXBOX -->";
	
	if (!is_array($GLOBALS['JavascriptToPrintAtEndOfPage'])) {
		$GLOBALS['JavascriptToPrintAtEndOfPage'] = array();
	}

	return('<div id="' . $divid . '" class="ajaxdiv"></div>' . $ret);
}
function PrintReposOptions() {
		qlog(INFO, "Start fetching repositories");
		include($GLOBALS['CONFIGFILE']);
		
		$repositlist .= "<select name='repositoryToLoginTo' id='JS_repository' tabindex='3' onchange='ShowTitle(this[this.selectedIndex].text,this[this.selectedIndex].title);'>";

		for ($r=0;$r<64;$r++) {
					if ($host[$r]) {
							if (db_Connect($r, false)) {
								// All ok, database is there
								$skip = false;
							} else {
								$skip = true;
								$reposlist .= "<option>SKIPPED: $r</option>";
							}
							if (!$skip) {
								$PRFX = $table_prefix[$r];
								// If no TBL_PREFIX is found, it ought to be "CRM"
								if ($PRFX=="") $PRFX="CRM";
								$title = GetSetting("title");
								if (GetSetting("NOBARSWINDOW") == "Yes") {
									$NOBARSWINDOW = true;
								} else {
									$NOBARSWINDOW = false;
								}
								if (GetSetting("ForceSecureHTTP") == "Yes") {
									$sec = true;
								} else {
									$sec = false;
								}
								if (GetSetting("SHOWPASSLINK") == "Yes") {
									$passlink = true;
								} else {
									$passlink = false;
								}
								if (!$title=="") {
									if ($_REQUEST['rep'] == $r && ($r!="")) {
										$ins = 'selected="selected"';
										qlog(INFO, "REP IS $r");
										$CookieOverride = true;
									} elseif ($_COOKIE['repository'] == $r && !$_REQUEST['rep']) {
										$ins = 'selected="selected"';

									} else {
										unset($ins);
									}
									$repositlist .= "<option $ins value='" . $r . "'";
									$ikn = "";
									if ($sec) {
											$ikn = "secure";
											$sec = " style='background-color: #bbbbbb;'";
											// must use secure post
									} else {
											$sec = " style='background-color: #dddddd;'";
									}
									if ($NOBARSWINDOW) {
											$ikn .= "FS";
											//$full = " style='background-color: #BBBBBB;'";
											// must use secure post
									} else {
											//$sec = " style='background-color: #DDDDDD;'";
									}
									if ($passlink) {
											//$pass_inc = " passlink='true'";
											$ikn .= "PLT";
									}
									unset($passlink);
									if (strlen($GLOBALS['SUBTITLE']) > 0 && $GLOBALS['SUBTITLE'] != "- subtitle -") {
										$subtit = $GLOBALS['SUBTITLE'];
									} else {
										$subtit = $GLOBALS['PRODUCT'] . " Business Process Management";
									}

									//jeroen 2010-04-09 id eruit gehaald, want er waren dubbele id's of lege id's -> mag niet in xhtml strict
									//$repositlist .= $sec . " id='" . $ikn . "' " . $pass_inc . " title='" . htme($subtit) . "'>" . htme(trim($title)) . "</option>\n";
									$repositlist .= $sec . " " . $pass_inc . " title='" . htme($subtit) . "'>" . htme(trim($title)) . "</option>";
								}
							}
					}
				}
	$repositlist .= "</select>";
	return($repositlist);
}
function ReturnCompleteFlextable($flextable, $given_query) {
		global $lang;
		if (!$_REQUEST['ShowTable']) {
			$_REQUEST['ShowTable'] = $flextable;
		}
		$func = "refresh_" . $_REQUEST['AjaxHandler'];
		$flextable = $_REQUEST['ShowTable'];
		$name = GetFlexTableNames($_REQUEST['ShowTable']);
	//	$outp .= "<table><tr><td></td><td>";
	

		if (CheckFlexTableAccess($_REQUEST['ShowTable']) == "ok" || CheckFlexTableAccess($_REQUEST['ShowTable']) == "readonly") {
			$ft = GetFlexTableDefinitions($_REQUEST['ShowTable']);

			//if (!isset($_REQUEST['no_headerhtml'])) $outp .= EvaluateTemplatePHP($ft[0]['headerhtml']) . "";
			$outp .= ShowFlexTableContents($_REQUEST['ShowTable'], $_REQUEST['refer'], $_REQUEST['FilterTable'], false, false, false, false, true, false, $given_query);
			print $outp;
			
		} else {
			PrintAD("You are not allowed to see this table (FT" . $_REQUEST['ShowTable'] . ":" . CheckFlexTableAccess($_REQUEST['ShowTable']) . ")");
		}


		//print "</td></tr></table>";
}
function GetFileEntity($file_id) {
		$res = db_GetRow("SELECT koppelid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE fileid='" . mres($file_id) . "'");
		return($res['koppelid']);
}
function GetFileTableType($file_id) {
		$res = db_GetRow("SELECT type FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE fileid='" . mres($file_id) . "'");
		return($res['type']);
}
function DeleteFile($file_id) {

		if (!is_numeric($file_id)) { exit; } // SQL injection prevention

		$eid = GetFileEntity($file_id);
		$type = GetFileTableType($file_id);

		$pass = false;
		if ($type == "entity" && $eid == 0 && is_administrator()) {
			$pass = true;
		} elseif ($type == "entity" && CheckEntityAccess($eid) == "ok") {
			$pass = true;
		} elseif ($type == "cust" && CheckCustomerAccess($eid) == "ok") {
			$pass = true;
		} elseif (strstr($type, "flextable")) {
			$ft = str_replace("flextable", "", $type);
			if (CheckFlextableAccess($ft) == "ok" && CheckFlextableRecordAccess($ft, $eid) == "ok") {
				$pass = true;
			}
		} else {
			qlog(ERROR, "Unable to determine parent table of file " . $file_id . ": " . GetFileTableType($file_id));
		}


		if ($pass) {

			$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE fileid='" . mres($file_id) . "'";
			mcq($sql,$db);
			$sql = "DELETE FROM " . $GLOBALS['TBL_PREFIX'] . "blobs WHERE fileid='" . mres($file_id) . "'";
			mcq($sql,$db);

			// Fetch least-old version, if appliccable
			$t = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE version_belonging_to='" . mres($file_id) . "' ORDER BY timestamp_last_change DESC");

			if ($t) {
				mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "binfiles SET version_belonging_to=0,timestamp_last_change=timestamp_last_change WHERE fileid=" . $t['fileid'], $db);
				mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "binfiles SET version_belonging_to=" . $t['fileid'] . ",timestamp_last_change=timestamp_last_change WHERE version_belonging_to='" . mres($file_id) . "'", $db);
				journal($eid, "Reverted file " . $file_id . " one version.", $type);
			} else {
				journal($eid,"File " . GetFileName($file_id) . "  (#" . $file_id . ") deleted", $type);
				log_msg("File deleted: " . $file_id);
			}
		} else {
			qlog(INFO, "User tried to delete file " . $file_id . " but access was denied");
		}

		

}

function CheckLastUserActivity($userid) {
	return((date('U') - GetAttribute("user", "LastActivity", $GLOBALS['USERID'])));
}
function SortPTArray($a, $b) {
	if ($a['order'] < $b['order']) {
		return 0;
	} else {
		return 1;
	}
}
function GetLastUserFilter() {
	$list = db_GetRow("SELECT LASTFILTER FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($GLOBALS['USERID']) . "'");
	$list = $list['LASTFILTER'];
	return(@unserialize($list));
}
function SetUserFilter($filter_array) {
	$list = db_GetRow("UPDATE " . $GLOBALS['TBL_PREFIX'] . "loginusers SET LASTFILTER='" . mres(serialize($filter_array)) . "' WHERE id='" . mres($GLOBALS['USERID']) . "'");
	return(true);
}

function WaitImageDiv() {
	return("<div id=\"WaitImageDiv\"><table class=\"WaitImageTable\"><tr><td><div id=\"WaitImageCenterDiv\"></div></td></tr></table></div><form id='DivUpdateForm' method='get' action='?'><div class='showinline'><input type='hidden' value='0' name='NumberOfAjaxClients'></div></form>");
}

function UpdateDiaryField($eid, $fieldname, $dummy, $value, $commenthash) {

	if ($value != "") {
		$tabletype = GetExtraFieldTableType($fieldname);

		if ($tabletype == "customer") {
			$id = "id";
			$journaltype = $tabletype;
		} elseif (is_numeric($tabletype)) {
			$id = "recordid";
			$ft = $tabletype;
			$tabletype = "flextable" . $tabletype;
			$journaltype = $tabletype;
		} elseif ($tabletype == "loginusers") {
			if (CheckFunctionAccess("UserAdmin") <> "ok" && !is_administrator()) {
				$accesstype = "nok"; 
			} else {
				$accesstype = "ok";
			}
			$id = "id";
			$journaltype = "user";
		} elseif ($tabletype == "userprofiles") {
			if (CheckFunctionAccess("UserAdmin") <> "ok" && !is_administrator()) {
				$accesstype = "nok"; 
			} else {
				$accesstype = "ok";
			}

			$id = "id";
			$journaltype = "group";
		} else {
			$id = "eid";
			$journaltype = $tabletype;
		}
		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($fieldname) . "'";

		$result= mcq($sql,$db);
		$extrafield = mysql_fetch_array($result);
		if (is_numeric($eid)) {
			$sql = "SELECT EFID" . $fieldname . " AS value FROM " . $GLOBALS['TBL_PREFIX'] . $tabletype . " WHERE " . $id . "='" . mres($eid) . "'";
			$result= mcq($sql,$db);
			$ef_array = mysql_fetch_array($result);
		} 
		$val = $ef_array['value'];
		$val_ar = unserialize($val);
		$add_ar = array(date('U'), $GLOBALS['USERID'], $value);
		$what = "";
		if ($commenthash == "") {
			$val_ar[] = $add_ar;
			$what = "added";
		} else if ((CheckFunctionAccess("AllowedToAlterDiaryContents") == "ok")  || (is_administrator())) {
			for ($lus = 0; $lus < count($val_ar); $lus++)
			{
				$commenthash_this_row = md5($val_ar[$lus][0] . $val_ar[$lus][1] . $val_ar[$lus][2]);
				if ($commenthash == $commenthash_this_row)
				{
					$val_ar[$lus][2] = $value;
					$what = "updated";
					break;
				}
			}
		}

		$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . $tabletype . " SET EFID" . $fieldname . "='" . mres(serialize($val_ar)) . "' WHERE " . $id . "='" . mres($eid) . "'";
		mcq($sql, $db);

		journal($eid, "A record was " . $what . " to diary field " . $fieldname . ". Text: " . mres($value), $journaltype);
		DataJournal($eid, "{{add}} ", $value, $fieldname);

		$cl = GetClearanceLevel();
		if ($tabletype == "entity" && CheckEntityAccess($eid)=="readonly" && in_array("CommentsAdd", $cl)) {
			 AddToDo("EFID" . $fieldname, date('U'), $eid, '');
			 AddTodo("limited_update", "", $eid);
		} elseif ($tabletype == "entity") {
			 AddToDo("EFID" . $fieldname, date('U'), $eid, '');
			 AddToDo("entity_change", "", $eid);
		} elseif ($tabletype == "customer") {
			ProcessTriggers("customer_change",$eid,"",false, false);
			ProcessTriggers("EFID" . $fieldname,$eid,"",false,$ft);
		} elseif ($ft > 0) {
			ProcessTriggers("FlexTable" . $ft . "-Change",$eid,"",false,$ft);
			ProcessTriggers("EFID" . $fieldname,$eid,"",false,$ft);
		}
	}
}

function GetEntitylistColumns() {

		$global[0] = GetSetting("MainListColumnsToShow");
		$user   = db_GetRow("SELECT ELISTLAYOUT FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($GLOBALS['USERID']) . "'");
		$group  = db_GetRow("SELECT ELISTLAYOUT FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . mres(GetGroup($GLOBALS['USERID'])) . "'");

		$cl = GetClearanceLevel();

		if (in_array("MaySelectColumns", $cl) && is_array(unserialize($user[0]))) {
			qlog(INFO, "Column layout decided; own setting, may be adjusted");
			return(unserialize($user[0]));
		} elseif (is_numeric(GetGroup($GLOBALS['USERID'])) && !in_array("MaySelectColumns", $cl)) {
			// User has group, and no right to change columns
			if (is_array(unserialize($group[0]))) {
				qlog(INFO, "Column layout decided; group setting");
				return(unserialize($group[0]));
			} else {
				// fall back to global layout
				qlog(INFO, "Column layout decided; global setting (user has empty group list layout)");
				return(unserialize($global[0]));
			}
		} elseif (is_array(unserialize($user[0])) && !is_numeric(GetGroup($GLOBALS['USERID']))) {
			qlog(INFO, "Column layout decided; own setting, fixed");
			return(unserialize($user[0]));
		} else {
			qlog(INFO, "Column layout decided; global setting");
			return(unserialize($global[0]));
		}

}
function PublishForm($page_id) {

	$_REQUEST['nonavbar'] = true;
	$http_host = "http://" . $_SERVER['SERVER_NAME'];

	$path = str_replace("publish.php", "", $_SERVER['SCRIPT_NAME']);

	$path_to_post = $http_host . $path . "edit.php?nonavbar=1&amp;publishing=true&amp;fID=" . $_REQUEST['fID'] . "&amp;FrDb=" . $_REQUEST['FrDb'];

	$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "publishedpages WHERE id='" . mres($page_id) . "'");
	if (!$row['template']) {
		print $GLOBALS['title'];
		print "<br>Error - form not found.";
		print "<br>This is a configuration error.";
	} else {
	    $form = ParseFormTemplate($row['template'],"_new_",$path_to_post,false,false);
		$form = ParseTemplateGeneric($form);
		$form = ParseTemplateCleanUp($form);
		print $form;
	}

}


function PrintHeaderJavascript() {
	if ($lang['lostlock'] == "") {
		$lang['lostlock'] = "You have lost your exclusive write lock to this entity";
	}


	print '<script type="text/javascript" src="lib/ckeditor/ckeditor.js"></script>';
	print '<script type="text/javascript" src="js/jquery.js"></script>';
	print '<script type="text/javascript" src="js/jquery-tools/jquery.tools.min.js"></script>';
	print '<script type="text/javascript" src="js/jquery-autocomplete/jquery.autocomplete-min.js"></script>';
	print '<script type="text/javascript" src="js/jquery-ui/jquery-ui-1.8.13/js/jquery-ui-1.8.13.custom.min.js"></script>';
	print '<script type="text/javascript" src="js/jquery-ui-timepicker-addon.js"></script>';
	print '<script type="text/javascript" src="js/jquery-colorpicker/js/colorpicker.js"></script>';
	print '<script type="text/javascript" src="js/jquery.simplemodal-1.3.3.min.js"></script>';
	print '<script type="text/javascript" src="js/jquery-fancybox/source/jquery.fancybox.pack.js"></script>';
	print '<script type="text/javascript" src="js/shortcut.js"></script>';
	print '<script type="text/javascript" src="js/thickbox.js"></script>';
	print '<script type="text/javascript" src="js/highcharts/js/highcharts.js"></script>';
	print '<script type="text/javascript" src="js/sorttable.js"></script>';
	print '<script type="text/javascript" src="js/base64.js"></script>';
	print '<script type="text/javascript" src="js/functions.js?' . date('U') . '"></script>';

	if ($_REQUEST['e'] == "_new_" && isset($_REQUEST['changed'])) {
		$GLOBALS['PrintJSAfterAddingEntity'] = true;
	} else {
		print '<script type="text/javascript" src="csv.php?GetJS&amp;ent=' . $_REQUEST['e'] . '"></script>';
	}
}
function PrintUnauthenticatedHeaderJavascript() {

	print '<link rel="stylesheet" href="css/thickbox.css" type="text/css" media="screen"><link rel="stylesheet" href="css/crm_dft.css" type="text/css">';

	print '<link rel="stylesheet" type="text/css" href="js/jquery-ui/jquery-ui-1.7.2/themes/base/jquery-ui.css">';
	print '<link rel="stylesheet" type="text/css" href="js/jquery-fancybox/source/jquery.fancybox.css">';
	print '<script type="text/javascript" src="js/jquery.js"></script>';
	print '<script type="text/javascript" src="js/jquery-tools/jquery.tools.min.js"></script>';
	print '<script type="text/javascript" src="js/jquery-autocomplete/jquery.autocomplete-min.js"></script>';
	print '<script type="text/javascript" src="js/jquery.simplemodal-1.3.3.min.js"></script>';
	print '<script type="text/javascript" src="js/jquery-fancybox/source/jquery.fancybox.pack.js"></script>';
	print '<script type="text/javascript" src="js/jquery-ui/jquery-ui-1.7.2/ui/jquery-ui.js"></script>';
	print '<script type="text/javascript" src="js/jquery-colorpicker/js/colorpicker.js"></script>';
	print '<script type="text/javascript" src="js/jquery-ui-timepicker-addon.js"></script>';
	print '<script type="text/javascript" src="js/highcharts/js/highcharts.js"></script>';
	print '<script type="text/javascript" src="js/shortcut.js"></script>';
	print '<script type="text/javascript" src="js/sorttable.js"></script>';
	print '<script type="text/javascript" src="js/base64.js"></script>';
	print '<script type="text/javascript" src="js/functions.js?' . date('U') . '"></script>';
	print '<script type="text/javascript" src="csv.php?GetBaseJS"></script>';


}
function ReturnBaseJavascript() {
	?>


		function setUser(){
  			setCookie('namebla',document.forms['login'].elements['username'].value)
			alert('Username saved');
		}
		function clearUser(){
  			setCookie('namebla','')
		  	document.forms['login'].elements['username'].value ='';
			alert('Username cleared');
		}

		function setPwd(){
			setCookie('passwordbla',document.forms['login'].elements['password'].value)
			alert('Password saved');
		}
		function clearPwd(){
			setCookie('passwordbla','')
		}
		function ShowTitle(title,subtitle) {
			document.getElementById('title').innerHTML = title;
			document.getElementById('subtitle').innerHTML = subtitle;
			document.title = title;
		}
		function checkCooks(){
				  namebla = getCookie('namebla')
			  passwordbla = getCookie('passwordbla')
					repos = getCookie('repository')
			mainpagequery = getCookie('mainpagequery')

				if (namebla && namebla != null){
				  document.forms['login'].elements['username'].value = namebla;
				}
				if (passwordbla && passwordbla != null){
				  document.forms['login'].elements['password'].value = passwordbla;
				}
				 if (mainpagequery && mainpagequery != null){
				  document.forms['login'].elements['mainpagequery'].value = mainpagequery;
				}
			}

		function strstr( haystack, needle, bool ) {

			var pos = 0;

			haystack += '';
			pos = haystack.indexOf( needle );
			if( pos == -1 ){
				return false;
			} else{
				if( bool ){
					return haystack.substr( 0, pos );
				} else{
					return haystack.slice( pos );
				}
			}
		}
		<?php
}
function ReturnStandardJavascript() {
		global $lang;

		if ($GLOBALS['USE_AUTOSAVE'] == "Yes") {
			?>
			function leave() {
				if (document.forms['EditEntity']) {
					if(typeof AutoSave == 'function') { 
						AutoSave('&Done=true');
					}
				}
			}
			<?php
		} else {
			?>
			function leave() {
				if (document.getElementById('JS_changed') && document.getElementById('JS_changed').value == '1') {
					if (confirm('Save?')) {
							CheckForm('EditEntity');
					}
				}
			}
			<?php
		}

		if ($GLOBALS['UC']['DateFormat'] == "mm-dd-yyyy") {
			print '
			/* the default thousands seperator MAY be set */
			var default_thousandsseparator = ",";
			/* the default decimal seperator MUST be set, otherwise it is not possible to input a fractional number with 3 decimals */
			var default_decimalseperator = ".";
			';
		} else {
			print '
			/* the default thousands seperator MAY be set */
			var default_thousandsseparator = ".";
			/* the default decimal seperator MUST be set, otherwise it is not possible to input a fractional number with 3 decimals */
			var default_decimalseperator = ",";
			';			
		}

		?>
		function LockWarning() {
				/* PopFancyBox("<img src='images/crmlogosmall.gif' alt=''> <span style=\'color: #CECECE;\'>I N T E R L E A V E<\/span>",'thickbox_msg.php?msg=<?php echo urlencode($lang['lostlock']);?>&height=110&width=400&TB_iframe=true'); */
				alert('<?php echo jsencode($lang['lostlock']);?>');
		}

		function OE(eid, ba, fromlist, search) {

				var a;
				a = document.location;
				document.location = 'edit.php?e=' + eid + '&fromlist=____STASH-' + fromlist + '&browsearray=' + ba + '&wordsearch=' + search;

		}
		function Redir(url) {
			if (!document.forms['SuperForm'] || document.forms['SuperForm'].elements['nolink'].value != 1)
			{
				document.location = url;
			} else {
				if (document.forms['SuperForm'])
				{
					document.forms['SuperForm'].elements['nolink'].value = 0;
				}
			}
		}
		function AdjustDateFromPreferenceFormatToDutchFormat(date) {

				if ('<?php echo $GLOBALS['UC']['DateFormat'];?>'=='mm-dd-yyyy') {
						mon = date.substring(0,2);
						day = date.substring(3,5);
						yer = date.substring(6,10);
						NewDate = day + "-" + mon + "-" + yer;
				} else if ('<?php echo $GLOBALS['UC']['DateFormat'];?>'=='yyyy-mm-dd') {
						day = date.substring(8,10);
						mon = date.substring(5,7);
						yer = date.substring(0,4);
						NewDate = day + "-" + mon + "-" + yer;
				} else {
						NewDate = date;
				}
				if (date != '' && NewDate != 'undefined') {
					return(NewDate);
				}
		}

		function AdjustDateToUSAFormat(date) {

			if ('<?php echo $GLOBALS['UC']['DateFormat'];?>'=='mm-dd-yyyy') {
					day = date.substring(0,2);
					mon = date.substring(3,5);
					yer = date.substring(6,10);
					NewDate = mon + "-" + day + "-" + yer;
			} else if ('<?php echo $GLOBALS['UC']['DateFormat'];?>'=='yyyy-mm-dd') {
					day = date.substring(0,2);
					mon = date.substring(3,5);
					yer = date.substring(6,10);
					NewDate = yer + "-" + mon + "-" + day;
			} else {
					NewDate = date;
			}
			if (date != '' && NewDate != 'undefined') {
				document.getElementById('JS_duedate').value = NewDate;
			} else {
				document.getElementById('JS_duedate').value = '';
			}
			document.getElementById('JS_duedate').blur();

		}
		function AdjustStartDateToUSAFormat(date) {
			if ('<?php echo $GLOBALS['UC']['DateFormat'];?>'=='mm-dd-yyyy') {
					day = date.substring(0,2);
					mon = date.substring(3,5);
					yer = date.substring(6,10);
					NewDate = mon + "-" + day + "-" + yer;
			} else if ('<?php echo $GLOBALS['UC']['DateFormat'];?>'=='yyyy-mm-dd') {
					day = date.substring(0,2);
					mon = date.substring(3,5);
					yer = date.substring(6,10);
					NewDate = yer + "-" + mon + "-" + day;
			} else {
					NewDate = date;
			}
			if (date != '' && NewDate != 'undefined') {
				document.getElementById('JS_startdate').value = NewDate;
			} else {
				document.getElementById('JS_startdate').value = '';
			}
			document.getElementById('JS_startdate').blur();
		}
		function AdjustEFDateToUSAFormat(date,field) {
			if ('<?php echo $GLOBALS['UC']['DateFormat'];?>'=='mm-dd-yyyy') {
					day = date.substring(0,2);
					mon = date.substring(3,5);
					yer = date.substring(6,10);
					NewDate = mon + "-" + day + "-" + yer;
			} else if ('<?php echo $GLOBALS['UC']['DateFormat'];?>'=='yyyy-mm-dd') {
					day = date.substring(0,2);
					mon = date.substring(3,5);
					yer = date.substring(6,10);
					NewDate = yer + "-" + mon + "-" + day;
			} else {
					NewDate = date;
			}
			if (date != '' && NewDate != 'undefined') {
				document.getElementById(field).value = NewDate;
			} else {
				document.getElementById(field).value = '';
			}
		}
		function InsertSTDtext(text) {
			now = new Date;
			if (now.getMinutes() < 10) {
				var minutes = "0" + now.getMinutes();
			}
			else {
				var minutes = now.getMinutes();
			}
			if (now.getHours() < 10) {
				var hours = "0" + now.getHours();
			}
			else {
				var hours = now.getHours();
			}
			var add = "[" + now + "] -  <?php echo GetUserName($GLOBALS['USERID']);?>: " + text + "\n\n";
			document.getElementById('JS_did_time').value = "Already done - don't do it again, it'll look messy";
			document.forms['EditEntity'].elements['content'].value = add + document.forms['EditEntity'].elements['content'].value;
			document.forms['EditEntity'].elements['content'].focus();
		}
		function InsertDateTimeCMF(formid) {
			now = new Date;
			if (now.getMinutes() < 10) {
				var minutes = "0" + now.getMinutes();
			}
			else {
				var minutes = now.getMinutes();
			}
			if (now.getHours() < 10) {
				var hours = "0" + now.getHours();
			}
			else {
				var hours = now.getHours();
			}
			var add = "[" + now + "] - <?php echo GetUserName($GLOBALS['USERID']);?>: \n\n";
			var len = add.length;
			formid.value = add + formid.value;
			formid.focus();

		}
		function InsertDateTime() {
			now = new Date;
			if (now.getMinutes() < 10) {
				var minutes = "0" + now.getMinutes();
			}
			else {
				var minutes = now.getMinutes();
			}
			if (now.getHours() < 10) {
				var hours = "0" + now.getHours();
			}
			else {
				var hours = now.getHours();
			}
			var add = "[" + now + "] - <?php echo GetUserName($GLOBALS['USERID']);?>: \n\n";
			var len = add.length;
			document.getElementById('JS_did_time').value = "Already done - don't do it again, it'll look messy";
			document.getElementById('JS_content').value = add + document.getElementById('JS_content').value;
			document.getElementById('JS_content').focus();

		}
		function InsertDateTimeOnce() {

			if (document.getElementById('JS_did_time').value == "not yet") {
				now = new Date;
				if (now.getMinutes() < 10) {
					var minutes = "0" + now.getMinutes();
				}
				else {
					var minutes = now.getMinutes();
				}
				if (now.getHours() < 10) {
					var hours = "0" + now.getHours();
				}
				else {
					var hours = now.getHours();
				}
				var add = "[" + now + "] - <?php echo GetUserName($GLOBALS['USERID']);?>: \n\n";
				document.getElementById('JS_did_time').value = "Already done - don't do it again, it'll look messy";
				document.getElementById('JS_content').value = add + document.getElementById('JS_content').value;
				document.getElementById('JS_content').focus();
			}
		}




	<?php
	$tmp = db_GetRow("SELECT menu_array FROM " . $GLOBALS['TBL_PREFIX'] . "tabmenudefinitions WHERE menu_type='Shortcut keys'");
	if (is_array(unserialize($tmp['menu_array']))) {
		$tmp = unserialize($tmp['menu_array']);
		foreach ($tmp AS $row) {
			$jsadd .= "shortcut.add('" . $row['name'] . "',function() {\n";
			$jsadd .= "	document.location='" . $row['link'] . "';\n";
			$jsadd .= " });\n";
			$do = true;
		}
	}

	if ($do) {
		print $jsadd;
	}


}
function PrintHTMLHeader() {
	$charset = "UTF-8";
	$GLOBALS['CHARACTER-ENCODING'] = "UTF-8";
	header("Content-Type: text/html; charset=" . $charset . "");
	print $GLOBALS['doctype'];
	print $GLOBALS['htmlopentag'];
	print '<head><meta charset="UTF-8">';
	print "\n<!--
* Interleave Business Process Automation
* Copyright (c) 2001-2012 by Interleave, The Netherlands (info@interleave.nl)
* Licensed under the GNU GPL. For full terms see http://www.gnu.org/
*
* Check http://www.interleave.nl/ for more information about Interleave or
* visit Atomos Applications (http://atomos.nl) for support and/or consultancy.
*
* Looking for support or just haven't found the *perfect* solution for your 
* business administration needs yet? With Interleave you can automate any 
* process currently relying on spreadsheets, e-mails, and the knowledge of that 
* one special colleague who happens to be on holiday just when you need him ;-)
*
* Interleave is open-source software. However, this implementation may contain copyrighted,
* non-free and/or non-open (closed) material made by Interleave for a customer or made by
* a customer or Interleave user him/herself. In other words; don't take anything for granted
* but check first before you copy.
*
* Anyway, thanks for checking out the source!
-->\n";

}
function ResetPassword($userid) {
	$newpass = randomstring(8);
	mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "loginusers SET password=PASSWORD('" . mres($newpass) . "'), FORCEPASSCHANGE='y' WHERE id='" . mres($userid) . "'", $db);
	return($newpass);
}

function PDFDownloadLink($htmltoconvert, $linktext, $orientation="P", $header, $nologo=false, $noheader=false, $nofooter=false, $filename=false, $fontname="helvetica", $fontsize="8") {
    // Call this function with any HTML - a link to download it in PDF format will be returned  (valid for 10 minutes)
	$obj = array();

	$obj['html'] = $htmltoconvert;
	$obj['linktext'] = $linktext;
	$obj['orientation'] = $orientation;
	$obj['header'] = $header;
	$obj['nologo'] = $nologo;
	$obj['noheader'] = $noheader;
	$obj['nofooter'] = $nofooter;
	$obj['filename'] = $filename;
	$obj['fontname'] = $fontname;
	$obj['fontsize'] = $fontsize;

    $num = PushStashValue($obj);

    return("<a href='parsepdf.php?Obj=" . $num . "'><img src='images/pdf.gif'  alt=''> " . htme($linktext) . "</a>");

}
function ExcelDownloadLink($sheetarray, $linktext, $filename="", $format="xlsx") {
    // Call this function with any 2D-array  - a link to download it in MS Excel format will be returned (valid for 10 minutes)
	// Format can be xlsx, xls, or pdf
    $num = PushStashValue($sheetarray);
	if ($format == "pdf") {
		$fn = "pdf";
	} else {
		$fn = "excel_large";
	}
    return("<a href='csv.php?ArrayStashID=" . $num . "&amp;fntu=" . base64_encode($filename) . "&amp;fmtu=" . base64_encode($format) . "'><img src='images/" . $fn . ".gif'  alt=''> " . $linktext . "</a>");
}
function ExcelRows() {
	$bla = explode(" ", "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z");
	$rows = array();
	foreach ($bla AS $a) {
		array_push($rows, $a);
	}
	foreach ($bla AS $a) {
		foreach ($bla AS $b) {
			array_push($rows, $a . $b);
		}
	}
	return($rows);
}
function DrawGraph($xaxis, $yaxis, $series1, $series2, $series3, $series1name, $series2name, $series3name, $title, $type='line', $xaxisname='X-axis', $yaxisname='Y-axis', $height=false, $width=false) {
//	print "<pre>1";
//	print_r($xaxis);
//	print "y";
//	print_r($yaxis);
//	print "s1";
//	print_r($series1);
//	print "s2";
//	print_r($series2);
//	exit;

	
	if (CheckFunctionAccess("ManagementInfo") == "nok") {
		$series1 = array("access denied");
		$series2 = array("access denied");
		$series3 = array("access denied");
		$series1name = "access denied";
		$series2name = "access denied";
		$series3name = "access denied";
		$title = "Access denied - you need management information access to view charts";
		$yaxis = array("a/d", "a/d", "a/d", "a/d", "a/d", "a/d");
		$yaxisname = "a/d";
		$xaxisname = "a/d";
	}



	set_include_path(get_include_path() . PATH_SEPARATOR . 'lib/pchart/Fonts/');
	// Standard inclusions
	include($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/pChart/pData.class");
	include($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/pChart/pChart.class");

	// Dataset definition

	$DataSet = new pData;
	$DataSet->AddPoint($series1, "Serie1");
	$DataSet->AddSerie("Serie1");
	$DataSet->SetSerieName($series1name,"Serie1");

	if (is_array($series2) && $type != "pie") {
		$DataSet->AddPoint($series2, "Serie2");
		$DataSet->AddSerie("Serie2");
		$DataSet->SetSerieName($series2name,"Serie2");
		if (is_array($series3)) {
			$DataSet->AddPoint($series3, "Serie3");
			$DataSet->AddSerie("Serie3");
			$DataSet->SetSerieName($series3name,"Serie3");
		}
	}



	if ($type == "pie") {
		// Add description text
		$DataSet->AddPoint($yaxis, "Serie2");
		$DataSet->AddSerie("Serie2");
		$DataSet->SetAbsciseLabelSerie("Serie2");
		#  // Dataset definition

		if (is_numeric($height) && is_numeric($width)) {
			$InterleaveGraphPlot = new pChart($width,$height);
			$InterleaveGraphPlot->setGraphArea(0,0,$width,$height);
		} else {
			$width = 300;
			$height = 200;
			$InterleaveGraphPlot = new pChart($width,$height);
			$InterleaveGraphPlot->setGraphArea(0,0,$width,$height);
		}

		$InterleaveGraphPlot->drawGraphArea(252,252,252);
		

		$lc = HexColor2RGBColor($GLOBALS['DFT_LEGEND_COLOR']);
		$InterleaveGraphPlot->createColorGradientPalette($lc[0]-200,$lc[1]-200,$lc[2]-200,$lc[0]+200,$lc[1]+200,$lc[2]+200,10);


		$InterleaveGraphPlot->setFontProperties($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/Fonts/tahoma.ttf",8);

		$InterleaveGraphPlot->AntialiasQuality = 1;


		$leftover = ($width - 200) - 30;
		$radius = $leftover / 2;


		$InterleaveGraphPlot->drawPieGraph($DataSet->GetData(),$DataSet->GetDataDescription(),$radius+30,$height/2 ,$radius,PIE_PERCENTAGE,TRUE,60,30,5);

		$InterleaveGraphPlot->drawPieLegend($width-200,$height - ($height-30),$DataSet->GetData(),$DataSet->GetDataDescription(),240,240,240);


	//	$InterleaveGraphPlot->setFontProperties($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/Fonts/tahoma.ttf",8);

	//	$InterleaveGraphPlot->setFontProperties($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/Fonts/tahoma.ttf",10);

	//	$InterleaveGraphPlot->drawTitle(10,20,$title,50,50,50);

	} else {

		$DataSet->AddPoint($yaxis,"-");
		$DataSet->SetAbsciseLabelSerie("-");

		$DataSet->SetXAxisName($xaxisname);
		$DataSet->SetYAxisName($yaxisname);
		// Initialise the graph
		if (is_numeric($height) && is_numeric($width)) {
			$InterleaveGraphPlot = new pChart($width,$height);
			$InterleaveGraphPlot->setFontProperties($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/Fonts/tahoma.ttf",10);
			$InterleaveGraphPlot->setGraphArea(70,30,$width-20,$height-100);
		} else {
			$width = 700;
			$height = 230;
			$InterleaveGraphPlot = new pChart($width,$height);
			$InterleaveGraphPlot->setFontProperties($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/Fonts/tahoma.ttf",10);
			$InterleaveGraphPlot->setGraphArea(70,30,$width-20,$height-100);

		}

		$InterleaveGraphPlot->drawGraphArea(252,252,252);	
	


		$lc = HexColor2RGBColor($GLOBALS['DFT_LEGEND_COLOR']);
		$InterleaveGraphPlot->createColorGradientPalette($lc[0]-120,$lc[1]-120,$lc[2]-120,$lc[0]+120,$lc[1]+120,$lc[2]+120,1);

		//$InterleaveGraphPlot->drawGraphAreaGradient($col[0] + 50,$col[1] + 50,$col[2] + 50,-80, TARGET_BACKGROUND);


		//$InterleaveGraphPlot->drawGraphArea(252,252,252);

		$InterleaveGraphPlot->setFontProperties($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/Fonts/tahoma.ttf",8);

		if ($type == "line" || $type == "curve" || $type == "filledcurve"|| $type == "filledline") {
			$InterleaveGraphPlot->drawScale($DataSet->GetData(),$DataSet->GetDataDescription(),SCALE_NORMAL,150,150,150,TRUE,90,2);
		} elseif ($type == "bar" || $type == "stackedbar" || $type == "overlaybar") {
			$InterleaveGraphPlot->drawScale($DataSet->GetData(),$DataSet->GetDataDescription(),SCALE_NORMAL,150,150,150,TRUE,90,2,TRUE);
		}

		$InterleaveGraphPlot->drawGrid(4,TRUE,230,230,230,255);

		// Draw the line graph
		if ($type == "line") {
			$InterleaveGraphPlot->drawLineGraph($DataSet->GetData(),$DataSet->GetDataDescription());
			$InterleaveGraphPlot->drawPlotGraph($DataSet->GetData(),$DataSet->GetDataDescription(),3,2,255,255,255);
		} elseif ($type == "curve") {
			$InterleaveGraphPlot->drawCubicCurve($DataSet->GetData(),$DataSet->GetDataDescription());
		} elseif ($type == "filledcurve") {
			$InterleaveGraphPlot->drawFilledCubicCurve($DataSet->GetData(),$DataSet->GetDataDescription());
		} elseif ($type == "bar") {
			$InterleaveGraphPlot->drawBarGraph($DataSet->GetData(),$DataSet->GetDataDescription());
		} elseif ($type == "stackedbar") {
			$InterleaveGraphPlot->drawStackedBarGraph($DataSet->GetData(),$DataSet->GetDataDescription(),TRUE);
		} elseif ($type == "overlaybar") {
			$InterleaveGraphPlot->drawOverlayBarGraph($DataSet->GetData(),$DataSet->GetDataDescription());
		} elseif ($type == "filledline") {
			$InterleaveGraphPlot->drawFilledLineGraph($DataSet->GetData(),$DataSet->GetDataDescription(),50);
		}

//  $InterleaveGraphPlot->setFontProperties("Fonts/tahoma.ttf",8);
//  $InterleaveGraphPlot->drawLegend(605,142,$DataSet->GetDataDescription(),236,238,240,52,58,82);





		// Finish the graph

		$InterleaveGraphPlot->setFontProperties($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/Fonts/tahoma.ttf",8);
		$InterleaveGraphPlot->drawLegend(80,35,$DataSet->GetDataDescription(),255,255,255);
		//$InterleaveGraphPlot->setFontProperties($GLOBALS['PATHTOINTERLEAVE'] . "lib/pchart/Fonts/tahoma.ttf",10);
		//$InterleaveGraphPlot->drawTitle(50,22,$title,50,50,60);
	}

	$InterleaveGraphPlot->drawTextBox(0,0,$width,20,$title . "   ",0,255,255,255,ALIGN_RIGHT,TRUE,0,0,0,60);
	$InterleaveGraphPlot->drawFromPNG("images/crm_small.png",8,3);
	$InterleaveGraphPlot->AddBorder(2, 170, 170, 170);
	$InterleaveGraphPlot->Stroke();
}
function CreatePDFEntityReport($eid) {
	global $lang;
	unset($pdf);
	require($GLOBALS['PATHTOINTERLEAVE'] . "lib/tcpdf/config/lang/eng.php");
	require($GLOBALS['PATHTOINTERLEAVE'] . "lib/tcpdf/tcpdf.php");

	require_once("class.interleave.php");

	$Entity = new Interleave();

	if (!is_array($eid)) {
		qlog(INFO, "PDF; eid is not an array (" . $eid . "), array-izing...");
		$eid = array($eid);
	}

	$eidtp = $eid;
	unset($eid);

	// create new PDF document
	$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, $GLOBALS['CHARACTER-ENCODING'], false);

	// set document information
	$pdf->SetCreator(PDF_CREATOR);
	$pdf->SetAuthor('Interleave Business Process Management: ' . GetUserName($GLOBALS['USERID']));
	$pdf->SetTitle('Automatically generated PDF report');
	$pdf->SetSubject('See http://www.interleave.nl/');
	$pdf->SetKeywords('');

	foreach ($eidtp AS $eid) {
		$Entity->LoadEntity($eid);
		// set default header data
		$pdf->SetHeaderData("../../../images/crm.jpg", PDF_HEADER_LOGO_WIDTH, "Interleave " . $lang['entsum'], $eid . ": " . $Entity->category);

		// set header and footer fonts
		$pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
		$pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));

		//set margins
		$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
		$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
		$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

		//set auto page breaks
		$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

		//set image scale factor
		$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

		//set some language-dependent strings
		$pdf->setLanguageArray($l);

		// ---------------------------------------------------------

		// set font
		$pdf->SetFont('dejavusans', '', 8);

		// add a page
		$pdf->AddPage();

		// Bookmark the page
		$pdf->Bookmark($eid . ": " . $Entity->category, 0, 0);

		$hc = "<table width='70%'>";
		$hc .= "<tr><td>" . $lang['customer'] . "</td><td class='mnspc'>" . GetCustomerName($Entity->customer) . "</td></tr>";
		$hc .= "<tr><td>" . $lang['assignee'] . "</td><td class='mnspc'>" . GetUserName($Entity->assignee) . "</td></tr>";
		$hc .= "<tr><td>" . $lang['owner'] . "</td><td class='mnspc'>" . GetUserName($Entity->owner) . "</td></tr>";
		$hc .= "<tr><td>" . $lang['status'] . "</td><td style='background-color: " . GetStatusColor($Entity->status) . ";' class='mnspc'>" . $Entity->status . "</td></tr>";
		$hc .= "<tr><td>" . $lang['priority'] . "</td><td style='background-color: " . GetPriorityColor($Entity->priority) . ";' class='mnspc'>" . $Entity->priority . "</td></tr>";
		$hc .= "<tr><td>" . $lang['creationdate'] . "</td><td class='mnspc'>" . TransformDate(date('d-m-Y', $Entity->openepoch)) . "</td></tr>";
		$hc .= "<tr><td>" . $lang['startdate'] . "</td><td class='mnspc'>" . TransformDate($Entity->startdate) . "</td></tr>";
		$hc .= "<tr><td>" . $lang['duedate'] . "</td><td class='mnspc'>" . TransformDate($Entity->duedate) . "</td></tr>";
		$hc .= "<tr><td>" . $lang['lastupdate'] . "</td><td class='mnspc'>" . $Entity->lastupdate . "</td></tr>";
		$hc .= "<tr><td></td></tr>";
		$hc .= "<tr><td>" . $lang['category'] . "</td><td class='mnspc'><strong>" . $Entity->category . "</strong></td></tr>";
		$hc .= "<tr><td></td></tr>";

		$t = GetExtraFields();
		foreach ($t AS $field) {
				$val = GetExtraFieldValue($eid, $field['id'], true, false) ;
				$field['optioncolors'] = unserialize($field['optioncolors']);
				if ($val != "") {
					if ($field['fieldtype'] == "drop-down" && $field['optioncolors'][$val]) {
						$hc .= "<tr><td>" . $field['name'] . "</td><td style='background-color: " . $field['optioncolors'][$val] . ";' class='mnspc'>" . $val. "</td></tr>";
					} else {
						$hc .= "<tr><td>" . $field['name'] . "</td><td class='mnspc'>" . $val. "</td></tr>";
					}
//					ParseTemplateHTMLColors($template, $entity)
				}
		}

		$hc .= "<tr><td><br>" . $lang['contents'] . ":</td></tr>";
		$hc .= "<tr><td colspan='2' style='border-style: solid;' class='mnspc'>" . nl2br(($Entity->content)) . "</td></tr>";
		$hc .= "</table>";

		// output the HTML content
		$pdf->writeHTML($hc	, true, 0, true, 0);

		// reset pointer to the last page
		$pdf->lastPage();

	}

	if (sizeof($eid) > 1) {
		// add table of content at page 1
		$pdf->addTOC(1, 'courier', '.');
	}

	//Close and return PDF document
	return($pdf->Output($f, 'S'));
//	$pdf->Output('/tmp/example_001.pdf', 'F');
//	$pdf->Close();

}
function CreatePDFEntityReportBasedOnHTML($html, $header, $filename=false, $nologo=false, $orientation = "P", $noheader=false, $nofooter=false) {
	global $lang;

	$headerlogo = "../../../images/crm.jpg";

	// Convert input to UTF-8
	$html = html_entity_decode($html, ENT_QUOTES);

	//$html = iconv( $GLOBALS['CHARACTER-ENCODING'], "UTF-8", $html);

	require_once($GLOBALS['PATHTOINTERLEAVE'] . "lib/tcpdf/config/lang/eng.php");
	require_once($GLOBALS['PATHTOINTERLEAVE'] . "lib/tcpdf/tcpdf.php");
	
	// create new PDF document
	$pdf = new TCPDF($orientation, PDF_UNIT, PDF_PAGE_FORMAT, true, "UTF-8", false);

	$html = str_replace("^^^LINEBREAK^^^", "<br>", $html);

	// Match barcode tags

	preg_match_all('/(\^\^BC_)(.*)(\^\^ENDBC\^\^)/', $html, $matches);
	$list_of_tags = $matches[0];	

	foreach ($list_of_tags AS $fulltag) {
	
		$tag = explode("^^", $fulltag);
		/*
		Array
		(
			[0] => 
			[1] => BC_C39E
			[2] => DITISEENTEST
			[3] => H80
			[4] => W30
			[5] => B0
			[6] => ENDBC
			[7] => 
		)
		*/

		$bc = str_replace("BC_", "", $tag[1]);
		$value = $tag[2];
		$height = str_replace("H", "", $tag[3]);
		$width = str_replace("B", "", $tag[4]);
		
		if ($width == "") $width = 30;
		if ($height == "") $height = 40;

		if ($tag[5] == "B0") {
			$border = false;
		} elseif ($tag[5] == "B1") {
			$border = true;
		} elseif ($tag[5] == "") {
			$border = false;
		}
		
		$params = $pdf->serializeTCPDFtagParameters(array($value, $bc, '', '', $height, $width, 0.4, array('position'=>'S', 'border'=>$border, 'padding'=>4, 'fgcolor'=>array(0,0,0), 'bgcolor'=>array(255,255,255), 'text'=>true, 'font'=>'helvetica', 'fontsize'=>8, 'stretchtext'=>4), 'N'));

		$html = str_replace($fulltag, '<tcpdf method="write1DBarcode" params="'.$params.'" />', $html);;


	}
//	print ($html);
//	exit;

	$value = GetExtraFieldValue($record, $field, false, false, false);

	if (!$filename) $filename = "report.pdf";

	// set document information
	$pdf->SetCreator(PDF_CREATOR);
	$pdf->SetAuthor('Interleave Business Process Management (user ' . $GLOBALS['USERID'] . ')');
	$pdf->SetTitle($header);
	$pdf->SetSubject($filename);
	$pdf->SetKeywords('See http://www.interleave.nl/ for more information');

	//set margins
	$pdf->SetMargins(PDF_MARGIN_LEFT, 18, PDF_MARGIN_RIGHT);
	

	//set auto page breaks
	$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

	//set image scale factor
	$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

	//set some language-dependent strings
	$pdf->setLanguageArray($l);

	if ($noheader) {
		$pdf->setPrintHeader(false);
		$pdf->setHeaderFont(Array("helvetica", '', PDF_FONT_SIZE_MAIN));
	} else {
		if ($headerHTML) {
			$pdf->SetHeaderData(false, false, $headerHTML, "");
		} else {
			if (!$nologo) {
				// set default header data
				$pdf->SetHeaderData($headerlogo, PDF_HEADER_LOGO_WIDTH, $header, "");
			} else {
				// set default header data
				$pdf->SetHeaderData(false, false, $header, "");
			}
		}
		$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
	}
	if ($nofooter) {
		$pdf->setPrintFooter(false);
	} else {
		if ($footerHTML) {
			$pdf->Cell(0,10,$footerHTML, 0, 0, "L");
		} else {
			$pdf->setFooterFont(Array("helvetica", '', PDF_FONT_SIZE_DATA));
			$pdf->Cell(0,10,"footerText", 0, 0, "L");
		}
		$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
	}

	// ---------------------------------------------------------


	$arr = explode("%PAGEBREAK%", $html);

	foreach ($arr AS $htmlpart) {
		if (trim(strip_tags($htmlpart)) != "") {
			// set font
			$pdf->SetFont('helvetica', '', 8);

			// add a page
			$pdf->AddPage();

			// output the HTML content
			$pdf->writeHTML($htmlpart, true, 0, true, 0);
		}
	}


	return($pdf->Output($filename, 'S'));


}
function PrintGauge($totcount, $valcount, $title) {
	$epoch = date('U');

	$ie_src = urlencode("/gauge.php?valcount=" . $valcount . "&amp;totcount=" . $totcount . "&amp;Gtitle=" . $title . "&amp;epoch=" . $epoch);

	?>
	<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		codebase="https://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0"
		width="400"
		height="250"
		id="gauge"
		align="">

	<param name="quality" value="high">
	<param name="movie" value="images/gauge.swf?xml_source=<?php echo $ie_src;?>">

	<embed src="images/gauge.swf?xml_source=../gauge.php%3Fvalcount%3D<?php echo $valcount;?>%26totcount%3D<?php echo $totcount;?>%26Gtitle%3D<?php echo urlencode($title) . "%26epoch=" . $epoch;?>"
		   quality=high
		   bgcolor=#FFFFFF
		   width="300"
		   height="250"
		   name="gauge"
		   align=""
		   type="application/x-shockwave-flash"
		   pluginspage="https://www.macromedia.com/go/getflashplayer">
	</embed>



	</object>
	<?php
}
function CreateUserAccessCache() {
	print "\nGenerating access cache for repository " . $GLOBALS['title'] . "... \n";
	//mcq("TRUNCATE TABLE " . $GLOBALS['TBL_PREFIX'] . "accesscache", $db);

	$eids = db_GetFlatArray("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity");
	foreach (GetUserList() AS $user) {
		$done = db_GetFlatArray("SELECT eidcid FROM " . $GLOBALS['TBL_PREFIX'] . "accesscache WHERE type='e' AND user=" . $user['id']);
		foreach ($eids AS $eid) {
			if (!in_array($eid, $done)) {
				$ret = CheckEntityAccess($eid, $user['id'], true);
				print "\015User " . $user['id'] . " (" . $user['FULLNAME'] . ") access to entity " . $eid . " : " . $ret . "               ";
			} else {
				print "\015User " . $user['id'] . " (" . $user['FULLNAME'] . ") access to entity " . $eid . " : " . $ret . "     _SKIP_          ";
			}
		}
		print "\n";
		ClearAllRunningCache();
	}
}
function FindAndReplaceInAllTemplates($from, $to) {
	$t = db_GetFlatArray("SELECT templateid FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE templatetype IN ('TEMPLATE', 'TEMPLATE_HTML', 'TEMPLATE_HTML_FORM', 'TEMPLATE_CSS', 'TEMPLATE_HTML_CFORM', 'TEMPLATE_PLAIN', 'TEMPLATE_REPORT', 'TEMPLATE_REPORT_PDF', 'PLAIN', 'HTML')");
	foreach ($t AS $file) {
		$content = GetTemplate($file);
		if (strlen($content) > 10) {
			$content = str_replace($from, $to, $content);
			SetTemplateContent($file, $content);
			ExpireFormCache($file);
		}
	}
	$t = db_GetArray("SELECT mid, module_code FROM " . $GLOBALS['TBL_PREFIX'] . "modules");
	foreach ($t AS $module) {
		if (strlen($module['module_code']) > 10) {
			$module['module_code'] = str_replace($from, $to, $module['module_code']);
			mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "modules SET module_code='" . mres($module['module_code']) . "' WHERE mid='" . mres($module['mid']) . "'", $db);
		}
	}
}
function DisplayPlainMenu($menutabsarray, $current) {
	print "<table><tr><td>&nbsp;&nbsp;</td>";
	foreach ($menutabsarray AS $item => $link) {
		foreach ($link AS $menuitem => $text) {
			if ($current == $item) {
				$sel = "style='border-bottom: dashed 1px #000000;'";
			} else {
				unset($sel);
			}
			if ($menuitem != "comment") {
				print "<td class=\"nwrp\" " . $sel . "><a href='" . htme($menuitem) . "' class='arrow'>" . $text . "</a>&nbsp;&nbsp;</td>";
			}
		}
	}
	print "</tr></table>";
	print "<table><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;</td><td>";
}
function DisplayPlainMenuWithLines($menutabsarray, $current) {
	print "<table><tr><td>&nbsp;&nbsp;</td><td  style='border-top: 2px solid " . $GLOBALS['DFT_FOREGROUND_COLOR'] . ";border-bottom: 2px solid " . $GLOBALS['DFT_FOREGROUND_COLOR'] . ";'>&nbsp;</td>";
	foreach ($menutabsarray AS $item => $link) {
		foreach ($link AS $menuitem => $text) {
			if ($current == $item) {
				$linecolor = "2px solid " . $GLOBALS['DFT_FOREGROUND_COLOR'] . ";margin: 20px 20px 20px 0;text-decoration: underline;";
			} else {
				$linecolor = "2px solid " . $GLOBALS['DFT_FOREGROUND_COLOR'];
			}
			if ($menuitem != "comment") {
				print "<td class=\"nwrp\" style='border-bottom: " . $linecolor . ";border-top: " . $linecolor . ";'><a href='" . htme($menuitem) . "'>" . $text . "</a><td style='border-top: 2px solid " . $GLOBALS['DFT_FOREGROUND_COLOR'] . ";border-bottom: 2px solid " . $GLOBALS['DFT_FOREGROUND_COLOR'] . ";'>&nbsp;&nbsp;";
				if ($item  != "logo") {
					print "|&nbsp;&nbsp;";
				}
				print "</td>";
			}
		}
	}
	print "<td style='border-top: 2px solid " . $GLOBALS['DFT_FOREGROUND_COLOR'] . ";border-bottom: 2px solid " . $GLOBALS['DFT_FOREGROUND_COLOR'] . ";'>&nbsp;&nbsp;</td>";
	print "</tr></table><br>";
	print "<table><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;</td><td>";
}

function ParseTemplateMenu($template_id) {
		if ($menu = GetFormCache(0, $template_id, "menutemplate")) {
			qlog(INFO, "Fetched menu from cache");
			$menu = $menu['content'];
		} else {
			$menu = ReturnTemplateStyleSheet($template_id);
			$menu .= ParseTemplateGeneric(GetTemplate($template_id));
			$menu = str_replace("@L@", "---LIST---", $menu);

			#fix jeroen 2011-04-20
			if (strstr($menu, "@SEARCH@") || strstr($menu, "@R@") || strstr($menu, "@T@") || strstr($menu, "@SEARCHWILD@") || strstr($menu, "@SEARCHEID@")) {
				$searcheid = "<div class='showinline' id='JS_directsubmit'>#: <form id='direct' method='get' action='edit.php'><input type='text' size='5' name='e' onchange=\"document.forms['direct'].submit();\" onfocus=\"document.forms['direct'].elements['e'].value=''\"></form></div>";
				$search = true;

				$searchwild = '<form action="summary.php" method="get"><img src="images/searchbox.png" alt="" class="search_img"><input type="search" class="search_input" name="sta" id="JS_sta" onchange="this.form.submit()"></form>';

				$sf = "" . $searcheid . "&nbsp;" . $searchwild;

				$menu = str_replace("@SEARCH@", $sf, $menu);
				$menu = str_replace("@SEARCHEID@", $searcheid, $menu);
				$menu = str_replace("@SEARCHWILD@", $searchwild, $menu);
				$menu = str_replace("@T@", CreateTrail(true), $menu);
				$menu = str_replace("@R@", CreateReposSwitcher(true), $menu);
			}


		if (strstr("@MODULE", $menu)) {
			$dontcache = true;
		}

		$menu = ParseTemplateDashboard($menu);

		if (!$dontcache) {
			SetFormCache ("0", $template_id, "menutemplate", $menu);
		}


	}

	if (strstr($menu, "---LIST---") && $_REQUEST['browsearray']) {
		$ar = PopStashValue($_REQUEST['browsearray']);
		if (count($ar) < 50 && count($ar) > 0) {
			$sql = "SELECT CONCAT(LEFT(category, 45),'...') AS cat, eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid IN(";
			foreach($ar AS $eid) {
				if (is_numeric($eid)) {
					if ($notfirst) {
						$sql .= ",";
					}
					$sql .= $eid;
					$notfirst = true;
				}
			}
			$sql .= ")";
			if ($notfirst) {
				$result= mcq($sql,$db);
				$html = "<table width='100%' cellspacing='0' cellpadding='3' border='0'><tr><td><img src='images/crmlogosmall.gif' alt=''>&nbsp;<strong>Last list</strong></td><td></td></tr>";
				while ($list= mysql_fetch_array($result)) {
						$html .= "<tr><td><a href='edit.php?e=" . $list['eid'] . "&amp;browsearray=" . htme($_REQUEST['browsearray']) . "' class='arrow'>" . $list['eid'] . ": " . htme($list['cat']) . "</a></td></tr>";
						$l++;
				}
				$html .= "</table>";

				$list  = "&nbsp;<div id='lastlist'>[L]</div>";
				$list .= "<div id='lastlistcontent'>" . $html . "</div>";

				
				$menu = str_replace("---LIST---", $list, $menu);

			} else {
				$menu = str_replace("---LIST---", "<!-- no valid browsearray, no list -->&nbsp;&nbsp;&nbsp;&nbsp;", $menu);
			}
		} else {
			$menu = str_replace("---LIST---", "<!-- browsearray too long, no list -->&nbsp;&nbsp;&nbsp;&nbsp;", $menu);
		}
	} elseif (strstr($menu, "---LIST---")) {
			$menu = str_replace("---LIST---", "<!-- no browsearray, no list -->&nbsp;&nbsp;&nbsp;&nbsp;", $menu);
	}

	return(EvaluateTemplatePHP($menu));
}

function CreateTrail($icon) {
	return(false);
	$html = '';
	$count = 0;
	$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "breadcrumtrail WHERE user='" . mres($GLOBALS['USERID']) . "' ORDER BY id DESC LIMIT 15";;
	$result = mcq($sql,$db);
	while ($recent = mysql_fetch_array($result)) {
			$html .= '<a href="' . htme($recent['link']) . '" class="plainlink">' . htme($recent['text']) . '</a><br>';
			$count++;
	}

	$recentlist = '';

//	if ($count > 0)
//	{
		$recentlist .= '<div id="recentlist" class="showinline" onmouseover="document.getElementById(\'recentlistcontent\').style.display = \'block\';" onmouseout="document.getElementById(\'recentlistcontent\').style.display = \'none\';">';
		if ($icon) {
			$recentlist .= '<img src="images/recent.gif" alt="">';
		} else {
			$recentlist .= '[T]';
		}
		$recentlist .= '<div id="recentlistcontent"><strong>Trail</strong><br>' . $html . '</div></div>';
//	}
	return $recentlist;
}

function CreateReposSwitcher($icon) {
	$html = '';

	include($GLOBALS['CONFIGFILE']);
	$sql = "SELECT password FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($GLOBALS['USERNAME']) . "'";
	$result = mcq($sql,$db);
	$result1 = mysql_fetch_array($result);
	$curpassword = $result1['password'];
	$county = 0;
	$GLOBALS['ONLY_LOCAL'] = true;
	if (sizeof($pass)>0) {
			for ($r=0;$r<64;$r++) {
				if ($host[$r]) {
					if ($db = DB_Connect($r, false)) {
							$tbl = $table_prefix[$r];
							if ($tbl=="") $tbl="CRM";
							$sql = "SELECT password FROM " . $tbl . "loginusers WHERE name='" . mres($GLOBALS['USERNAME']) . "'";
							$result = @mysql_query($sql);
							$result1= @mysql_fetch_array($result);
							$foreignpassword = $result1[password];
							if ($curpassword==$foreignpassword && $GLOBALS['USERNAME']) {

								//$id[0] = GetUserID($GLOBALS['USERNAME']);
								$sql = "SELECT id FROM " . $tbl . "loginusers WHERE name='" . mres($GLOBALS['USERNAME']) . "'";
								$result= mcq($sql,$db);
								$id= mysql_fetch_array($result);

								$sql = "SELECT value FROM " . $tbl . "settings WHERE setting='title'";
								$result = mcq($sql,$db);
								$result = mysql_fetch_array($result);

								$html .= '<a href="index.php?swrepos=1&amp;switchreposto=a-' . $r . '" class="plainlink nwrp">' . htme($result['value']) . '</a><br>';
								
								$county++;
							} else {
								//print "<option>denied</option>";
							}

					} else {
						 //print "<option>host not found</option>";
					}
				}
				}

		$outp .= "</table>";

		if (!DB_Connect($GLOBALS['ORIGINAL_REPOSITORY'], false)) {
			DB_Connect($GLOBALS['ORIGINAL_REPOSITORY'], true);
		}
		SwitchToRepos($GLOBALS['REPOSITORY']);

	} else {
		PrintAD("No suitable repository found");
		EndHTML();
		exit;
	}
	unset($GLOBALS['ONLY_LOCAL']);


	$reposswitcher = '';
	if ($county > 1)
	{
		if ($icon) {
			$reposswitcher = '<img src="images/repos.gif" alt="">';
		} else {
			$reposswitcher = '[R]';
		}		
		$reposswitcher = "<a href=\"#\" " . PrintToolTipCode($html) . ">" . $reposswitcher . "</a>";
		/*
		$reposswitcher .= '<div id="reposswitcher" class="showinline" onmouseover="document.getElementById(\'reposswitchercontent\').style.display = \'block\';" onmouseout="document.getElementById(\'reposswitchercontent\').style.display = \'none\';">';

		$reposswitcher .= '<div id="reposswitchercontent" class=\"showinline\"><strong>Repository</strong><br>' . $html . '</div></div>';
		*/
	}
	/*print "Titel: " . $GLOBALS['title'] . "<br>";
	print "User: " . $GLOBALS['USERNAME'] . "<br>";
	print "Title db: " . GetSetting("title") . "<br>";*/

	return $reposswitcher;
}

function CreateNewFlextableRecord($ft, $eid) {
	$list = GetExtraFlexTableFields($ft);

	$flexdef = GetFlexTableDefinitions($ft);

	if ($flexdef[0]['orientation'] == "one_entity_to_many") {
		mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . "(refer,readonly,deleted) VALUES('". mres($eid) . "','no','n')", $db);
		$recordid = mysql_insert_id();
		ExpireFormCache($eid, "Flextable update", "entity");
	} else {
		mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . "(readonly,deleted) VALUES('no','n')", $db);
		$recordid = mysql_insert_id();
	}

	// Journal this
	journal($recordid, "Record created", "flextable" . $ft);

	// Create mandatory fields immediately
	AddDefaultExtraFlexTableFields($ft, $recordid);

	return($recordid);

}
function ReturnEpochBasedOnDateAndTime($NLdate, $NLtime) {
	return(mktime(substr($NLtime,0,2), substr($NLtime,2,2), 0, substr($NLdate,3,2), substr($NLdate,0,2), substr($NLdate,6,4)));
}
function CheckAndSetPlanning() {

	$record_id	= $_REQUEST['id'];
	$table		= $_REQUEST['table'];
	$ft			= str_replace("flextable", "", $table);
	$extrafield = $_REQUEST['extrafield'];

	if (!is_numeric($_REQUEST['ef'])) {
		return(false);
	}

	if ($_REQUEST['table'] == "customer") {

		$tt = "cust";
		$id = "id";
		if (CheckCustomerAccess($record_id) != "ok") {
			qlog(INFO, "Not updating booking calendar; no access!");
			return(false);
		}
	} elseif (is_numeric($ft)) {

		$tt = "flextable" . $ft;
		$id = "recordid";
		if (CheckFlexTableAccess($ft) != "ok" || CheckFlextableRecordAccess($ft, $record_id) != "ok") {
			qlog(INFO, "Not updating booking calendar; no access!");
			return(false);
		}
	} else {

		$id = "eid";
		$tt = "entity";
		if (CheckEntityAccess($record_id) != "ok") {
			qlog(INFO, "Not updating booking calendar; no access!");
			return(false);
		}
	}


	if ($_REQUEST['id'] == "_new_") {
		print "<!-- CheckAndSetPlanning can only be used with EXISTING records -->";
		return(false);
	}

	$tmp = db_GetRow("SELECT EFID" . mres($_REQUEST['ef']) . " AS value FROM " . $GLOBALS['TBL_PREFIX'] . $table . " WHERE " . $id . "='" . mres($_REQUEST['id']) . "'");


	// value is serialized array:
	//   [0]
	//      id			=> eid or recordid or customerid
	//		startdate	=> start date
	//		starttime	=> start time
	//		enddate		=> end date date
	//		endtime		=> end time

	// [NewAppointment] => 17-06-2009:1400|1500

	$plan = unserialize($tmp['value']);
	if (!is_array($plan)) {
		$plan = array();

	}

	if ($_REQUEST['NewAppointment'] != "" || $_REQUEST['DeleteAppointment'] != "") {

		$tmp = explode(":", $_REQUEST['NewAppointment']);

		if ($_REQUEST['DeleteAppointment']) {
			$tmp = explode(":", $_REQUEST['DeleteAppointment']);
		}

		$na = array();
		$na['id'] = $_REQUEST['id'];
		$na['startdate'] = $tmp[1];
		$na['enddate']	 = $tmp[1];
		$na['starttime'] = $tmp[2];
		$na['endtime']	 = $tmp[3];

		if (strlen($na['starttime']) == 3) $na['starttime'] = "0" . $na['starttime'];
		if (strlen($na['endttime']) == 3) $na['endtime'] = "0" . $na['endtime'];

		if ($_REQUEST['NewAppointment'] && !$_REQUEST['DeleteAppointment']) {
			array_push($plan, $na);
			if ($_REQUEST['table'] == "entity") {
					journal($_REQUEST['id'], "Planning for field " . GetExtraFieldName($_REQUEST['ef']) . " starting at " . $na['startdate'] . " " . $na['starttime'] . " added");
				} elseif ($_REQUEST['table'] == "customer") {
					journal($_REQUEST['id'], "Planning for field " . GetExtraFieldName($_REQUEST['ef']) . " starting at " . $na['startdate'] . " " . $na['starttime'] . " added", "customer");
				} elseif (is_numeric($ft)) {
					journal($_REQUEST['id'],"Planning for field " . GetExtraFieldName($_REQUEST['ef']) . " starting at " . $na['startdate'] . " " . $na['starttime'] . " added","flextable" . $ft);
				}
		} elseif ($_REQUEST['DeleteAppointment']) {
			foreach ($plan AS $x => $planarray) {


				if ($planarray['id'] == $_REQUEST['id'] && $planarray['startdate'] == $na['startdate'] && $planarray['enddate'] == $na['enddate'] && $planarray['starttime'] == $na['starttime'] && $planarray['endtime'] == $na['endtime']) {
					unset($plan[$x]);
					if ($_REQUEST['table'] == "entity") {
						journal($_REQUEST['id'], "Planning for field " . GetExtraFieldName($_REQUEST['ef']) . " starting at " . $na['startdate'] . " " . $na['starttime'] . " deleted");
					} elseif ($_REQUEST['table'] == "customer") {
						journal($_REQUEST['id'], "Planning for field " . GetExtraFieldName($_REQUEST['ef']) . " starting at " . $na['startdate'] . " " . $na['starttime'] . " deleted", "customer");
					} elseif (is_numeric($ft)) {
						journal($_REQUEST['id'],"Planning for field " . GetExtraFieldName($_REQUEST['ef']) . " starting at " . $na['startdate'] . " " . $na['starttime'] . " deleted","flextable" . $ft);
					}
				} else {

				}
			}

		}

		$new = true;

	}

	if ($new) {
		if ($_REQUEST['table'] == "entity" && CheckExtraFieldAccess($field_num) == "ok" && CheckEntityAccess($_REQUEST['id']) == "ok") {
			SetExtraFieldValue($_REQUEST['ef'], $_REQUEST['id'], serialize($plan), false, false);
		} elseif ($_REQUEST['table'] == "customer" && CheckCustomerAccess($_REQUEST['id']) == "ok") {
			SetExtraCustomerFieldValueSimple($_REQUEST['ef'], $_REQUEST['id'], serialize($plan));
		} elseif ((CheckFlexTableAccess($ft) == "ok" && CheckFlextableRecordAccess($ft, $_REQUEST['id']) == "ok") && is_numeric($ft)) {
			SetExtraFlextableFieldValueSimple($_REQUEST['ef'],  $_REQUEST['id'], $ft, serialize($plan));
		} else {
			print "Update not saved - no access or unknown table (" . $_REQUEST['table'] . ")";
		}
	}
}

function ReturnPlanning($record_id, $table, $extrafield) {
	$divid = "AJX" . randomstring(8, true);
	if ($small_inline) {
		$small_inline = 1;
	}
	$output .= AjaxBox("ReturnPlanningPart", true, "&record_id=" . $record_id . "&table=" . $table . "&extrafield=" . $extrafield . "&CheckAndSetDiv=" . $divid . "&small_inline=" . $small_inline, false, false);
	$output .= AjaxBox("CheckAndSetPlanning", true, "&id=" . $record_id . "&ef=" . $extrafield . "&small_inline=" . $small_inline, false, $divid);
	return($output);
}
function ReturnPlanningGroup($record_id, $table, $list_of_fields, $fieldname) {
	$divid = "AJX" . randomstring(8, true);
	$stash = PushStashValue($list_of_fields);
	$output .= AjaxBox("ReturnInlinePlanningPart", true, "&record_id=" . $record_id . "&table=" . $table . "&extrafield=" . $extrafield . "&CheckAndSetDiv=" . $divid . "&lof=" . $stash . "&fieldname=" . htme($fieldname), false, false);
	$output .= AjaxBox("CheckAndSetPlanning", true, "&id=" . $record_id . "&ef=" . $extrafield . "&lof=" . $stash, false, $divid);
	return($output);
}
function ReturnInlinePlanningPart() {
	global $lang;

	$record_id	= $_REQUEST['record_id'];
	$table		= $_REQUEST['table'];
	$ft			= str_replace("flextable", "", $table);
//	$extrafield = $_REQUEST['extrafield'];
	$efid		= str_replace("EFID", "", $extrafield);
	$lof		= PopStashValue($_REQUEST['lof']);
	$fieldname	= $_REQUEST['fieldname'];




	if($record_id == "_new_") {
		return("<!-- The planning calendar cannot be shown for NEW records -->");
	} elseif ($record_id == "noref") {
		$noref = true;
	}

	$colors = array("#E6E6FA", "#FFF0F5", "#7CFC00", "#FFFACD", "#ADD8E6", "#F08080", "#E0FFFF", "#FAFAD2", "#D3D3D3", "#90EE90", "#FFB6C1", "#FFA07A", "#20B2AA", "#87CEFA", "#778899", "#B0C4DE", "#FFFFE0", "#F0E68C", "#E6E6FA", "#FFF0F5", "#7CFC00", "#FFFACD", "#ADD8E6", "#F08080", "#E0FFFF", "#FAFAD2", "#D3D3D3", "#90EE90", "#FFB6C1", "#FFA07A", "#20B2AA", "#87CEFA", "#778899", "#B0C4DE", "#FFFFE0", "#F0E68C", "#E6E6FA", "#FFF0F5", "#7CFC00", "#FFFACD", "#ADD8E6", "#F08080", "#E0FFFF", "#FAFAD2", "#D3D3D3", "#90EE90", "#FFB6C1", "#FFA07A", "#20B2AA", "#87CEFA", "#778899", "#B0C4DE", "#FFFFE0");

	$c = 0;

	$me = $_REQUEST['AjaxHandler'];

	if (!$_REQUEST['caldate']) {
		$caldate = date('U');
	} else {
		$caldate = $_REQUEST['caldate'];
	}

	if ($_REQUEST['week'] == "prev") {
			$caldate -= 604800;
	} elseif ($_REQUEST['week'] == "next") {
			$caldate += 604800;
	}
	$calenddate = $caldate + 604800; // 1 week
	$monbase = strtotime("last monday", $caldate + 86401);
	$nextmonbase = strtotime("next monday", $caldate);

	$mon = date('d-m-Y', strtotime("last monday", $monbase + 86401));
	$tue = date('d-m-Y', strtotime("next tuesday", $monbase));
	$wed = date('d-m-Y', strtotime("next wednesday", $monbase));
	$thu = date('d-m-Y', strtotime("next thursday", $monbase));
	$fri = date('d-m-Y', strtotime("next friday", $monbase));
	$sat = date('d-m-Y', strtotime("next saturday", $monbase));
	$sun = date('d-m-Y', strtotime("next sunday", $monbase));

	if ($GLOBALS['CAL_USEWEEKEND'] == "Yes") {
		$alldays = array($mon, $tue, $wed, $thu, $fri, $sat, $sun);
	} else {
		$alldays = array($mon, $tue, $wed, $thu, $fri);
	}
	$output = "<h2><button onclick=\"refresh_" . $me . "('&amp;week=prev&amp;caldate=" . $caldate . "');return(false);\">&lt;&lt;</button>&nbsp;<button onclick=\"refresh_" . $me . "('&amp;week=next&amp;caldate=" . $caldate . "');return(false);\">&gt;&gt;</button> &nbsp;&nbsp;";

	$output .= $fieldname . "</h2>\n\n";;

	$divid = $_REQUEST['CheckAndSetDiv'];

		if ($extrafield && $table) {

			$ef = $extrafield;
			$extrafield = "EFID" . $extrafield;

			if ($table == "entity") {
				$title = "" . GetExtraFieldName($efid) . "</h2>";
				if (!$noref) {
					$myname = "";
					//$record_id . ":" . fillout(GetEntityCategory($record_id), 20);
					$acc = CheckEntityAccess($record_id);
					if ($acc == "ok") {
						$acc = CheckExtraFieldAccess($efid, false, $record_id);
					}
				} else {
					$acc = CheckFunctionAccess("EntityAdd");
					if (is_administrator()) $acc = "ok";
					$myname = $lang['add'];
				}
			} elseif ($table == "customer") {

				$title = "" . GetExtraFieldName($efid) . "</h2>";
				if (!$noref) {
					//$myname = $record_id . ":" . fillout(GetCustomerName($record_id), 20);
					$myname = "";
					$acc = CheckCustomerAccess($record_id);
					if ($acc == "ok") {
						$acc = CheckExtraFieldAccess($efid, false, $record_id);
					}
				} else {
					$acc = CheckFunctionAccess("CustomerAdd");
					if (is_administrator()) $acc = "ok";
					$myname = $lang['addcustomer'];
				}

			} elseif (is_numeric($ft)) {
				$ty =  GetFlexTableDefinitions($ft, false, false);
				if ($ty[0]['orientation'] == "one_entity_to_many") {
					$layoutfields = unserialize($ty[0]['table_layout']);
					foreach ($layoutfields AS $laf) {
						//$cellnamef .= GetFlextableFieldValue($record_id, $laf, $ft, false) . " ";
						$cellnamef .= GetFExtraFieldValue($record_id, $laf,false,false,false) . " ";
					}
					//$myname = $record_id;
					$myname = "";
					//. ":" . fillout($cellnamef,20);

				} elseif (!$noref) {
					//$myname = $record_id;
					$myname = "";
						//. ":" . fillout(GetParsedFlexRef($ft, $record_id, ""), 20);
				}
				$title = "" . GetExtraFieldName($efid) . "</h2>";

				$acc = CheckFlexTableAccess($ft);
				if ($acc == "ok") {
					$acc = CheckFlextableRecordAccess($ft, $record_id);
					if ($acc == "ok") {
						$acc = CheckExtraFieldAccess($efid, false, false);
					}
				}
			}	else {
				PrintAD("22769: Table type could not be determined");
				EndHTML();
				exit;
			}

			if ($acc == "readonly") {
	//			print "r/o ---------";
				$readonly = true;
			} elseif ($acc == "nok") {
	//			print "n/a ---------";
				return(false);
			} elseif ($acc == "ok") {
				// prima
			} else {
				// Catch-all
				log_msg("ERROR: Unable to determine access rights for booking calendar " . $ef . "!");
	//			print "n/a?? ---------";
				return(false);
			}









		}

		$diff = $GLOBALS['CAL_MAXHOUR'] - $GLOBALS['CAL_MINHOUR'] + 1;


		$output .= "<table width='100%' border='1'><tr>";
		$output .= "<td class='calheadcell'>" . $lang['date'] . "</td>";

		if ($mon == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcell";
		}
		$output .= "<td colspan='" . $diff . "' class='" . $cellclass . "'>" . $lang['monday'] . "<br>" . TransformDate($mon) . "</td>";
		if ($tue == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcelldark";
		}
		$output .= "<td colspan='" . $diff . "' class='" . $cellclass . "'>" . $lang['tuesday'] . "<br>" . TransformDate($tue) . "</td>";
		if ($wed == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcell";
		}
		$output .= "<td colspan='" . $diff . "' class='" . $cellclass . "'>" . $lang['wednesday'] . "<br>" . TransformDate($wed) . "</td>";
		if ($thu == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcelldark";
		}
		$output .= "<td colspan='" . $diff . "' class='" . $cellclass . "'>" . $lang['thursday'] .  "<br>" . TransformDate($thu) . "</td>";
		if ($fri == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcell";
		}
		$output .= "<td colspan='" . $diff . "' class='" . $cellclass . "'>" . $lang['friday'] .  "<br>" . TransformDate($fri) . "</td>";

		if ($GLOBALS['CAL_USEWEEKEND'] == "Yes") {
			if ($sat == date('d-m-Y')) {
				$cellclass = "calheadcelltoday";
			} else {
				$cellclass = "calheadcelldark";
			}
			$output .= "<td colspan='" . $diff . "' class='" . $cellclass . "'>" . $lang['saturday'] .  "<br>" . TransformDate($sat) . "</td>";
			if ($sun == date('d-m-Y')) {
				$cellclass = "calheadcelltoday";
			} else {
				$cellclass = "calheadcell";
			}
			$output .= "<td colspan='" . $diff . "' class='" . $cellclass . "'>" . $lang['sunday'] .  "<br>" . TransformDate($sun) . "</td>";
		}
		$output .= "</tr>";
		unset ($tdclass);
		$output .= "<tr>";
		$output  .= "<td class='calheadcell'>" . $lang['hour'] . "</td>";
		foreach ($alldays AS $day) {
			if (!$tdclass) {
				$tdclass = "gray";
			} else {
				unset($tdclass);
			}
			for ($i = $GLOBALS['CAL_MINHOUR']; $i < $GLOBALS['CAL_MAXHOUR'] + 1; $i++) {
				if (strlen($i) < 2) {
					$ins = "&nbsp;";
				} else {
					unset($ins);
				}
				$output .= "<td class='" . $tdclass . "'>" . $i . $ins . "</td>";
			}

		}
		$output .= "</tr>";
		foreach ($lof AS $efid) {
			$col = array();

			$ef = $efid;

			$table = GetExtraFieldTableType($efid);
			if (is_numeric($table)) $table = "flextable" . $table;
			$tmp = db_GetFlatArray("SELECT EFID" . $efid . " AS value FROM " . $GLOBALS['TBL_PREFIX'] . $table);

			// value is serialized array:
			//   [0] (2-d)
			//      id			=> eid or recordid or customerid
			//		startdate	=> start date
			//		starttime	=> start time
			//		enddate		=> end date date
			//		endtime		=> end time

			$apps = array();

			foreach ($tmp AS $planning) {
				$plan = unserialize($planning);
				foreach ($plan AS $planrow) {

					$curhour = $planrow['starttime'];
					$nexthour = $planrow['endtime'];

					if (strlen($curhour) == 3) $curhour = "0" . $curhour;
					if (strlen($nexthour) == 3) $nexthour = "0" . $nexthour;

					$curhour = substr($curhour,0,2);
					$nexthour = substr($nexthour,0,2);

					if (strlen($curhour) == 1) $curhour = "0" . $curhour;
					if (strlen($nexthour) == 1) $nexthour = "0" . $nexthour;

					$starttime_epoch = ReturnEpochBasedOnDateAndTime($planrow['startdate'], $curhour . "00") + 1;
					$endtime_epoch   = ReturnEpochBasedOnDateAndTime($planrow['enddate'],   $nexthour . "00");


					if (($starttime_epoch > $monbase) && ($starttime_epoch < $nextmonbase)) {
						$days = array($mon, $tue, $wed, $thu, $fri, $sat, $sun);

						foreach($days AS $day) {
							for ($i=$GLOBALS['CAL_MINHOUR'];$i<$GLOBALS['CAL_MAXHOUR']+1;$i++) {
								$hour = $i;
								$nexthour = $i + 1;
								if (strlen($hour) == 1) $hour = "0" . $hour;

								$hour .= "00";
								if (strlen($nexthour) == 1) $nexthour = "0" . $nexthour;
								$nexthour .= "00";

								$processing_block_start = ReturnEpochBasedOnDateAndTime($day, $hour) - 1;
								$processing_block_end  = ReturnEpochBasedOnDateAndTime($day, $nexthour);

								if (($starttime_epoch > $processing_block_start) && ($starttime_epoch < $processing_block_end)) {
									$apps[$day][$i] = $planrow['id'];
								} else {
									// Out of local window
								}
							}
						}
					}
				}
			}
			//print_r($apps);
			$name = db_GetFlatArray("SELECT name FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($efid) . "'");
			$output .= "<tr><td class='calheadcell' class=\"nwrp\">" . $name[0] . " </td>";


				foreach ($alldays AS $day) {
					//print "PROC: $efid " . $apps[$day] . "::" . $apps[$day][$i] . "<br>";
					for ($i=$GLOBALS['CAL_MINHOUR'];$i<$GLOBALS['CAL_MAXHOUR']+1;$i++) {
					$cell_id = $efid . "APP:" . $day . ":" . $i . "00:" . ($i + 1) . "00";
					$output .= "<td width='10pc;' id='" . $cell_id . "' ";
					unset($acc);
					if ($table == "entity" && IsValidEID($apps[$day][$i])) {
						if (!$noref) {
							$acc = CheckEntityAccess($apps[$day][$i]);
							if ($acc == "ok") {
								$acc = CheckExtraFieldAccess($efid, false, $apps[$day][$i]);
							}
						} else {
							$acc = CheckFunctionAccess("EntityAdd");
							if (is_administrator()) $acc = "ok";
						}

					} elseif ($table == "customer") {
						if ($noref) {
							$acc = CheckCustomerAccess($apps[$day][$i]);
							if ($acc == "ok") {
								$acc = CheckExtraFieldAccess($efid, false, $apps[$day][$i]);
							}
						} else {
							$acc = CheckFunctionAccess("CustomerAdd");
						}
					} elseif (is_numeric($ft)) {
						$acc = CheckFlexTableAccess($ft);
						if ($acc == "ok") {
							$acc = CheckFlextableRecordAccess($ft, $apps[$day][$i]);
							if ($acc == "ok") {
								$acc = CheckExtraFieldAccess($efid, false, false);
								if (is_administrator()) $acc = "ok";
							}
						}
					}
					if ($table == "entity" && $apps[$day][$i]) {
						if ($acc == "ok" || $acc == "readonly") {
							if ($apps[$day][$i] != $record_id) {
								$link = "<a href='edit.php?e=" . $apps[$day][$i] . "'>" . $apps[$day][$i] . "</a>: ";
							} else {
								$link =  $apps[$day][$i] . ": ";
								$cellname = "&nbsp;&nbsp;&nbsp;";
							}
							//$cellname = $link . fillout(GetEntityCategory($apps[$day][$i]),30);
							$omo = "onmouseover=\"Tip('" . htme($apps[$day][$i] . ": " . GetEntityCategory($apps[$day][$i])) . "');\"";
						} else {
							$cellname = "";
							$omo = "";
						}
					} elseif ($table == "customer" && $apps[$day][$i]) {
						if ($acc == "ok" || $acc == "readonly") {
							if ($apps[$day][$i] != $record_id) {
								$link = "<a href='customers.php?editcust=1&amp;custid=" . $apps[$day][$i] . "'>" . $apps[$day][$i] . "</a>: ";
							} else {
								$link =  $apps[$day][$i] . ": ";
								$cellname = "&nbsp;&nbsp;&nbsp;";
							}
							//$cellname = $link . fillout(GetCustomername($apps[$day][$i]),30);
							$omo = "onmouseover=\"Tip('" . htme(GetCustomername($apps[$day][$i])) . "');\"";
						} else {
							$cellname = "";
							$omo = "";
						}
					} elseif (is_numeric($ft) && $apps[$day][$i]) {
						if ($acc == "ok" || $acc == "readonly") {
							$ty =  GetFlexTableDefinitions($ft, false, false);
							if ($apps[$day][$i] != $record_id) {
								if ($ty[0]['add_in_popup'] == "y") {
										$link = "&nbsp;&nbsp;&nbsp;<a onclick='popflextableEditwindow(" . $ft . ",false,\"" . $apps[$day][$i] . "\",\"" . $_REQUEST['AjaxHandler'] . "\"); return false;'>" . $apps[$day][$i] . "</a>&nbsp;&nbsp;";
								} elseif ($ty[0]['add_in_popup'] == "n" && !$pdf) {
										$link = "&nbsp;&nbsp;&nbsp;<a href='flextable.php?FlexTable=" . $ft . "&amp;nonavbar=" . $_REQUEST['nonavbar'] . "&amp;AddInPopup=" . $_REQUEST['nonavbar'] . "&amp;EditRecord=" . $apps[$day][$i] . "&amp;ParentAjaxHandler=" . $_REQUEST['ParentAjaxHandler'] . "'>" . $apps[$day][$i] . "</a>&nbsp;&nbsp;";
								}
							} else {
								$link = $apps[$day][$i] . ": ";
								$cellname = "&nbsp;&nbsp;&nbsp;";
							}
							if ($ty[0]['orientation'] == "one_entity_to_many") {
								$layoutfields = unserialize($ty[0]['table_layout']);
								$cellnamef = $apps[$day][$i] . ": ";
								foreach ($layoutfields AS $laf) {
									//$cellnamef = GetFlextableFieldValue($apps[$day][$i], $laf, $ft, false) . " ";
									$cellnamef = GetExtraFieldValue($apps[$day][$i], $laf, false, false, false) . " ";
								}
								//$cellname = $link . fillout($cellnamef,30);
								$omo = "onmouseover\"Tip('" . htme($cellnamef) . "');\"";
							} else {
								//$cellname = $link . fillout(GetParsedFlexRef($ft, $apps[$day][$i], ""),30);
								$omo = "onmouseover=\"Tip('" . htme($apps[$day][$i] . ": " . GetParsedFlexRef($ft, $apps[$day][$i], "")) . "');\"";
							}
						} else {
							$cellname = "";
							$omo = "";
						}
					} else {
						unset($cellname);
					}
					if ($apps[$day][$i] == $record_id) {
						$output .= "class='calselected'";
						if (!$readonly && !$noref) {
							$output .= "onclick=\"UnCheckCell(this.id,this,'" . $divid . "', '" . $ef . "'," . $record_id . ",'" . htme($_REQUEST['table'])  . "','" . htme($myname) . "','" . "" . "');\"";
						}
						$output .= ">";
					} elseif (isset($apps[$day][$i])) {
						if ($acc == "ok" || $acc == "readonly") {
							if (!isset($col[$apps[$day][$i]])) {
								$col[$apps[$day][$i]] = $colors[$c++];
							}
							$bgc = "style='background-color: " . $col[$apps[$day][$i]] . ";'";
							$output .= "class='caloccupied' " . $omo . " " . $bgc . ">";
						} else {
							// No access to record, but occupied
							$output .= "class='caloccupiednoaccess' " . $omo . " " . $bgc . ">";
						}
					} else {

						if (!$readonly && !$noref) {
								$output .= "class='calselect'";
								$output .= "onclick='CheckCell(this.id,this,\"" . $divid . "\", \"" . $ef . "\"," . $record_id . ",\"" . htme($_REQUEST['table'])  . "\",\"" . htme($myname) . "\",\"" . "" . "\");'";

						} elseif ($noref && $table == "entity") {
								$cellname = "<a href='#' onclick=\"PopEditEntityWindow('_new_&amp;CalendarAdd=" . $cell_id . "&amp;CalendarField=" . $efid . "&amp;ParentAjaxHandler=" . $_REQUEST['AjaxHandler'] . "');\" class='addplusje' " . PrintToolTipCode($lang['add']) . ">+</a>&nbsp;";
						} elseif ($noref && $table == "customer") {
								$cellname = "<a href='#' onclick=\"PopAddCustomerWindow('&amp;CalendarAdd=" . $cell_id . "&amp;CalendarField=" . $efid . "&amp;ParentAjaxHandler=" . $_REQUEST['AjaxHandler'] . "');\" class='addplusje' " . PrintToolTipCode($lang['addcust']) . ">+</a>&nbsp;";
						} elseif ($noref && is_numeric($ft)) {
								$ty =  GetFlexTableDefinitions($ft, false, false);
								if ($ty[0]['add_in_popup'] == "y") {
										$cellname = "&nbsp;&nbsp;&nbsp;<a href='#' onclick='popflextableAddwindow(" . $ft . ",\"&amp;CalendarAdd=" . $cell_id . "&amp;CalendarField=" . $efid . "\",\"" . $_REQUEST['AjaxHandler'] . "\"); return false;' class='addplusje' " . PrintToolTipCode(htme($ty[0]['addlinktext'])) . ">+</a>&nbsp;&nbsp;";
								} elseif ($ty[0]['add_in_popup'] == "n") {
										$cellname = "&nbsp;&nbsp;&nbsp;<a href='flextable.php?FlexTable=" . $ft . "&amp;nonavbar=" . $_REQUEST['nonavbar'] . "&amp;AddInPopup=" . $_REQUEST['nonavbar'] . "&amp;EditRecord=" . $apps[$day][$i] . "&amp;ParentAjaxHandler=" . $_REQUEST['ParentAjaxHandler'] . "&amp;CalendarAdd=" . $cell_id . "&amp;CalendarField=" . $efid . "' " . PrintToolTipCode(htme($ty[0]['addlinktext'])) . ">+</a>&nbsp;&nbsp;";
								}

						} else {
								$output .= "class='calselect-ro'";
						}
						$output .= ">";
					}

					$output .= $cellname;
					$output .= "</td>";
					unset($cellname);

				}

			}
		$output .= "</tr>";
		}


	return($output);
}
function ReturnPlanningPart() {
	global $lang;

	$record_id	= $_REQUEST['record_id'];
	$table		= $_REQUEST['table'];
	$ft			= str_replace("flextable", "", $table);
	$extrafield = $_REQUEST['extrafield'];
	$efid		= str_replace("EFID", "", $extrafield);



	if($record_id == "_new_") {
		return("<!-- The planning calendar cannot be shown for NEW records -->");
	} elseif ($record_id == "noref") {
		$noref = true;
	}

	$colors = array("#E6E6FA", "#FFF0F5", "#7CFC00", "#FFFACD", "#ADD8E6", "#F08080", "#E0FFFF", "#FAFAD2", "#D3D3D3", "#90EE90", "#FFB6C1", "#FFA07A", "#20B2AA", "#87CEFA", "#778899", "#B0C4DE", "#FFFFE0", "#F0E68C", "#E6E6FA", "#FFF0F5", "#7CFC00", "#FFFACD", "#ADD8E6", "#F08080", "#E0FFFF", "#FAFAD2", "#D3D3D3", "#90EE90", "#FFB6C1", "#FFA07A", "#20B2AA", "#87CEFA", "#778899", "#B0C4DE", "#FFFFE0", "#F0E68C", "#E6E6FA", "#FFF0F5", "#7CFC00", "#FFFACD", "#ADD8E6", "#F08080", "#E0FFFF", "#FAFAD2", "#D3D3D3", "#90EE90", "#FFB6C1", "#FFA07A", "#20B2AA", "#87CEFA", "#778899", "#B0C4DE", "#FFFFE0");

	$c = 0;

	$me = $_REQUEST['AjaxHandler'];

	if (!$_REQUEST['caldate']) {
		$caldate = date('U');
	} else {
		$caldate = $_REQUEST['caldate'];
	}

	if ($_REQUEST['week'] == "prev") {
			$caldate -= 604800;
	} elseif ($_REQUEST['week'] == "next") {
			$caldate += 604800;
	}
	$calenddate = $caldate + 604800; // 1 week
	$monbase = strtotime("last monday", $caldate + 86401);
	$nextmonbase = strtotime("next monday", $caldate);

	$mon = date('d-m-Y', strtotime("last monday", $monbase + 86401));
	$tue = date('d-m-Y', strtotime("next tuesday", $monbase));
	$wed = date('d-m-Y', strtotime("next wednesday", $monbase));
	$thu = date('d-m-Y', strtotime("next thursday", $monbase));
	$fri = date('d-m-Y', strtotime("next friday", $monbase));
	$sat = date('d-m-Y', strtotime("next saturday", $monbase));
	$sun = date('d-m-Y', strtotime("next sunday", $monbase));

	if ($GLOBALS['CAL_USEWEEKEND'] == "Yes") {
		$alldays = array($mon, $tue, $wed, $thu, $fri, $sat, $sun);
	} else {
		$alldays = array($mon, $tue, $wed, $thu, $fri);
	}

	$divid = $_REQUEST['CheckAndSetDiv'];

	if ($extrafield && $table) {

		$ef = str_replace("EFID", "", $extrafield);

		if ($table == "entity") {
			$title = "" . GetExtraFieldName($efid) . "</h2>";
			if (!$noref) {
				$myname = $record_id . ": " . fillout(GetEntityCategory($record_id), 20);
				$acc = CheckEntityAccess($record_id);
				if ($acc == "ok") {
					$acc = CheckExtraFieldAccess($efid, false, $record_id);
				}
			} else {
				$acc = CheckFunctionAccess("EntityAdd");
				if (is_administrator()) $acc = "ok";
				$myname = $lang['add'];
			}
		} elseif ($table == "customer") {

			$title = "" . GetExtraFieldName($efid) . "</h2>";
			if (!$noref) {
				$myname = $record_id . ":" . fillout(GetCustomerName($record_id), 20);
				$acc = CheckCustomerAccess($record_id);
				if ($acc == "ok") {
					$acc = CheckExtraFieldAccess($efid, false, $record_id);
				}
			} else {
				$acc = CheckFunctionAccess("CustomerAdd");
				if (is_administrator()) $acc = "ok";
				$myname = $lang['addcustomer'];
			}

		} elseif (is_numeric($ft)) {
			$ty =  GetFlexTableDefinitions($ft, false, false);
			if ($ty[0]['orientation'] == "one_entity_to_many") {
				$layoutfields = unserialize($ty[0]['table_layout']);
				foreach ($layoutfields AS $laf) {
					//$cellnamef .= GetFlextableFieldValue($record_id, $laf, $ft, false) . " ";
					$cellnamef .= GetExtraFieldValue($record_id, $laf, false, false, false) . " ";

				}
				$myname = $record_id . ":" . fillout($cellnamef,20);

			} elseif (!$noref) {
				$myname = $record_id . ":" . fillout(GetParsedFlexRef($ft, $record_id, ""), 20);
			}
			$title = "" . GetExtraFieldName($efid) . "</h2>";

			$acc = CheckFlexTableAccess($ft);
			if ($acc == "ok") {
				$acc = CheckFlextableRecordAccess($ft, $record_id);
				if ($acc == "ok") {
					$acc = CheckExtraFieldAccess($efid, false, false);
				}
			}
		}	else {
			PrintAD("22769: Table type could not be determined");
			EndHTML();
			exit;
		}

		if ($acc == "readonly") {
//			print "r/o ---------";
			$readonly = true;
		} elseif ($acc == "nok") {
//			print "n/a ---------";
			return(false);
		} elseif ($acc == "ok") {
			// prima
		} else {
			// Catch-all
			log_msg("ERROR: Unable to determine access rights for booking calendar " . $ef . "!");
//			print "n/a?? ---------";
			return(false);
		}


//		$output .= "<h2><img src='images/larrow.gif' alt='left-arrow' style='cursor: pointer;' onclick=\"refresh_" . $me . "('&amp;week=prev&amp;caldate=" . $caldate . "');\" alt=''>&nbsp;<img src='images/rarrow.gif' alt='right-arrow' style='cursor: pointer;' onclick=\"refresh_" . $me . "('&amp;week=next&amp;caldate=" . $caldate . "');\" alt=''> &nbsp;&nbsp;";

		$output .= "<h2><button onclick=\"refresh_" . $me . "('&amp;week=prev&amp;caldate=" . $caldate . "');return(false);\" alt=''>&lt;&lt;</button>&nbsp;<button onclick=\"refresh_" . $me . "('&amp;week=next&amp;caldate=" . $caldate . "');return(false);\">&gt;&gt;</button> &nbsp;&nbsp;";

		$output .= $title . "\n\n";;

		$table = GetExtraFieldTableType($efid);
		if (is_numeric($table)) $table = "flextable" . $table;
		$tmp = db_GetFlatArray("SELECT EFID" . $efid . " AS value FROM " . $GLOBALS['TBL_PREFIX'] . $table);

//		$tmp = db_GetFlatArray("SELECT value FROM " . $GLOBALS['TBL_PREFIX'] . "customad1dons WHERE name='" . mres($ef) . "'");

		// value is serialized array:
		//   [0] (2-d)
		//      id			=> eid or recordid or customerid
		//		startdate	=> start date
		//		starttime	=> start time
		//		enddate		=> end date date
		//		endtime		=> end time

		$apps = array();

		foreach ($tmp AS $planning) {
			$plan = unserialize($planning);
			foreach ($plan AS $planrow) {

				$curhour = $planrow['starttime'];
				$nexthour = $planrow['endtime'];

				if (strlen($curhour) == 3) $curhour = "0" . $curhour;
				if (strlen($nexthour) == 3) $nexthour = "0" . $nexthour;

				$curhour = substr($curhour,0,2);
				$nexthour = substr($nexthour,0,2);

				if (strlen($curhour) == 1) $curhour = "0" . $curhour;
				if (strlen($nexthour) == 1) $nexthour = "0" . $nexthour;

				$starttime_epoch = ReturnEpochBasedOnDateAndTime($planrow['startdate'], $curhour . "00") + 1;
				$endtime_epoch   = ReturnEpochBasedOnDateAndTime($planrow['enddate'],   $nexthour . "00");


				if (($starttime_epoch > $monbase) && ($starttime_epoch < $nextmonbase)) {
					// Appointment is in window
				//$output .= "Appointment already at: ". $plan['startdate'] . " " . $plan['starttime'] . " epoch " . $starttime_epoch;
				//$output .= " start " . date('Y-m-d H:i', $starttime_epoch) . " end " . date('Y-m-d H:i', $endtime_epoch). "<br>";

					$days = array($mon, $tue, $wed, $thu, $fri, $sat, $sun);

					foreach($days AS $day) {
						for ($i=$GLOBALS['CAL_MINHOUR'];$i<$GLOBALS['CAL_MAXHOUR']+1;$i++) {
							$hour = $i;
							$nexthour = $i + 1;
							if (strlen($hour) == 1) $hour = "0" . $hour;

							$hour .= "00";
							if (strlen($nexthour) == 1) $nexthour = "0" . $nexthour;
							$nexthour .= "00";

							$processing_block_start = ReturnEpochBasedOnDateAndTime($day, $hour) - 1;
							$processing_block_end  = ReturnEpochBasedOnDateAndTime($day, $nexthour);

							if (($starttime_epoch > $processing_block_start) && ($starttime_epoch < $processing_block_end)) {
								$apps[$day][$i] = $planrow['id'];
							} else {
								// Out of local window
							}
						}
					}
				}
			}
		}


		$output .= "<table class='crm' width='100%'>";
		$output .= "<tr>";
		$output .= "<td class='calheadcell'>" . $lang['hour'] . "</td>";

		if ($mon == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcell";
		}
		$output .= "<td class='" . $cellclass . "'>" . $lang['monday'] . "<br>" . TransformDate($mon) . "</td>";
		if ($tue == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcell";
		}
		$output .= "<td class='" . $cellclass . "'>" . $lang['tuesday'] . "<br>" . TransformDate($tue) . "</td>";
		if ($wed == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcell";
		}
		$output .= "<td class='" . $cellclass . "'>" . $lang['wednesday'] . "<br>" . TransformDate($wed) . "</td>";
		if ($thu == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcell";
		}
		$output .= "<td class='" . $cellclass . "'>" . $lang['thursday'] .  "<br>" . TransformDate($thu) . "</td>";
		if ($fri == date('d-m-Y')) {
			$cellclass = "calheadcelltoday";
		} else {
			$cellclass = "calheadcell";
		}
		$output .= "<td class='" . $cellclass . "'>" . $lang['friday'] .  "<br>" . TransformDate($fri) . "</td>";

		if ($GLOBALS['CAL_USEWEEKEND'] == "Yes") {
			if ($sat == date('d-m-Y')) {
				$cellclass = "calheadcelltoday";
			} else {
				$cellclass = "calheadcell";
			}
			$output .= "<td class='" . $cellclass . "'>" . $lang['saturday'] .  "<br>" . TransformDate($sat) . "</td>";
			if ($sun == date('d-m-Y')) {
				$cellclass = "calheadcelltoday";
			} else {
				$cellclass = "calheadcell";
			}
			$output .= "<td class='" . $cellclass . "'>" . $lang['sunday'] .  "<br>" . TransformDate($sun) . "</td>";
		}
		$output .= "</tr>";
		$col = array();
		for ($i=$GLOBALS['CAL_MINHOUR'];$i<$GLOBALS['CAL_MAXHOUR']+1;$i++) {

			// Time frame
			$output .= "<tr><td class='calheadcell'>" . $i . "</td>";

			//print "PROC: " . $apps[$day] . "::" . $apps[$day][$i] . "<br>";

			foreach ($alldays AS $day) {
				$cell_id = "APP:" . $day . ":" . $i . "00:" . ($i + 1) . "00";
				$output .= "<td id='" . $cell_id . "' ";
				unset($acc);
				if ($table == "entity") {
					if (!$noref) {
						$acc = CheckEntityAccess($apps[$day][$i]);
						if ($acc == "ok") {
							$acc = CheckExtraFieldAccess($efid, false, $apps[$day][$i]);
						}
					} else {
						$acc = CheckFunctionAccess("EntityAdd");
						if (is_administrator()) $acc = "ok";
					}

				} elseif ($table == "customer") {
					if ($noref) {
						$acc = CheckCustomerAccess($apps[$day][$i]);
						if ($acc == "ok") {
							$acc = CheckExtraFieldAccess($efid, false, $apps[$day][$i]);
						}
					} else {
						$acc = CheckFunctionAccess("CustomerAdd");
						if (is_administrator()) $acc = "ok";
					}
				} elseif (is_numeric($ft)) {
					$acc = CheckFlexTableAccess($ft);
					if ($acc == "ok") {
						$acc = CheckFlextableRecordAccess($ft, $apps[$day][$i]);
						if ($acc == "ok") {
							$acc = CheckExtraFieldAccess($efid, false, false);
						}
					}
				}
				if ($table == "entity" && $apps[$day][$i]) {
					if ($acc == "ok" || $acc == "readonly") {
						if ($apps[$day][$i] != $record_id) {
							$link = "<a href='edit.php?e=" . $apps[$day][$i] . "'>" . $apps[$day][$i] . "</a>: ";
						} else {
							$link =  "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . $apps[$day][$i] . ": ";
						}
						$cellname = $link . fillout(GetEntityCategory($apps[$day][$i]),30);
						$omo = "onmouseover='Tip(\"" . htme($apps[$day][$i] . ": " . GetEntityCategory($apps[$day][$i])) . "\");'";
					} else {
						$cellname = "";
						$omo = "";
					}
				} elseif ($table == "customer" && $apps[$day][$i]) {
					if ($acc == "ok" || $acc == "readonly") {
						if ($apps[$day][$i] != $record_id) {
							$link = "<a href='customers.php?editcust=1&amp;custid=" . $apps[$day][$i] . "'>" . $apps[$day][$i] . "</a>: ";
						} else {
							$link =  "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . $apps[$day][$i] . ": ";
						}
						$cellname = $link . fillout(GetCustomername($apps[$day][$i]),30);
						$omo = "onmouseover='Tip(\"" . htme(GetCustomername($apps[$day][$i])) . "\");'";
					} else {
						$cellname = "";
						$omo = "";
					}
				} elseif (is_numeric($ft) && $apps[$day][$i]) {
					if ($acc == "ok" || $acc == "readonly") {
						$ty =  GetFlexTableDefinitions($ft, false, false);
						if ($apps[$day][$i] != $record_id) {
							if ($ty[0]['add_in_popup'] == "y") {
									$link = "&nbsp;&nbsp;&nbsp;<a onclick='popflextableEditwindow(" . $ft . ",false,\"" . $apps[$day][$i] . "\",\"" . $_REQUEST['AjaxHandler'] . "\"); return false;'>" . $apps[$day][$i] . "</a>&nbsp;&nbsp;";
							} elseif ($ty[0]['add_in_popup'] == "n" && !$pdf) {
									$link = "&nbsp;&nbsp;&nbsp;<a href='flextable.php?FlexTable=" . $ft . "&amp;nonavbar=" . $_REQUEST['nonavbar'] . "&amp;AddInPopup=" . $_REQUEST['nonavbar'] . "&amp;EditRecord=" . $apps[$day][$i] . "&amp;ParentAjaxHandler=" . $_REQUEST['ParentAjaxHandler'] . "'>" . $apps[$day][$i] . "</a>&nbsp;&nbsp;";
							}
						} else {
							$link = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" . $apps[$day][$i] . ": ";
						}
						if ($ty[0]['orientation'] == "one_entity_to_many") {
							$layoutfields = unserialize($ty[0]['table_layout']);
							$cellnamef = $apps[$day][$i] . ": ";
							foreach ($layoutfields AS $laf) {
								//$cellnamef = GetFlextableFieldValue($apps[$day][$i], $laf, $ft, false) . " ";
								$cellnamef = GetExtraFieldValue($apps[$day][$i], $laf, false, false, false) . " ";

							}
							$cellname = $link . fillout($cellnamef,30);
							$omo = "onmouseover='Tip(\"" . htme($cellnamef) . "\");'";
						} else {
							$cellname = $link . fillout(GetParsedFlexRef($ft, $apps[$day][$i], ""),30);
							$omo = "onmouseover='Tip(\"" . htme($apps[$day][$i] . ": " . GetParsedFlexRef($ft, $apps[$day][$i], "")) . "\");'";
						}
					} else {
						$cellname = "";
						$omo = "";
					}
				} else {
					unset($cellname);
				}
				if ($apps[$day][$i] == $record_id) {
					$output .= "class='calselected'";
					if (!$readonly && !$noref) {
						$output .= "onclick=\"UnCheckCell(this.id,this,'" . $divid . "', '" . $ef . "'," . $record_id . ",'" . htme($_REQUEST['table'])  . "','" . htme($myname) . "','" . "" . "');\"";
					}
					$output .= ">";
				} elseif (isset($apps[$day][$i])) {
					if ($acc == "ok" || $acc == "readonly") {
						if (!isset($col[$apps[$day][$i]])) {
							$col[$apps[$day][$i]] = $colors[$c++];
						}
						$bgc = "style='background-color: " . $col[$apps[$day][$i]] . ";'";
						$output .= "class='caloccupied' " . $omo . " " . $bgc . ">";
					} else {
						// No access to record, but occupied
						$output .= "class='caloccupiednoaccess' " . $omo . " " . $bgc . ">";
					}
				} else {

					if (!$readonly && !$noref) {
							$output .= "class='calselect'";
							$output .= " onclick='CheckCell(this.id,this,\"" . $divid . "\", \"" . $ef . "\"," . $record_id . ",\"" . htme($_REQUEST['table'])  . "\",\"" . htme($myname) . "\",\"" . ""  . "\");this.style.backgroundColor=\"#FFFFFF\";'";
					} elseif ($noref && $table == "entity") {
							$cellname = "<a href='#' onclick=\"PopEditEntityWindow('_new_&amp;CalendarAdd=" . $cell_id . "&amp;CalendarField=" . $extrafield . "&amp;ParentAjaxHandler=" . $_REQUEST['AjaxHandler'] . "');\" class='addplusje' " . PrintToolTipCode($lang['add']) . ">+</a>&nbsp;";
					} elseif ($noref && $table == "customer") {
							$cellname = "<a href='#' onclick=\"PopAddCustomerWindow('&amp;CalendarAdd=" . $cell_id . "&amp;CalendarField=" . $extrafield . "&amp;ParentAjaxHandler=" . $_REQUEST['AjaxHandler'] . "');\" class='addplusje' " . PrintToolTipCode($lang['addcust']) . ">+</a>&nbsp;";
					} elseif ($noref && is_numeric($ft)) {
							$ty =  GetFlexTableDefinitions($ft, false, false);
							if ($ty[0]['add_in_popup'] == "y") {
									$cellname = "&nbsp;&nbsp;&nbsp;<a href='#' onclick='popflextableAddwindow(" . $ft . ",\"&amp;CalendarAdd=" . $cell_id . "&amp;CalendarField=" . $extrafield . "\",\"" . $_REQUEST['AjaxHandler'] . "\"); return false;' class='addplusje' " . PrintToolTipCode(htme($ty[0]['addlinktext'])) . ">+</a>&nbsp;&nbsp;";
							} elseif ($ty[0]['add_in_popup'] == "n") {
									$cellname = "&nbsp;&nbsp;&nbsp;<a href='flextable.php?FlexTable=" . $ft . "&amp;nonavbar=" . $_REQUEST['nonavbar'] . "&amp;AddInPopup=" . $_REQUEST['nonavbar'] . "&amp;EditRecord=" . $apps[$day][$i] . "&amp;ParentAjaxHandler=" . $_REQUEST['ParentAjaxHandler'] . "&amp;CalendarAdd=" . $cell_id . "&amp;CalendarField=" . $extrafield . "' " . PrintToolTipCode(htme($ty[0]['addlinktext'])) . ">+</a>&nbsp;&nbsp;";
							}

					} else {
							$output .= "class='calselect-ro'";
					}
					$output .= ">";
				}

				$output .= $cellname;
				$output .= "</td>";
				unset($cellname);

			}
			$output .= "</tr>";

		}
		$output .= "</table>";



	}

	return($output);
}
function ReturnAddRestorePointElement() {
	return(AjaxBox("CreateRestorePoint", false, "&bla=1", false, false));
}
function GetImageFileTypeIcon($fileid) {

	$filename = strtolower(GetFileName($fileid));
	$filetype = GetFileType($fileid);

	$tmp_fn = explode(".", $filename);
	$ext = "." . strtolower($tmp_fn[(count($tmp_fn) -1)]);
	if ($filetype == "image/jpg" || $filetype == "image/jpeg" || $filetype == "image/gif") {
		return("<img src='csv.php?minitn=" . $fileid . "' alt=''>");
	} elseif ($filetype == "{{{folder}}}") {
			return("<img src='images/folder.gif' alt=''>");
	} else {
		switch ($ext) {
			case ".pdf":
				return("<img src='images/pdf.gif' alt=''>");
			break;
			case ".doc":
				return("<img src='images/fl_word.gif' alt=''>");
			break;
			case ".docx":
				return("<img src='images/fl_word.gif' alt=''>");
			break;
			case ".xls":
				return("<img src='images/fl_excel.gif' alt=''>");
			break;
			case ".xlsx":
				return("<img src='images/fl_excel.gif' alt=''>");
			break;
			case ".xlsm":
				return("<img src='images/fl_excel.gif' alt=''>");
			break;
			case ".ppt":
				return("<img src='images/fl_powerpoint.gif' alt=''>");
			break;
			case ".pptx":
				return("<img src='images/fl_powerpoint.gif' alt=''>");
			break;
			case ".vnd":
				return("<img src='images/fl_visio.gif' alt=''>");
			break;
			case ".vsd":
				return("<img src='images/fl_visio.gif' alt=''>");
			break;
			case ".jpg":
				return("<img src='images/fl_jpg-gif.jpg' alt=''>");
			break;
			case ".jpeg":
				return("<img src='images/fl_jpg-gif.jpg' alt=''>");
			break;
			case ".gif":
				return("<img src='images/fl_jpg-gif.jpg' alt=''>");
			break;
			case ".png":
				return("<img src='images/fl_jpg-gif.jpg' alt=''>");
			break;
			case ".tif":
				return("<img src='images/fl_jpg-gif.jpg' alt=''>");
			break;
			case ".txt":
				return("<img src='images/journal.gif' alt=''>");
			break;
			case ".zip":
				return("<img src='images/fl_zip.gif' alt=''>");
			break;
			case ".tar.gz":
				return("<img src='images/fl_zip.gif' alt=''>");
			break;
			case ".tgz":
				return("<img src='images/fl_zip.gif' alt=''>");
			break;
			case ".arj":
				return("<img src='images/fl_zip.gif' alt=''>");
			break;
			case ".7z":
				return("<img src='images/fl_zip.gif' alt=''>");
			break;
			case ".tar":
				return("<img src='images/fl_zip.gif' alt=''>");
			break;
			case ".ods":
				return("<img src='images/fl_oo_calc.gif' alt=''>");
			break;
			case ".odt":
				return("<img src='images/fl_oo_writer.gif' alt=''>");
			break;
			case ".odf":
				return("<img src='images/fl_oo_writer.gif' alt=''>");
			break;
			case ".odp":
				return("<img src='images/fl_oo_impress.gif' alt=''>");
			break;
			default:
				return("<img src='images/fl_unknown.gif' alt=''>");
			break;
		}
	}
}
function CalculateNumberOfWorkingDaysBetweenDates($StartTime, $EndTime) {
	while ( $StartTime <= $EndTime ) {
		if (date('D',$StartTime) == "Sat" || date('D',$StartTime) == "Sun") {
			$IgnorDays++;
		} else {
			$WorkingDays++;
		}
		$StartTime=$StartTime+86400;
	}
	return($WorkingDays);
}
function EvaluateTemplatePHP($code, $eid=false, $flextable=false, $flextablerecord=false) {

	if (!$GLOBALS['NOINLINEPHPEVAL']) {

		qlog(INFO, "Evaluating this template ...");
		ob_start();
		eval("?>" . $code . "<?");
		$ret = ob_get_contents();
		ob_end_clean();


		if (trim($ret) == "") {
			// Something went horribly wrong
			return($code);
		} else {
			return($ret);
		}
	} else {
		qlog(INFO, "*NOT* Evaluating this template ...");
		return($code);
	}

}
function DeleteDoubleEFValues($prfx) {


}

function GetArrayKeyName(array $a, $pos) {
    $temp = array_slice($a, $pos, 1, true);
    return key($temp);
}
function br2nl($text) {
	return (preg_replace("/\<br( )?(\/)?\>/i", "\n", $text));
}
function RemoveTableRowFromTemplateByTag($template, $tag_to_remove) {

	$t1 = explode($tag_to_remove, $template);
	$cnt = count($t1);
	$result = "";

	for ($i=0;$i<$cnt;$i++) {
		if ($i < $cnt-1) {
			$t2 = preg_split("/\<tr/i", $t1[$i]);
			$t1[$i] = "";
			for ($y=0;$y<(count($t2)-1);$y++) {
				if ($y>0) {
					$t1[$i] .= "<tr";
				}
				$t1[$i] .= $t2[$y];
			}
		}
		if ($i > 0) {
			$t2 = preg_split("/\<\/tr>/i", $t1[$i]);
			$t1[$i] = "";
			for ($y=1;$y<count($t2);$y++) {
				if ($y>1) {
					$t1[$i] .= "</tr>";
				}
				$t1[$i] .= $t2[$y];
			}
		}
		$result .= $t1[$i];
	}
	return($result);
}


// Journalling function (Entity ID, Message, Type)
function journal($eid, $msg, $type="entity") {

	if (trim($msg) == "") {
		$msg = GetBackTrace();
	}

	$sql = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "journal (eid,user,message,type) VALUES('" . mres($eid) . "','" . mres($GLOBALS['USERID']) . "','" . mres($msg) . "','" . mres($type) ."')";
	mcq($sql,$db);

	return(true);
}

function CreateDateFieldsList() {
	global $lang;
	$efl = array();
	$efl['startdate'] = $lang['startdate'];
	$efl['duedate'] = $lang['duedate'];

	foreach (GetExtraFields() AS $ef) {
		if ($ef['fieldtype'] == "date") {
			$efl[$ef['id']] = $ef['name'];
		}
	}

	//Build customer field list
	foreach (GetExtraCustomerFields() AS $ef) {
		if ($ef['fieldtype'] == "date") {
			$efl[$ef['id']] = $ef['name'];
		}
	}

	$efl['openepoch'] = $lang['creationdate'];
	$efl['closeepoch'] = $lang['closedate'];

	// Build flextable field list
	//$fts = GetFlexTableDefinitions(false, "many-to-one", false);
	//foreach ($fts AS $ft) {
	//	foreach (GetExtraFlextableFields($ft['recordid']) AS $ef) {
	//		if ($ef['fieldtype'] == "date") {
	//			$efl[$ef['id']] = $ef['name'];
	//		}
	//	}
	//}
	return($efl);
}
function GetRelativeDateArray() {
	global $lang;

	$relative_array = array();

	for ($i=1;$i<6;$i++) {
		$relative_array['daysfromnow_' . $i] = $i . " " . $lang['daysfromnow'];
	}
	for ($i=1;$i<10;$i++) {
		$relative_array['weeksfromnow_' . $i] = $i . " " . $lang['weeksfromnow'];
	}
	for ($i=1;$i<6;$i++) {
		$relative_array['daysbeforenow_' . $i] = $i . " " . $lang['daysbeforenow'];
	}
	for ($i=1;$i<10;$i++) {
		$relative_array['weeksbeforenow_' . $i] = $i . " " . $lang['weeksbeforenow'];
	}

	return($relative_array);
}


function year_weeknumber_to_mondaydate($year, $weeknumber) {
	$first_day_this_year = $year . "-01-01";

	$row = db_GetRow("SELECT DAYOFWEEK('" . $first_day_this_year . "')");
	$weekday_of_first_day = $row[0];

/*
nummer	dag			aantal dagen toevoegen voor eerste maandag van dit jaar
1		zondag		1
2		maandag		0
3		dinsdag		6
4		woensdag	5
5		donderdag	4
6		vrijdag		3
7		zaterdag	2
*/
	$days_to_first_monday = 0;
	if ($weekday_of_first_day == 1) //zondag
	{
		$days_to_first_monday = 1;
	}
	else if ($weekday_of_first_day > 2) //groter dan maandag
	{
		$days_to_first_monday = 9 - $weekday_of_first_day;
	}
	$mondaydate_of_week1 = date("Y-m-d", strtotime($first_day_this_year . " +" . $days_to_first_monday . " day"));

	$mondaydate_of_requested_week = date("Y-m-d", strtotime($mondaydate_of_week1 . " +" . ($weeknumber - 1) * 7 . " day"));

	return $mondaydate_of_requested_week;
}


function CopyFileToDisk($fileid) {
	$fc = GetFileContent($fileid);
	$fn = tempnam($GLOBALS['TMP_FILE_PATH'],"INTLV_FILEINDEX_");
	$fp = fopen($fn, "w");
	fputs($fp, $fc);
	fclose($fp);
	return($fn);
}
function CopyTemplateToDisk($fileid) {
	$fc = GetTemplate($fileid);
	$fn = tempnam($GLOBALS['TMP_FILE_PATH'],"INTLV_FILEINDEX_");
	$fp = fopen($fn, "w");
	fputs($fp, $fc);
	fclose($fp);
	return($fn);
}
function CleanupExtractedAscii($in) {
	if ($in == "{{locked/error}}") {
		return($in);
	}
	// some information comes in html decoded
	$out = html_entity_decode(strtolower($in));

	// strip html & xml tags
	$out = strip_tags($out);

	// strip all leestekens (replace with a space to be sure!)
	$out = str_replace(",", " ", $out);
	$out = str_replace(":", " ", $out);
	$out = str_replace(";", " ", $out);
	$out = str_replace(".", " ", $out);
	$out = str_replace("!", " ", $out);
	$out = str_replace("?", " ", $out);
	$out = str_replace(")", " ", $out);
	$out = str_replace("(", " ", $out);
	$out = str_replace("'", " ", $out);
	$out = str_replace("\"", " ", $out);
	$out = str_replace("`", " ", $out);
	$out = str_replace("/", " ", $out);
	$out = str_replace("]", " ", $out);
	$out = str_replace("[", " ", $out);
	$out = str_replace("{", " ", $out);
	$out = str_replace("}", " ", $out);

	// strip all non-ascii chars
	$out = preg_replace('/[^(\x20-\x7F)]*/','', $out);

	$tmp = explode(" ", $out);
	$cnt = sizeof($tmp);
	$result = array();
	for ($i=0;$i<$cnt;$i++) {
		if (strlen($tmp[$i]) < 25 && $tmp[$i] != "" && strlen($tmp[$i]) > 4 && !in_array($tmp[$i], $result)) {
			$result[] = $tmp[$i];
		}
		// save some memory
		$tmp[$i] = "";
	}
	$out = implode(" ", $result);
	return($out);
}
function SetExtractedAsciiData($fileid, $data) {
	
	$data = CleanupExtractedAscii($data);
	if (is_numeric($fileid) && $fileid != 0 && trim($data) != "") {
		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "binfiles SET extractedascii='" . mres($data) . "',timestamp_last_change=timestamp_last_change WHERE fileid='" . mres($fileid) . "'", $db);
	}
}
function LockFileForAsciiExtraction($fileid) {
	if (is_numeric($fileid) && $fileid != 0) {
		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "binfiles SET extractedascii='{{locked/error}}',timestamp_last_change=timestamp_last_change WHERE fileid='" . mres($fileid) . "'", $db);
	}
}
function GetFilenamesFromZipArchive($file_id) {
	
	$in_file = CopyFileToDisk($file_id);	
	$zip = zip_open($in_file);

	$name = array();

	if (is_resource($zip)) {
		while ($zip_entry = zip_read($zip)) {
			$names[] = zip_entry_name($zip_entry);
			// close entry
			zip_entry_close($entry);
		}
	}
	// close zip
	zip_close($zip);
	
	unlink($in_file);
	return($names);
}
function ProcessZipArchive($diskfile) {
		$ascii = "";
		$zip = zip_open($diskfile);
		while ($zip_entry = zip_read($zip)) {
			$entry_name = zip_entry_name($zip_entry);
			$tmp_fn = explode(".", $entry_name);
			$entry_ext = "." . strtolower($tmp_fn[(count($tmp_fn) -1)]);

			$entry_content = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));
			$fn = tempnam($GLOBALS['TMP_FILE_PATH'],"INTLV_FILEINDEX_");
			$fp = fopen($fn, "w");
			fputs($fp, $entry_content);
			fclose($fp);
			

			if ($entry_ext == ".zip") {
				$ascii .= ProcessZipArchive($fn);
			} else {
				$ret = GetIndexData($fn, $entry_name);
				$ascii .= $entry_name . " " . $ret['ascii'];
				if ($GLOBALS['CMDLINE']) {
					 print "\015Updated info of file " . fillout($filenum, 6) . " : " . fillout(strlen($ret['ascii']), 7) . " bytes of ascii data extracted from ZIP-archive.";
				}
			}
			
			unlink($fn);

		}
		zip_close($zip);
		return($ascii);
}

function ExtractIndexData($fileid=false, $updateonly=false) {
	if ($GLOBALS['CMDLINE']) {
		print "\n";
	}

	$to_process = array();

	if ($fileid == false && $updateonly) {
		$to_process = db_GetFlatArray("SELECT " . $GLOBALS['TBL_PREFIX'] . "binfiles.fileid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles," . $GLOBALS['TBL_PREFIX'] . "blobs WHERE " . $GLOBALS['TBL_PREFIX'] . "binfiles.fileid=" . $GLOBALS['TBL_PREFIX'] . "blobs.fileid AND extractedascii = '' AND " . $GLOBALS['TBL_PREFIX'] . "binfiles.koppelid != 0");
	} elseif ($fileid == false) {
		$to_process = db_GetFlatArray("SELECT fileid FROM " . $GLOBALS['TBL_PREFIX'] . "binfiles WHERE " . $GLOBALS['TBL_PREFIX'] . "binfiles.koppelid != 0");
	} elseif ($fileid != 0) {
		array_push($to_process, $fileid);
	}
	foreach ($to_process AS $filenum) {
//	eval($GLOBALS['VAR_DUMP']);

		$ascii = "";

		// Catch compressed archives here
		$fn = GetFileName($filenum);
		$tmp_fn = explode(".", $fn);
		$ext = "." . strtolower($tmp_fn[(count($tmp_fn) -1)]);

		LockFileForAsciiExtraction($filenum);
		qlog(INFO, "Working on $filenum");

		$diskfile = CopyFileToDisk($filenum);
		$ze = 0;

		if ($ext == ".zip") {
			if ($GLOBALS['CMDLINE']) {
				//print "This is a zip archive: " . $fn . " start processing.";
			}
			$ascii = ProcessZipArchive($diskfile);
			if ($GLOBALS['CMDLINE']) {
				//print "Done processing " . $fn . ".";
			}

			$type = "ZIP-archive";
		} else {
			$ret = array();
			$ret = GetIndexData($diskfile, $fn);
			$ascii = $ret['ascii'];
			$type = $ret['type'];
		}
		if ($GLOBALS['CMDLINE']) {
			print "Processing " . $GLOBALS['title'] . "::" . "$filenum\n";
		}
		if (strlen($ascii) > 1) {
			SetExtractedAsciiData($filenum, $ascii);
			qlog(INFO, "Updated info of file " . $filenum . " : " . strlen($ascii) . " bytes of ascii data.");
			if ($GLOBALS['CMDLINE']) {
				//print "\015Processing " . fillout($filenum,6) . "::type " . fillout($ext, 7) . " ... mB:" . round(memory_get_usage()/1024/1024) . "  |";
				// print "" . fillout(strlen($ascii), 7) . " bytes of ascii data extracted (" . $type . ")           ";
			}
		} else {
			if ($GLOBALS['CMDLINE']) {
			//	print "\015Processing " . fillout($filenum,6) . "::type " . fillout($ext, 7) . " ... mB:" . round(memory_get_usage()/1024/1024) . "  |";
				// print "" . fillout("{ERR}", 7) . " bytes of ascii data extracted (" . $type . ")         ";
			}
		}

		unlink($diskfile);
	}
	if ($GLOBALS['CMDLINE']) {
		print "\n";
	}

}

function GetIndexData($fileref, $filename) {

	$file_to_pass = $fileref;
	$fn = $filename;
	if ($GLOBALS['CMDLINE']) {
		//print "Processing $fileref - $filename ...\n";
	}
	$ascii = "";

	$tmp_fn = explode(".", $fn);
	$ext = "." . strtolower($tmp_fn[(count($tmp_fn) -1)]);

	$id3list = array(".gzip", ".rar", ".szip", ".tar", ".zip", ".asf", ".bink", ".flv", ".matroska", ".mpeg", ".nsv", ".quicktime", ".real", ".riff", ".swf", ".aac", ".ac3", ".au", ".avr", ".bonk", ".dss", ".dts", ".flac", ".la", ".lpac", ".midi", ".mod", ".monkey", ".mp3", ".mpc", ".ogg", ".optimfrog", ".rkau", ".shorten", ".tta", ".voc", ".vqf", ".wavpack", ".bmp", ".gif", ".jpg", ".pcd", ".png", ".svg", ".tiff");

	switch ($ext) {
		case ".xlsx" :
			$ascii = ExtractExcelAscii($file_to_pass);
			$type = $ext . ": MS Excel 2007+";
			break;
		case ".xlsm" :
			$ascii = ExtractExcelAscii($file_to_pass);
			$type = $ext . ": MS Excel 2007+";
			break;

		case ".pptx" :
			$ascii = ExtractPowerpointAscii($file_to_pass);
			$type = $ext . ": MS Powerpoint 2007+";
		break;

		case ".docx":
			$ascii = ExtractWordAscii($file_to_pass);
			$type = $ext . ": MS Word 2007+";
		break;
		case ".pdf":
			$ascii = ExtractPDFAscii($file_to_pass);
			$type = $ext . ": Portable Document Format";
		break;

		case ($ext == ".odf" || $ext == ".ods" || $ext == ".odp" || $ext == ".odt"):
			$ascii = ExtractOOAscii($file_to_pass);
			$type = $ext . ": OpenOffice OpenDocument";
		break;

		case ".rtf":
			$ascii = ExtractRTFAscii($file_to_pass);
			$type = $ext . ": Rich Text Format";
		break;

		case ".exe":
			$ascii = "";
			$type = $ext . ": we don't index executables";
		break;

		case ($ext == ".gz" || $ext == ".arj" || $ext == ".7z" || $ext == ".bzip2" || $ext == ".tgz"):
			$ascii = "";
			$type = $ext . ": unsupported compressed file";
		break;


		case ($ext == ".txt" || $ext == ".asc" || $ext == ".html" || $ext == ".htm" || $ext == ".csv" || $ext == ".xml" || $ext == ".xslt" || $ext == ".sql"  || $ext == ".ini" || $ext == ".php" || $ext == ".asp" || $ext == ".pl" || $ext == ".css" || $ext == ".msg" || $ext == ".eml"):
			$ascii = file_get_contents($file_to_pass);
			$type = $ext . ": plain text";
		break;

		case (in_array($ext, $id3list)):
			$ascii = ExtractID3Ascii($file_to_pass, $ext);
			$type = $ext . ": image, video or audio";
		break;

		default:
			$ascii = ExtractBinAscii($file_to_pass);
			$type = $ext . ": no parser for this file extension, treating as binary file";
		break;

	}


	// Replace newlines and tabs with *nothing*
	$ascii = preg_replace("[\r?\n|\t]", " ", $ascii);
	// Replace "  " with " "
	$ascii = preg_replace(" {2,}", " ", $ascii);

	$ret = array();
	$ret['ascii'] = $ascii;
	$ret['type'] = $type;

	return($ret);
}

function ExtractPowerpointAscii($file) {
	$extracted_content = "";
	$zip = zip_open($file);
	while ($zip_entry = zip_read($zip)) {
		if (substr(zip_entry_name($zip_entry), 0, 16) == "ppt/slides/slide") {
			$xml = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));
			$extracted_content .= " " . strip_tags($xml);
		}
	}
	zip_close($file);
	return($extracted_content);
}


function ExtractExcelAscii($file) {
	$extracted_content = "";
	$zip = zip_open($file);
	while ($zip_entry = zip_read($zip)) {
		if (zip_entry_name($zip_entry) == "xl/sharedStrings.xml") {
			$xml = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));
			$xml = str_replace("</t>", " </t>", $xml);
			$extracted_content .= " " . strip_tags($xml);
		}
	}
	zip_close($file);
	return($extracted_content);
}


function ExtractWordAscii($file) {
	$extracted_content = "";
	$zip = zip_open($file);
	while ($zip_entry = zip_read($zip)) {
		if (zip_entry_name($zip_entry) == "word/document.xml") {
			$xml = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));
			$extracted_content .= " " . strip_tags($xml);
		}
	}
	zip_close($file);
	return($extracted_content);
}

function ExtractOOAscii($file) {
	$extracted_content = "";
	$zip = zip_open($file);
	while ($zip_entry = zip_read($zip)) {
		if (zip_entry_name($zip_entry) == "content.xml") {
			$xml = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));
			$xml = str_replace("</text:p>", " </text:p>", $xml);
			$extracted_content .= " " . strip_tags($xml);
		}
	}
	zip_close($file);
	return($extracted_content);
}

function ExtractRTFAscii($file) {
	require_once('lib/parsertf.class.php');
	$r = new rtf(file_get_contents($file));
	$r->output("html");
	$r->parse();
	return(strip_tags(htmlspecialchars_decode($r->out)));
/*
	$extracted_content = "";
	$extracted_content = file_get_contents($file);
	print "RTF SIZE: " . strlen($extracted_content) ."\n";;
	$extracted_content = str_replace("({\\)(.+?)(})|(\\)(.+?)(\b)", "", $extracted_content);
	print "RTF SIZE: " . strlen($extracted_content). " (after)\n";
	return($extracted_content);
	*/
}

function ExtractPDFAscii($file) {
	require_once('lib/fpdi/fpdf.php');
	require_once('lib/fpdi/fpdi.php');
	$extracted_content = "";
	// initiate FPDI
	$pdf = new FPDI();
	$pages = $pdf->setSourceFile($file);
	// import pages 1 by 1
	for ($i=1;$i<($pages+1);$i++) {
		$extracted_content .= $pdf->importPage($i);
	}
	$pdf->_enddoc();
	return($extracted_content);
}

function ExtractBinAscii($file) {

	$total_record = "";
	$record_buffer = "";

	$fp = fopen($file, "r");
	while (!feof($fp)) {
		$line = fgets($fp, 108096);
		$len = strlen($line);
		for ($x=1;$x<$len;$x++) {
			$char = $line[$x];
			$asc = ord($char);
			if ($asc == 32 || ($asc > 47 && $asc < 58) || ($asc > 64 && $asc < 91) || ($asc > 96 && $asc < 123)) { // ASCII Default character found, start recording
				$record_buffer .= $char;
			} else {
				$record = false;
				if (strlen($record_buffer) > 3) {
					$total_record .= " " . $record_buffer;
				}
				$record_buffer = "";
			}
		}

	}
	fclose($fp);
	return($total_record);
}
function ExtractID3Ascii($file, $ext) {
	require_once('lib/getid3/getid3.php');

	$extracted_content = "";

	$ext = str_replace(".", "", $ext);

	// Initialize getID3 engine
	$getID3 = new getID3;

	// Analyze file and store returned data in $ThisFileInfo
	$ThisFileInfo = $getID3->analyze($file);

	if ($ThisFileInfo['error']) {
		// niet gelukt
		return("");
	} else {
		foreach ($ThisFileInfo[$ext] AS $line) {
			$extracted_content .= " " . $line;
		}
		return($extracted_content);
	}
}

function ps2txt($ps_data){
	$result = "";
	$a_data = getDataArray($ps_data,"[","]");
	if (is_array($a_data)){
		foreach ($a_data as $ps_text){
			$a_text = getDataArray($ps_text,"(",")");
			if (is_array($a_text)){
				foreach ($a_text as $text){
					$result .= substr($text,1,strlen($text)-2);
				}
			}
		}
	} else {
		// the data may just be in raw format (outside of [] tags)
		$a_text = getDataArray($ps_data,"(",")");
		if (is_array($a_text)){
			foreach ($a_text as $text){
				$result .= substr($text,1,strlen($text)-2);
			}
		}
	}
	return $result;
}


function getDataArray($data,$start_word,$end_word){

	$start = 0;
	$end = 0;
	unset($a_result);

	while ($start!==false && $end!==false){
		$start = strpos($data,$start_word,$end);
		if ($start!==false){
			$end = strpos($data,$end_word,$start);
			if ($end!==false){
				// data is between start and end
				$a_result[] = substr($data,$start,$end-$start+strlen($end_word));
			}
		}
	}
	return $a_result;
}
function GetReferencesToTable($pointingto, $pointingfrom) {

	qlog(INFO, "ASK: What points TO TABLE $pointingto FROM TABLE $pointingfrom");

	if (!$GLOBALS['PageCache']['FlextableFieldReferences'][$pointingfrom][$pointingto]) {
		$tmp = db_GetArray("SELECT id, tabletype, options FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype='Reference to FlexTable' AND deleted='n'");
		foreach ($tmp AS $row) {
			$GLOBALS['PageCache']['FlextableFieldReferences'][$row['tabletype']][$row['options']] = $row['id'];
		}
	}
	return($GLOBALS['PageCache']['FlextableFieldReferences'][$pointingfrom][$pointingto]);

}
function CheckReferencesToFlextableRecord($table, $record) {
	$tmp = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype='Reference to FlexTable' AND options='" . mres($table) ."' AND deleted='n'");

	foreach ($tmp AS $field) {

		switch ($field['tabletype']) {
			case "entity":
				$ttmp = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE EFID" . $field['id'] . "='" . mres($record) . "'");
			break;
			case "customer":
				$ttmp = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE EFID" . $field['id'] . "='" . mres($record) . "'");
			break;
			default:
				$ttmp = db_GetRow("SELECT COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $field['tabletype'] . " WHERE EFID" . $field['id'] . "='" . mres($record) . "' AND (deleted='n' OR deleted IS NULL)");
			break;
		}

		if ($ttmp[0] != 0) {
			return(false);
		}
	}
	return(true);
}

function ReturnJqueryUIElementPlacementCode() {
	$tmp = db_GetRow("SELECT LASTFILTER FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($GLOBALS['USERID']) . "'");
	$ell = unserialize($tmp['LASTFILTER']);
	foreach ($ell['dashboard_element_positions_INTLV'] AS $element => $record) {
		if (strlen($element) > 0) {
			//$ret .= ' $("#' . $element . '").css("position", "absolute",  "top", "' . $record['top'] . '", "left", "' . $record['left'] . '"); ' . "\n";
				$ret .= 'if (document.getElementById("' . $element . '")) {' . "\n";
			if ($record['hidden'] == "hidden") {
				$ret .= "\t" . 'document.getElementById("' . $element . '").style.display = "none";' . "\n";
			} else {
				$ret .= "\t" . 'document.getElementById("' . $element . '").style.display = "block";' . "\n";
			}
			if (is_numeric($record['top']) && is_numeric($record['left'])){
				if ($record['top'] < 0 ) $record['top'] = 10;
				if ($record['left'] < 0 ) $record['left'] = 10;
				$ret .= "\t" . 'document.getElementById("' . $element . '").style.position = "absolute";' . "\n";
				$ret .= "\t" . 'document.getElementById("' . $element . '").style.top = "' . $record['top'] . 'px";' . "\n";
				$ret .= "\t" . 'document.getElementById("' . $element . '").style.left = "' . $record['left'] . 'px";' . "\n";
			}
			if (is_numeric($record['width']) && is_numeric($record['height'])){
				$ret .= "\t" . 'document.getElementById("' . $element . '").style.width = "' . $record['width'] . 'px";' . "\n";
				$ret .= "\t" . 'document.getElementById("' . $element . '").style.height = "' . $record['height'] . 'px";' . "\n";
			}
			$ret .= '}' . "\n";
		}
	}
	return($ret);
}
function HexColor2RGBColor($color){
    $color = str_replace('#', '', $color);
    if (strlen($color) != 6){ return array(0,0,0); }
    $rgb = array();
    for ($x=0;$x<3;$x++){
        $rgb[$x] = hexdec(substr($color,(2*$x),2));
    }
    return $rgb;
}


function ParseZippedContent($fileid, $eid, $cid, $flextable, $flextablerecord, $extraparsefunc=false, $raw=false) {
	$fn = GetTemplateName($fileid);
	$tmp_fn = explode(".", $fn);
	$ext = "." . strtolower($tmp_fn[(count($tmp_fn) -1)]);

	$ftp = array(); // Files in archive to run through parser

	switch ($ext) {
		case ".xlsx":
				$ftp[] = "/xl/sharedStrings.xml";
				for ($x=0;$x<64;$x++) {
					$ftp[] = "/xl/worksheets/sheet" . $x . ".xml";
				}
				$raw = "dontformatnumbers";
			break;
		case ".xlsm":
				$ftp[] = "/xl/sharedStrings.xml";
				for ($x=0;$x<64;$x++) {
					$ftp[] = "/xl/worksheets/sheet" . $x . ".xml";
				}
				$raw = "dontformatnumbers";
			break;
		case ".docx":
				$ftp[] = "/word/document.xml";
			break;
		case ".odt":
				$ftp[] = "/content.xml";
			break;
		case ".ods":
				$ftp[] = "/content.xml";
				$raw = "dontformatnumbers";
			break;

	}
	if (GetTemplateType($fileid) == "TEMPLATE_REPORT_PDF" || GetTemplateType($fileid) == "TEMPLATE_PLAIN") {
		$fn = GetAttribute("template", "FormatNumbers", $fileid);
		if ($fn == "Yes") {
			$raw = false;
		}

	}
	return(ParseZipFile($fileid, $ftp, $eid, $cid, $flextable, $flextablerecord, $extraparsefunc,$raw));
}


function ParseZipFile($fileid, $Array_files_in_zip_to_parse, $eid, $cid, $flextable, $flextablerecord, $extraparsefunc=false, $raw=false) {

	$diskfile = CopyTemplateToDisk($fileid);
	$GLOBALS['logtext'] = false; // IMPORTANT! If qlogging is enabled, the qlist.txt file will be zipped in the archive and we don't want that

	$name = md5($diskfile) . date('U');
	$extracted_content = "";
	mkdir($GLOBALS['TMP_FILE_PATH'] . "/" . $name);
	copy($diskfile, $GLOBALS['TMP_FILE_PATH'] . "/" . $name . "/" . $name . ".INTLV");
	$newdiskfile = $GLOBALS['TMP_FILE_PATH'] . "/" . $name . "/" . $name . ".INTLV";
	chdir($GLOBALS['TMP_FILE_PATH'] . "/" . $name . "/");
	UnZip($newdiskfile, $GLOBALS['TMP_FILE_PATH'] . "/" . $name . "/");

	unlink($newdiskfile);
	unlink($diskfile);

	foreach ($Array_files_in_zip_to_parse AS $pFile) {

		$fContent = file_get_contents("." . $pFile);

		if ($fContent != "") {
			
			if (function_exists($extraparsefunc)) {
				$fContent = $extraparsefunc($fContent);
			}
			$fContent = ParseTemplateAliases($fContent, "htme");
			$fContent = ParseTemplateLanguageTags ($fContent, "htme");

			$fContent = str_replace("#@", "@", $fContent);

			if (IsValidEID($eid)) $fContent = ParseTemplateEntity    ($fContent, $eid, $raw, false, false, "htme");

			if (IsValidCID($cid)) $fContent = ParseTemplateCustomer  ($fContent, $cid, $raw, "htme", false);

			if (is_numeric($flextable) && IsValidFlexTableRecord($flextablerecord, $flextable)) {
				$fContent = ParseFlexTableTemplate($flextable, $flextablerecord, $fContent, false, true, $raw, "htme");
			}

			$fContent = ParseTemplateGeneric   ($fContent);

			$fContent = ParseTemplateCleanup   ($fContent, true);

			$fContent = br2nl($fContent);

		}

		$fp = fopen("." . $pFile, "w");
		fputs($fp, $fContent);
		fclose($fp);
	}

	return(Zip($GLOBALS['TMP_FILE_PATH'] . "/" . $name . ".done", $GLOBALS['TMP_FILE_PATH'] . "/" . $name . "/"));
}


function Zip($filename, $path) {

	// create object
	$zip = new ZipArchive();

	// open archive
	if ($zip->open($filename, ZIPARCHIVE::CREATE) !== TRUE) {
		die ("Could not open archive");
	}

	chdir($path);
	// initialize an iterator
	// pass it the directory to be processed


	$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator("."));

	// iterate over the directory
	// add each file found to the archive
	foreach ($iterator as $key=>$value) {
		if (substr($key, strlen($key)-3, 3) != "/.." && substr($key, strlen($key)-2, 2) != "/.") {
    		    $zip->addFile(realpath($key), str_replace("./", "", $key)) or die ("ERROR: Could not add file: $key");
    		}
//		print "Add file " . realpath($key) . " == " . str_replace("./", "", $key) . "\n\n";
	}

	// close and save archive
	$zip->close();

	$zipfile = file_get_contents($filename);
	unlink($filename);
	return($zipfile);
}
function UnZip( $zipFile = '', $to_dir)
{
    define(DIRECTORY_SEPARATOR, '/');

    $zipDir = $to_dir;
    $zip = zip_open($zipFile);

    if ($zip)
    {
        while ($zip_entry = zip_read($zip))
        {
            $completePath = $zipDir . dirname(zip_entry_name($zip_entry));
            $completeName = $zipDir . zip_entry_name($zip_entry);

            // Walk through path to create non existing directories
            // This won't apply to empty directories ! They are created further below
            if(!file_exists($completePath) && preg_match( '#^' . $dirFromZip .'.*#', dirname(zip_entry_name($zip_entry)) ) )
            {
                $tmp = '';
                foreach(explode('/',$completePath) AS $k)
                {
                    $tmp .= $k.'/';
                    if(!file_exists($tmp) )
                    {
                        @mkdir($tmp, 0777);
                    }
                }
            }

            if (zip_entry_open($zip, $zip_entry, "r"))
            {
                if( preg_match( '#^' . $dirFromZip .'.*#', dirname(zip_entry_name($zip_entry)) ) )
                {
                    if ($fd = @fopen($completeName, 'w+'))
                    {
                        fwrite($fd, zip_entry_read($zip_entry, zip_entry_filesize($zip_entry)));
                        fclose($fd);
                    }
                    else
                    {
                        // We think this was an empty directory
                        mkdir($completeName, 0777);
                    }
                    zip_entry_close($zip_entry);
                }
            }
        }
        zip_close($zip);
    }
    return true;
}

function make_html_editor($id, $protectedSource, $extracss, $enter_is_div, $height="500", $width="100%") {
	$str = "";
	$str .= "";
	
	$str .= "<script type=\"text/javascript\">";
	$str .= "CKEDITOR.config.docType = '" . $GLOBALS['doctype'] . "';";

	$str .= "CKEDITOR.config.contentsCss = ['css/crm_dft.css','csv.php?GetCSS=default'";
	if ($extracss != "")
	{
		$str .= ", '" . $extracss . "'";
	}	
	$str .= "];";

	$str .= "CKEDITOR.config.width = '" . $width . "';";
	$str .= "CKEDITOR.config.height = '" . $height . "';";

	if ($enter_is_div)
	{
		$str .= "CKEDITOR.config.enterMode = CKEDITOR.ENTER_DIV;";
	}

	$str .= "CKEDITOR.config.protectedSource.push( /<\?[\s\S]*?\?>/g );";

	$str .= "CKEDITOR.replace('" . $id . "');";
	$str .= "CKEDITOR.config.toolbar =";
	$str .= "[";
	$str .= "['Source','-','Save','NewPage','Preview','-','Templates'],";
	$str .= "['Cut','Copy','Paste','PasteText','PasteFromWord','-','Print'],";
	$str .= "['Undo','Redo','-','Find','Replace','-','SelectAll','RemoveFormat'],";
	$str .= "['Bold','Italic','Underline','Strike','-','Subscript','Superscript'],";
	$str .= "['NumberedList','BulletedList','-','Outdent','Indent','Blockquote'],";
	$str .= "['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock'],";
	$str .= "['Link','Unlink','Anchor'],";
	$str .= "['Image','Flash','Table','HorizontalRule','Smiley','SpecialChar','PageBreak'],";
	$str .= "'/',";
	$str .= "['Styles','Format','Font','FontSize'],";
	$str .= "['TextColor','BGColor'],";
	$str .= "['Maximize', 'ShowBlocks','-','About']";
	$str .= "];";
	$str .= "</script>";

	return $str;
}

function FixLanguageTags() {
	$result = db_GetArray("SELECT id, TEXT FROM " . $GLOBALS['TBL_PREFIX'] . "languages;");
	foreach ($result AS $row) {
		$str = $row['TEXT'];

		$str = preg_replace('/<b>/i', '<strong>', $str);
		$str = preg_replace('/<\/b>/i', '</strong>', $str);

		$str = preg_replace('/<i>/i', '<em>', $str);
		$str = preg_replace('/<\/i>/i', '</em>', $str);
		
		$str = preg_replace('/<u>/i', '<span class="underline">', $str);
		$str = preg_replace('/<\/u>/i', '</span>', $str);

		$str = preg_replace('/<font color=\'#(.{6})\'>/i', '<span style=\'color: #\\1;\'>', $str);
		$str = preg_replace('/<\/font>/i', '</span>', $str);

		$str = preg_replace('/<br>/i', '<br>', $str);

		$str = preg_replace('/<hr>/i', '<hr>', $str);

		$str = preg_replace('/<red>/i', '', $str);
		
		$str = preg_replace('/ to database/i', '', $str);
		$str = preg_replace('/ to the database/i', '', $str);


		if ($str != $row['TEXT'])
		{
			mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "languages SET TEXT='" . mres($str) . "' WHERE id=" . $row['id'] . ";", $db);
		}

	}
}
function tail_file($file, $lines) {
    //global $fsize;
    $handle = fopen($file, "r");
    $linecounter = $lines;
    $pos = -2;
    $beginning = false;
    $text = array();
    while ($linecounter > 0) {
        $t = " ";
        while ($t != "\n") {
            if(fseek($handle, $pos, SEEK_END) == -1) {
                $beginning = true; 
                break; 
            }
            $t = fgetc($handle);
            $pos --;
        }
        $linecounter --;
        if ($beginning) {
            rewind($handle);
        }
        $text[$lines-$linecounter-1] = fgets($handle);
        if ($beginning) break;
    }
    fclose ($handle);
    return array_reverse($text);
}
function PrintNBSP($num) {
	for ($i=0;$i<$num;$i++) {
		$ret .= "&nbsp;";
	}
	return($ret);
}

function ReturnInteractiveAjaxListFieldElement($eid, $field, $curval) {
	if ($curval == "") $curval = " --- ";

	$oo = " onclick=\"SwitchIA(" . $eid . ",'" .  $field . "');\" ";
	$dspval = "<div " . $oo . " title='Click to edit this value' class='interactive_list_item " . $extraclass . "' id='list_element_" . $eid . "_" . $field . "'>" . htme($curval) . "</div>";
	$dspval .= "<div class='box_interactive_list_item' id='box_list_element_" . $eid . "_" . $field . "'>[unloaded]</div>";
	return($dspval);
}

function ReturnInteractiveFieldBox($eid, $field) {
	$table = GetExtraFieldTableType($field);
	if (is_numeric($field)) {
		$box = GetSingleExtraFieldFormBox($eid,$field,false,$table,false, true, true);
	} else {
		if ($table == "customer") {
			$id = "id";
		} else {
			$id = "eid";
		}
		$ea = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . $table . " WHERE " . $id . "='" . mres($eid) . "'");
		// CRM entity standaard customer fields moeten hier nog bij!
		$box = GetSingleDefaultFieldBox($eid, $field, $readonly, $ea, true, true, true);
	}
	return($box);
}
Function KeyName(array $a, $pos) {
    $temp = array_slice($a, $pos, 1, true);
    return key($temp);
}
function EvaluateCondition($condition, $eid, $originaltable) {
		$passed = true;
		$selectfromtable = $originaltable;
		
		if (is_numeric($selectfromtable)) {
			$selectfromtable = "flextable" . $selectfromtable;
			$selectid = "recordid";
		} elseif ($selectfromtable == "loginusers" || $selectfromtable == "userprofiles" || $selectfromtable == "customer") {
			$selectid = "id";
		} else {
			$selectid = "eid";
		}
		$originaltable = str_replace("flextable", "", $originaltable);

		if (substr($condition['field'],0,4) == "EFID") {

			$field = str_replace("EFID", "", $condition['field']);
			
			qlog(INFO, "This trigger has a trigger field condition :: condition " . $condition . ", entity " . $eid . ", table " . $originaltable);

			//$tabletype = "entity"; // Leave until native customer triggers and flextable triggers work

			$tabletype = GetExtraFieldTableType($field);
			
			if ($tabletype == "loginusers") {
				$fv = GetExtraFieldValue($GLOBALS['USERID'], $field, false, false);
				qlog(INFO, "CheckExtrafieldConditions TTYPE user VAL: " . $fv . "");;
			} elseif ($tabletype == "userprofiles") {
				$fv = GetExtraFieldValue($GLOBALS['GROUP'], $field, false, false);
				qlog(INFO, "CheckExtrafieldConditions TTYPE group VAL: " . $fv . "");;
			} elseif ($originaltable == "customer" && $tabletype == "customer") {
				$fv = GetExtraCustomerFieldValue($eid, $field, false, false);
				qlog(INFO, "CheckExtrafieldConditions TTYPE plain customer VAL: " . $fv . "");;
			} elseif (is_numeric($tabletype) && is_numeric($originaltable) && ($originaltable==$tabletype)) {
				//$fv = GetFlextableFieldValue($eid, $field, $tabletype);
				$fv = GetExtraFieldValue($eid, $field, false, false, false);
				qlog(INFO, "CheckExtrafieldConditions TTYPE plain flex VAL: " . $fv . "");
			} elseif ($originaltable == "entity" && GetExtraFieldTableType($field) == "customer") {
				$fv = GetExtraCustomerFieldValue(GetEntityCustomer($eid), $field, false, false);
				qlog(INFO, "CheckExtrafieldConditions TTYPE customer via entity VAL: " . $fv . "");
			} elseif ($originaltable == "entity" && is_numeric(GetExtraFieldTableType($field))) {
				$ref = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype='Reference to FlexTable' AND options='" . GetExtraFieldTableType($field) . "' AND tabletype='entity'");
				if (is_numeric($ref)) {
					$refrec = db_GetValue("SELECT EFID" . $ref . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . $eid . "'");
					//$fv = GetFlextableFieldValue($refrec, $field, $tabletype);
					$fv = GetExtraFieldValue($refrec, $field, false, false, false);
				}
			} elseif (is_numeric($originaltable) && ($originaltable!=GetExtraFieldTableType($field))) {

				$me = GetFlexTableDefinitions($origtable);
			
				if ($me[0]['orientation'] == "one_entity_to_many") {
				
					$refrec = db_GetValue("SELECT refer FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $originaltable . " WHERE recordid='" . $eid . "'");
					$fv = GetExtraFieldValue($refrec, $field, false, false, false);
					qlog(INFO, "CheckExtrafieldConditions TTYPE entity value fetched using entity refer field $refrec");
					
				} else {

					$ref = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype='Reference to FlexTable' AND options='" . GetExtraFieldTableType($field) . "' AND tabletype='" . $originaltable . "'");
					if (is_numeric($ref)) {
						$refrec = db_GetValue("SELECT EFID" . $ref . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . $eid . "'");
						$fv = GetExtraFieldValue($refrec, $field, false, false, false);
					}
				}

			} else {
				$fv = GetExtraFieldValue($eid, $field, false, false);
				qlog(INFO, "CheckExtrafieldConditions TTYPE plain $tabletype VAL: " . $fv . "");
			}


			if (trim($condition['value']) == trim($fv)) {
				qlog(INFO, "CheckExtrafieldConditions Condition OK: " . $condition['value'] . " == " . $fv);
				$matches = true;
			} elseif ($condition['value'] == "_NOT_EMPTY_" && strlen(trim($fv)) > 0) {
				$matches = true;
				qlog(INFO, "CheckExtrafieldConditions Condition passed; field has (some) value");
			} elseif ($condition['value'] == "_EMPTY_" && strlen(trim($fv)) == 0) {
				$matches = true;
				qlog(INFO, "CheckExtrafieldConditions Condition passed; field has no value");

			} else {
				qlog(INFO, "CheckExtrafieldConditions Condition failed: unknown: ". $condition['value'] . " != " . $fv);
				$matches = false;
			}
			if ($matches && $condition['trueorfalse'] == "false") {
				$passed = false;
			} elseif (!$matches && $condition['trueorfalse'] == "true") {
				$passed = false;
			}


			$value_it_is = $fv;
		} elseif ($condition['field'] == "group") {
		   // Trigger condition is based on who is triggering this
			if ($condition['value'] == $GLOBALS['UC']['USERPROFILE']) {
				$matches = true;
			} else {
				$matches = false;
			}
			if ($matches && $condition['trueorfalse'] == "false") {
				$passed = false;
			} elseif (!$matches && $condition['trueorfalse'] == "true") {
				$passed = false;
			} else {
				$passed = true;
			}

		} elseif (substr($condition['field'],0,7) == "module ") {
			// Module outcome depends on a module
			$mid = str_replace("module ", "", $condition['field']);
			$text = "Trigger conditions evaluation by module\n";
			$ret = RunModule($mid, $eid, true, false, false);
			
			if ($selectid == "recordid") {
				$ret = RunModule($mid, false, true, $eid, $originaltable);
			} else {
				$ret = RunModule($mid, $eid, true, false, false);
			}

			if (strtoupper($ret) == "TRUE" && $condition['trueorfalse'] == "false") {
				$passed = false;
				$text .= "Module " . $mid . " returned " . $ret . " instead of false, condition failed";
			} elseif (strtoupper($ret) == "TRUE" && $condition['trueorfalse'] == "true") {
				$text .= "Module " . $mid . " returned " . $ret . " which is interpreted as true, condition passed";
				//$passed = true;
			} elseif (strtoupper($ret) == "FALSE" && $condition['trueorfalse'] == "false") {
				$text .= "Module " . $mid . " returned " . $ret . " which is interpreted as false, condition passed";
				//$passed = true;
			} elseif (strtoupper($ret) == "FALSE" && $condition['trueorfalse'] == "true") {
				$text .= "Module " . $mid . " returned " . $ret . " instead of true, condition failed";
				$passed = false;
			} else {
				$passed = false;
				$text .= "Module " . $mid . " returned " . $ret . " instead of " . $condition['trueorfalse'] . " [unknown error], codition failed";
			}

		} elseif ($condition['field'] == "startdate" || $condition['field'] == "duedate") {
			$curval = trim(db_GetValue("SELECT " . $condition['field'] . " FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid='" . mres($eid) . "'"));
			switch ($condition['value']) {
				case "EMPTY":
					if ($curval != "") {
						$passed = false;
						$text .= "Duedate must be empty but is " . $curval . ", condition failed";
					} else {
						$text .= $condition['field'] . " condition passed";
					}
				break;
				case "NOT EMPTY":
					if ($curval == "") {
						$passed = false;
						$text .= "Duedate must NOT be empty but is " . $curval . ", condition failed";
					} else {
						$text .= $condition['field'] . " condition passed";
					}
				break;
				case "BEFORE":	
					if (!$curval || NLDate2Epoch($curval) > date('U')) {
						$passed = false;
						$text .= "Duedate must be BEFORE *now* but is " . $curval . ", condition failed";
					} else {
						$text .= $condition['field'] . " condition passed";
					}
				break;
				case "AFTER":
					if (!$curval || NLDate2Epoch($curval) < date('U')) {
						$passed = false;
						$text .= "Duedate must be AFTER *now* but is " . $curval . ", condition failed";
					} else {
						$text .= $condition['field'] . " condition passed";
					}
				break;
			}
		} elseif ($condition['field'] == "assigneegroup" || $condition['field'] == "ownergroup") {
			if ($condition['field'] == "assigneegroup") {
				$user = GetEntityAssignee($eid);
			} elseif ($condition['field'] == "ownergroup") {
				$user = GetEntityOwner($eid);
			}
			$profile = GetUserRow($user);
			$value_it_is = $profile['PROFILE'];

			if ($profile['PROFILE'] == $condition['value'] && $condition['trueorfalse'] == "false") {
				$passed = false;
				$text .= $condition['field'] . " must NOT be " . $condition['value'] ." but is " . $profile['PROFILE'] . ", condition failed";
			} elseif (($profile['PROFILE'] != $condition['value'] && $condition['trueorfalse'] == "true") || ($profile['PROFILE'] == "" && $condition['trueorfalse'] == "true")) {
				$passed = false;
				$text .= $condition['field'] . " MUST be " . $condition['value'] .", but is " . $profile['PROFILE'] . ", condition failed";
			} else {
				$text .= $condition['field'] . " condition passed";
			}


			
		} elseif ($condition['field'] == "assignee" || $condition['field'] == "owner") {

			if ($condition['field'] == "assignee") {
				$user = GetEntityAssignee($eid);
			} elseif ($condition['field'] == "owner") {
				$user = GetEntityOwner($eid);
			}
			
			if ($condition['value'] == "CURUSER") {
				$condition['value'] = $GLOBALS['USERID'];
			}

			$value_it_is = $user;

			if ($user == $condition['value'] && $condition['trueorfalse'] == "false") {
				$passed = false;
				$text .= $condition['field'] . " must NOT be " . $condition['value'] ." but is " . $user . ", condition failed";
			} elseif (($user != $condition['value'] && $condition['trueorfalse'] == "true") || ($user == "" && $condition['trueorfalse'] == "true")) {
				$passed = false;
				$text .= $condition['field'] . " MUST be " . $condition['value'] ." but is " . $user . ", condition failed";
			} else {
				$text .= $condition['field'] . " condition passed";
			}
		} else {
		   // Trigger condition is based on deleted, status, priority or CRMcustomer field

		   $row = db_GetRow("SELECT " . $condition['field'] . " FROM " . $GLOBALS['TBL_PREFIX'] . $selectfromtable . " WHERE " . $selectid . "='" . mres($eid) . "'");
		   

			if ($condition['field'] == "status") {
				$condition['value'] = GetStatusName($condition['value']);
			} elseif ($condition['field'] == "priority") {
				$condition['value'] = GetPriorityName($condition['value']);
			}
			qlog(INFO, "CheckExtrafieldConditions MATCH --------------------------" . $condition['value'] . " WITH " . $row[0]);
			if ($condition['value'] == $row[0]) {
				$matches = true;
			} else {
				$matches = false;
			}
			if ($matches && $condition['trueorfalse'] == "false") {
				$passed = false;
			} elseif (!$matches && $condition['trueorfalse'] == "true") {
				$passed = false;
			}
			$value_it_is = $row[0];
		}
		if ($text) {
			qlog("CheckExtrafieldConditions " . $text);
			journal($eid, $text);
		}
	
	$passedAR = array();
	$passedAR['passed'] = $passed;
	$passedAR['value_it_is'] = $value_it_is;

	return($passedAR);
}

function CheckAndCreateDatabaseIndices() {

	$fields_to_index = array("Computation", "Computation (ajax autorefresh)", "numeric", "date", "textbox");
	
	$struc = db_GetArray("EXPLAIN " . $GLOBALS['TBL_PREFIX'] . "entity");

	$no_of_keys = 0;
	foreach ($struc AS $key) {
		if ($dbfield['Key'] != "") {
			$no_of_keys++;
		}
	}
	
	$tmp = GetExtraFields();
	
	$has_key = false;

	foreach ($tmp AS $field) {
		$fieldname = "EFID" . $field['id'];
		if (in_array($field['fieldtype'], $fields_to_index)) {
			$has_key = false;
			foreach ($struc AS $dbfield) {
				if ($dbfield['Key'] != "" && $dbfield['Field'] == $fieldname) {
					$has_key = true;
					$has_key_total++;
					$no_of_keys++;
				} 
			}
		
			if (!$has_key) {
				if ($no_of_keys < 40) { // 64 is max, but the entity table also has around 15 indexed field of its own
					$no_of_keys++;
					mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . "entity ADD INDEX (`" . $fieldname . "` (64))", $db);
				}

			}
		}
	}	

	$struc = db_GetArray("EXPLAIN " . $GLOBALS['TBL_PREFIX'] . "customer");
	$no_of_keys = 0;
	foreach ($struc AS $key) {
		if ($dbfield['Key'] != "") {
			$no_of_keys++;
		}
	}
	$tmp = GetExtraCustomerFields();
	
	foreach ($tmp AS $field) {
		$fieldname = "EFID" . $field['id'];
		if (in_array($field['fieldtype'], $fields_to_index)) {
			$has_key = false;
			foreach ($struc AS $dbfield) {
				if ($dbfield['Key'] != "" && $dbfield['Field'] == $fieldname) {
					$has_key = true;
					$no_of_keys++;
				}
			}
		
			if (!$has_key) {
				if ($no_of_keys < 45) {
					$no_of_keys++;
					mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . "customer ADD INDEX (`" . $fieldname . "` (64))", $db);
				}
			}
		}
	}
	$dftfields = array("refer", "readonly", "deleted");
	$ft = GetFlextableDefinitions();
	foreach ($ft AS $table) {
		$create = db_GetArray("SHOW CREATE TABLE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table['recordid']);
		if (substr($create[0][1],0, 12) != "CREATE TABLE") {
			//print "IS NOT TABLE :" . $table['recordid'] . "\n" . $create[0][1] . "\n";
		} else {
			$struc = db_GetArray("EXPLAIN " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table['recordid']);
			$no_of_keys = 0;
			foreach ($struc AS $key) {
				if ($dbfield['Key'] != "") {
					$no_of_keys++;
				}
			}
			foreach ($dftfields AS $field) {
				$fieldname = $field;
				$has_key = false;

				foreach ($struc AS $dbfield) {
					if ($dbfield['Key'] != "" && $dbfield['Field'] == $fieldname) {
						$has_key = true;
						$no_of_keys++;
					} 
				}
			
				if (!$has_key) {
					if ($no_of_keys < 45) {
						$no_of_keys++;
						mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table['recordid'] . " ADD INDEX (`" . $fieldname . "`)", $db);
					}
				}

			}
			$tmp = GetExtraFlextableFields($table['recordid']);
		
			foreach ($tmp AS $field) {
				$fieldname = "EFID" . $field['id'];
				//print "Process " . $field['id'] . " \n";
				if (in_array($field['fieldtype'], $fields_to_index)) {
					$has_key = false;
					foreach ($struc AS $dbfield) {
						if ($dbfield['Key'] != "" && $dbfield['Field'] == $fieldname) {
							$has_key = true;
							$no_of_keys++;
						} 
					}
					if (!$has_key) {
						if ($no_of_keys < 45) {
							$no_of_keys++;
							mcq("ALTER TABLE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table['recordid'] . " ADD INDEX (`" . $fieldname . "` (64))", $db);
						}
					}
				}
			}


			

		}
	}

}
function ReturnListOfAllowedCustomers($selected_user = false, $include_inactive = false) {
	if ($include_inactive) {
		$list = db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer");
	} else {
		$list = db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE active='yes'");
	}
	$result = array();
	foreach ($list AS $id) {
		if (CheckCustomerAccess($id, $selected_user) != "nok") {
			$result[] = $id;
		}
	}
	return($result);
}

function ReturnListOfAllowedUsers($selected_user = false, $for_form_element = true, $condition = false, $attr = false) {
	// $selected_user contains username of the current user (assignee, owner etc). It's given
	// because sometimes an entity is assigned to a user which may not be seen. This function 
	// will inlclude that user (anonymized) if the user has to access to that user.

	//  enum('all','in_group','customer_related','none')

	if ($for_form_element) {
		if (is_array($GLOBALS['FORM_USERSPECTRUMCACHE' . $condition])) {
			qlog(CACHE, "Returning list of users in spectrum (form)");
		//	return($GLOBALS['FORM_USERSPECTRUMCACHE' . $condition]);
		}
	} else {
		if (is_array($GLOBALS['USERSPECTRUMCACHE' . $condition])) {
			qlog(CACHE, "Returning list of users in spectrum (normal)");
		//	return($GLOBALS['USERSPECTRUMCACHE' . $condition]);
		}
	}

	$sql_ins = "";

	switch ($condition) {
		case "group":
			$sql_ins .= "AND PROFILE='" . mres($attr) . "' ";
		break;
		case "admin":
			$sql_ins .= "AND administrator='yes' ";
		break;
	}

	if ($for_form_element) {
		// This means this function has to take into account that this information is printed on a form. That in turn
		// means that users with HIDEFROMASSIGNEEANDOWNERLISTS='y' must not be returned.
		$sql_ins .= "AND HIDEFROMASSIGNEEANDOWNERLISTS = 'n'";
	}

	$mode = $GLOBALS['UC']['USERSPECTRUM'];
	if (!$mode) $mode = "all";
	switch($mode) {
		case "all":
			$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user%' " . $sql_ins . " ORDER BY FULLNAME";
		break;
		case "in_group":
			if (is_numeric($GLOBALS['UC']['USERPROFILE'])) {
				$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user%' " . $sql_ins . " AND PROFILE='" . mres($GLOBALS['UC']['USERPROFILE']) . "' AND HIDEFROMASSIGNEEANDOWNERLISTS = 'n' ORDER BY FULLNAME";
			} else {
				$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user%' " . $sql_ins . " AND PROFILE='' AND HIDEFROMASSIGNEEANDOWNERLISTS = 'n' ORDER BY FULLNAME";
			}
		break;
		case "customer_related":
			$tmp = $GLOBALS['UC']['LIMITTOCUSTOMERS'];
			$list = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user%' " . $sql_ins . " AND HIDEFROMASSIGNEEANDOWNERLISTS = 'n' ORDER BY FULLNAME");
			$ac = "0";

			foreach ($tmp AS $cid) {
				foreach ($list AS $user) {
					$access = CheckCustomerAccess($cid, $user['id'], false);
					if ($access == "ok" || $access == "readonly") {
						$ac .= "," . $user['id'];
					} else {
						qlog(INFO, "User " . $user['id'] . " excluded from user-lists, user has no access to customer " . $cid);
					}
				}
			}
			$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user%' " . $sql_ins . " AND id IN (" . $ac . ") ORDER BY FULLNAME";

		break;
		case "none";
			$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user%' " . $sql_ins . " AND id IN (" . mres($GLOBALS['USERID']) . ") ORDER BY FULLNAME";
		break;

	}
	$sel_users = db_GetArray($sql);
//		print "<h2>$sql</h2>";
	$cl = GetClearanceLevel($GLOBALS['USERID']);

	for ($i=0;$i<count($sel_users);$i++) {
		if (is_numeric($sel_users[$i]['id'])) {
			if ($selected_user == $sel_users[$i]['id']) {
				$found = true;
			}
			if (@in_array("HideUserNames", $cl) && ($GLOBALS['USERID'] != $sel_users[$i]['id'])) {
				$sel_users[$i]['FULLNAME'] = "[n/a]";
			}
		}
	}
	if (!$found && is_numeric($selected_user)) {
		$sql = "SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name NOT LIKE 'deleted_user%' AND id IN (" . mres($selected_user) . ") ORDER BY FULLNAME";
		$sel_users[] = db_GetRow($sql);
		$sel_users[count($sel_users)-1]['FULLNAME'] = "[n/a]";
		//print "<h1>Added " . GetUserName($selected_user) . "</h1><pre>";
		//debug_print_backtrace();
	}

	if ($for_form_element) {
		$GLOBALS['FORM_USERSPECTRUMCACHE' . $condition] = $sel_users;
	} else {
		$GLOBALS['USERSPECTRUMCACHE' . $condition] = $sel_users;
	}
	return($sel_users);
}


function charset_decode_utf_8($string) {
	/* Only do the slow convert if there are 8-bit characters */
	/* avoid using 0xA0 (\240) in ereg ranges. RH73 does not like that */
	if (! ereg("[\200-\237]", $string) and ! ereg("[\241-\377]", $string))
	return $string;

	// decode three byte unicode characters
	$string = preg_replace("/([\340-\357])([\200-\277])([\200-\277])/e",
	"'&amp;#'.((ord('\\1')-224)*4096 + (ord('\\2')-128)*64 + (ord('\\3')-128)).';'",
	$string);

	// decode two byte unicode characters
	$string = preg_replace("/([\300-\337])([\200-\277])/e",
	"'&amp;#'.((ord('\\1')-192)*64+(ord('\\2')-128)).';'",
	$string);

	return $string;
}

function html_compress($html){
//	return($html);
	if ($GLOBALS['logtext']) { 
		return($html);
	} else {
		

		// Commented end-of-comment statements are obsolete	
		$html = str_replace("//-->" , "-->", $html);
		
		// Set aside any javascript withing comments (save all comments)
		preg_match_all('<!--.*?-->',$html,$comments2);#exclude pre or code tags
		$html = preg_replace('<!--.*?-->', '#comment2#', $html);#removing all pre or code tags

		// Remove //-style (until EOL) comments (like *this* comment)
		$html = preg_replace( "/(?<!\:)\/\/(.*)\\n/", "", $html);

		// Set aside all PRE and CODE contents
		preg_match_all('!(<(?:code|pre|textarea).*>[^<]+</(?:code|pre|textarea)>)!',$html,$pre);#exclude pre or code tags
		$html = preg_replace('!<(?:code|pre|textarea).*>[^<]+</(?:code|pre|textarea)>!', '#pre#', $html);#removing all pre or code tags
		
		$html = preg_replace('/[\r\n\t]+/', ' ', $html);#remove new lines, spaces, tabs
		$html = preg_replace('/&gt;[\s]+&lt;/', '&gt;&lt;', $html);#remove new lines, spaces, tabs
		$html = preg_replace('/[\s]+/', ' ', $html);#remove new lines, spaces, tabs

		if(!empty($pre[0])) {
			foreach($pre[0] as $tag) {
				$html = preg_replace('!#pre#!', $tag, $html,1);#putting back pre|code tags
			}
		}
		if(!empty($comments2[0])) {
			foreach($comments2[0] as $tag) {
				$html = preg_replace('!#comment2#!', $tag, $html,1);#putting back comment tags
			}
		}

		return($html);
	}
}
function ShowHeaders($popup=false) {

	ob_start();

	if (!$GLOBALS['INITIATED']) {
		print "<h1>Fatal error - header should not be called before initiation!</h1>";
		debug_print_backtrace();
		exit;
	}

	// Check if this should be a secure connection
	if ($_SERVER['HTTPS']<>"on" && strtoupper($GLOBALS['ForceSecureHTTP'])=="YES") {
		qlog(INFO, "This user is on the wrong port (80 i.s.o. 443) ... redirecting to https://" . $_SERVER['SERVER_NAME'] . $_SERVER['SCRIPT_NAME']);
		$to = "https://" . $_SERVER['SERVER_NAME'] . $_SERVER['SCRIPT_NAME'];
		print "<table border='0' width='50%'><tr><td><fieldset><legend>&nbsp;<img src='images/crmlogosmall.gif' alt=''>&nbsp;&nbsp;<img src='images/info.gif' alt=''></legend><br><center>Per administrator's request you are redirected to a secure connection.<br> </center><br></fieldset></td></tr></table>";
		?>
			<script type="text/javascript">
				document.location = '<?php echo $to;?>';
			</script>
		<?php
		EndHTML();
		exit;
	} elseif ($_SERVER['HTTPS']=="on" && strtoupper($GLOBALS['ForceSecureHTTP'])=="YES") {
		qlog(INFO, "This is a secure connection, no need to force");
	}

	$GLOBALS['BrowseArray'] = PushStashValue("nothing yet");;

	PrintHTMLHeader();

	
	$timeout = $GLOBALS['timeout'];
	$timeoutsec = GetSetting("timeout") * $timeout * 60;

	$GLOBALS['CURFUNC'] = "LoadLanguage::";



	if ($GLOBALS['Overrides']['Title'] != "") {
		$title = $GLOBALS['Overrides']['Title'];
	} else {
		$title = "Interleave:: ";
	}
	print "<title>" . $title . "" . htme($GLOBALS['title']) . "</title>";
	print '<meta http-equiv="refresh" content="' . $timeoutsec . ';url=\'index.php?CheckForValidSession=1\'"><link rel="shortcut icon" href="favicon.ico"><link rel="stylesheet" href="css/thickbox.css" type="text/css" media="screen">';

	PrintHeaderJavascript();
	if ($GLOBALS['Overrides']['HeaderExtras'] != "") {
		print $GLOBALS['Overrides']['HeaderExtras'];
	}
	
	DisplayCSS();
	
	print '</head>';

	$a = GetCustomTabMenuDefintitions($GLOBALS['UC']['MENUTOUSE']);

	if (CheckFunctionAccess("HideNavigationTabs") == "ok" || $_REQUEST['nonavbar'] || strstr($a['menu_type'], "Template::")) {
		$margin = "15px";
	} else {
		$margin = "0 10px;";
	}
	print "<body ";
	if (!$_REQUEST['nonavbar'] && !$popup) {
		print "class=\"mainbody\"";
	} else {
		print "class=\"subbody\"";
	}
	// This is for the alert when leaving the edit page without saving
	if (stristr($_SERVER['PHP_SELF'],"edit.php") && !stristr($_SERVER['PHP_SELF'],"dictedit.php") && $GLOBALS['DISPLAYSAVEREMINDER'] == "Yes") {
		$body_unload .= "leave();";
	} elseif (stristr($_SERVER['PHP_SELF'],"flextable.php") && is_numeric($_REQUEST['EditRecord'])  && $GLOBALS['DISPLAYSAVEREMINDER'] == "Yes") {
		$body_unload .= "leave();";
	}
	//qlog(INFO, CheckEntityAccess($_REQUEST['e']) . " --> " . $_REQUEST['e'] . " --> " . $GLOBALS['EnableEntityLocking']);
	if ((stristr($_SERVER['PHP_SELF'],"edit.php") || stristr($_SERVER['PHP_SELF'],"cust_insert.php")) && $GLOBALS['EnableEntityLocking']=="Yes" && !stristr($_SERVER['PHP_SELF'],"dictedit.php") && !$_REQUEST['SendEmailToOtherUsers']) {
		if (is_numeric($_REQUEST['e']) && CheckEntityAccess($_REQUEST['e']) == "ok" && !IsLocked($_REQUEST['e'])) {
			qlog(INFO, "Setting exclusive lock lost message to " . $GLOBALS['ENTITYLOCKTIMEOUT'] . " seconds");
			$body_onload .= "setTimeout('LockWarning()', " . trim($GLOBALS['ENTITYLOCKTIMEOUT']) . "000);";
	//		$body_onload .= "setTimeout('LockWarning()', 360);";
			$body_unload .= "leaveUnlock();";
		} else {
			qlog(INFO, "NOT setting exclusive lock lost message to " . $GLOBALS['ENTITYLOCKTIMEOUT'] . " seconds (1)");
		}
	} else {
		qlog(INFO, "NOT setting exclusive lock lost message to " . $GLOBALS['ENTITYLOCKTIMEOUT'] . " seconds (2)");
	}

	if ($body_onload) {
		print " onload=\"" . $body_onload . "\" ";
	}
	if ($body_unload) {
		print " onunload=\"" . $body_unload . "\" ";
	}
	print ">";

//	print "<div>";
	print '<div class="popupmenu" id="overDiv" style="position:absolute; visibility:hidden; z-index:20000;"></div><div id="tooltipdiv"></div>';
	if (isset($_GET['SkipMainNavigation'])) {
		print '<div id="minifiedmenu" style="display: none;">';
	}
		print '<div id="navigation">';

		if (!$_REQUEST['nonavbar']) {
			if ($navtype=="NOTABS") {
				nav();
				print "<hr>";
			} else {
				if ($toptab) {
					$tab = $toptab;
				}
				require_once($GLOBALS['PATHTOINTERLEAVE'] . "create_menu.php");
			}
		}
		print "</div>"; // <!-- end DIV navigation //-->";
		
	if (isset($_GET['SkipMainNavigation'])) {
		print '</div><script type="text/javascript">hideLayer(\'MainContent\');document.documentElement.style.backgroundImage=\'none\';document.body.style.backgroundColor=\'#ffffff\';</script><div id="adminmainnavdiv" onclick="hideLayer(\'adminmainnavdiv\');showLayer(\'minifiedmenu\');showLayer(\'MainContent\');"><center>' . $GLOBALS['title'] . " :: User " . GetUserName($GLOBALS['USERID']) . "</center></div>";
	}

	print "<form id='clipboardform' method='get' action='?'><div class='showinline'><input type='hidden' name='clipboardvalue'></div></form>";

	if ($_COOKIE['disable_triggers'] == "y") {
		$GLOBALS['BODY_URGENTMESSAGE'] = "<img src='images/info.gif' alt=''>&nbsp;<span class='noway'>Triggers are disabled for this session!</span>";
	}
	if (!$_REQUEST['nonavbar'] && $GLOBALS['BODY_URGENTMESSAGE'] != "") {

		print "<div id=\"UrgentMessage\">" . ParseTemplateAll($GLOBALS['BODY_URGENTMESSAGE'], false, false, "htme") . "</div>";
	}

	print '<div id="closedItemsBar"  style="display: none;"><a href="#" class="closeEditMode">[x]</a></div><div id="editDashboardBar" style="display: none;">[edit]</div>';

	print WaitImageDiv();

	if ($GLOBALS['WRONGSERVERMESSAGE'] != "" && $GLOBALS['BASEURL'] != "" && !$nonavbar && !$_REQUEST['nonavbar']) {
		$connected_url = $_SERVER['HTTP_HOST'];

		if (preg_match("/^http(s)?:\/\/$connected_url/", $GLOBALS['BASEURL']) == false)
		{
			print "<h1 class='h1globalwarning'>" . $GLOBALS['WRONGSERVERMESSAGE'] . "</h1>";

			log_msg("ERROR: User " . $GLOBALS['USERID'] . " (" . GetUserName($GLOBALS['USERID']) . ") is using " . $GLOBALS['title'] . " by accessing " . $connected_url . " instead of " . $GLOBALS['BASEURL']);

		} else {

		}
	} 
	

	print '<script type="text/javascript">var interval = 60000;CheckMessages(interval);//--></script>';
	
	print '<div id="MainContent">';
}
function ShowDashboard() {
	if (is_numeric($GLOBALS['UC']['DASHBOARDTEMPLATE'])) {
		$template = GetTemplate($GLOBALS['UC']['DASHBOARDTEMPLATE']);
	} else {
		$template = '<h1>
			@TITLE@ #CLOCK#</h1>
		<h2>
			Click &quot;edit&quot; on the top-right corner of this page to add items to your dashboard</h2>
		<div>
			#FIRSTBOOT#
			<div class="draggable hideable" id="TodaysEntities">
				#TODAY#</div>
			<div class="draggable hideable" id="calendar">
				#CALENDAR#</div>
			<div class="draggable hideable" id="RecentlyAccessEntities">
				#RECENT#</div>
			<div class="draggable hideable" id="PersonalStatistics">
				#PERSSTATS#</div>
			<div class="draggable hideable" id="InternalMessages">
				#MESSAGES#</div>
			<div class="draggable hideable" id="EntityAndCustomerSearch">
				#ENTITYSEARCH#<br>
				#CUSTOMERSEARCH#</div>
			<div class="draggable hideable" id="RepositorySwitcherAndNavigation">
				#REPOS#<br>
				<br>
				#NAV#</div>
			<div class="draggable hideable" id="DashboardOptions">
				#DASHBOARDOPTIONS#</div>
			<div>
				<a href="admin.php?templates=1&amp;nav=dashtemplates&amp;t1=dash">Edit this dashboard template</a></div>
		</div>';
	}
	
	$template = ReturnTemplateStyleSheet($GLOBALS['UC']['DASHBOARDTEMPLATE']) . $template;
	
	$template = ParseTemplateDashboard($template);
	$template = EvaluateTemplatePHP($template);

	print html_compress($template);
}

function SetAttribute($item, $attr, $val, $record, $allowedoptions=false) {

//	print "SetAttribute($item, $attr, $val, $record, $allowedoptions=false)";
	if (is_array($val)) {
		$val = serialize($val);
	}
	$attr = trim($attr);
	$val = trim($val);

	// Some checks
	if ($attr == "DateFormat") {
		if ($item == "user") {
				ExpireFormCache("%", "Date format preference change", "all", $record);
		} elseif ($item == "group") {
			foreach (GetUsersOfGroup($record) AS $id) {
				ExpireFormCache("%", "Date format preference change", "all", $record);
			}
		}
	}

	//print "<h1>SetAttribute($item, $attr, $val, $record, $allowedoptions)</h1>";

	if (is_numeric($record) && trim($val) != "" && trim($attr) != "") {
		$av_ins1 = ",allowed_values";
		if (is_array($allowedoptions)) {
			$av_ins2 = ",'". mres(serialize($allowedoptions)) . "'";
		} else {
			$av_ins2 = ",'". mres(serialize(GetAttributeAllowedOptions($item, $attr))) . "'";
		}
		
		$cur = GetAttribute($item, $attr, $record);

		mcq("REPLACE INTO " .  $GLOBALS['TBL_PREFIX'] . "attributes (entity, attribute, identifier, value" . $av_ins1 . ") VALUES('" . $record . "','" . mres($attr) . "','" . mres($item) . "','" . mres($val) . "'" . $av_ins2 . ")", $db);
		
		if ($attr != "LastActivity") {
			if (is_array($cur)) $cur = serialize($cur);
			DataJournal($record, $attr . ":" . $item . ":" . $cur, $attr . ":" . $item . ":" . $val, "attributes");
		}

	} elseif (is_numeric($record) && trim($val) == "") {

		mcq("DELETE FROM " .  $GLOBALS['TBL_PREFIX'] . "attributes WHERE attribute='" . mres($attr) . "' AND entity='" . $record . "' AND identifier='" . mres($item) . "'", $db);
	}
}

function GetAttribute($item, $attr, $record) {
	//print "<h2>GetAttribute($item, $attr, $record)</h2>";
	if (is_numeric($record)) {
		if ($attr == "%") {
			$ret = array();
			$t = db_GetArray("SELECT attribute, value FROM " .  $GLOBALS['TBL_PREFIX'] . "attributes WHERE entity='" . $record . "' AND identifier='" . mres($item) . "'");
			foreach ($t AS $u) {
				$ret[$u['attribute']] = $u['value'];
			}
			ksort($ret);
			return($ret);
		} else {
			if ($GLOBALS['AttributeArray'][$attr][$item][$record] != "") {
				//print "<h1>ATTRIBUTE CACHE KICKIN</h1>";
				return($GLOBALS['AttributeArray'][$attr][$item][$record]);
			}
			$t = db_GetValue("SELECT value FROM " .  $GLOBALS['TBL_PREFIX'] . "attributes WHERE attribute='" . mres($attr) . "' AND entity='" . $record . "' AND identifier='" . mres($item) . "'");
			
			if (unserialize($t)) {
				$GLOBALS['AttributeArray'][$attr][$item][$record] = unserialize($t);
				return(unserialize($t));
			} elseif (strtolower($t) == "a:0:{}") {
				return(array());
			} elseif (strtolower($t) == "{{none}}") {
				return(false);
			} else {
				$GLOBALS['AttributeArray'][$attr][$item][$record] = $t;
				return($t);
			}
		}
	}
}
function GetAttributeAllowedOptions($item, $attr) {
	$sql = "SELECT allowed_values FROM " .  $GLOBALS['TBL_PREFIX'] . "attributes WHERE attribute='" . mres($attr) . "' AND identifier='" . mres($item) . "' AND allowed_values != '' ORDER BY timestamp_last_change DESC ";
	$t = db_GetValue($sql);
	if (unserialize($t)) {
		return(unserialize($t));
	} elseif (strtolower($t) == "a:0:{}") {
		return(false);
	} else {
		return(false);
	}
}
function GetMissingAttributes($item, $record) {
	$ret = db_GetFlatArray("SELECT DISTINCT(attribute) FROM " .  $GLOBALS['TBL_PREFIX'] . "attributes WHERE identifier='" . mres($item) . "' AND entity != '" . $record . "' AND attribute NOT LIKE 'SaveAction%' AND attribute NOT LIKE 'SaveComments%'");
	sort($ret);
	return($ret);
}
function AttributeLink($item, $record, $linktext="Attributes", $opendirect) {
	return("<a class=\"attributelink\" href=\"javascript:PopEditAttributesWindow('" . $item . "', " . $record . ",'" . addslashes($opendirect) . "');\">" . $linktext . "</a>");
}
function ShowDiary($eid) {
	global $lang;
	// Function to refresh this element
	$field = $_REQUEST['field'];
	if (is_numeric($field)) {
		$func = "refresh_" . $_REQUEST['AjaxHandler'] . "()";

		$tt = GetExtraFieldTableType($field);

		if ($tt == "entity") {
			$acc = CheckEntityAccess($eid);
			$val = GetExtraFieldValue($eid, $field, false, true, false);
			$cl = GetClearanceLevel();
			if (in_array("CommentsAdd", $cl) && $acc == "readonly") {
					// all ok, this user is a "limited user"
					$acc = "ok";
			}
			$table = "entity";
			$id = "eid";
		} elseif ($tt == "customer") {
			$acc = CheckCustomerAccess($eid);
			$val = GetExtraCustomerFieldValue($eid, $field, false, true, false);
			$table = "customer";
			$id = "id";
		} elseif ($tt == "loginusers") {
			if (CheckFunctionAccess("UserAdmin") <> "ok" && !is_administrator()) {
				$accesstype = "nok"; 
			} else {
				$accesstype = "ok";
			}
			$val = GetExtraFieldValue($eid, $field, false, true, false);
			$table = "loginusers";
			$id = "id";
		} elseif ($tt == "userprofiles") {
			if (CheckFunctionAccess("UserAdmin") <> "ok" && !is_administrator()) {
				$accesstype = "nok"; 
			} else {
				$accesstype = "ok";
			}
			$val = GetExtraFieldValue($eid, $field, false, true, false);
			$table = "userprofiles";
			$id = "id";

		} elseif (is_numeric($tt)) {
			$acc = CheckFlexTableAccess($tt);
			if ($acc == "ok" || $acc == "readonly") {
				$acc = CheckFlextableRecordAccess($tt, $eid);
				$val = GetExtraFieldValue($eid, $field, false, true, false);
			}
			$table = "flextable" . $tt;
			$id = "recordid";
		} else {
			$acc = "nok";
		}

		$val = array_reverse(unserialize($val));
		
		if ((CheckFunctionAccess("AllowedToAlterDiaryContents") == "ok")  || (is_administrator())) {
			if ($_REQUEST['DeleteDiaryComment'] != "" && $_REQUEST['DiaryField'] == $field) {
				for ($i=0;$i<sizeof($val);$i++) {
					$row = $val[$i];
					//print "Check " . md5($row[0] . $row[1] . $row[2]) . " == " . $_REQUEST['DeleteDiaryComment'];
					if (md5($row[0] . $row[1] . $row[2]) == $_REQUEST['DeleteDiaryComment']) {
						$line = $row[2];
						unset($val[$i]);
					}
				}
				$sql = "UPDATE " . $GLOBALS['TBL_PREFIX'] . $table . " SET EFID" . $field . "='" . mres(serialize(array_reverse($val))) . "' WHERE " . $id . "='" . mres($eid) . "'";
				mcq($sql, $db);
				journal($eid, "A record was deleted from diary field " . GetExtraFieldName($field), $table);
				DataJournal($eid, $line, "{{deleted}}", $field);
			}
		}
		
		print '<div class="diarycontainer">';
		print "<table class=\"diarytable\">";
		if ($acc == "nok") {
			PrintAD("Access to record denied");
		} else {
			
			$rowcolor = 1;
			if (count($val) % 2) {//not even
				$rowcolor = 2;
			}
			
			foreach ($val AS $row) {
				if ($row[2]) {
					$date = TransformDate(date("d-m-Y", $row[0]));
					$date .= " " . date("H:i", $row[0]);

					print "<tr class=\"diaryrowcolor" . $rowcolor . "\"><td class=\"diarycell diaryname\">" . GetUserName($row[1]) . "</td><td class=\"diarycell diarydatetime\">" . $date . "</td><td class=\"diarycellcontent\">" . nl2br(htme($row[2])) . "</td>";

					if ((CheckFunctionAccess("AllowedToAlterDiaryContents") == "ok")  || (is_administrator())) {
						$commenthash = md5($row[0] . $row[1] . $row[2]);

						//$onclick_ins = "document.getElementById('JS_EFID" . $field . "').value=Base64.decode('" . base64_encode($row[2]) . "');";

						print "<td class=\"diarycelldelete\">";
						print "<a onclick=\"" . $onclick_ins  . " if (confirm('" . $lang["pbdelconf"] . "')){refresh_" . $_REQUEST['AjaxHandler'] . "('DeleteDiaryComment=" . $commenthash . "&DiaryField=" . $field . "');}\"><img src='images/deletes.gif'></a>";
						print "&nbsp;";
						print '<a onclick="document.getElementById(\'JS_EDITDIARY_EFID' . $field . '\').value = \'' . $commenthash . '\'; document.getElementById(\'JS_EDITDIARYHEADER_EFID' . $field . '\').innerHTML = \'' . GetUserName($row[1]) . ' ' . $date . '\'; document.getElementById(\'JS_EFID' . $field . '\').value=Base64.decode(\'' . base64_encode($row[2]) . '\');"><img src="images/edit.png" alt="Edit this diary entry" title="Edit this diary remark"></a>';
						print "</td>";
					}
					print "</tr>";
					
					if ($rowcolor == 1) {
						$rowcolor = 2;
					} else {
						$rowcolor = 1;
					}
				}
			}
		
		}
		print "</table>";
		print '</div>';
	}
}
function IsValidEntityField($name) {
	$name = trim(str_replace($GLOBALS['TBL_PREFIX']. "entity.", "", $name));
	if ($name == "") return(false);
	$tmp = db_GetArray("SHOW FIELDS FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE Field='" . mres($name) . "'");
	if ($tmp[0]['Field'] == $name) {
		return(true);
	} else {
		return(false);
	}
}
function IsValidCustomerField($name) {
	$name = trim(str_replace($GLOBALS['TBL_PREFIX']. "customer.", "", $name));
	if ($name == "") return(false);
	$tmp = db_GetArray("SHOW FIELDS FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE Field='" . mres($name) . "'");
	if ($tmp[0]['Field'] == $name) {
		return(true);
	} else {
		return(false);
	}
}
function IsValidFlextableField($name, $table) {
	$name = trim(str_replace($GLOBALS['TBL_PREFIX']. "flextable" . $table . ".", "", $name));
	if ($name == "") return(false);
	$tmp = db_GetArray("SHOW FIELDS FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . " WHERE Field='" . mres($name) . "'");
	if ($tmp[0]['Field'] == $name) {
		return(true);
	} else {
		return(false);
	}
}
function ConvertDDEFToENUM($fieldnum=false) {

	// This function "walks" through all extra fields of type "drop-down" and alters
	// the database field type to an ENUM with all options from the database PLUS all
	// options found in the extra field definition PLUS '' (nothing)

	// Er mag alleen een alter table gedaan worden als de options ENUM list niet gelijk is aan de options list in de EF

	$efs = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype='drop-down' AND deleted='n' AND options NOT LIKE '%POPULATE_BY_CODE%'");
	foreach ($efs AS $ef) {

		if ($ef['id'] == $fieldnum || $fieldnum == false) {
		
//			print "CONVERT " . $ef['id'] . " <br>";
		

			if ($ef['tabletype'] == "entity") {
				$table = $GLOBALS['TBL_PREFIX'] . "entity";
			} elseif ($ef['tabletype'] == "customer") {
				$table = $GLOBALS['TBL_PREFIX'] . "customer";
			} elseif (is_numeric($ef['tabletype'])) {
				$table = $GLOBALS['TBL_PREFIX'] . "flextable" . $ef['tabletype'];
			} elseif ($ef['tabletype'] == "group") {
				$table = $GLOBALS['TBL_PREFIX'] . "userprofiles";
			} elseif ($ef['tabletype'] == "user") {
				$table = $GLOBALS['TBL_PREFIX'] . "loginusers";
			}
			
			$fielddef = db_GetArray("SHOW COLUMNS FROM " . $table . " WHERE FIELD='EFID" . $ef['id'] . "'");
			$fielddef_type = $fielddef['Type'];

			
			$optionslist1 = unserialize($ef['options']);
			$in_q = " WHERE EFID" . $ef['id'] . " != '' AND EFID" . $ef['id'] . " NOT IN(";
			$nf = false;
			foreach ($optionslist1 AS $option) {
				if ($nf) $in_q .= ",";
				$in_q .= "'" . mres($option) . "'";
				$nf = true;
				$options_found = true;
			}
			$in_q .= ")";
			$optionslist2 = db_GetFlatArray("SELECT DISTINCT(EFID" . $ef['id']. ") FROM " . $table . " " . $in_q);

			foreach ($optionslist1 AS $option) {
				if (!in_array($option, $optionslist2) && trim($option) != "") {
					$optionslist2[] = $option;
				}
			}

			$nf = false;
			$query = "ALTER TABLE " . $table . " CHANGE `EFID" . $ef['id'] . "` `EFID" . $ef['id'] . "` ENUM('',";
			foreach ($optionslist2 AS $option) {
				if ($nf) $query .= ",";
				$query .= "'" . mres($option). "'";
				$nf = true;
			}

			$query .= ") NOT NULL";
			if ($options_found) {
				mcq($query, $db);
				//print $query . "<br>";
			} else {
				log_msg("WARNING: Tried to convert EFID" . $ef['id'] . " to ENUM but no options were found in field definition!");
			}
		} 
	}
}

function RebuildViews() {
	$tmp = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs");
	foreach ($tmp AS $row) {
		$is_view = GetAttribute("flextable", "ViewOnTable", $row['recordid']);
		if ($is_view) {
			mcq("DROP VIEW " . $GLOBALS['TBL_PREFIX'] . "flextable" . $row['recordid'] . "", $db);
			$ViewOnTableSelectCondition = GetAttribute("flextable", "ViewOnTableSelectCondition", $row['recordid']);
			if ($ViewOnTableSelectCondition != "" && $ViewOnTableSelectCondition != "{{none}}") {
				$extra = " WHERE " . $ViewOnTableSelectCondition;
			} else {
				$extra = "";
			}
			mcq("CREATE VIEW " . $GLOBALS['TBL_PREFIX'] . "flextable" . $row['recordid'] . " AS SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . mres($is_view) . $extra, $db);
		}
	}
}

function FindAndRecalculateAllRelatedRecords($record, $table) {

	// FindAndRecalculateAllRelatedRecordsWorker returns the number of tables affected. 
	// We're running the calculation again for each tables because these
	// tables can all have references to each other (minus 1, because we already ran it once)
	
	$cron_status = $GLOBALS['CRON_RUNNING'];
	$GLOBALS['CRON_RUNNING'] = true; // make sure this runs with elevated rights!
	
	$GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] = date('r') . "\n";

	// The maximum number of hops
	$maxdepth = 20; 

	$changed = 1;
	$i = 0;
	$log = "";

	while ($changed > 0) {
		

		$changed = FindAndRecalculateAllRelatedRecordsWorker($record, $table, false);
		$log .= "FindAndRecalculateAllRelatedRecordsWorker for record " . $record . " of table " . $table . "<br>";
		if ($i == $maxdepth) {
			log_msg("ERROR: FindAndRecalculateAllRelatedRecordsWorker iterations cancelled; too many hops (" . $maxdepth . "). If you see this message, you probably have a computed field which always returns a different value each time it is recalculated causing the calculator to keep recalculating it. Please find and fix this computation. Log:<br>" . $log . "<br>Trace:<pre>" . $GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory'] . "</pre>");
			$changed = 0;
		}
		$i++;
	}

	$GLOBALS['CRON_RUNNING'] = $cron_status;
	unset($GLOBALS['FindAndRecalculateAllRelatedRecordsWorkerHistory']);

}
function FindAndRecalculateAllRelatedRecordsWorker($record, $table, $tables_to_skip=false) {
	// print "RECALC record $record of table $table <br>";
	qlog(INFO, "Recalculate $record table $table");
	if ($record == "" || $record == 0) {
		return(false);
	}
	if (is_numeric($table) && GetAttribute("flextable", "ViewOnTable", $table) != "") {
		// Don't recalculate views
		qlog(INFO, "Recalculate : this is a view, quit");
		return(false);
	}

	if (is_numeric($table) && GetAttribute("flextable", "DontRecalculateConnectedTablesOnRecalc", $table) == "Yes") {
		$dont_iterate = true;
	}

	if (!is_array($tables_to_skip)) {
		$tables_to_skip = array();
	}
	if (in_array($table, $tables_to_skip)) {
		// print "SKIP $table\n";
		// Do nothing!
	} else {
		
		$totskip = 1;

		// just to be sure, rip "flextable" off if it's there
		$table = str_replace("flextable", "", $table); 

		// Make sure this table is processed only once
		$tables_to_skip[] = $table;
		ExpireFormCache($record, "Recalculation of computed fields", $table);
		if (is_numeric($table)) {
			ExpireFormCache($_REQUEST['recordid'], "Recalculation of computed fields", $table . "ref");
		}


		if ($table == "entity") {

			ClearAccessCache($record, "e", "all");

			$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE eid=" . $record);

			foreach (GetExtraFields() AS $field) {
				if ($field['fieldtype'] == "Reference to FlexTable" && is_numeric($row['EFID' . $field['id']])) {
					$total_changed += FindAndRecalculateAllRelatedRecordsWorker($row['EFID' . $field['id']], $field['options'], $tables_to_skip);
				}
			}
			foreach (GetFlexTableDefinitions(false, "one_entity_to_many") AS $ft) {
				if ($ft['refers_to'] == "entity") {
					foreach (db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid'] . " WHERE refer=" . $record) AS $flexrec) {
						if (GetAttribute("flextable", "DontRecalculateOnRecalcOfParent", $ft['recordid']) != "Yes") {
							$total_changed += FindAndRecalculateAllRelatedRecordsWorker($flexrec, $ft['recordid'], $tables_to_skip);
						}
					}
				}
			}
				
			if (IsValidCID($row['CRMcustomer']) && !in_array("customer", $tables_to_skip)) {
				$total_changed += FindAndRecalculateAllRelatedRecordsWorker($row['CRMcustomer'], "customer", $tables_to_skip);
			}

			$total_changed += CalculateComputedExtraFields($record);

		} elseif ($table == "customer") {

			ClearAccessCache($record, "c", "all");

			$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id=" . $record);

			foreach (GetExtraCustomerFields() AS $field) {
				if ($field['fieldtype'] == "Reference to FlexTable" && is_numeric($row['EFID' . $field['id']])) {
					$total_changed += FindAndRecalculateAllRelatedRecordsWorker($row['EFID' . $field['id']], $field['options'], $tables_to_skip);
				}
			}
			foreach (GetFlexTableDefinitions(false, "one_entity_to_many") AS $ft) {
				if ($ft['refers_to'] == "customer") {
					foreach (db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid'] . " WHERE refer=" . $record) AS $flexrec) {
						if (GetAttribute("flextable", "DontRecalculateOnRecalcOfParent", $ft['recordid']) != "Yes") {
							$total_changed += FindAndRecalculateAllRelatedRecordsWorker($flexrec, $ft['recordid'], $tables_to_skip);
						}
					}
				}
			}
			if (!in_array("entity", $tables_to_skip)) { // not nescessary but faster
				foreach (db_GetFlatArray("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity WHERE CRMcustomer=" . $record) AS $eid) {
					$total_changed += FindAndRecalculateAllRelatedRecordsWorker($eid, "entity", $tables_to_skip);
				}
			}
			$total_changed += CalculateComputedExtraCustomerFields($record);
		} elseif (is_numeric($table)) { 
			
			ClearAccessCache($record, "ft" . $table, "all");

			$row = db_GetRow("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table . " WHERE recordid=" . $record);


			if (!$dont_iterate) {

				foreach (GetExtraFlexTableFields($table) AS $field) {
					if ($field['fieldtype'] == "Reference to FlexTable" && is_numeric($row['EFID' . $field['id']])) {
						$total_changed += FindAndRecalculateAllRelatedRecordsWorker($row['EFID' . $field['id']], $field['options'], $tables_to_skip);
					}
				}
				foreach (GetFlexTableDefinitions(false, "one_entity_to_many") AS $ft) {
					if ($ft['refers_to'] == "flextable" . $table) {
						foreach (db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft['recordid'] . " WHERE refer=" . $record) AS $flexrec) {
							if (GetAttribute("flextable", "DontRecalculateOnRecalcOfParent", $ft['recordid']) != "Yes") {
								$total_changed += FindAndRecalculateAllRelatedRecordsWorker($flexrec, $ft['recordid'], $tables_to_skip);
							}
						}
					}
				}
				
				$me = GetFlexTableDefinitions($table);
				
				if ($me[0]['refers_to'] == "entity" && $me[0]['orientation'] == "one_entity_to_many") {
					$total_changed += FindAndRecalculateAllRelatedRecordsWorker($row['refer'], "entity", $tables_to_skip);	
				} elseif ($me[0]['refers_to'] == "customer" && $me[0]['orientation'] == "one_entity_to_many") {
					$total_changed += FindAndRecalculateAllRelatedRecordsWorker($row['refer'], "customer", $tables_to_skip);	
				} elseif (strstr($me[0]['refers_to'], "flextable") && $me[0]['orientation'] == "one_entity_to_many") {
					$total_changed += FindAndRecalculateAllRelatedRecordsWorker($row['refer'], str_replace("flextable", "", $me[0]['refers_to']), $tables_to_skip);	
				} elseif ($me[0]['orientation'] == "many_entities_to_one") {
					$referringfields = db_GetArray("SELECT id, tabletype FROM  " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE deleted='n' AND options='" . $table . "' AND fieldtype='Reference to FlexTable'");
					foreach ($referringfields AS $reffield) {
						if (!in_array($reffield['tabletype'], $tables_to_skip)) { // not nescessary but faster
							if ($reffield['tabletype'] == "entity") {
								$id = "eid";
								$dbtable = $GLOBALS['TBL_PREFIX'] . "entity";
								$add = "";
							} elseif ($reffield['tabletype'] == "customer") {
								$id = "id";
								$dbtable = $GLOBALS['TBL_PREFIX'] . "customer";
								$add = "";
							} else {
								$id = "recordid";
								$dbtable = $GLOBALS['TBL_PREFIX'] . "flextable" . $reffield['tabletype'];
								$add =  "AND deleted='n'";
							}
							$list = db_GetFlatArray("SELECT " . $id . " FROM " . $dbtable . " WHERE EFID" . $reffield['id'] . " ='" . $record . "' " . $add);
							foreach ($list AS $rec) {
								if (GetAttribute("flextable", "DontRecalculateOnRecalcOfParent", $reffield['tabletype']) != "Yes") {
									$total_changed += FindAndRecalculateAllRelatedRecordsWorker($rec, $reffield['tabletype'], $tables_to_skip);
								}
							}
						}
					}
				} 
			}
		
			if (!HasComputedFields($table)) {
				qlog(INFO, "Recalculate : table $table has no computed fields, quit");
			} else {
				$total_changed += CalculateComputedExtraFields($record, $table);
			}

		} else {
			// Unknown!
			qlog(ERROR, "FindAndRecalculateAllRelatedRecordsWorker called with unknown table name/type: " . $table);
		}
		
		return($total_changed);
	}
}

function ShowAdvancedQueryInterface($scope="user", $list_id="SavedEntityListSelections") {
	global $lang;
	


	if ($scope == "system") {
		$scope_text = "system-wide";
		$attr_id = 1;
		if (is_administrator() || CheckFunctionAccess("AllowedToEditSystemWideSelections") == "ok") {
			// All OK	
		} else {
			PrintAD("Access denied");
			EndHTML();
			exit;
		}
	} else {
		$scope_text = "user";
		$scope = "user";
		$attr_id = $GLOBALS['USERID'];
	}
	$DirectSQLQueries = GetAttribute($scope, $list_id, $attr_id);

	if (!is_array($DirectSQLQueries)) $DirectSQLQueries = array();
	
	if ($_REQUEST['SaveDirectSQLQuery']==1) {

		SafeModeInterruptCheck();

		if ($_REQUEST['GetDirectSQLQuery'] != "") {
			$DirectSQLQueries[$_REQUEST['GetDirectSQLQuery']]['selectionDescription'] = $_REQUEST['dSQL_description'];
			$DirectSQLQueries[$_REQUEST['GetDirectSQLQuery']][0]['selectField'] = $_REQUEST['dSQL_query'];
			$DirectSQLQueries[$_REQUEST['GetDirectSQLQuery']][0]['logicalOperator'] = "SQL-QUERY";

		} else {
			$DirectSQLQueries[$_REQUEST['dSQL_name']]['selectionDescription'] = $_REQUEST['dSQL_description'];
			$DirectSQLQueries[$_REQUEST['dSQL_name']][0]['selectField'] = $_REQUEST['dSQL_query'];
			$DirectSQLQueries[$_REQUEST['dSQL_name']][0]['logicalOperator'] = "SQL-QUERY";
		}
		unset($_REQUEST['DirectSQL']);
		SetAttribute($scope, $list_id, serialize($DirectSQLQueries), $attr_id);
	}

	if (isset($_REQUEST['DirectSQL'])) {

		SafeModeInterruptCheck();
		
		if ($_REQUEST['GetDirectSQLQuery'] != "" && is_array($DirectSQLQueries[$_REQUEST['GetDirectSQLQuery']])) {

			$desc = $DirectSQLQueries[$_REQUEST['GetDirectSQLQuery']]['selectionDescription'];
			$query = $DirectSQLQueries[$_REQUEST['GetDirectSQLQuery']][0]['selectField'];


	
		} else {
			
		}
		print "<form name=\"directSQLinputForm\" method=\"post\" action=\"\">";
		print "<input type=\"hidden\" name=\"GetDirectSQLQuery\" value=\"" . htme($_REQUEST['GetDirectSQLQuery']) . "\">";
		print "<input type=\"hidden\" name=\"SaveDirectSQLQuery\" value=\"1\">";
		print "<table>";
		if ($_REQUEST['GetDirectSQLQuery'] == "") {
			print "<tr><td>Section name</td><td><input type=\"text\" size=\"50\" name=\"dSQL_name\" value=\"" . htme($name) . "\"></td></tr>";
		} else {
			print "<tr><td>Section name</td><td>" . htme($_REQUEST['GetDirectSQLQuery']) . "</td></tr>";
		}
		print "<tr><td>Description</td><td><input type=\"text\" size=\"50\" name=\"dSQL_description\" value=\"" . htme($desc) . "\"></td></tr>";
		print "<tr><td colspan=\"2\">SQL:<br><textarea name=\"dSQL_query\" id=\"dSQL_query\" rows=\"10\" cols=\"50\">" . htme($query) . "</textarea>";
		print "</td></tr>";
		print "<tr><td colspan=\"2\"><i>You can use tags and php in your query. Your query <b>must</b> start width 'SELECT' and when selecting from flextables you must use at least the following selects:<br><br>SELECT *,CRMflextable3.recordid AS BASE_RECORD, CRMflextable3.refer AS BASE_REFER, CRMflextable3.readonly AS BASE_READONLY, CRMflextable3.timestamp_last_change AS BASE_TIMESTAMP_LAST_CHANGE FROM CRMflextable (etc).</i><br><br><input type=\"submit\" name=\"dSQL_Save\" value=\"Save\">";
		print "</td></tr>";
		print "</form>";
		
		
	} else {

		if ($list_id == "SavedEntityListSelections" || $list_id == "") {
			
			$tmp = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs WHERE refers_to = 'entity'");
			$q_tables = " AND tabletype IN ('entity','customer'";
			foreach ($tmp AS $table) {
				$q_tables .= ",'" . $table['recordid'] . "'";
			}
			$q_tables .= ")";

			$list_id = "SavedEntityListSelections";
			$deffields = explode(" ", "E:category E:status E:priority E:duedate E:startdate E:creationdate E:owner E:assignee E:deleted C:custname C:contact C:contact_title C:contact_phone C:contact_email C:cust_address C:cust_remarks C:cust_homepage C:active");
			
			$extrafields = db_GetArray("SELECT id, name, tabletype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype IN ('textbox', 'drop-down', 'checkbox', 'numeric', 'mail', 'text area', 'text area (rich text)', 'Computation', 	'hyperlink', 'date') AND underwaterfield='n' " . $q_tables . " AND deleted='n' ORDER BY FIELD(tabletype, 'entity', 'customer'), tabletype");

			$hyperlink = "index.php?ShowEntityList";
		
			$tabletype = "entity";
			$tableref = "entity";
		} elseif ($list_id == "SavedCustomerListSelections") {

			$tmp = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs WHERE refers_to = 'customer'");
			$q_tables = " AND tabletype IN ('customer'";
			foreach ($tmp AS $table) {
				$q_tables .= ",'" . $table['recordid'] . "'";
			}
			$q_tables .= ")";

			$deffields = explode(" ", "C:custname C:contact C:contact_title C:contact_phone C:contact_email C:cust_address C:cust_remarks C:cust_homepage C:active C:customer_owner");

			$extrafields = db_GetArray("SELECT id, name, tabletype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype IN ('textbox', 'drop-down', 'checkbox', 'numeric', 'mail', 'text area', 'text area (rich text)', 'Computation', 'hyperlink', 'date') AND underwaterfield='n' " . $q_tables . " AND deleted='n' ORDER BY tabletype, name");

			$hyperlink = "index.php?ShowCustomerList";

			$tabletype = "customer";
			$tableref = "customer";

		} elseif (substr($list_id,0,24) == "SavedSelectionsFlextable") {
			
			$deffields = array();
			
			$ft = str_replace("SavedSelectionsFlextable", "", $list_id);


			$tmp = db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs WHERE refers_to = 'flextable" . $ft . "'");
			$q_tables = " AND tabletype IN ('" . $ft . "'";
			foreach ($tmp AS $table) {
				$q_tables .= ",'" . $table['recordid'] . "'";
			}
			

			$ftdef = GetFlexTableDefinitions($ft);
			if ($ftdef[0]['refers_to'] == "customer") {
				$q_tables .= ",'customer'";
				$deffields = explode(" ", "C:custname C:contact C:contact_title C:contact_phone C:contact_email C:cust_address C:cust_remarks C:cust_homepage C:active C:customer_owner");
			}
			if ($ftdef[0]['refers_to'] == "entity") {
				$q_tables .= ",'entity'";
				$deffields = explode(" ", "E:category E:status E:priority E:duedate E:startdate E:creationdate E:owner E:assignee E:deleted C:custname C:contact C:contact_title C:contact_phone C:contact_email C:cust_address C:cust_remarks C:cust_homepage C:active C:customer_owner");
			}
			$q_tables .= ")";
			
			$totalsql = "SELECT id, name, tabletype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE fieldtype IN ('textbox', 'drop-down', 'checkbox', 'numeric', 'mail', 'text area', 'text area (rich text)', 'Computation', 	'hyperlink', 'date') AND underwaterfield='n' " . $q_tables . " AND deleted='n' ORDER BY tabletype DESC, name";

			$extrafields = db_GetArray($totalsql);

			$hyperlink = "flextable.php?ShowTable=" . $ft;

			$columnselector_ins = "&flextable=" . $ft;
			$columns_id = "FlexTableColumns FT" . $ft;

			$tabletype = "flextable";

			$flextable = $ft;

			$tableref = $ft;



		}



		if (CheckFunctionAccess("AddEditSelections") == "ok" || is_administrator()) {


			$ret = "<table width='100%'><tr><td width=\"50%\"><form name='QueryInterface' method='post' action='' onsubmit='return(false);'>";
			
			// Create memory object if we don't have one
			if ($_POST['loadSelection']) {
				$tmp = GetAttribute($scope, $list_id, $attr_id);
				$me = $tmp[$_POST['loadSelection']];
				$AQIstash = PushStashValue($me);
				$selectionName = $_POST['loadSelection'] ;
				$selectionDescription = $me['selectionDescription'];

			} elseif (!$_POST['AQIstash']) {
				$me = array();
				$AQIstash = PushStashValue($me);
			} else {
				$AQIstash = $_POST['AQIstash'];
				$me = PopStashValue($AQIstash);
				$selectionDescription = $me['selectionDescription'];
				$existing = true;
			}

			if ($_POST['selectionName'] && !$_POST['loadSelection']) {
				$selectionName = $_POST['selectionName'];
			}

			if ($_POST['selectionDescription'] && !$_POST['loadSelection']) {
				$selectionDescription = $_POST['selectionDescription'];
			}
			

			if ($_POST['delElement'] != "") {
				unset($me[$_POST['delElement']]);
				UpdateStashValue($AQIstash, $me);
			}

			if ($selectionDescription == "a") $selectionDescription = "";
			
			// Refresh function
			$func1 = "refresh_" . $_POST['AjaxHandler'] . "('AQIstash=" . $AQIstash . "&ListId=" . $list_id;
			if ($selectionName != "") {
				$func1 .= "&selectionName=" . jsencode($selectionName);
			}
			if ($_REQUEST['ParentEntityListAjaxHandler']!= "") {
				$func1 .= "&ParentEntityListAjaxHandler=" . $_REQUEST['ParentEntityListAjaxHandler'];
			}
			
			$func2 = "&SaveDirectSQLQuery=2');";
			//	print "<pre>";
			//	print_r($_REQUEST);
			//	print_r($me);
			if (!is_array($me)) $me = array();

			if ($_POST['selectOptions'] && isset($_POST['selectMustContain'])) {
				if (CheckExtraFieldAccess($_POST['selectOptions']) != "nok") {
					array_push($me, array("selectField" => $_POST['selectOptions'], "mustContain" => $_POST['selectMustContain'], "mustHaveExactValue" => $_POST['mustHave'], "logicalOperator" => $_POST['logicalOperator'])); 
					UpdateStashValue($AQIstash, $me);
				}
				unset($_POST['selectOptions']);
			}


			$tmp = GetAttribute($scope, $list_id, $attr_id);
			if ($_POST['selectionName'] && !$_POST['loadSelection']) {
				if ($_POST['selectionDescription'] != "") {
					$me['selectionDescription'] = $_POST['selectionDescription'];
				}
				$tmp[$_POST['selectionName']] = $me;


				SetAttribute($scope, $list_id, $tmp, $attr_id);
			} elseif ($_POST['deleteSavedSelection']) {
				unset($tmp[$_POST['deleteSavedSelection']]);
				SetAttribute($scope, $list_id, $tmp, $attr_id);
			}
			if ($sql = CreateQueryFromSavedSelection($me, $list_id)) {
				$list = db_GetArray($sql);
				$total = array();
				if ($tabletype == "entity") {
					foreach ($list AS $eid) {
						if (CheckEntityAccess($eid['eid']) != "nok") {
							$total[] = $eid['eid'];
						}
					}
				} elseif ($tabletype == "customer") {
					foreach ($list AS $eid) {
						if (CheckCustomerAccess($row['id']) != "nok") {
							$total[] = $row['id'];
						}
					}

				} elseif ($tabletype == "flextable") {
					foreach ($list AS $rid) {
						if (CheckFlextableRecordAccess($flextable, $rid['BASE_RECORD']) != "nok") {
							$total[] = $row['BASE_RECORD'];
						}
					}

				}

				$ret .= "Current selection returns " . count($total) . " results";
				
				if ($_POST['ParentEntityListAjaxHandler'] && $selectionName && count($total) > 0) {
					$ret .= " [<a href='#' onclick=\"parent.refresh_" . $_POST['ParentEntityListAjaxHandler'] . "('loadSavedSelection=" . htme(jsencode($selectionName)) . "')" . "\">show</a>]";
				} elseif ($_POST['ParentEntityListAjaxHandler'] && count($total) > 0) {
					$ret .= " [<a href='#' onclick=\"parent.refresh_" . $_POST['ParentEntityListAjaxHandler'] . "('&querystash=" . PushStashValue(CreateQueryFromSavedSelection($me, $list_id)) . "')\">show</a>]";
				} elseif (count($total) > 0) {
					$ret .= " [<a href='" . $hyperlink . "&querystash=" . PushStashValue(CreateQueryFromSavedSelection($me, $list_id)) . "'>show</a>]";
				}
				$ret .= ". ";
			}
			if (count($me) > 0) {	
				$ret .= "<table><tr><td>" . $lang['selectionname'] . "</td><td><input type='text' size='40' value='" . htme($selectionName) . "' onchange=\"" . $func1 . "&selectionName=' + urlencodejs(this.value) + '" . $func2 . "\"></td></tr>";
				if (is_administrator()) {
					$ret .= "<tr><td>" . $lang['selectiondesc'] . "</td><td><input type='text' size='80' value='" . htme($selectionDescription) . "' onchange=\"" . $func1 . "&selectionDescription=' + urlencodejs(this.value) + '" . $func2 . "\"></td></tr>";
				}
				$ret .= "</table>";
				$ret .= "<button>" . $lang['go'] . "</button>"; 
				$ret .= "<br><br>";
			}


			

			$nf = false;
			
			$ret_ins .= CreateVisualQueryRepresentation($me, $func1, $func2);
			if ($ret_ins != "") {
				$ret .= $ret_ins . "<br><br>";
			}





			if ($_POST['selectOptions'] == "") {
				if ($_REQUEST['selectionName'] || $_REQUEST['loadSelection'] || $_REQUEST['logicalOperator'] || $_REQUEST['selectMustContain']) {
					$ret .= $lang['addconditiontothisselection'] . ": ";
					$later_ins = " ... <a class=\"arrow\" href=\"index.php?ShowAdvancedQueryInterface&amp;Scope=" . $scope . "&amp;ParentEntityListAjaxHandler=" . $_REQUEST['ParentEntityListAjaxHandler'] . "&amp;ListId=" . $list_id . "\"> " . $lang['orcreateanewselection'] . "</a>";
				} else {
					$ret .= $lang['createanewselection'] . " (" . $scope_text . ") :";
				}


				$ret .= " <select name='selectOptions' id='JS_selectOptions' onchange=\"" . $func1 . $ins . "&selectOptions=' + urlencodejs(this.options[this.selectedIndex].value) + '" . $func2 . "\"><option value=''>Select...</option>";
				$ret .= "<option value='{{ANY}}'>{{ " . $lang['anyfield'] . " }}</option>"; 
				foreach ($deffields AS $deffield) {

					$basename = str_replace("E:" , "" , str_replace("C:", "", $deffield));

					if ($basename == "custname") {
						$name = htme($lang['customer']);
					} elseif ($basename == "cust_address") {
						$name = htme($lang['customeraddress']);
					} elseif ($basename == "customer_owner") {
						$name = htme($lang['customer'] . " " . $lang['owner']);
					} elseif ($basename == "active") {
						$name = "[active]";
					} else {
						$name = htme($lang[str_replace("_", "", $basename)]);
					}

					if (substr($deffield, 0, 2) == "E:") {
						$tablename = $lang['entity'] . ": ";
					} elseif (substr($deffield, 0, 2) == "C:") {
						$tablename = $lang['customer'] . ": ";
					} else {
						$tablename = "";
					}

					$ret .= "<option value='" . $basename . "'>" . $tablename . $name . "</option>";
				}

				

				foreach ($extrafields AS $row) {
					if (CheckExtraFieldAccess($row['id']) != "nok") {
						if (GetExtraFieldTableType($row['id']) != $ft && is_numeric(GetExtraFieldTableType($row['id']))) {
							$tmp = GetFlextableDefinitions(GetExtraFieldTableType($row['id']));
							if ($tmp[0]['orientation'] == "many_entities_to_one") {
								$field_refer = GetReferencesToTable(GetExtraFieldTableType($row['id']), $tableref);
								if (is_numeric($field_refer)) {
									$ret .= "<option value='" . $row['id'] . "'>" . GetFlextableName($row['tabletype']) . ": " . htme($row['name']) . "</option>";
								} else {
									$ret .= "<option value='" . $row['id'] . "'>" . htme($row['name']) . " NO REFER $field_refer!!!</option>";
								}
							} else {
								// many flexrecord to an entity
								// this is OK, it uses the REFER record
								$ret .= "<option value='" . $row['id'] . "'>" . GetFlextableName($row['tabletype']) . ": " . htme($row['name']) . "</option>";
							}
						} else {
							$ret .= "<option value='" . $row['id'] . "'>" . GetFlextableName($row['tabletype']) . ": " . htme($row['name']) . "</option>";
						}

						
					}
				}
				$ret .= "</select>" . "&nbsp;" . ReturnDropDownSearchField("JS_selectOptions") . " " . $later_ins;

			} elseif ($_POST['selectOptions'] && !isset($_POST['selectMustContain'])) {
							
				$field = $_POST['selectOptions'];


				if (CheckExtraFieldAccess($field) != "nok") {

					$ins = "&logicalOperator=' + urlencodejs(document.getElementById('JS_logicalOperator').options[document.getElementById('JS_logicalOperator').selectedIndex].value) + '";
					
					if (GetExtraFieldType($field) == "drop-down" || GetExtraFieldType($field) == "checkbox") {

						$onchange = $func1 . "&selectMustContain=' + urlencodejs(this.options[this.selectedIndex].value) + '&mustHave=1&logicalOperator=" . $_POST['logicalOperator'] . $ins . "&selectOptions=" . $field . $func2;
						$ret .= "<span class='blok'>" . GetExtraFieldName($field) . "</span> ";

						$ret .= "<select name='logicalOperator' id='JS_logicalOperator'><option value=''>must have value</option><option value='not'>must NOT have value</option></select>";
						if (GetExtraFieldType($field) == "checkbox") {
							$tmp = array();
							$tmp1 = db_GetRow("SELECT options, defaultval FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . $field . "'");
							foreach ($tmp1 AS $name => $option) {
								if (is_numeric($name) && $option != "") {
									$tmp[] = $option;
								}
							}
						} else {
							$tmp = GetExtraFieldOptions($field);
						}
						$ret .= "<select name='selectMustContain' id='JS_selectMustContain' onchange=\"" . $onchange . "\"><option>Select...</option>";
						$ret .= "<option value=''>[empty]</option>";
						foreach ($tmp AS $row) {
							$ret .= "<option value='" . htme($row) . "'>" . htme($row) . "</option>";
						}
						$ret .= "</select>";

					

					} elseif (GetExtraFieldType($field) == "date" || GetExtraFieldType($field) == "date/time" || (GetExtraFieldType($field) == "Computation" && GetAttribute("extrafield", "ComputationOutputType", $field) == "Date")) {

						$onchange = $func1 . "&selectMustContain=' + urlencodejs(this.value) + '&selectOptions=" . $field . $ins . $func2;
						$ret .= "<strong>" . GetExtraFieldName($field) . "</strong> ";
						$ret .= "<select name='logicalOperator' id='JS_logicalOperator'><option value=''>must be</option><";
						$ret .= "</select>";
						$ret .= "<select name='selectMustContain' id='JS_selectMustContain' onchange=\"" . $onchange . "\"><option>Select...</option>";
						$ret .= "<option value=''>[empty]</option>";
						
						foreach (CreateDateFilterOptionsList() AS $key => $df) {
							$ret .= "<option value='" . htme($key) . "'>" . htme($df) . "</option>";
						}
						$ret .= "</select>";

					} elseif (GetExtraFieldType($field) == "numeric" || GetExtraFieldType($field) == "Computation" || GetExtraFieldType($field) == "Computation (ajax autorefresh)") {

						$onchange = $func1 . "&selectMustContain=' + urlencodejs(this.value) + '&selectOptions=" . $field . $ins  . $func2;
						$ret .= "<strong>" . GetExtraFieldName($field) . "</strong> ";
						$ret .= "<select name='logicalOperator' id='JS_logicalOperator'><option value=''>must be</option><option value='not'>must NOT contain</option><option value='mustbehigher'>must be higher than</option><option value='mustbelower'>must be lower than</option></select>";
						$ret .= "<input type='text' name='selectMustContain' id='JS_selectMustContain' onchange=\"" . $onchange . "\">";

					} elseif (strstr(GetExtraFieldType($field), "User-list")) {

						$onchange = $func1 . "&selectMustContain=' + urlencodejs(this.value) + '&selectOptions=" . $field . $ins . $func2;
						if ($field == "{{ANY}}") { 
							$ret .= "<strong>" . $lang['anyfieldinthistable'] . "</strong> "; 
						} else {
							$ret .= "<strong>" . GetExtraFieldName($field) . "</strong> ";
						}
						$ret .= "<select name='logicalOperator' id='JS_logicalOperator'><option value=''>" . $lang['selectionmustcontain'] . "</option>";
						$ret .= "</select>";
						$ret .= "<select name='selectMustContain' id='JS_selectMustContain' onchange=\"" . $onchange . "\"><option>Select...</option>";
						$ret .= "<option value=''>[empty]</option>";
						
						foreach (ReturnListOfAllowedUsers(false, true, false, false) AS $user) {
							$ret .= "<option value='" . htme($user['id']) . "'>" . htme($user['FULLNAME']) . "</option>";
						}
						$ret .= "</select>";
						
					} else {

						$onchange = $func1 . "&selectMustContain=' + urlencodejs(this.value) + '&selectOptions=" . $field . $ins . $func2;
						if ($field == "{{ANY}}") { 
							$ret .= "<strong>" . $lang['anyfieldinthistable'] . "</strong> "; 
						} else {
							$ret .= "<strong>" . GetExtraFieldName($field) . "</strong> ";
						}
						$ret .= "<select name='logicalOperator' id='JS_logicalOperator'><option value=''>" . $lang['selectionmustcontain'] . "</option><option value='must be'>must be</option><option value='must not be'>must not be</option>";
						$ret .= "</select>";
						$ret .= "<input type='text' name='selectMustContain' id='JS_selectMustContain' onchange=\"" . $onchange . "\">";
					}
				}
				
			} 

			$ret .= "<button onclick=\"" . $onchange . "\">" . $lang['go'] . "</button>";
			
			$ret .= "</form>";
			$ret .= "<br><br></td></tr><tr><td>";
			$tmp = GetAttribute($scope, $list_id, $attr_id);
			

			if (count($tmp) > 0) {


				
				$lang['selectcolumns'][0] = strtoupper($lang['selectcolumns'][0]);

				$ret .= "<table class=\"crm\"><thead><tr><td>" . $lang['name'] . "</td>";
				$ret .= "<td>Link/bookmark</td>";
				if (CheckFunctionAccess("MaySelectColumns") != "nok") { // && $scope == "user"
					$ret .= "<td>" . $lang['selectcolumns'] . "</td>";
				//} elseif ($scope == "system") {
			//		$ret .= "<td>Found in templates</td>";
				} else {
					$ret .= "<td></td>";
				}
	//			if (CheckFunctionAccess("MayShareSelections") == "ok") {
	//				$ret .= "<td>Share</td>";
	//			}
				$ret .="<td>" . $lang['delete'] . "</td></tr></thead>";
			
				foreach ($tmp AS $selectionName => $selectionArray) {
					$columns = "id";


					if ($selectionArray[0]['logicalOperator'] == "SQL-QUERY") {
						$ret .= "<tr><td class=\"nowrap\"><a class=\"arrow\" id='" . htme($selectionName) . "' onclick=\"" . $func1 . "&DirectSQL=1&GetDirectSQLQuery=" . htme(jsencode($selectionName)) . $func2 . ";parent.refresh_" . $_POST['ParentEntityListAjaxHandler'] . "('loadSavedSelection=" . htme(jsencode($selectionName)) . "');\">" . htme($selectionName) . "</a></td>";
					} else {
						$ret .= "<tr><td class=\"nowrap\"><a class=\"arrow\" id='" . htme($selectionName) . "' onclick=\"" . $func1 . "&loadSelection=" . htme(jsencode($selectionName)) . $func2 . ";parent.refresh_" . $_POST['ParentEntityListAjaxHandler'] . "('loadSavedSelection=" . htme(jsencode($selectionName)) . "');\">" . htme($selectionName) . "</a></td>";
					}

					$ret .= "<td><a class=\"arrow\" target='_new' href='" . $hyperlink . "&amp;loadSavedSelection=" . (htme($selectionName)) . "'>" . $hyperlink . "&amp;loadSavedSelection=" . (htme($selectionName)) . "</a></td>";
					if (CheckFunctionAccess("MaySelectColumns") != "nok") { // && $scope == "user"
						$html_ins = "";
						if ($list_id == "SavedEntityListSelections" || $list_id == "") {
							$columns = $GLOBALS['UC']['MainListColumnsToShow'][$selectionName];
						} elseif ($list_id == "SavedCustomerListSelections") {
							$columns = $GLOBALS['UC']['CustomerListColumnsToShow'][$selectionName];
							$html_ins .= "&what=CUST";
						} elseif (substr($list_id,0,24) == "SavedSelectionsFlextable") {
							$columns = GetAttribute($scope, "FlexTableColumns FT" . $ft . " " . $selectionName, $attr_id);
						}
							
						if (is_array($columns)) {
							
							$nf = false;
							
							/*
							foreach ($GLOBALS['UC']['MainListColumnsToShow'][$selectionName] AS $col => $sel) {
								if ($col != "id") {
									if (strstr($col, "EFID")) {
										$col = GetExtraFieldName(str_replace("SUM", "", (str_replace("EFID", "", $col))));
									} else {
										$col = str_replace("cb_cust", "customer", $col);
										$col = str_replace("cb_", "", $col);
										$col = str_replace("_", "", $col);
										$col = $lang[$col];
									}
									$columns .= ", " . $col;
								}
								
							}
							*/
							$columns = $lang['set'] . ": " . count($columns) . " " . $lang['fields'];
						} else {
							$columns = $lang['notsetdefault'];
						}
						if ($scope == "system") {
							$html_ins .= "&dothis=SystemSelection";
						}
						$ret .= "<td>";
						$html_ins .= "&CustomColumnOverrule=" . htme(jsencode($selectionName));
						$ret .= " <a href='#' class='arrow' onclick=\"popcolumnchooser('" . $_REQUEST['AjaxHandler'] . $html_ins . "" . $columnselector_ins . "&scope=" . $scope . "');\">" . $columns . "</a>";
						$ret .= "</td>";
					} else { // if ($scope == "system")
						$tmp = db_GetArray("SELECT templateid,templatename FROM " . $GLOBALS['TBL_PREFIX'] . "templates WHERE content LIKE '%loadSavedSelection=" . (htme($selectionName)) . "%'");
						$ret .= "<td>";
						$nnf = "";
						foreach ($tmp AS $row) {
							if ($nnf) $ret .= ", ";
							$ret .= "<a href=\"admin.php?templates=1&amp;editHTMLtemplate=" . $row['templateid'] . "&amp;fromlist=" . base64_encode("index.php?ShowAdvancedQueryInterface&Scope=system&ParentEntityListAjaxHandler=" . $_REQUEST['ParentEntityListAjaxHandler'] . "&ListId=" . $list_id . "") . "&amp;nonavbar=1\">" . htme($row['templatename']) . "</a>";
							$nnf = true;
						}
						if (!$nnf) $ret .= "none";
						$ret .= "</td>";
					}
					$ret .= "<td><img id='" . $selectionName . "' src='images/deletes.gif' class='pointer' onclick=\"" . $func1 . "&deleteSavedSelection=". htme(jsencode($selectionName))  . "" . $func2 . "\"></td></tr>";
				}
				$ret .= "</table>";
			}
			$ret .= "</td></tr></table><br><br>";
			if (is_administrator() || CheckFunctionAccess("MayShareSelections") != "nok" || CheckFunctionAccess("AllowedToEditSystemWideSelections") == "nok") {

				$ret .= "[<a href='#' onclick=\"toggleLayer('advancedInfo');\">" . $lang['advanced'] . "</a>]";
				$ret .= "<div class=\"hidden\" id=\"advancedInfo\">";

				$tmp = GetAttribute($scope, $list_id, $attr_id);

				if ($_POST['copySubject'] != "" && $_POST['copyTo'] != "") {
					$selection = $tmp[$_POST['copySubject']];
					if (is_array($GLOBALS['UC']['MainListColumnsToShow'][$_POST['copySubject']])) {
						$columns = $GLOBALS['UC']['MainListColumnsToShow'][$_POST['copySubject']];
					}

					if (is_numeric($_POST['copyTo'])) { // single user copy

						$tmpA = GetAttribute($scope, $list_id, $_POST['copyTo']);
						$tmpA[$_POST['copySubject']] = $selection;
						SetAttribute($scope, $list_id, $tmpA, $_POST['copyTo']);
						if (is_array($columns)) {
							$tmpB = unserialize(db_GetValue("SELECT ELISTLAYOUT FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($_POST['copyTo']) . "'"));
							$tmpB[$_POST['copySubject']] = $columns;
							mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "loginusers SET ELISTLAYOUT='" . mres(serialize($tmpB)) . "' WHERE id='" . mres($_POST['copyTo']) . "'");
							$msg_ins = " (" . $lang['includingcolumnlayout'] . ")";
						}


						$ret .= "<span class=\"noway\">" . $lang['selectioncopied'] . " " . $msg_ins . ".</span><br><br>";

					} elseif (substr($_POST['copyTo'], 0, 2) == "p-" || $_POST['copyTo'] == "{{all}}") { // profile copy
		
						if ($_POST['copyTo'] != "{{all}}") {
							 $sql_ins = "WHERE PROFILE='" . mres(str_replace("p-", "", $_POST['copyTo'])) . "'";
						}
						$count = 0;
						foreach (db_GetFlatArray("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers " . $sql_ins) AS $user) {

							$tmpA = GetAttribute($scope, $list_id, $user);
							$tmpA[$_POST['copySubject']] = $selection;
							SetAttribute($scope, $list_id, $tmpA, $user);
							if (is_array($columns)) {
								$tmpB = unserialize(db_GetValue("SELECT ELISTLAYOUT FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($user) . "'"));
								$tmpB[$_POST['copySubject']] = $columns;
								mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "loginusers SET ELISTLAYOUT='" . mres(serialize($tmpB)) . "' WHERE id='" . mres($user) . "'");
								$msg_ins = " (incuding column layout)";
							}
			

							$count++;
						}
						if (is_array($columns) && $sql_ins) {

							$sql_ins = "WHERE id='" . mres(str_replace("p-", "", $_POST['copyTo'])) . "'";
							$tmpB = unserialize(db_GetValue("SELECT ELISTLAYOUT FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE id='" . mres(str_replace("p-", "", $_POST['copyTo'])) . "'"));
							$tmpB[$_POST['copySubject']] = $columns;
							mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "userprofiles SET ELISTLAYOUT='" . mres(serialize($tmpB)) . "' WHERE id='" . mres(str_replace("p-", "", $_POST['copyTo'])) . "'");
							$msg_ins = " (incuding column layout for profiles)";
						}

						$ret .= "<span class=\"noway\">Selection successfully copied to " . $count . " users" . $msg_ins . ".</span><br><br>";

					}
				}
				$cl = GetCLearanceLevel($GLOBALS['USERID']);

				if (is_administrator() || CheckFunctionAccess("AllowedToEditSystemWideSelections") == "nok") {
					
					if ($scope == "user") {
						$ret .= $lang['currentlyeditingownselections'] . ".  <a class=\"arrow\" href=\"index.php?ShowAdvancedQueryInterface&amp;Scope=system&amp;ParentEntityListAjaxHandler=" . $_REQUEST['ParentEntityListAjaxHandler'] . "&amp;ListId=" . $list_id . "\">" . $lang['editsystemselections'] . "</a><br>";
					} else {
						$ret .= $lang['editingsystemselections'] . "  <a class=\"arrow\" href=\"index.php?ShowAdvancedQueryInterface&amp;Scope=user&amp;ParentEntityListAjaxHandler=" . $_REQUEST['ParentEntityListAjaxHandler'] . "&amp;ListId=" . $list_id . "\">" . $lang['editpersonalselections'] . "</a><br>";
						if (is_administrator()) {
							$ret .= "<br><a class=\"arrow\" href=\"index.php?ShowAdvancedQueryInterface&amp;Scope=system&amp;DirectSQL=1&amp;ParentEntityListAjaxHandler=" . $_REQUEST['ParentEntityListAjaxHandler'] . "&amp;ListId=" . $list_id . "\">Create a selection using a direct SQL query (requires SQL knowledge)</a><br><br>";
						}
					}

					

				}
				if (CheckFunctionAccess("MayShareSelections") != "nok") {
					$ret .= "<br>" . $lang['copyselection'] . " <form name='shareForm' action='' method='post' id='JS_shareForm'><select name='copySubject'>";

					foreach ($tmp AS $selectionName => $selectionArray) {
						$ret .= "<option value='" . htme($selectionName) . "'>" . htme($selectionName) . "</option>";
					}

					$ret .= "</select> to ";

					$ret .= "<select name='copyTo'>";
					foreach (db_GetArray("SELECT id, name FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE active='yes'") AS $profile) {
						$ret .= "<option value='p-" . $profile['id'] . "'> " . $lang['allusersinprofile'] . " " . htme($profile['name']) . "</option>";
					}
					$ret .= "<option value='{{all}}'>all users </option>";
					foreach (db_GetArray("SELECT id, name, FULLNAME FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE active='yes'") AS $user) {
						if ($user['FULLNAME'] == "") $user['FULLNAME'] = $user['name'];
						$ret .= "<option value='" . $user['id'] . "'> user " . htme($user['FULLNAME']) . "</option>";
					}

					$ret .= "<input type='submit' name='copySubmit' value='" . $lang['go'] . "'>";
					$ret .= "<br><span class=\"graytext\"><em>" . $lang['copyselectionwarning'] . "</em></span>";
					$ret .= "</form>";
				}		
				if (is_administrator() && $qye = CreateQueryFromSavedSelection($me, $list_id)) {
					$ret .= "<br><br>[<a href='#' onclick=\"toggleLayer('reallyAdvanced');\">show generated SQL query</a>]";
					$ret .= "<div id=\"reallyAdvanced\" class=\"hidden\">";
					$ret .=  $qye;
					$ret .= "</div>";
				}
			}

			return($ret);

		} else {
			PrintAD("Access to this functionality is denied");
		}
	}
}

function CreateQueryFromSavedSelection($me, $list_id) {
	if ($me[0]['logicalOperator'] == "SQL-QUERY") {

		$sql = $me[0]['selectField'];

		$sql = ParseTemplateGeneric($sql);
		$sql = EvaluateTemplatePHP($sql);

		if (strtoupper(substr($sql, 0, 6)) != "SELECT") {
			log_msg("ERROR: Query not allowed: " . $sql . " - SavedSelectionSQL","");
			qlog(ERROR, "Query not allowed: " . $sql . " - SavedSelectionSQL");
			PrintAD("Query not allowed - SavedSelectionSQL $sql");
			EndHTML();
			exit;
		} else {
			return($sql);
		}
	} elseif ($list_id == "SavedEntityListSelections") {
		$deffields = explode(" ", "category status priority duedate startdate owner creationdate assignee deleted custname contact contact_title contact_phone contact_email cust_address cust_remarks cust_homepage active customer_owner");
		$query = "SELECT " . $GLOBALS['TBL_PREFIX'] . "entity.eid, " . $GLOBALS['TBL_PREFIX'] . "entity.eid AS BASE_RECORD, " . $GLOBALS['TBL_PREFIX'] . "entity.timestamp_last_change AS BASE_TIMESTAMP_LAST_CHANGE, " . $GLOBALS['TBL_PREFIX'] . "entity.readonly AS BASE_READONLY FROM " . $GLOBALS['TBL_PREFIX'] . "entity, " . $GLOBALS['TBL_PREFIX'] . "customer";
		$where_ins = " WHERE " . $GLOBALS['TBL_PREFIX'] . "entity.CRMcustomer=" . $GLOBALS['TBL_PREFIX'] . "customer.id ";
		$stdorder = " ORDER BY eid";
		$tablerefer = "entity";
		$tablename = $GLOBALS['TBL_PREFIX'] . "entity";
		$id = "eid";
	} elseif (substr($list_id,0,24) == "SavedSelectionsFlextable") {
		$deffields = array();
		$ft = str_replace("SavedSelectionsFlextable", "", $list_id);

		$ftdef = GetFlexTableDefinitions($ft);
		if ($ftdef[0]['refers_to'] == "customer") {
			$joins = " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "customer ON (" . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".refer = " . $GLOBALS['TBL_PREFIX'] . "customer.id) ";
		} elseif ($ftdef[0]['refers_to'] == "entity") {
			$joins = " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "entity ON (" . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".refer = " . $GLOBALS['TBL_PREFIX'] . "entity.eid) ";
		} elseif (is_numeric($ftdef[0]['refers_to'])) {
			$joins = " LEFT OUTER JOIN " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftdef[0]['refers_to'] . " ON (" . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".refer = " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ftdef[0]['refers_to'] . ".recordid) ";
		}

		
		$query = "SELECT " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".recordid AS BASE_RECORD, " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".refer AS BASE_REFER, " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".readonly AS BASE_READONLY, " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".timestamp_last_change AS BASE_TIMESTAMP_LAST_CHANGE FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . $joins;

		$where_ins = " WHERE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".deleted='n'";
		$stdorder = " ORDER BY " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".recordid";

		$tablerefer = $ft;
		$tablename = $GLOBALS['TBL_PREFIX'] . "flextable" . $ft;
		$id = "recordid";

	} elseif ($list_id == "SavedCustomerListSelections") {
		$deffields = explode(" ", "custname contact contact_title contact_phone contact_email cust_address cust_remarks cust_homepage active");
		$query = "SELECT " . $GLOBALS['TBL_PREFIX'] . "customer.id, " . $GLOBALS['TBL_PREFIX'] . "customer.id AS BASE_RECORD, " . $GLOBALS['TBL_PREFIX'] . "customer.timestamp_last_change AS BASE_TIMESTAMP_LAST_CHANGE FROM " . $GLOBALS['TBL_PREFIX'] . "customer";
		$where_ins = " WHERE 1=1 ";
		$stdorder = " ORDER BY " . $GLOBALS['TBL_PREFIX'] . "customer.id";
		$tablerefer = "customer";
		$tablename = $GLOBALS['TBL_PREFIX'] . "customer";
		$id = "id";
	} else {	
		print "<span class='noway'>Base table could not be determined; list_id: " . $list_id . "</span><pre>";
	}
	

	$done1 = array();

	$addedsome = false;

	//if ($list_id == "SavedEntityListSelections") {
		foreach ($me AS $row) {
			if (is_array($row) && is_numeric(GetExtraFieldTableType($row['selectField'])) && !in_array(GetExtraFieldTableType($row['selectField']), $done1)) {
				$tmp = GetFlextableDefinitions(GetExtraFieldTableType($row['selectField']));
				if ($tmp[0]['orientation'] == "many_entities_to_one" && $tablename != $GLOBALS['TBL_PREFIX'] . "flextable" . GetExtraFieldTableType($row['selectField'])) {
					$query .= ", " . $GLOBALS['TBL_PREFIX'] . "flextable" . GetExtraFieldTableType($row['selectField']);
					$done1[] = GetExtraFieldTableType($row['selectField']);
				}
			}
		}
	//}	
	
	$query .= $where_ins;

	$done2 = array();
	//if ($list_id == "SavedEntityListSelections") {
		foreach ($me AS $row) {
			if (is_array($row) && is_numeric(GetExtraFieldTableType($row['selectField'])) && !in_array(GetExtraFieldTableType($row['selectField']), $done2)) {
				$tmp = GetFlextableDefinitions(GetExtraFieldTableType($row['selectField']));
				if ($tmp[0]['orientation'] == "many_entities_to_one" && $tablename != $GLOBALS['TBL_PREFIX'] . "flextable" . GetExtraFieldTableType($row['selectField'])) {

					$referringfield = GetReferencesToTable(GetExtraFieldTableType($row['selectField']), $tablerefer);
					
					$query .= " AND " . $tablename . ".EFID" . $referringfield . "=" . $GLOBALS['TBL_PREFIX'] . "flextable" . GetExtraFieldTableType($row['selectField']) . ".recordid AND " . $GLOBALS['TBL_PREFIX'] . "flextable" . GetExtraFieldTableType($row['selectField']) . ".deleted='n'";
					$done2[] = GetExtraFieldTableType($row['selectField']);
					$addedsome = true;
				} else {

				}
			}
		}
	//}

	foreach ($me AS $key => $row) {
		$subquery = false;
		if (is_array($row)) {
			//if ($list_id == "SavedEntityListSelections") {
				if (is_numeric(GetExtraFieldTableType($row['selectField'])) && $tablerefer != GetExtraFieldTableType($row['selectField'])) {
					$tmp = GetFlextableDefinitions(GetExtraFieldTableType($row['selectField']));
					if ($tmp[0]['orientation'] == "one_entity_to_many") {
						$subquery = true;
						$query .= " AND " . $tablename . "." . $id . " IN (SELECT refer FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" .  GetExtraFieldTableType($row['selectField']) . " WHERE 1=1 ";
						$addedsome = true;
					}
					//edit Jeroen: dit is niet goed, subquery kan in de volgende iteratie nog true zijn, terwijl hij false moet zijn! bovenaan initialiseren op false dus!
					// else {
					//	$subquery = false;
					//}
				}
			//}

			$df = CreateDateFilterOptionsList();

			if (is_numeric($row['selectField'])) {
				$row['selectField'] = "EFID" . $row['selectField'];
			}

			$tmp = $row['mustContain'];
			$row['mustContain'] = str_replace("@CURUSER@", $GLOBALS['USERID'], $row['mustContain']);
			$row['mustContain'] = str_replace("@TODAY@", date('d-m-Y'), $row['mustContain']);

			if ($tmp != $row['mustContain']) {
				$row['mustHaveExactValue'] = 1;
			}
			if ($row['logicalOperator'] == "must be") {
				$row['mustHaveExactValue'] = 1;
				$row['logicalOperator'] = "";
			} elseif ($row['logicalOperator'] == "must not be") {
				$row['mustHaveExactValue'] = 1;
				$row['logicalOperator'] = "not";
			}


			if (array_key_exists($row['mustContain'], $df)) {

				$query .= " " . RelativeEnglishDateToSQL($row['selectField'], $row['mustContain']);
				$addedsome = true;

			} else {

				$pc = "";

				$query .= " AND ";


				if ($row['logicalOperator'] == "not") {
					if ($row['mustHaveExactValue'] == "1") {
						$field = " " . $row['selectField'] . " != ";
					} else {
						$field = " " . $row['selectField'] . " NOT LIKE ";
						$pc = "%";
					}
					$query .= $field . "'" . $pc . mres($row['mustContain']) . $pc . "'";
				} elseif ($row['logicalOperator'] == "mustbelower") {
					
					$field = " CAST(" . $row['selectField'] . " AS DECIMAL(10,3)) < ";
					$query .= $field . "'" . $pc . mres($row['mustContain']) . $pc . "'";

				} elseif ($row['logicalOperator'] == "mustbehigher") {

					$field = " CAST(" . $row['selectField'] . " AS DECIMAL(10,3)) > ";
					$query .= $field . "'" . $pc . mres($row['mustContain']) . $pc . "'";

				} else {
					if ($row['mustHaveExactValue'] == "1" && $row['selectField'] != "{{ANY}}") {

						$field = " " . $row['selectField'] . " = ";
						$query .= $field . "'" . $pc . mres($row['mustContain']) . $pc . "'";

					} else {
						if ($row['selectField'] == "{{ANY}}") {
							if ($list_id == "SavedEntityListSelections") {
								$eids = db_GetFlatArray(str_replace(".*", ".eid", NormalSearch(true, $row['mustContain'], false, true)));
								//print_r($eids);
								if (count($eids) > 0) {
									$query .= " " . $GLOBALS['TBL_PREFIX'] . "entity.eid IN (";
									$nf = false;
									foreach ($eids AS $in) {
										if ($nf) $query .= ",";
										$query .= $in;
										$nf = true;
									}
									$query .= ")";
								} else {
									$query .= "1=0";
								}
							} elseif ($list_id == "SavedCustomerListSelections") {
								
								$eids = db_GetFlatArray(str_replace(".*", ".id", NormalCustomerSearch($row['mustContain'], true, true)));
								
								//print_r($eids);
								if (count($eids) > 0) {
									$query .= " " . $GLOBALS['TBL_PREFIX'] . "customer.id IN (";
									$nf = false;
									foreach ($eids AS $in) {
										if ($nf) $query .= ",";
										$query .= $in;
										$nf = true;
									}
									$query .= ")";
								} else {
									$query .= "1=0";
								}
							} elseif (substr($list_id,0,24) == "SavedSelectionsFlextable") {
								$ft = str_replace("SavedSelectionsFlextable", "", $list_id);
								$rds = db_GetArray(str_replace("*,", "", FlextableSearch($ft, $row['mustContain'])));
								if (count($rds) > 0) {
									$query .= " " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".recordid IN (";
									$nf = false;
									foreach ($rds AS $in) {
										if ($nf) $query .= ",";
										$query .= $in['BASE_RECORD'];
										$nf = true;
									}
									$query .= ")";
								} else {
									$query .= "1=0";
								}
							}
						} elseif ($row['selectField'] == "owner" || $row['selectField'] == "assignee") {
							$field = " " . $row['selectField'] . " = ";
							$query .= $field . "'" . mres($row['mustContain']) . "'";
						} else {
							$field = " " . $row['selectField'] . " LIKE ";
							$pc = "%";
							$query .= $field . "'" . $pc . mres($row['mustContain']) . $pc . "'";
						}
					}
				}

				
				$addedsome = true;
			}

			if ($subquery) $query .= ")";
			
			

			
		}
	}

		if ($_REQUEST['sort']) {
			if (is_numeric($_REQUEST['sort']) || $_REQUEST['sort'] == "duedate" || $_REQUEST['sort'] == "startdate" || substr($_REQUEST['sort'], 0, 4) == "EFID") {
				$type = GetExtraFieldType(str_replace("EFID", "", $_REQUEST['sort']));
				if ($type == "date") {
					//$query .= " ORDER BY UNIX_TIMESTAMP(CONCAT(SUBSTR(" . mres($_REQUEST['sort']) . ",7,4), SUBSTR(" . mres($_REQUEST['sort']) . ",4,2), SUBSTR(" . mres($_REQUEST['sort']) . ", 1,2))) " . $desc;
					$query .= " ORDER BY STR_TO_DATE(" . mres($_REQUEST['sort']) . ", '%d-%m-%Y') " . $desc;
				} elseif ($type == "numeric") {
					$query .= " ORDER BY CAST(" . $_REQUEST['sort'] . " AS DECIMAL(10,3)) " . $desc;
				} else {
					$query .= " ORDER BY CONCAT(" . $_REQUEST['sort'] . ") " . $desc;
				} 
			} elseif ($_REQUEST['sort'] != "") {
				$query .= " ORDER BY " . mres($_REQUEST['sort']);
			}
			if ($_REQUEST['desc'] != "") {
				$query .= " DESC";
			}
		} else {
			$query .= $stdorder;
		}


	//	print "<h1>" . $query . " " . $type . " " .  $_REQUEST['sort'] . " -- " . GetExtraFieldType(str_replace("EFID", "", $_REQUEST['sort'])) . "</h1>";
	//	print_r($_REQUEST);



		if ($addedsome) {
			return($query);
		} else {
			return(false);
		}
}

function CreateVisualQueryRepresentation($selection, $func1, $func2) {
	foreach ($selection AS $key => $row) {
		if (is_array($row)) {
			$text = "<span class='unimp nowrap'>";
			if ($row['logicalOperator'] == "not") {
				$text .= " must NOT";
			} elseif ($row['logicalOperator'] == "must not be") {
				$text .= " must NOT";
			} else {
				$text .= " must";
			}
			if ($row['mustHaveExactValue'] == "1" || ($row['logicalOperator'] != "not" && $row['logicalOperator'] != "")) {
				$text .= " be ";
			} else {
				$text .= " contain ";
			}
			if ($row['logicalOperator'] == "mustbehigher") {
				$text .= " higher than ";
			} elseif ($row['logicalOperator'] == "mustbelower") {
				$text .= " lower than ";
			} elseif ($row['logicalOperator'] == "mustbebefore") {
				$text .= " before ";
			} elseif ($row['logicalOperator'] == "mustbeafter") {
				$text .= " after ";
			}
			$text .= "</span>";
			
			if ($row['selectField'] == "{{ANY}}") {
				$fn = "{{ANY FIELD}}";
			} else {
				$fn = GetExtraFieldName($row['selectField']);
			}
			$ret .= "<span class='blok showinline nowrap'>" . $fn . "" . $text . "\"" . htme($row['mustContain']) . "\" <img src='images/deletes.gif' class='pointer' alt='delete' onclick=\"" . $func1 . "&delElement=" . $key . $func2 . "\"></span> ";
		}
	}
	return($ret);
}

function ValidateInputHelper($worker, $header_id, $selected_field, $flextable=false) {
	$error = false;
	$selected_field = str_replace("EFID", "", $selected_field);
	if ($selected_field != "") {
		$mem = PopStashValue($worker);
		if (is_array($mem)) {
			$cnt = 0;
			foreach ($mem['arrayData'] AS $row) {
				if ($cnt > 0 && $selected_field != "none" && $row[$header_id] != "") {
					$test = ValidateFieldInput($selected_field, $row[$header_id], $flextable);
					
					if (substr($test,0,10) == "{{{nok}}}}") {
						$error = true;
						break;
					}
				} else {
					// skip header row
				}
				$cnt++;
			}
			if ($error) {
				print "<img src='images/deletes.gif'> {{$selected_field}} Error on line " . ($cnt+1) . " : " . $row[$header_id] . " result : " . $test;
			} elseif ($selected_field == "none") {
				print "n/a";
			} else {
				print "<img src='images/ok.gif'>";
			}
		} else {
			print "?";
		}
	} else {
		print "n/a";
	}
}
function ValidateFieldInput($field, $data, $flextable=false, $check_for_required_fields=false, $recordid=false) {
	$origdata = $data;
	$data = trim($data);

	if (!is_numeric($flextable)) $flextable = false;

	if ($check_for_required_fields) {
		$tmp = db_GetValue("SELECT forcing FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($field) . "'");
		if ($tmp == "y" && $data == "") {
			return("{{{not_empty}}}");
		}
	}

	if ($data == "") {
		return($origdata);
	}
	
	$type = GetExtraFieldTableType($field);

	if (is_numeric($recordid) || $recordid == "_new_") {
		/// Start by checking for CustomValidationFunctionPHP

		if (is_numeric($field)) {
			$code = GetAttribute("extrafield", "CustomValidationFunctionPHP", $field);
		} elseif ($field == "category" || $field == "JS_category") {
			$code = GetAttribute("system", "CategoryCustomValidationFunctionPHP", 2);
			$type = "entity";
		} elseif ($field == "owner" || $field == "JS_owner") {
			$code = GetAttribute("system", "OwnerCustomValidationFunctionPHP", 2);
			$type = "entity";
		} elseif ($field == "assignee" || $field == "JS_assignee") {
			$code = GetAttribute("system", "AssigneeCustomValidationFunctionPHP", 2);
			$type = "entity";
		} elseif ($field == "duedate" || $field == "JS_duedate") {
			$code = GetAttribute("system", "DuedateCustomValidationFunctionPHP", 2);
			$type = "entity";
		} elseif ($field == "customer" || $field == "JS_customer") {
			$code = GetAttribute("system", "EntityCustomerCustomValidationFunctionPHP", 2);
			$type = "entity";
		} elseif ($field == "JS_custnamenew" || $field == "custnamenew") {
			$code = GetAttribute("system", "CustomernameCustomValidationFunctionPHP", 2);
			$type = "customer";
		} elseif ($field == "JS_status" || $field == "status") {
			$code = GetAttribute("system", "StatusCustomValidationFunctionPHP", 2);
			$type = "entity";
		} elseif ($field == "JS_priority" || $field == "priority") {
			$code = GetAttribute("system", "StatusCustomValidationFunctionPHP", 2);
			$type = "entity";
		}
		
		if (trim($code) != "" && $code != "{{none}}") {

			if (is_numeric($type)) {
				$record = $recordid;
				$flextable = $type;
				$flextableid = $type;
				$code = ParseFlextableTemplate($flextable, $recordid, $code);
			} elseif ($type == "customer") {
				$cid = $recordid;
				$eid = "";
				$code = ParseTemplateCustomer($code, $cid, false);
			} else {
				$eid = $recordid;
				$code = ParseTemplateEntity($code, $recordid, false, false);
			}
			if ($_REQUEST['refer'] > 0) {
				$refer = $_REQUEST['refer'];
			} elseif ($flextableid && db_GetValue("SELECT refer FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " WHERE recordid='" . $recordid . "'") > 0) {
				$refer = db_GetValue("SELECT refer FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextableid . " WHERE recordid='" . $recordid . "'");
			}
			
			
			if ($refer > 0) {
				$ft = GetFlexTableDefinitions($flextable);
				if ($ft[0]['refers_to'] == "entity") {
					$code = ParseTemplateEntity($code, $refer, false, false);
				} elseif ($ft[0]['refers_to'] == "customer") {
					$code = ParseCustomerEntity($code, $refer, false, false);
				} elseif ($ft[0]['refers_to'] > 0) {
					$code = ParseFlextableTemplate($ft[0]['refers_to'], $refer, $code);
				}
			}
	
			unset($result);
			$serverside = true;
			$value = $data;
			@eval($code);

			if (is_array($result)) {
				$res = $result[0];
				$msg = $result[1];
				$updatevalue = $result[2];
			} else {
				$res = $result;
				$msg = false;
			}


			if ($res == "ok") {
				if (!in_array(Alert($msg), $GLOBALS['JavascriptToPrintAtEndOfPage']) && $msg != "") {
					$GLOBALS['JavascriptToPrintAtEndOfPage'][] = Alert($msg);
					qlog(INFO, "CustomValidationFunctionPHP: " . $msg . " to JavascriptToPrintAtEndOfPage (OK:$data)");
				}

			} else {
				if ($res == "") $msg = "Validaton returned no result. Defaulting to NOK.";
				if (!in_array(Alert($msg), $GLOBALS['JavascriptToPrintAtEndOfPage']) && $msg != "") {
					$GLOBALS['JavascriptToPrintAtEndOfPage'][] = Alert($msg);
					qlog(INFO, "CustomValidationFunctionPHP: " . $msg . " to JavascriptToPrintAtEndOfPage (NOK:$data)");
				}
				return("{{{CustomValidationFunctionPHP failed}}");
			}

		} else {
			// print "No code found!";
		}
		/// End check CustomValidationFunctionPHP
	} 
	switch ($field) {
	
		case "PROFILE":
			$profid = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE (id='" . mres($data) . "' OR name='" . mres($data) . "')");
			if (is_numeric($profid)) {
				return($profid);
			} else {
				print "Group could not be found<br>";
			}
			break;

		case "PASSWORD":
			return($origdata);
			break;

		case "name":
			$test = db_GetValue("SELECT name FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($data) . "'");
			if ($test != $data) {
				return($origdata);
			} else {
				print "Duplicate user name<br>";
			}
			break;

		
		case "EMAIL":
			if (ValidateEmail($data) || $data == "") {
				return($origdata);
			}
			print $data ." not valid<br>";

			break;

		default: 

			if (substr($field, 0, 5) == "refer") {
				$type = "numeric";
			} else {
				$type = GetExtraFieldType($field);
			}
			if ($type == "List of all groups") {
				$profid = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "userprofiles WHERE (id='" . mres($data) . "' OR name='" . mres($data) . "')");
				if (is_numeric($profid)) {
					return($profid);
				} else {
					print "Group could not be found<br>";
				}
			} elseif ($type == "drop-down") {
				$tmp = db_GetValue("SELECT options FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($field) . "'");
				if (substr($tmp, 0, 18) == "%POPULATE_BY_CODE%") {
					// Don't take any chances
					return($origdata);
				}
				
				$options = GetExtraFieldOptions($field);

				if (in_array(trim($data), $options)) {
					return($origdata);
				}

			} elseif ($type == "User-list of all CRM-CTT users" || $type == "assignee" || $type == "owner") {
				
				if (is_numeric($data)) {
					$val = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE id='" . mres($data) . "'");
					if (is_numeric($val)) {
						return($origdata);
					} else {
						$errortext = " not_numeric";
					}
				} else {

					$val = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE name='" . mres($data) . "'");
					if (is_numeric($val)) {
						return($origdata);
					} else {
						$val = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "loginusers WHERE FULLNAME='" . mres($data) . "'");

						if (is_numeric($val)) {
							return($origdata);
						}	else {
							$errortext = " not_numeric";
						}
					}
				}
			} elseif ($type == "numeric" && substr($field, 0, 5) != "refer") {
				if (is_numeric($data) || $data === 0) {
					return($origdata);
				} else {
					$errortext = " not_numeric";
				}
			} elseif ($type == "date") {

				$value = FormattedDateToNLDate($data);
				$d = substr($value,0,2);
				$m = substr($value,3,2);
				$y = substr($value,6,4);
				if (checkdate($m, $d, $y)) {
					return($origdata);
				} 
			} elseif ($type == "Reference to FlexTable") {
				$refers_to = GetExtraFieldOptions($field);
				$tmp = db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $refers_to);
				if (in_array($data, $tmp)) {
					return($origdata);
				}
			} elseif ($field == "updateEntity") {
				if (IsValidEID($data)) {
					return($origdata);
				}
				
			} elseif ($field == "updateCustomer") {
				if (IsValidCID($data)) {
					return($origdata);
				}
			} elseif ($field == "updateFlexRecord") {
				if (IsValidFlexTableRecord($data, $flextable)) {
					return($origdata);
				}

			} elseif (substr($field, 0, 5) == "refer") {
				$refers_to = str_replace("refer", "", $field);
				if (trim($refers_to) == "") { // flextables only have "refer"
					$tmp = GetFlexTableDefinitions($flextable);
					$refers_to = $tmp[0]['refers_to'];

				}
				
//				$errortext = " ref : " . $refers_to . " --- "  . string_r($tmp);
	
				
				if (is_numeric($refers_to)) {
					$tmp = db_GetFlatArray("SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $refers_to);
					if (in_array($data, $tmp)) {
						return($origdata);
					} else {
						$errortext = " ref to flextable incorrect";
					}
				} elseif ($refers_to == "entity") {
					$tmp = db_GetFlatArray("SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity");
					if (in_array($data, $tmp)) {
						return($origdata);
					} else {
						$errortext = " ref to entity table incorrect";
					}
				} elseif ($refers_to == "customer") {
					if (is_numeric($data)) {
						$val = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres(trim($data)) . "'");
						if (is_numeric($val)) {
							return($origdata);
						}	else {
							$errortext = " numeric ref to customer table incorrect";
						}
					} else {
						$val = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE custname='" . mres(trim($data)) . "'");
						if (is_numeric($val)) {
							return($origdata);
						}	else {
							$errortext = " textual ref to customer table incorrect";
						}
					}
				}

			} elseif ($type == "mail") {
				if (ValidateEmail($data) || $data == "") {
					return($origdata);
				}
				$errortext = $data ." not valid";

			} elseif ($type == "List of all active customers" || $type == "customer" || $type == "CRMcustomer") {
				if (is_numeric($data)) {
					$val = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer WHERE id='" . mres($data) . "'");
					if (is_numeric($val)) {
						return($origdata);
					}
				} else {
					$val = db_GetValue("SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer  WHERE custname='" . mres($data) . "'");
					if (is_numeric($val)) {
						return($val);
					}
				}
			} elseif ($type == "date/time") {
				if (strtotime($data) == false || strtotime($data) == -1) { // PHP 5.1.0 compat
					$errortext = " not a valid date";
				} else {
					return($origdata);
				}
			} elseif ($type == "checkbox") {
				//$tmp = db_GetRow("SELECT options,defaultval,fieldtype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . mres($field) . "'");
				//if (strstr($row['fieldtype'], "[copyfield")) {
				 //   $row = db_GetRow("SELECT options, defaultval FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id=" . str_replace("]","",str_replace("[copyfield", "", $row['fieldtype'])),$db);
			//	}
			//	if ($data == $tmp[0] || $data == $tmp[1]) {
					return($origdata);
			//	}
			} elseif (substr($type, 0, 17) == "Users of profile ") {
				if (in_array($data, GetUsersOfGroup(str_replace("Users of profile ", "", $type)))) {
					return($origdata);
				} else {
					$errortext = " not a valid group member";
				}
			} elseif ($type == "diary") {
				return($origdata);
			} elseif ($type == "drop-down (multiselect)") {
				return($origdata);
			} elseif ($type == "textbox") {
				return($origdata);
			} elseif ($type == "SQL Query") {
				return($origdata);
			} elseif ($type == "hyperlink") {
				if (IsValidURL($data)) {
					return($origdata);
				} else {
					$errortext = " URL didn't validate";
				}
			} elseif ($type == "text area") {
				return($origdata);
			} else {
				log_msg("WARNING: Validation of field '" . $field . "' assumed OK; don't know how to validate field type '" . $type . "'");
				return($origdata);
			}
		break;
	}

	return("{{{nok}}}}");

}
function IsValidURL($url) {
	if (preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i", $url)) {
	  return(true);
	} else {
	  return(false);
	}
}
function LogPageInfo() {
	if ($GLOBALS['logtext'] == true || $GLOBALS['ShowTraceLink'] == true) {
		if ($GLOBALS['starttime']) {
			$time_in_seconds =  microtime_float() - $GLOBALS['starttime'];
		}
		qlog(INFO, "Page report");

		if ($GLOBALS['max_time_query'] && $GLOBALS['log_slowest_query']) {
			qlog(INFO, "------------------------------------------------------------------------------------------------");
			qlog(INFO, "Slowest query ran               : " . $GLOBALS['max_time_query']) . "s";
			qlog(INFO, "Query                           : " . ($GLOBALS['max_time_query_sql']));

		}
		qlog(INFO, "\n\n" . CheckPageLoadTiming($GLOBALS['pagelog'])) . "\n\n";

		qlog(INFO, "------------------------------------------------------------------------------------------------");
		qlog(INFO, "QS                              : " . $_SERVER['SCRIPT_NAME'] . " " . $_SERVER['QUERY_STRING']);
		qlog(INFO, "Repository                      : " . $GLOBALS['title']);
		qlog(INFO, "Database                        : " . $GLOBALS['DBNAME']);
		qlog(INFO, "Database host                   : " . $GLOBALS['DBHOST']);
		qlog(INFO, "Username                        : " . $GLOBALS['USERNAME']);
		qlog(INFO, "RAM allocated (current)         : " . number_format(memory_get_usage()) . " bytes");
		qlog(INFO, "RAM allocated (peak)            : " . number_format(memory_get_peak_usage()) . " bytes");
		qlog(INFO, "Total SQL queries on this page  : " . $GLOBALS['mysql_query_counter']);
		qlog(INFO, "Total SQL connects on this page : " . $GLOBALS['TIMES_DB_CONNECTS']);
		qlog(INFO, "Total skipped connections       : " . $GLOBALS['TIMES_DB_CONNECTS_SKIPPED']);
		qlog(INFO, "Total cache hits on this page   : " . $GLOBALS['CACHECOUNTER']);
		qlog(INFO, "Connection type                 : " . $GLOBALS['CONN_TYPE']);
		qlog(INFO, "CheckEntityAccess calculations  : " . $GLOBALS['CheckEntityAccessCalled']);
		qlog(INFO, "CheckEntityAccess Vcache hits   : " . $GLOBALS['CheckEntityAccessCacheHits']);
		qlog(INFO, "CheckEntityAccess base calls    : " . $GLOBALS['CheckEntityAccessCalledPlain']);
		qlog(INFO, "End of this page                : " . $time_in_seconds . " seconds total processing time");
		qlog(INFO, "------------------------------------------------------------------------------------------------");
	}
}
function ConvertDatabaseToUTF8() {
	require($GLOBALS['CONFIGFILE']);

	// Save exclude-from-rep tables and set it to "" -> all tables need this 
	$curexclude = $GLOBALS['EXCLUDE_FROM_REP'];
	$GLOBALS['EXCLUDE_FROM_REP'] = "";

	if ($GLOBALS['repository'] || $GLOBALS['repository'] == 0) {
		$tmp = db_GetFlatArray("SHOW TABLES");
		foreach ($tmp AS $key => $table) {
			if (is_numeric($key)) {
				$tmp2 = db_GetArray("SHOW CREATE TABLE " . $table);
				if (strstr($tmp2[0][1], "CHARSET=utf8")) {
					print "Table " . $table . " is already UTF-8.\n";
				} else {
					print "Converting table " . $table . " to UTF-8....";
					$sql = "ALTER TABLE " . $table . " CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci";
					mcq($sql, $db);
					print " .. done.\n";
				}
			}
		}
		print "Changing database charachter set...";
		mcq("ALTER DATABASE " . $database[$GLOBALS['repository']] . " CHARACTER SET utf8", $db);
		print " .. done.\n";
		$GLOBALS['EXCLUDE_FROM_REP'] = $curexclude;
	} else {
		print "Error: repository number could not be determined!\n";
	
	}
}
function ReturnClassnameForTextColorBasedOnBackgroundColor($backgroundColor) {
	if ($backgroundColor == "") {
		return("black");
	} else {

		$c = str_replace('#','',$backgroundColor);

		$rgb[0] = hexdec(substr($c,0,2));
		$rgb[1] = hexdec(substr($c,2,2));
		$rgb[2] = hexdec(substr($c,4,2));
		if ($rgb[0]+$rgb[1]+$rgb[2]<382) {
			return 'white';
		} else {
			return 'black';
		}
	}
}

function ReturnSpreadSheet($query, $layout, $format="excel", $basetabletype) {
//	DA($query);

	global $lang;
	if (isset($_REQUEST['debug']) && is_administrator()) {
		$debug = true;
	}
	if ($debug) {
		print "<h1>$query</h1>";
		print "<h1>Base: $basetabletype</h1>";
	}
	if ($basetabletype == "entity") {
		$id = "eid";
	} elseif ($basetabletype == "customer") {
		$id = "id";
	} else {
		$baseflextable = str_replace("flextable", "" , $basetabletype);
		$basetabletype = "flextable";
		$given_layout = $layout;
		$layout = array();
		for ($i=0;$i<sizeof($given_layout);$i++) {
			if (is_numeric($given_layout[$i])) {
				$layout["EFID" . $given_layout[$i]] = 1;
			} elseif ($given_layout[$i] == "refer") {
				$layout["refer"] = 1;
			}
		}
		$id = "BASE_RECORD";
		
		$def = GetFlexTableDefinitions($baseflextable, false, false, "both");
		if ($def[0]['skip_security'] == "y") {
			$dont_check_flextable_record_access = true;
		}
		$stop = false;
		if (CheckFlexTableAccess($baseflextable) == "nok") {
			$stop = true;
		}
		
	}


	$cfields = array("cb_custname"			=> $lang['customer'],
					"cb_contact"			=> $lang['contact'],
					"cb_contact_title"		=> $lang['contacttitle'],
					"cb_contact_phone"		=> $lang['contactphone'],
					"cb_contact_email"		=> $lang['contactemail'],
					"cb_cust_address"		=> $lang['customeraddress'],
					"cb_cust_remarks"		=> $lang['custremarks'],
					"cb_cust_homepage"		=> $lang['custhomepage'],
					"cb_active"			=> "Active",
					"cb_customer_owner"	=> $lang['owner'] . " (" . $lang['customer'] . ")");

	if ($query != "" && $layout != "" && !$stop) {
		
		if (1==1) {
			// Query had results
			$sheet = array(array($id));

			foreach ($layout AS $field => $enabled) {
				if ($enabled == 1) { // Found a field which should be printed in this list
					if ($field != "id") { // id is printed regardless of settings
						if ($field == "cb_cust") $field = "cb_customer";
						if (strstr($field, "cb_")) {
							if ($field == "cb_assigneegroup") {
								$sheet[0][] = $lang['group'] . " (" . strtolower($lang['assignee']) . ")";
							} elseif ($field == "cb_ownergroup") {
								$sheet[0][] = $lang['group'] . " (" . strtolower($lang['owner']) . ")";
							} elseif ($field == "cb_duration") {
								$sheet[0][] = "Age/duration";								
							} elseif (array_key_exists($field, $cfields)) {
								$sheet[0][] = $cfields[$field];
							} else {
								$sheet[0][] = $lang[str_replace("cb_", "", $field)];
							}
						} else {
							$sheet[0][]= GetExtraFieldListName(str_replace("EFID", "", $field));
						}
					}
				}
			}
			$res = mcq($query, $db);
			while ($row = mysql_fetch_array($res)) {


				if ($basetabletype == "entity") {
					$acc = CheckEntityAccess($row[$id], false, false);
				} elseif ($basetabletype == "customer") {
					$acc = CheckCustomerAccess($row[$id], false, false);
				} elseif ($basetabletype == "flextable") {
					if (!$dont_check_flextable_record_access) {
						$acc = CheckFlextableRecordAccess($baseflextable, $row[$id]);
					}
				}
				
				if ($acc != "nok") { // Only when access was allowed

					$line = array($row[$id]);

					foreach ($layout AS $field => $enabled) {
						if ($enabled == 1) { // Found a field which should be printed in this list

							if ($field != "id") { // id is printed regardless of settings
								if ($field == "cb_cust") $field = "cb_CRMcustomer";
								if (strstr($field, "cb_")) {
									
									$field = str_replace("cb_", "", $field);

									
									if ($field == "duedate" || $field == "startdate") {
										$row[$field] = TransformDate($row[$field]);
									} elseif ($field == "creationdate") {
										list($tmp_jaar, $tmp_maand, $tmp_dag) = explode("-", $row['cdate']);
										$row[$field] = TransformDate($tmp_dag . "-" . $tmp_maand . "-" . $tmp_jaar);
									} elseif ($field == "closedate") {
										list($tmp_jaar, $tmp_maand, $tmp_dag) = explode("-", $row['closedate']);
										$row[$field] = TransformDate($tmp_dag . "-" . $tmp_maand . "-" . $tmp_jaar);
									} elseif ($field == "CRMcustomer") {
										$row[$field] = GetCustomerName($row[$field]);
									
									} elseif ($field == "category" && $format == "excel") {
										$row[$field] = "@@@@WRAPPED@@@@" . $row[$field];

									} elseif ($field == "contents" && $format == "excel") {
										$row[$field] = "@@@@WRAPPED@@@@" . $row['content'];
									
									} elseif ($field == "assignee") {
										$row[$field] = GetUserName($row[$field]);
									
									} elseif ($field == "owner") {
										$row[$field] = GetUserName($row[$field]);

									} elseif ($field == "duration") {
										
										if ($e['closeepoch']==0) {
											$nowepoch = date('U');
											$txt = "Age";
										} else {
											$nowepoch = $e['closeepoch'];
											$txt = "Duration";
										}

										if ($row['openepoch'] == 0) {
											$age = "";
										} else {

											$age_in_seconds = $nowepoch - $row['openepoch'];
											
											if ($age_in_seconds>86400) {
												$age = "" . round($age_in_seconds/86400,2) . " days";
											} elseif ($age_in_seconds>3600) {
												$age = " " . round($age_in_seconds/3600,2) . " hrs";
											} elseif ($age_in_seconds>60) {
												$age = "" . round($age_in_seconds/60,2) . " min";
											} elseif ($age_in_seconds<>$nowepoch) {
												$age = "" . round($age_in_seconds,0) . " sec";
											}

											$row[$field] = $age;
										}

									} elseif ($field == "assigneegroup") {
										$row[$field] = GetGroupName(GetGroup(GetEntityAssignee($row['eid'])));
									
									} elseif ($field == "ownergroup") {
										$row[$field] = GetGroupName(GetGroup(GetEntityOwner($row['eid'])));

									} elseif ($format == "excel" && ($field == "status" || $field == "priority")) {
										$t = "";
										if ($field == "status") {
											$t = GetStatusColor($row[$field]);
										} elseif ($field == "priority") {
											$t = GetPriorityColor($row[$field]);
										}
										if ($t != "") {
											$row[$field] = "@@@@HEXCOLOR" . $t . "@@@@HEXCOLOR" . $row[$field];
										}
										$t = "";
									}


									$line[] = $row[$field];

								} else {
									
									// Must be an extra field
									
									$ef = str_replace("EFID", "", $field);
									if ($GLOBALS['PageCache']['ExtraFieldTableTypes'][$ef] == "") {
										$eft = GetExtraFieldTableType($ef);
									} else {
										$eft = $GLOBALS['PageCache']['ExtraFieldTableTypes'][$ef];
									}
									
									if ($GLOBALS['PageCache']['ExtraFieldTypes'][$ef]) {
										$efft = $GLOBALS['PageCache']['ExtraFieldTypes'][$ef];
									} else {
										$efft = GetExtraFieldType($ef);
									}
									
									// First check access to this field

									if ($dont_check_flextable_record_access || CheckExtraFieldAccess($ef) != "nok") {

										if ($eft == "entity" && $basetabletype == "entity") {
 											if ($efft == "textbox" || $efft == "text area" || $efft == "drop-down" || $efft == "mail" || $efft == "numeric" || $efft == "computation" || ($GLOBALS['UC']['DateFormat'] == "dd-mm-yyyy" && $efft == "date")) {
												// nothing
											} else {
												 $row[$field] = GetExtraFieldValue($row[$id], $ef, false, "dontformatnumbers", $row[$field]);
											}
										} elseif ($eft == "customer" && $basetabletype == "entity") {
											if ($efft == "textbox" || $efft == "text area" || $efft == "drop-down" || $efft == "mail" || $efft == "numeric" || $efft == "computation" || ($GLOBALS['UC']['DateFormat'] == "dd-mm-yyyy" && $efft == "date")) {
												// nothing
											} else {
												 $row[$field] = GetExtraCustomerFieldValue($row['CRMcustomer'], $ef, false, "dontformatnumbers", $row[$field]) . "";
											}
										} elseif ($eft == "customer" && $basetabletype == "customer") {
											if ($efft == "textbox" || $efft == "text area" || $efft == "drop-down" || $efft == "mail" || $efft == "numeric" || $efft == "computation" || ($GLOBALS['UC']['DateFormat'] == "dd-mm-yyyy" && $efft == "date")) {
												// nothing
											} else {
												 $row[$field] = GetExtraCustomerFieldValue($row[$id], $ef, false, "dontformatnumbers", $row[$field]) . "";
											}
										} elseif ($eft == $baseflextable || GetAttribute("flextable", "ViewOnTable", $baseflextable) == "flextable" . $eft) { // Flexrec in current table
											if ($efft == "textbox" || $efft == "text area" || $efft == "drop-down" || $efft == "mail" || $efft == "numeric" || $efft == "computation" || ($GLOBALS['UC']['DateFormat'] == "dd-mm-yyyy" && $efft == "date")) {
												// nothing
											} else {
												 $row[$field] = GetExtraFieldValue($row[$id], $ef, false, "dontformatnumbers", $row[$field]);
											}
										} elseif ($field == "refer") { // REFER rec in current table

											 $row[$field] = GetParsedFlexRef($baseflextable, $row['recordid'], $row['refer']);

										} elseif (is_numeric($eft)) { // Must be a flextable
											
											$flextable = $eft;
											if ($debug) { 
												print "<h1>Descending because $ef is a reference to a flextable : $flextable " . $eft . "</h1>";
											}
											$def = GetFlexTableDefinitions($flextable, false, false, "both");
											$ftdef = $def[0];
											$def = "";
											
											if ($ftdef['orientation'] == "many_entities_to_one") {
												if ($basetabletype == "entity") {
													$reffield = GetReferencesToTable($flextable, "entity");
													if (is_numeric($reffield)) {
														$refrec = GetExtraFieldValue($row[$id], $reffield, false, true, false);
														//$value = GetFlextableFieldValue($refrec, $ef, $flextable, "dontformatnumbers", false, false);
														$value = GetExtraFieldValue($refrec, $ef, false, "dontformatnumbers", false);
													} else {
														$value = "#REF! $reffield";
													}
												} elseif ($basetabletype == "customer") {
													$reffield = GetReferencesToTable($flextable, "customer");
													if (is_numeric($reffield)) {
														$refrec = GetExtraCustomerFieldValue($row[$id], $reffield, false, true, false);
														//$value = GetFlextableFieldValue($refrec, $ef, $flextable, "dontformatnumbers", false, false);
														$value = GetExtraFieldValue($refrec, $ef, false, "dontformatnumbers", false);
													} else {
														$value = "#REF! $reffield";
													}
												} elseif ($baseflextable == "flextable") {
													$reffield = GetReferencesToTable($flextable, $baseflextable);
													if (is_numeric($reffield)) {
														//$refrec = GetFlextableFieldValue($row[$id], $reffield, $baseflextable, true, false, false);
														$refrec = GetExtraFieldValue($row[$id], $reffield, false, true, false);
														//$value = GetFlextableFieldValue($refrec, $ef, $flextable, "dontformatnumbers", false, false);
														$value = GetExtraFieldValue($refrec, $ef, false, "dontformatnumbers", false);
													} else {
														$value = "#REF! $reffield";
													}
												}

												$row[$field] = $value;

											} elseif ($ftdef['orientation'] == "one_entity_to_many") {

													$value = "";
													$tmp = db_GetArray("SELECT DISTINCT(" . $field . "), COUNT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextable . " WHERE refer=" . $row[$id] . " AND deleted!='y' AND " . $field . " != '' GROUP BY " . $field);
													$nf = false;
													foreach ($tmp AS $val) {
														if ($efft == "diary") {
															$opt = unserialize($val[0]);
															$val[0] = "";
															foreach ($opt AS $diary_remark) {
																$val[0] .= TransformDate(date('d-m-Y', $diary_remark[0])) . " " . date('H:i', $diary_remark[0]) . "h : " . GetUserName($diary_remark[1]) . " : " . $diary_remark[2] . "\n";
															}
															$val[0] = trim($val[0]);
														}
														if ($nf) $value .= "\n";
														$value .= $val[0] . " (" . $val[1] . ")";
														$nf = true;
													}
													$row[$field] = "@@@@WRAPPED@@@@" . $value;
											}
										}

										// Parse colors and wrapped properties for excel only
										if ($format == "excel") {
											if ($efft == "text area" || $efft == "text area (rich text)" || $efft == "textbox" || $efft == "diary") {
												$row[$field] = "@@@@WRAPPED@@@@" . $row[$field];
											}
											if (isset($GLOBALS['PageCache']['ExtraFieldOptioncolors'][$ef])) {
												$t = $GLOBALS['PageCache']['ExtraFieldOptioncolors'][$ef];
											} else {
												$t = GetExtraFieldOptioncolors($ef);
											}
											if ($t[$row[$field]] != "") {
												$row[$field] = "@@@@HEXCOLOR" . $t[$row[$field]] . "@@@@HEXCOLOR" . $row[$field];
											}
										}
									
										$line[] = $row[$field];

									} else {

										// Access to this field was denied
										$line[] = "a/d";
									}

									
								}
							}
						}
					}
					$sheet[] = $line;
				}
			}

			if ($format == "excel") {
				if ($debug) {
					DA($sheet); // ok
					EndHTML(true);
				} else {
					RealExcel($sheet, "array");
					EndHTML(false);
				}
				exit;
			} elseif ($format == "tsv") { // Tab-separated values
				header('Content-Disposition: attachment;filename="export.csv"');
				header('Content-Type: data/csv');
				$y = count($sheet);
				for ($i=0;$i<$y;$i++) {
					print implode("\t", $sheet[$i]) . "\n";
				}
				EndHTML(false);
				exit;

			} else {
			
			}

		}
		
	} else {
		PrintAD("Not enough information to create spreadsheet");
	}


}
function CheckPageLoadTiming($log) {
	$ar = explode("\n", $log);
	$Functions = array();


	foreach ($ar AS $line) {

		$line = explode("::", $line);
		$tmp = explode(" ", $line[0]);
		$mt = $tmp[2];
		$function = $tmp[sizeof($tmp)-1];
		
		
		if ($function == $last_func) {
			// Keep counting
		} else {
			if (is_numeric($mt) && is_numeric($last_mt)) {
				
				$Functions[$function]['time']+= ($mt - $last_mt);
				
			}
			$last_mt = $tmp[2];
			
		}

		$Functions[$function]['count']++;
		$last_func = $function;
		if ($starttime == "" ) $starttime = $tmp[2];
		if ($tmp[2] != "") {
			$endtime = $tmp[2];
		}

	}
	asort($Functions);
	$Functions = array_reverse($Functions);

	$ret .=  "-------------------------------------------------------------------------\n";
	$ret .=  " Function calling               | Log lines | Time consumed             |\n";
	$ret .=  "-------------------------------------------------------------------------\n";
	foreach ($Functions AS $name => $row) {
		if (function_exists(trim($name))) {
			$ret .=  " " . fillout($name,30) . " | " . fillout($row['count'], 9) . " | " . fillout($row['time'], 25) . " |\n";
			$time += $row['time'];
		}
	}
	$ret .=  "-------------------------------------------------------------------------\n";

	$diff = ($endtime - $starttime);

//	$ret .=  "Start time       : " . $starttime . "\n";
//	$ret .=  "End time         : " . $endtime . "\n";
	$ret .=  "Time span        : " . $diff . " seconds\n";
	$ret .=  "Time measured    : " . $time . " seconds\n";
	$ret .=  "Time unaccounted : " . ($diff - $time) . " seconds\n";
	$ret .=  "Log lines parsed : " . sizeof($ar) . "\n";

	return($ret);
}

function GetAccessibleCalendars() {
	
	$calendars = unserialize(GetSetting("CalendarDefinitions"));

	$validcalendars = array();

	foreach ($calendars AS $calObj) {

		if ($calObj['available'] != "{{all}}" && $calObj['available'] != "" && !is_administrator()) {
			if (substr($calObj['available'], 0, 1) == "G") {
				$grouptobe = str_replace("G:", "", $calObj['available']);
				if ($GLOBALS['UC']['GROUP'] != $grouptobe) {
					// Permission denied
				} else {
					$table = GetExtraFieldTableType(str_replace("EFID", "", $calObj['duefield']));
					if ((is_numeric($table) && CheckFlexTableAccess($table) != "nok") || !is_numeric($table)) {
						$validcalendars[$calObj['id']] = $calObj;
					} else {
							// Permission denied, no access to flextable
					}
				}
			} elseif (substr($calObj['available'], 0, 1) == "U") {
				$usertobe = str_replace("U:", "", $calObj['available']);
				if ($GLOBALS['USERID'] != $usertobe) {
					// Permission denied
				} else {
					$table = GetExtraFieldTableType(str_replace("EFID", "", $calObj['duefield']));
					if ((is_numeric($table) && CheckFlexTableAccess($table) != "nok") || !is_numeric($table)) {
						$validcalendars[$calObj['id']] = $calObj;
					} else {
							// Permission denied, no access to flextable
					}
				}
			} else {
				// Permission denied
			}
		} else {
			$table = GetExtraFieldTableType(str_replace("EFID", "", $calObj['duefield']));
			if ((is_numeric($table) && CheckFlexTableAccess($table) != "nok") || !is_numeric($table)) {
				$validcalendars[$calObj['id']] = $calObj;
			}
		}
	}

	return($validcalendars);
}

function GetCalendarEvents($calObjId, $html, $cache_for_this_session=true, $monthyear="") {
	
	if ($calObjId == "") {
		return(false);
	} elseif ($calObjId == "selectOnly") {
		print "SELECT ONLY";
	}

	// If the last parse for this user in this session is less than a minute old, grab cache.
	if ($GLOBALS['SesMem']['CalendarSessionCache' . $calObjId. $monthyear] && $cache_for_this_session && ($GLOBALS['SesMem']['CalendarSessionCache' . $calObjId . $monthyear . '-cachemoment'] > (date('U')-60))) {
		return($GLOBALS['SesMem']['CalendarSessionCache' . $calObjId . $monthyear]); 
	}

 
	$calendars = GetAccessibleCalendars();
	$calObj = $calendars[$calObjId];

	if (!is_array($calObj)) {
		PrintAD("Unknown calendar object " . $calObjId);

		return(false);
	}


	$field = $calObj['duefield'];
	$table = GetExtraFieldTableType(str_replace("EFID", "", $field));
	//print "<h1>call $calObjId for table $table</h1>";
	
	if (is_numeric($table)) {
		$flextable = $table;
		$table = "flextable" . $table;
		$id = "recordid AS BASE_RECORD, refer AS BASE_REFER";
		$extra_ins = " AND deleted!='y'";
		$cache_id = "flextable" . $flextable;
		$tid = "recordid";
		
	} elseif ($table == "entity") {
		$id = "eid AS BASE_RECORD";
		$cache_id = "entity";
		$tid = "eid";
	
	} elseif ($table == "customer") {
		$id = "id AS BASE_RECORD";
		$cache_id = "customer";
		$tid = "id";
	} else {
		PrintAD("Unable to determine table type ($table - $field - $calObjId)");
		return(false);
	}
	
	if ($calObj['summaryfield'] == "") $calObj['summaryfield'] = "You need to set a summary field text";
	if ($calObj['commentfield'] == "") $calObj['commentfield'] = "You need to set a comment field text";
	
	$sql_extra = "";

	if ($monthyear != "") {

		$field = $calObj['duefield'];
		if (GetExtraFieldType($calObj['duefield']) == "date/time") {
			$sql_extra = " AND MONTH(STR_TO_DATE(" . $field . ",'%Y-%m-%d %H:%i:%s'))=" . substr($monthyear, 5, 2) . " AND YEAR(STR_TO_DATE(" . $field . ",'%Y-%m-%d %H:%i:%s')) = ". substr($monthyear, 0, 4);
		} else {
			$sql_extra = " AND MONTH(STR_TO_DATE(" . $field . ",'%d-%m-%Y'))=" . substr($monthyear, 5, 2) . " AND YEAR(STR_TO_DATE(" . $field . ",'%d-%m-%Y')) = ". substr($monthyear, 0, 4);
		}
		$cache_id .= "-" . $monthyear;
		
	}

	if ($calObj['useselection'] != "") {
		if ($table == "entity") {
			$tmp = GetAttribute("system", "SavedEntityListSelections", 1);
			$SelId = "SavedEntityListSelections";
			
		} elseif ($table == "customer") {
			$tmp = GetAttribute("system", "SavedCustomerListSelections", 1);
			$SelId = "SavedCustomerListSelections";
			
		} else {
			$SelId = "SavedSelectionsFlextable" . $flextable;
			$tmp = GetAttribute("system", "SavedSelectionsFlextable" . $flextable, 1);
			
		}

		if ($tmp[$calObj['useselection']]) {
			$sql = CreateQueryFromSavedSelection($tmp[$calObj['useselection']], $SelId);
			$sql = str_replace("." . $tid . ",", ".*,", $sql);
			$list = db_GetArray($sql);

			
		} else {
			log_msg("ERROR: A calendar depends on selection " . $calObj['useselection'] . " but this selection could not be found!");
			qlog(ERROR, "A calendar depends on selection " . $calObj['useselection'] . " but this selection could not be found!");
			$list = array();
		}
	} else {
		$sql = "SELECT *," . $id . " FROM " . $GLOBALS['TBL_PREFIX'] . $table . " WHERE " . $field . "!='' " . $extra_ins . $sql_extra;
		//DA($sql);
		$list = db_GetArray($sql);
	}

	if (isset($_REQUEST['debug']) && is_administrator()) DA($sql);

	// Check permission

	if ($calObj['available'] != "{{all}}" && $calObj['available'] != "" && !is_administrator()) {
		if (substr($calObj['available'], 0, 1) == "G") {
			$grouptobe = str_replace("G:", "", $calObj['available']);
			if ($GLOBALS['UC']['GROUP'] != $grouptobe) {
				// Permission denied
				// log_msg("ERROR: Access to calendar denied");
				// qlog(ERROR, "Access to calendar denied");
				$list = array();
				// DA("ERROR Access to calendar denied");
			}
		} elseif (substr($calObj['available'], 0, 1) == "U") {
			$usertobe = str_replace("U:", "", $calObj['available']);
			if ($GLOBALS['USERID'] != $usertobe) {
				// Permission denied
				// log_msg("ERROR: Access to calendar denied");
				// qlog(ERROR, "Access to calendar denied");
				$list = array();
				// DA("ERROR Access to calendar denied");
			}

		} else {
			// Permission denied
			// log_msg("ERROR: Access to calendar denied");
			// qlog(ERROR, "Access to calendar denied");
			 // DA("ERROR Access to calendar denied");
			$list = array();
		}
	}

	$event = array();

	if ($html == false) {
		$encode = "plain";
		$pdf = true;
		$cache_id .= "P";
	} else {
		$encode = "htme";
		$pdf = false;
		$cache_id .= "H";
	}



	foreach ($list AS $item) {

		
		$c = GetFormCache($item['BASE_RECORD'], 0, $calObj['id'] . ":" . $cache_id);
		$cur_cache = unserialize($c['content']);

		if (is_array($cur_cache)) { 
					

			$item['summaryfield']  = $cur_cache['summaryfield'];
			$item['resourcefield'] = $cur_cache['resourcefield'];
			$item['locationfield'] = $cur_cache['locationfield'];
			$item['commentfield']  = $cur_cache['commentfield'];
			qlog(INFO, "Calendar: cache " . $item['BASE_RECORD']);


		} else {
			
			
			

			if ($calObj['summaryfield'] != "")  $calObj['summaryfield']  = ParseTemplateAliases($calObj['summaryfield']);
			if ($calObj['commentfield'] != "")  $calObj['commentfield']  = ParseTemplateAliases($calObj['commentfield']);
			if ($calObj['resourcefield'] != "") $calObj['resourcefield'] = ParseTemplateAliases($calObj['resourcefield']);
			if ($calObj['locationfield'] != "") $calObj['locationfield'] = ParseTemplateAliases($calObj['locationfield']);

			if ($table == "entity") {
				$acc = CheckEntityAccess($item['BASE_RECORD']);

				if ($acc != "nok") {

					if ($calObj['summaryfield'] != "") $item['summaryfield'] = ParseTemplateEntity($calObj['summaryfield'],$item['BASE_RECORD'], false, false, $pdf, $encode);

					if ($calObj['commentfield'] != "") $item['commentfield'] = ParseTemplateEntity($calObj['commentfield'],$item['BASE_RECORD'], false, false, $pdf, $encode);

					if (strstr($item['summaryfield'], "@")) $item['summaryfield'] = ParseTemplateCustomer($item['summaryfield'],GetEntityCustomer($item['BASE_RECORD']), false, $encode, false);
					if (strstr($item['commentfield'], "@")) $item['commentfield'] = ParseTemplateCustomer($item['commentfield'],GetEntityCustomer($item['BASE_RECORD']), false, $encode, false);

					if ($calObj['resourcefield'] != "") $item['resourcefield'] = ParseTemplateEntity($calObj['resourcefield'],$item['BASE_RECORD'], false, false, $pdf, $encode);
					if ($calObj['locationfield'] != "") $item['locationfield'] = ParseTemplateEntity($calObj['locationfield'],$item['BASE_RECORD'], false, false, $pdf, $encode);
				}
			} elseif ($table == "customer") {

				$acc = CheckCustomerAccess($item['BASE_RECORD']);
				if ($acc != "nok") {
					if ($calObj['summaryfield'] != "") $item['summaryfield'] = ParseTemplateCustomer($calObj['summaryfield'],$item['BASE_RECORD'], false, $encode, false);
					if ($calObj['commentfield'] != "") $item['commentfield'] = ParseTemplateCustomer($calObj['commentfield'],$item['BASE_RECORD'], false, $encode, false);	

					if ($calObj['resourcefield'] != "") $item['resourcefield'] = ParseTemplateCustomer($calObj['resourcefield'],$item['BASE_RECORD'], false, $encode, false);
					if ($calObj['locationfield'] != "") $item['locationfield'] = ParseTemplateCustomer($calObj['locationfield'],$item['BASE_RECORD'], false, $encode, false);	
				}
				$cache_id = "customer";
			} elseif (is_numeric($flextable)) {

				$acc = CheckFlextableRecordAccess($flextable, $item['BASE_RECORD'], false);
				
				if ($acc != "nok") {

					if ($calObj['commentfield'] != "") $item['commentfield'] = ParseTemplateFlextableValues($flextable, $item['BASE_RECORD'], $calObj['commentfield'], "plain");
					if ($calObj['summaryfield'] != "") $item['summaryfield'] = ParseTemplateFlextableValues($flextable, $item['BASE_RECORD'], $calObj['summaryfield'], "plain");

					if ($calObj['resourcefield'] != "") $item['resourcefield'] = ParseTemplateFlextableValues($flextable, $item['BASE_RECORD'], $calObj['resourcefield'], "plain");
					if ($calObj['locationfield'] != "") $item['locationfield'] = ParseTemplateFlextableValues($flextable, $item['BASE_RECORD'], $calObj['locationfield'], "plain");	

					$ftdef = GetFlextableDefinitions($flextable);

					if ($ftdef[0]['refers_to'] == "entity") {

						if ($calObj['commentfield'] != "") $item['commentfield'] = ParseTemplateEntity($item['commentfield'],$item['BASE_REFER'], false, false, $pdf, $encode);
						if ($calObj['summaryfield'] != "") $item['summaryfield'] = ParseTemplateEntity($item['summaryfield'],$item['BASE_REFER'], false, false, $pdf, $encode);
						if ($calObj['resourcefield'] != "") $item['resourcefield'] = ParseTemplateEntity($item['resourcefield'],$item['BASE_REFER'], false, false, $pdf, $encode);
						if ($calObj['locationfield'] != "") $item['locationfield'] = ParseTemplateEntity($item['locationfield'],$item['BASE_REFER'], false, false, $pdf, $encode);

					} elseif ($ftdef[0]['refers_to'] == "customer") {

						if ($calObj['commentfield'] != "") $item['commentfield'] = ParseTemplateCustomer($item['commentfield'],$item['BASE_REFER'], false, $encode, false);
						if ($calObj['summaryfield'] != "") $item['summaryfield'] = ParseTemplateCustomer($item['summaryfield'],$item['BASE_REFER'], false, $encode, false);
						if ($calObj['resourcefield'] != "") $item['resourcefield'] = ParseTemplateCustomer($item['resourcefield'],$item['BASE_REFER'], false, $encode, false);
						if ($calObj['locationfield'] != "") $item['locationfield'] = ParseTemplateCustomer($item['locationfield'],$item['BASE_REFER'], false, $encode, false);

					} elseif (substr($ftdef[0]['refers_to'], 0,9) == "flextable") {
						
						$ftloc = str_replace("flextable", "", $ftdef[0]['refers_to']);
						
						if ($calObj['commentfield'] != "") $item['commentfield'] = ParseTemplateFlextableValues($ftloc, $item['BASE_REFER'], $item['commentfield'], "plain");	
						if ($calObj['summaryfield'] != "") $item['summaryfield'] = ParseTemplateFlextableValues($ftloc, $item['BASE_REFER'], $item['summaryfield'], "plain");

						if ($calObj['resourcefield'] != "") $item['resourcefield'] = ParseTemplateFlextableValues($ftloc, $item['BASE_REFER'], $item['resourcefield'], "plain");
						if ($calObj['locationfield'] != "") $item['locationfield'] = ParseTemplateFlextableValues($ftloc, $item['BASE_REFER'], $item['locationfield'], "plain");	
					}
				}

			} else {
				$acc = "nok";

			}


			$item['summaryfield']  = ParseTemplateGeneric($item['summaryfield']); 
			$item['resourcefield'] = ParseTemplateGeneric($item['resourcefield']);
			$item['locationfield'] = ParseTemplateGeneric($item['locationfield']);
			$item['commentfield']  = ParseTemplateGeneric($item['commentfield']); 

			$item['summaryfield']  = ParseTemplateCleanUp($item['summaryfield']); 
			$item['resourcefield'] = ParseTemplateCleanUp($item['resourcefield']);
			$item['locationfield'] = ParseTemplateCleanUp($item['locationfield']);
			$item['commentfield']  = ParseTemplateCleanUp($item['commentfield']); 


			$cache = array();
			$cache['summaryfield']  = $item['summaryfield'];
			$cache['resourcefield'] = $item['resourcefield'];
			$cache['locationfield'] = $item['locationfield'];
			$cache['commentfield']  = $item['commentfield'];

			qlog(INFO, "Calendar: cache SET " . $item['BASE_RECORD'] . " -- " . $calObj['id'] . ":" . $cache_id);
			SetFormCache($item['BASE_RECORD'], 0, $calObj['id'] . ":" . $cache_id, serialize($cache));

		}

		if ($acc != "nok") {
			
			if ($item[$field] != "" && $item[$field] != "0000-00-00 00:00:00") {
	
				if (GetExtraFieldType($calObj['startdatefield']) == "date/time") {
					$this_startdate = INTLDate2NLDate(GetDateFromSQLDateTime($item[$calObj['startdatefield']]));
				} else {
					$this_startdate = $item[$calObj['startdatefield']];
				}

				if (GetExtraFieldType($calObj['starttimefield']) == "date/time") {
					$this_starttime = GetTimeFromSQLDateTime($item[$calObj['starttimefield']]);
				} else {
					$this_starttime = $item[$calObj['starttimefield']];
				}

				if (GetExtraFieldType($calObj['duefield']) == "date/time") {
					$this_duedate = INTLDate2NLDate(GetDateFromSQLDateTime($item[$calObj['duefield']]));
				} else {
					$this_duedate = $item[$calObj['duefield']];
				}

				if (GetExtraFieldType($calObj['duetimefield']) == "date/time") {
					$this_duetime = GetTimeFromSQLDateTime($item[$calObj['duetimefield']]);
				} else {
					$this_duetime = $item[$calObj['duetimefield']];
				}


				if ($this_startdate == "") {
					$this_startdate = $this_duedate;
				}
				if ($this_starttime == "") {
					$this_starttime = $this_duetime;
				}

				if ($item['summaryfield'] != "") {
					$localevent = array();
					$localevent['summary']			= $item['summaryfield'];
					$localevent['comment']			= $item['commentfield'];
					$localevent['user']				= GetUserEmail($item[$userfield]);
					$localevent['duedate']			= $this_duedate;
					$localevent['starttime']		= $this_starttime;
					$localevent['duetime']			= $this_duetime;
					$localevent['startdate']		= $this_startdate;
					$localevent['resource']			= $item['resourcefield'];
					$localevent['location']			= $item['locationfield'];
					$localevent['reminder']			= $calObj['reminder_in_minutes'];
					$localevent['id']				= $calObj['id'];
					$localevent['calendarname']		= $calObj['description'];
					
					$events[] = $localevent;

				}
			}
		} else {
			// access denied
			 //	if (isset($_REQUEST['debug']) && is_administrator()) DA("ACCESS DENIED");
		}
	}

	if ($cache_for_this_session) {
		$GLOBALS['SesMem']['CalendarSessionCache' . $calObjId . $monthyear] = $events;
		$GLOBALS['SesMem']['CalendarSessionCache' . $calObjId . $monthyear . '-cachemoment'] = date('U');
	}

//	DA($events);
	return($events);
}

function DA($ar = false, $trace=true) {
	if ($ar == "") {
		$ar = $_REQUEST;
	}
	print "<pre>";
	if (is_array($ar)) {
		print_r($ar);
	} else {
		print "<h1>" . htme($ar) . "</h1>";
	}
	if ($trace) {
		debug_print_backtrace();
	}
	print "</pre>";
}
function AA($ar = false) {

	if ($ar == "") {
		$ar = $_REQUEST;
	}
	Alert(addslashes(str_replace("\n", "", (string_r($ar)))));
}
function Alert($msg) {
	return('<script type="text/javascript">alert("' . addslashes($msg) . '");</script>');
}
function JS($msg) {
	return('<script type="text/javascript">' . $msg . '</script>');
}

function CheckElementAccess($record, $field) {
	$result = "nok";

	$tt = GetExtraFieldTableType($field);
	if ($tt == "entity") {
		if (CheckExtraFieldAccess($field) == "ok") {
			if (CheckEntityAccess($record) == "ok") {
				$result = "ok";
				$reason .= "\nEntity and field access ok";
			} elseif (CheckEntityAccess($record) == "readonly") {
				$result = "readonly";
				$reason .= "\nEntity access is readonly";
			} else {
				$result = "nok";
				$reason .= "\nRecord access denied";
			}
		} elseif (CheckExtraFieldAccess($field) == "readonly") {
			$result = "readonly";
			$reason .= "\nField access is readonly";
		} else {
			$result = "nok";
			$reason .= "\nField access denied";
		}
	} elseif ($tt == "customer") {
		if (CheckExtraFieldAccess($field) == "ok") {
			if (CheckCustomerAccess($record) == "ok") {
				$result = "ok";
				$reason .= "\nCustomer and field access ok";
			} elseif (CheckEntityAccess($record) == "readonly") {
				$result = "readonly";
				$reason .= "\nCustomer access is readonly";
			} else {
				$result = "nok";
				$reason .= "\nRecord access denied";
			}
		} elseif (CheckExtraFieldAccess($field) == "readonly") {
			$result = "readonly";
			$reason .= "\nField access is readonly";
		} else {
			$result = "nok";
			$reason .= "\nField access denied";
		}
	} elseif (is_numeric($tt)) {
		if (CheckFlexTableAccess($tt) == "ok") {
			if (CheckExtraFieldAccess($field) == "ok") {
				if (CheckFlextableRecordAccess($tt, $record) == "ok") {
					$result = "ok";
					$reason .= "\nFlextable and field access ok";
				} elseif (CheckFlextableRecordAccess($tt, $record) == "readonly") {
					$result = "readonly";
					$reason .= "\nRecord access is readonly";
				} else {
					$result = "nok";
					$reason .= "\nRecord access denied";
				}
			} elseif (CheckExtraFieldAccess($field) == "readonly") {
				$result = "readonly";
				$reason .= "\nField access is readonly";
			} else {
				$result = "nok";
				$reason .= "\nField access denied";
			}
		} elseif (CheckFlexTableAccess($tt) == "readonly") {
			if (CheckExtraFieldAccess($field) != "nok") {
				if (CheckFlextableRecordAccess($tt, $record) != "nok") {
					$result = "readonly";
					$reason .= "\nTable access is readonly";
				}	else {
					$result = "nok";
					$reason .= "\nRecord access denied";
				}
			} else {
				$result = "nok";
				$reason .= "\nField access denied";
			}
		} else {
			$result = "nok";
			$reason .= "\nTable access denied";
		}
	}
	$GLOBALS['DECISIONTRACE'] .= $reason . "\n";
	return($result);
}


function CreateHighChartFromSQL($title, $subtitle, $sql, $type, $height=400, $width=700) {
	
	$result = db_GetArray($sql);

	$series = array();

	if ($type == "pie") {
		foreach ($result AS $row) {
			$series[$row[0]] = $row[1];
		}
	} else {

		foreach ($result AS $row) {
			$cc = 0;
			foreach ($row AS $key => $value) {
				if ($cc > 1) {
					if (!is_numeric($key)) {
						$series[$key][] = $value;
					}
				} else {
					if (!is_numeric($key)) {
						$xAxisCategories[] = $value;
						$yAxisTitle = $key;
					}
				}
				$cc++;
			}
		}
	}
	
	return(CreateHighChart($type, $title, $subtitle, $xAxisCategories, $yAxisTitle, $series, $height, $width));
}

function CreateHighChart($type, $title, $subtitle, $xAxisCategories, $yAxisTitle, $series, $height=400, $width=700) {

	if ($type == "") $type = "line";
	if ($type == "stacked column") {
		$stack = true;
		$type = "column";
	}
	$me = randomstring(8, true);
	$js = "<div id='" . $me . "' style='width: " . $width . "px; height: " . $height . "px;'></div>";
	$js .= "
	<script type='text/javascript'>
	
			
	var chart;
	$(document).ready(function() {
	   chart = new Highcharts.Chart({
		  chart: {
			 renderTo: '" . $me . "',
			 defaultSeriesType: '" . $type . "',
			 ";
			 if ($type != "pie") {
				 $js .=" marginRight: 130,
				 ";
			 }
			 $js .= " marginBottom: 25
		  },
		 credits: {
			enabled: false
		},
		  title: {
			 text: '" . jsencode($title) . "',
			 x: -20
		  },
		  subtitle: {
			 text: '" . jsencode($subtitle) . "',
			 x: -20
		  },
		  xAxis: {
			 categories: [";
			 $nf = false;
			 foreach ($xAxisCategories AS $xac) {
				 $js .= ($nf) ? "," : "";
				 $nf = true;
				 $js .= "'" . jsencode($xac) . "'";
			 }
			$js .= "]
		  },
		  yAxis: {
			 title: {
				text: '" . jsencode($yAxisTitle) . "'
			 },
			 plotLines: [{
				value: 0,
				width: 1,
				color: '#808080'
			 }]
		  },
			";
		if ($type == "pie") {
		$js .= "
			tooltip: {
			 formatter: function() {
				return '<b>'+ this.point.name +'</b>: ' + this.y + ' ('+ Math.round(this.percentage,2) +' %)';
			 }
		  },
		  plotOptions: {
			 pie: {
				allowPointSelect: true,
				cursor: 'pointer',
				dataLabels: {
				   enabled: true,
				   color: '#000000',
				   connectorColor: '#000000',
				   formatter: function() {
					  
					  return '<b>'+ this.point.name +'</b>: '+ Math.round(this.percentage,2) +' %';
				   }
				}
			 }
		  },";
		} else {
			$js .= "
					  tooltip: {
			 formatter: function() {
					   return '<b>'+ this.series.name +'</b><br/>'+
				   this.x +': '+ this.y;
			 }
		  },
		  ";
		}
		if ($stack) {
			$js .= "
			plotOptions: {
			 column: {
				stacking: 'normal',
				dataLabels: {
				   enabled: true,
				   color: 'white'
				}
			 }
		  },
			";
		}
		 $js .= "
		  legend: {
			 layout: 'vertical',
			 align: 'right',
			 verticalAlign: 'top',
			 x: -10,
			 y: 100,
			 borderWidth: 0
		  },
		  series: [\n";
	
		if ($type == "pie") {
			$js .= "{\n\n";
			$js .= "data:[\n";
			$ms = false;
			foreach ($series AS $seriesName => $seriesData) {
				if ($ms) {
					$js .= "\n,\n";
				}
				$js .= "['" . jsencode($seriesName) . "', " . $seriesData . "]";
				$ms = true;
			}
			$js .= "\n]}";
		} else {
			$ms = false;
			foreach ($series AS $seriesName => $seriesData) {
				if ($ms) {
					$js .= "\n,\n";
				}
				$js .= "{\n\tname: '" . jsencode($seriesName) . "',\n\tdata: [";
				$nf = false;
				foreach ($seriesData as $data) {
					$js .= ($nf) ? "," : "";
					$nf = true;
					$js .= jsencode($data);
				}
				$js .= "]\n}";
				$ms = true;
			}
		}

	$js .= "\n]
	   });
	   
	   
	});
	
	</script>
	";
	return($js);
}

function DataJournal($record, $from, $to, $field, $table=false) {
	if (!$table) {
		$table = GetExtraFieldTableType($field);
	}
	if ($from != $to) {
		mcq("INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "datajournal(record, from_val, to_val, by_user, field, timestamp_last_change, `table`) VALUES('" . mres($record) . "','" . mres(trim($from)) . "','" . mres(trim($to)) . "','" . $GLOBALS['USERID'] . "','" . mres($field) . "', NOW(), '" . mres($table) . "')", $db);

	}
}

//function 

function CheckUniqueness($eid, $field, $value) {

	$field = str_replace("EFID", "", $field);

	$type = GetExtraFieldType($field);
	
	if ($type == "date") {
		$value = FormattedDateToNLDate($value);
	}

	$tt = GetExtraFieldTableType($field);

	$MustBeUnique = GetAttribute("extrafield", "MustBeUnique", $field);
	$IgnoreUniqueValues = explode(",", GetAttribute("extrafield", "IgnoreUniqueValues-CommaSeprated", $field));

	if ($MustBeUnique == "Yes (whole table)" || $MustBeUnique == "Yes (within refer)") {

		if ($tt == "entity") {
			$table = $GLOBALS['TBL_PREFIX'] . "entity";
			$id = "eid";
			$sql_add .= " AND deleted!='y'";
		} elseif ($tt == "customer") {
			$table = $GLOBALS['TBL_PREFIX'] . "customer";
			$id = "id";
		} else {
			$table = $GLOBALS['TBL_PREFIX'] . "flextable" . $tt;
			if ($MustBeUnique == "Yes (within refer)") {
				$refer = db_GetValue("SELECT refer FROM " . $table . " WHERE recordid='" . mres($eid) . "'");
				$sql_add = " AND refer='" . $refer . "'";
			}
			$id = "recordid";
			$sql_add .= " AND deleted!='y'";
		}
		foreach ($IgnoreUniqueValues AS $val) {
				if ($val != "{{none}}") {
					$sql_add .= " AND EFID" . $field . " != '" . mres($val) . "'";
				}
		}

		$sql = "SELECT COUNT(*) FROM " . $table . " WHERE EFID" . $field . " = '" . mres($value) . "' AND " . $id . " != '" . $eid . "'" . $sql_add;
		$count = db_GetValue($sql);
		qlog(INFO, "GUP " . $sql);
		if ($count == 0) {
			return(true);
		} else {
			return(false);
		}
	} else {
	//	qlog(INFO, "GUP " . $MustBeUnique);
		return(true);
	}

}
function ShowModuleEditScreen() {

	$result = "";
	if ($_REQUEST['Save']) {
		SetAttribute("module", "SaveAction " . date('Y-m-d H:i:s') . " " . GetUserName($GLOBALS['USERID']), db_GetValue("SELECT module_code FROM " . $GLOBALS['TBL_PREFIX'] . "modules WHERE mid='" . mres($_REQUEST['mid']) . "'") , $_REQUEST['mid']);
		SetAttribute("module", "SaveComments " . date('Y-m-d H:i:s') . " " . GetUserName($GLOBALS['USERID']), $_REQUEST['saveComments'], $_REQUEST['mid']);

		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "modules SET module_code='" . mres($_REQUEST['code']) . "', module_name='" . mres($_REQUEST['module_name']) . "', module_description='" . mres($_REQUEST['module_description']) . "', module_list_html='" . mres($_REQUEST['module_list_html']) . "' , for_table='" . mres($_REQUEST['for_table']) . "' WHERE mid='" . mres($_REQUEST['mid']) . "'", $db);
	}


	print "<form id='edit_module_code' method='post' action=''><div class='showinline'>";
	print "<table class='admintable'><tr><td colspan='4'>";
	
	$RunAsUser = GetAttribute("module", "RunAsUser", $_REQUEST['mid']);
	if ($RunAsUser == "") {
		SetAttribute("module", "RunAsUser", "{{current user}}", $_REQUEST['mid']);
	} elseif (is_numeric($RunAsUser)) {
		print "<span class=\"noway\">This module will always be ran as user " . GetUserName($RunAsUser) . ", regardless the context!</span><br>";
	}
	
	
	
	

	$module = db_GetRow("SELECT mid, module_code, module_name, module_description,module_list_html,module_accessarray,for_table FROM " . $GLOBALS['TBL_PREFIX'] . "modules WHERE mid='" . mres($_REQUEST['mid']) . "'");
	$accarr = array();
	$accarr = unserialize($module['module_accessarray']);
//	print "<h1>Editing module " . $_REQUEST['mid'] . "</h1>";
	
	print "<input type='submit' name='Save' value='Save'> <a class='arrow' href='modules.php?action=run&amp;mid=" . $_REQUEST['mid'] . "'>Run in this window</a> <a class='arrow' href='#' onclick=\"window.open('modules.php?action=run&amp;mid=" . $_REQUEST['mid'] . "', 'ModuleRunWindow');\">Run in new window</a> " . AttributeLink("module", $_REQUEST['mid']) . " <a class='arrow' href='javascript:PopRightsChooserModules(" . $module['mid'] . ");'>Access restrictions</a>";
	
	print "</td></tr>";

	



	print "<tr><td>Name</td><td><input type='text' name='module_name' size='50' value='" . htme($module['module_name']) . "'></td>";
	print "<td>List HTML</td><td><input type='text' name='module_list_html' size='50' value='" . htme($module['module_list_html']) . "'></td></tr>";

	print "<tr><td>Description</td><td><input type='text' name='module_description' size='50' value='" . htme($module['module_description']) . "'></td>";
	print "<td>For table</td><td>";
	print "<select name='for_table'>";
	print "<option value='none'>None/don't</option>";
	$ins = "";
	if ($module['for_table'] == "entity") $ins = "selected='selected'";
	print "<option value='entity' " . $ins . ">" . $lang['entities'] . "</option>";
	$ins = "";
	if ($module['for_table'] == "customer") $ins = "selected='selected'";
	print "<option value='customer' " . $ins . ">" . $lang['customers'] . "</option>";
	foreach (GetFlextableDefinitions() AS $ft) {
		$ins = "";
		if ($module['for_table'] == "flextable" . $ft['recordid']) $ins = "selected='selected'";
		print "<option value='flextable" . $ft['recordid'] . "' " . $ins . ">" . htme($ft['tablename']) . "</option>";

	}
	print "</td></tr>";
	print "<tr><td>Comments/changes</td><td colspan=\"1\"><input type=\"text\" name=\"saveComments\" id=\"JS_saveComments\" size=\"50\"><td>Sanity check </td><td>" . ValidatePHPSyntax($module['module_code']);
	if ($accarr[0] == "") {			
		print "<br><img src='images/error.gif' alt='Everybody can run this module!'> Warning: everyone who has a valid login account can run this module!";
	}
	print "</td></tr>";
	print "</table>";

	if (!$_REQUEST['plain']) {
	?>
	<script type="text/javascript" src="lib/editarea/edit_area/edit_area_full.js"></script>
	<script type="text/javascript">
	editAreaLoader.init({
		id : "code-editor"			// textarea id
		,start_highlight: true	// if start with highlight
		,allow_resize: "both"
		,syntax_selection_allow: "css,html,js,php"
		,word_wrap: true
		,allow_toggle: true
		,language: "en"
		,syntax: "php"
		,font_size: "9"
		,font_family: "monospace"

	});
	</script>
	<?php
	}
	print "<table>";
	if ($resultPHPcheck) {
		print "<tr><td colspan='2'><h1>" . nl2br($resultPHPcheck) . "</h1></td></tr>";
	}
	print "<tr><td colspan='2'><textarea id='code-editor' rows='35' cols='140' name='code' class='mnspc'>" . htme($module['module_code']) . "</textarea>";
	print "<input type='hidden' name='mid' value='" . $_REQUEST['mid'] . "'>";
	print "</td></tr>";
	
	print "<tr><td colspan='2'>";
	print "<input type='submit' name='Save' value='Save'>";
	print "</td></tr>";
	print "<tr><td colspan=\"2\">Change log:<pre>";
			foreach (db_GetArray("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "attributes WHERE identifier='module' AND entity='" . mres($_REQUEST['mid']) . "' AND attribute LIKE 'SaveComments%' ORDER BY STR_TO_DATE(SUBSTRING(attribute,14,19), '%Y-%m-%d %H:%i:%s') DESC") AS $row) {
				print str_replace("SaveComments ", "", $row['attribute']) . " :: " . $row['value'] . "\n";
			}
			print "</pre></td></tr>";
	print "</table></div></form>";
}


function ReturnInlineFlextableForm($ft, $refer) {
	global $lang;

	if (isset($_REQUEST['debug']) && is_administrator()) {
		$debug = true;
	}
	


	$ftdef = GetFlexTableDefinitions($ft);
	$fielddef = GetExtraFlexTableFields($ft, false, false, false);



	$ftdef = $ftdef[0];
	
	$fts = explode(",", GetAttribute("flextable", "InlineFormFieldsToShow", $ft));

	$InlineFormShowHorizontalNumericTotal = GetAttribute("flextable", "InlineFormShowHorizontalNumericTotal", $ft);
	$InlineFormShowVerticalNumericTotal   = GetAttribute("flextable", "InlineFormShowVerticalNumericTotal", $ft);
	$lines								  = GetAttribute("flextable", "InlineFormNumOfSpareLines", $ft);

	$ignorefields = array(); // Fields to ignore when testing if a row was submitted

	$end_html_extra = "";
	$sql_select_ins = "";

	if ($_REQUEST['deleteRow'] != "" && CheckFlextableRecordAccess($ft, $_REQUEST['deleteRow']) == "ok") {
		mcq("UPDATE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . " SET deleted='y' WHERE recordid='" . mres($_REQUEST['deleteRow']) . "'", $db);
		journal($_REQUEST['deleteRow'], "Record deleted", "flextable" . $ft);
		CleanUpCacheTablesAfterSave();

	}

	foreach ($fts AS $field) {
		foreach ($fielddef AS $fielddefrow) {
			if ($fielddefrow['id'] == $field) {
				$def = $fielddefrow;
				break;
			}
		}

		if ($def['defaultval'] != "" || $_REQUEST['EFID' . $field] != "" || substr(GetExtraFieldType($field), 0, 4) == "User") {
			$ignorefields[] = $field;
			if ($_REQUEST['EFID' . $field] != "") {
				$end_html_extra .= "<input type=\"hidden\" name=\"EFID" . $field . "\" id=\"JS_EFID" . $field . "\" value=\"" . htme($_REQUEST['EFID' . $field]) . "\">";
				$sql_select_ins .= " AND EFID" . $field . " = '" . mres($_REQUEST['EFID' . $field]) . "'";
			}
		}
		
	}

	if ($debug) DA($sql_select_ins);

	
	

	if (is_numeric($_REQUEST['loadids'])) {
		$load_ids = PopStashValue($_REQUEST['loadids']);
		if ($_REQUEST['deleteRow'] != "") {
			for ($t=0;$t<count($load_ids);$t++) {
				if ($load_ids[$t] == $_REQUEST['deleteRow']) {
					unset($load_ids[$t]);
				}
			}
		}
	} elseif (is_numeric($refer)) {
		$sql= "SELECT " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . " WHERE (deleted='n' OR deleted IS NULL) AND refer=" . mres($refer) . $sql_select_ins;
		$load_ids = db_GetFlatArray($sql);
	} elseif (!isset($_REQUEST['Blank'])) {
		if ($sql_select_ins == "") {
			$sql_select_ins = " AND DATE(timestamp_last_change) = '" . date('Y-m-d') . "'";
		}
		$sql= "SELECT " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . ".recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . " WHERE (deleted='n' OR deleted IS NULL) " . $sql_select_ins;
		$load_ids = db_GetFlatArray($sql);
	}  


	if ($debug) DA($sql);

	if (!is_array($load_ids)) {
		$load_ids = array();
	}
	
	
	$lines += count($load_ids);

	$submitted = array();
	$updated = array();
	$highlightrow = array();

	for ($y=0;$y<$lines+1;$y++) {		
		foreach ($fts AS $possibly_submitted) {
			if ($ftdef['orientation'] == "one_entity_to_many") { // means refer field must be ignored when checking which line was submitted
				$ignorefields[] = "FLEXTABLEREFERFIELD-row" . $y;
			}

			if (!in_array($possibly_submitted, $ignorefields) && ($_REQUEST['INT_EL__new__' . $possibly_submitted . '-row' . $y] != "") && !in_array($y, $submitted)) {
				$submitted[] = $y;

			}
			
			foreach ($_REQUEST AS $name => $value) {
				$ar = explode("_", $name);
				$tmp = explode("-row", $ar[3]);
				$row = $tmp[1];
				
				if (is_numeric($ar[2]) && !in_array($ar[2], $updated)) {
					$updated[$row] = $ar[2];
				}
			}
		}
	}

	if (count($submitted) > 0 || count($updated) > 0) {
		$post = array();
		foreach ($submitted AS $submitted_row) {
			$row = array();
			if ($ftdef['orientation'] == "one_entity_to_many") { // means refer field must be ignored when checking which line was submitted
				$row['refer'] = $_REQUEST['FLEXTABLEREFERFIELD-row' . $submitted_row];
			}
			foreach ($fts AS $possibly_submitted) {
				$row['EFID' . $possibly_submitted] = $_REQUEST['INT_EL__new__' . $possibly_submitted . '-row' . $submitted_row];
			}
			$post[] = $row;	
		}

		foreach ($post AS $insert) {
			$emptyvalidfieldfound = false;
			$validfieldfound = false;
			$stop = false;
			$query = "INSERT INTO " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . "(refer,readonly";
			foreach ($fts AS $field) {
				$query .= ",EFID" . mres($field);
			}
			$query .= ") VALUES(" . mres($insert['refer']) . ",'no'";
			foreach ($fts AS $field) {
				$query .= ",'" . mres($insert['EFID' . $field]) . "'";

				$test = ValidateFieldInput($field, $insert['EFID' . $field], $ft, true);
				if ($test != $insert['EFID' . $field] && $test != "{{{not_empty}}}") {
					$stop = true;
					$highlightrow[$rownum][$field] = 1;
					$load_ids[] = $insert;
					$lines++;
					//print "ER: $field :: " . $insert['EFID' . $field] . " --- " . ValidateFieldInput($field, $insert['EFID' . $field], $ft, true);
				} elseif ($test == "{{{not_empty}}}") {
					// field is empty but this is not allowed. Only important when something else was entered
					$emptyvalidfieldfound = true;
				} elseif (in_array($field, $ignorefields)) {
					// field is valid, but must be ignored
//					print "Ignore: $field " . $insert['EFID' . $field];
				} else {
//					print "Valid : $field " . $insert['EFID' . $field];
					$validfieldfound = true;
				}
				
			}

			if ($emptyvalidfieldfound && $validfieldfound) {
				// Some valid field was found BUT ALSO a non-entered field -> wrong!
				$stop = true;
			}
			$query .= ")";
			if ($stop) {
				print "Row not saved - invalid input";
			} else {
				mcq($query, $db);
				$new_id = mysql_insert_id();

				qlog(INFO, "Calling trigger subsystem... $st");
				ClearAccessCache($new_id,"ft" . $ft, "all");
				ProcessTriggers("FlexTable" . $ft . "-Add",$new_id,"",false,$ft);
				FindAndRecalculateAllRelatedRecords($new_id, $ft);
				if (!in_array($new_id, $load_ids)) {
					$load_ids[] = $new_id;
					$lines++;
				}
			}
		}

		$stop = false;

		$post = array();

		foreach ($updated AS $rownum => $recordid) {
			$row = array();
			$row['recordid'] = $recordid;
			if ($ftdef['orientation'] == "one_entity_to_many") { // means refer field must be ignored when checking which line was submitted
				$row['refer'] = $_REQUEST['FLEXTABLEREFERFIELD-row' . $rownum];
			}
			foreach ($fts AS $possibly_submitted) {
				$row['EFID' . $possibly_submitted] = $_REQUEST['INT_EL_' . $recordid . '_' . $possibly_submitted . '-row' . $rownum];
			}
			$post[] = $row;	
		}

		foreach ($post AS $update) {
			$query = "UPDATE " . $GLOBALS['TBL_PREFIX'] . "flextable" . $ft . " SET refer=" . mres($update['refer']) . "";
			foreach ($fts AS $field) {
				$query .= ",EFID" . mres($field) . " = '" . mres($update['EFID' . $field]) . "'";
				if (ValidateFieldInput($field, $update['EFID' . $field], $ft) != $update['EFID' . $field]) {
					$stop = true;
				}
			}
			$query .= " WHERE recordid = " . mres($update['recordid']);
			if ($stop) {
				//print "not saved";			
				
			} else {
				mcq($query, $db);
				qlog(INFO, "Calling trigger subsystem... $st");
				ClearAccessCache($update['recordid'],"ft" . $ft, "all");
				ProcessTriggers("FlexTable" . $ft . "-Change",$update['recordid'],"",false,$ft);
				FindAndRecalculateAllRelatedRecords($update['recordid'], $ft);
				if (!in_array($update['recordid'], $load_ids)) {
					$load_ids[] = $update['recordid'];
					$lines++;
				}
			}
		}


	}

	if ($_REQUEST['NotInline'] != "") {
		$tp = "<form name=\"EditEntity\" id=\"EditEntity\" method=\"post\" action=\"?\"><input name=\"NotInline\" value=\"true\" type=\"hidden\">";
	}
	$tp .= "<input name=\"ilft\" value=\"" . $ft . "\" type=\"hidden\">";
	$tp .= "<table class=\"crm-nomax\">";
	$tp .= "<thead><tr><td></td>";

	if ($ftdef['orientation'] == "one_entity_to_many" && !($refer>0)) { // means refer field must be printed
		if ($ftdef['refers_to'] == "entity") {
			$tp .= "<td>" . $lang['entity'] . "</td>";
		} elseif ($ftdef['refers_to'] == "customer") {
			$tp .= "<td>" . $lang['customer'] . "</td>";
		} else {
			$tp .= "<td>refer</td>";
		}
		
	}

	foreach ($fts AS $field) {
		$tp .= "<td>" . GetExtraFieldListName($field) . "</td>";
	}
	if ($InlineFormShowVerticalNumericTotal != "No") {
		$tp .= "<td></td>";
	}
	$tp .= "<td></td>";



	$tp .= "</tr></thead>";
	
	$summs = array();

	for ($i=0;$i<$lines;$i++) {
		
		$highlight = false;

		if ($load_ids[$i] > 0 && !is_array($load_ids[$i])) {
			$currow = "";
			if (CheckFlextableRecordAccess($ft, $load_ids[$i]) == "ok" && $_REQUEST['deleteRow'] != $load_ids[$i]) {
				$currow = GetFlexTableRow($load_ids[$i], $ft);
				$firsttd = "<td><img src=\"images/ok.gif\"></td>";
			} else {
				$currow = "";
				$firsttd = "<td></td>";
			}

			
		} elseif (is_array($load_ids[$i])) {
			$currow = $load_ids[$i];
			unset($load_ids[$i]);
			$highlight = true;
			$firsttd = "<td><img src=\"images/smallerrorsmall.gif\"></td>";
		} else {
			$currow = "";
			$firsttd = "<td></td>";
		}
		
		$tp .= "<tr";
		if (is_array($highlightrow[$i]) || $highlight) {
			$tp .= " class=\"errorneousrow\"";
		}
		$tp .= ">" . $firsttd;


		if ($currow['recordid'] > 0) {
			$id = $currow['recordid'];
		} else {
			$id = "_new_";
		}
		
		if ($ftdef['orientation'] == "one_entity_to_many") { // means refer field must be printed

			if (is_numeric($refer)) {
				$referfield = "<input name='FLEXTABLEREFERFIELD-row" . $i . "' id='JS_FLEXTABLEREFERFIELD_EL_" . $id . "-row" . $i . "' type=\"hidden\" value=\"" . htme($refer) . "\">";
				$dontprintrefer = true;
			} elseif (GetAttribute("flextable", "AllowReferChanges", $ft) == "No" && $id != "_new_" && $currow['refer'] > 0) {
				$referfield = "<input name='FLEXTABLEREFERFIELD-row" . $i . "' id='JS_FLEXTABLEREFERFIELD_EL_" . $id . "-row" . $i . "' type=\"hidden\" value=\"" . htme($currow['refer']) . "\">";
				if ($ftdef['refers_to'] == "entity") {
					$referfield .= strip_tags(ParseTemplateEntity($ftdef['refer_field_layout'], $currow['refer'], false, true, false, "htme"));
				} elseif ($ftdef['refers_to'] == "customer") {
					$referfield .= ParseTemplateCustomer($ftdef['refer_field_layout'], $currow['refer'], false, "htme", "ref" . $flextableid . "-" . $row['id']);
				} else {
					$flextable = str_replace("flextable", "", $ftdef['refers_to']);
					$referfield .= ParseFlexTableTemplate($flextable, $currow['refer'], $ftdef['refer_field_layout'] , true, false, false, "htme");
				}
				$nosearchbox = true;
			} else {
				$nosearchbox = false;

				if ($ftdef['refers_to'] == "entity") {

						
					$referfield = "<select name='FLEXTABLEREFERFIELD-row" . $i . "' id='JS_FLEXTABLEREFERFIELD_EL_" . $id . "-row" . $i . "'>";

					if ($ENTITYREFERFIELD == "" || is_array($currow)) {
						$tmp = "";
						$sql = "SELECT eid FROM " . $GLOBALS['TBL_PREFIX'] . "entity ORDER BY eid";
						$res = mcq($sql, $db);
						while ($row = mysql_fetch_array($res)) {
							$t = CheckEntityAccess($row['eid']);
								if ($t == "ok") {

									if ($currow['refer'] == $row['eid']) {

										$ins = 'selected="selected"';
									} else {
										unset($ins);
									}

									$tmp .= "<option " . $ins . " value='" . $row['eid'] . "'>";
									$tmp .= fillout(strip_tags(ParseTemplateEntity($ftdef['refer_field_layout'], $row['eid'], false, true, false, "htme")), 50);
									$tmp .= "</option>";

							}
						}
						$tmp .= "</select>";
						$referfield .= $tmp;
						if (!is_array($currow)) {
							$ENTITYREFERFIELD = $tmp;
						}
					} else {
						$referfield .= $ENTITYREFERFIELD;
					}

					
				} elseif ($ftdef['refers_to'] == "customer") {
					if (is_numeric($refer)) {
						$referfield = "<input name='FLEXTABLEREFERFIELD-row" . $i . "' id='JS_FLEXTABLEREFERFIELD_EL_" . $id . "-row" . $i . "' type=\"hidden\" value=\"" . htme($refer) . "\">";
					} else {
						$referfield = "<select name='FLEXTABLEREFERFIELD-row" . $i . "' id='JS_FLEXTABLEREFERFIELD_EL_" . $id . "-row" . $i . "'>";
						if ($CUSTOMERREFERFIELD == ""|| is_array($currow)) {
							$tmp = "";
							$sql = "SELECT id FROM " . $GLOBALS['TBL_PREFIX'] . "customer ORDER BY custname";
							$res = mcq($sql, $db);
							while ($row = mysql_fetch_array($res)) {
								$t = CheckCustomerAccess($row['id']);
								if ($t == "ok") {

									if ($currow['refer'] == $row['id']) {
										$ins = 'selected="selected"';
									} else {
										unset($ins);
									}
									$tmp .= "<option " . $ins . " value='" . $row['id'] . "'>";
									$tmp .= ParseTemplateCustomer($ftdef['refer_field_layout'], $row['id'], false, "htme", "ref" . $flextableid . "-" . $row['id']);

									$tmp .= "</option>";
								}
							}
							$tmp .= "</select>";
							if (!is_array($currow)) {
								$CUSTOMERREFERFIELD = $tmp;
							}
							$referfield .= $tmp;
						} else {
							$referfield .= $CUSTOMERREFERFIELD;
						}
					}

				} elseif (substr($ftdef['refers_to'],0,9) == "flextable") {
		
					$referfield = "<select name='FLEXTABLEREFERFIELD-row" . $i . "' id='JS_FLEXTABLEREFERFIELD_EL_" . $id . "-row" . $i . "'>";
					
					if ($FLEXTABLEREFERFIELD == ""|| is_array($currow)) {
						$tmp = "";
						$flextable = str_replace("flextable", "", $ftdef['refers_to']);
						$flextabledef = GetFlextableDefinitions($flextable);

						$sql = "SELECT recordid FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $flextable . " WHERE deleted!='y' ORDER BY recordid";

						$res = mcq($sql, $db);
						while ($row = mysql_fetch_array($res)) {
							$t = CheckFlextableRecordAccess($flextable, $row['recordid']);

							if ($t == "ok") {
								if ($currow['refer'] == $row['recordid']) {
									$ins = 'selected="selected"';
								} else {
									unset($ins);
								}
								$tmp .= "<option " . $ins . " value='" . $row['recordid'] . "'>";
								$tmp .= ParseFlexTableTemplate($flextable, $row['recordid'], $ftdef['refer_field_layout'] , true, false, false, "htme");

								$tmp .= "</option>";
							}
						}
						$tmp .= "</select>";
						$referfield .= $tmp;
						if (!is_array($currow)) {
							$FLEXTABLEREFERFIELD = $tmp;
						}
					} else { 
						$referfield .= $FLEXTABLEREFERFIELD;
					}
				}

			}
			if ($dontprintrefer) {
				$endprint .= $referfield;
			} else {
				if (!$nosearchbox) {
					$referfield .= ReturnDropDownSearchField("JS_FLEXTABLEREFERFIELD_EL_" . $id . "-row" . $i);
				}
				$tp .= "<td class=\"nwrp\">" . $referfield . "</td>";
			}
			
		}
	
		
		foreach ($fts AS $field) {
			$highlight = false;
			if ($currow['EFID' . $field] != "") {
				$preval = $currow['EFID' . $field];
			} else {
				$preval = false;
			}
			if (is_array($currow) && ValidateFieldInput($field, $preval, $ft, true) != $preval) {
				$highlight = true;
			}

			$ts = GetSingleExtraFieldFormBox($id,$field,false,false,false,false,true, "-row" . $i, $preval);
//			DA($ts);
			if (GetExtraFieldType($field) == "numeric") {
				$ts = str_replace("onchange=\"", "onchange=\"countsum(this.id);countrowsum(" . $i . ");", $ts);
				$ts = str_replace("class=\"", "class=\"numeric ", $ts);
				
				if ($summs[$field] == "") $summs[$field] = 0;
				if ($id != "_new_") {
					$numval = GetExtraFieldValue($id, $field);
					$summs[$field] += $numval;
					$summs["row" . $i] += $numval;
				}
				
				
			} 
			$classinc = "";

			if ($highlightrow[$i][$field] != "" || $highlight) {
				$classinc .= " errorneouscell";
			}
			$tp .= "<td class=\"" . $classinc . "\"";
			$tp .= ">" . $ts . "</td>";
		}
		
		if ($InlineFormShowHorizontalNumericTotal != "No") {
			$tp .= "<td>";
			$tp .= "<div id=\"sumrow" . $i . "\" class=\"inlineftsum\">" . $summs["row" . $i] . "</div></td>";
		} else {
			//$tp .= "<td></td>";
		}
		if ($id != "_new_") {
			$tp .= "<td class=\"centered td_delete\" style=\"width: 20px;\"><a onclick=\"document.getElementById('JS_deleteRow').value='" . $currow['recordid'] . "';SubmitInlineFTForm('EditEntity','" . $_REQUEST['AjaxHandler'] . "');\"><img src='images/deletes.gif' alt='" . $lang['delete'] . "'></a></td>";
		} else {
			$tp .= "<td></td>";
		}
			
		$tp .= "</tr>";
	}

	if ($InlineFormShowVerticalNumericTotal != "No") {
		$tp .= "<tr><td></td>";
		if ($ftdef['orientation'] == "one_entity_to_many" && !$dontprintrefer) {
			$tp .= "<td></td>";
		}
		$grandtotal = 0;
		foreach ($fts AS $field) {
			if (GetExtraFieldType($field) == "numeric") {
				$tp .= "<td><div id=\"sum" . $field . "\" class=\"inlineftsum\">" . $summs[$field] . "</div></td>";
				$grandtotal += $summs[$field];
			} else {
				$tp .= "<td></td>";
			}
		}
		$tp .= "<td><div id=\"grandtotal\" class=\"inlineftsum\">" . $grandtotal . "</div></td>";
		$tp .= "<td></td>";
		$tp .= "</tr>";
	}
	$tp .= "<tr><td colspan=\"" . (count($fts) + 4) . "\" style=\"text-align: right;\">";
	$tp .= $endprint . $end_html_extra;
	$tp .= "<input type=\"hidden\" name=\"loadids\" id=\"JS_loadids\" value=\"" . PushStashValue($load_ids) . "\">";
	$tp .= "<input type=\"hidden\" name=\"ft\" id=\"JS_ft\" value=\"" . $ft . "\">";
	$tp .= "<input type=\"hidden\" name=\"deleteRow\" id=\"JS_deleteRow\" value=\"\">";
	if ($refer > 0) {
		$tp .= "<input type=\"hidden\" name=\"refer\" id=\"JS_refer\" value=\"" . $refer . "\">";
	}
	$InlineFormSaveButtonText = GetAttribute("flextable", "InlineFormSaveButtonText", $ft);
	if ($InlineFormSaveButtonText == "") {
		$InlineFormSaveButtonText = $lang['save'];
	}
	$tp .= "<input type=\"button\" id=\"inlineftsubmitbutton\" onclick=\"SubmitInlineFTForm('EditEntity','" . $_REQUEST['AjaxHandler'] . "');\" value='" . htme($InlineFormSaveButtonText) . "'>";

	$tp .= "</table>";
	
	if ($_REQUEST['NotInline'] != "") {
		$tp .= "</form>";
	}
	

	return($tp);

}

function jsencode($str) {
    $str = str_replace('\\', '\\\\', $str);
    $str = str_replace('\'', '\\\'', $str);
    $str = str_replace('"', '\\"', $str);
    return $str;
}

function ShowPDFinJS($fileid) {
	
	?>
	<center>
	<script type="text/javascript" src="js/pdf.js/core.js"></script>
	<script type="text/javascript" src="js/pdf.js/util.js"></script>
	<script type="text/javascript" src="js/pdf.js/canvas.js"></script>
	<script type="text/javascript" src="js/pdf.js/obj.js"></script>
	<script type="text/javascript" src="js/pdf.js/function.js"></script>
	<script type="text/javascript" src="js/pdf.js/charsets.js"></script>
	<script type="text/javascript" src="js/pdf.js/cidmaps.js"></script>
	<script type="text/javascript" src="js/pdf.js/colorspace.js"></script>
	<script type="text/javascript" src="js/pdf.js/crypto.js"></script>
	<script type="text/javascript" src="js/pdf.js/evaluator.js"></script>
	<script type="text/javascript" src="js/pdf.js/fonts.js"></script>
	<script type="text/javascript" src="js/pdf.js/glyphlist.js"></script>
	<script type="text/javascript" src="js/pdf.js/image.js"></script>
	<script type="text/javascript" src="js/pdf.js/metrics.js"></script>
	<script type="text/javascript" src="js/pdf.js/parser.js"></script>
	<script type="text/javascript" src="js/pdf.js/pattern.js"></script>
	<script type="text/javascript" src="js/pdf.js/stream.js"></script>
	<script type="text/javascript" src="js/pdf.js/worker.js"></script>
	<script type="text/javascript" src="../../external/jpgjs/jpg.js"></script>

	<script type="text/javascript">
		// Specify the main script used to create a new PDF.JS web worker.
		// In production, change this to point to the combined `pdf.js` file.
		PDFJS.workerSrc = 'js/pdf.js/worker_loader.js';
	</script>
	
	<table><tr><td><center>
<button onclick="ShowPDF('previous');">&laquo;</button>&nbsp;&nbsp;
<button onclick="ShowPDF('zoomout');">-</button>&nbsp;&nbsp;
<button onclick="ShowPDF('zoomin');">+</button>&nbsp;&nbsp;
<button onclick="ShowPDF('next');">&raquo;</button><br>
</center></td></tr><tr><td>
	<canvas id="the-canvas" style="border:1px solid black;"/>
</td></tr></table>
	<script type="text/javascript">
		'use strict';
		window.PageToShow = 0;
		window.Scale = 1;
		
		ShowPDF('next');
		function ShowPDF(pageToOpenIn) {
			
			
			if (pageToOpenIn == "next") {
				window.PageToShow = window.PageToShow + 1;
			} else if (pageToOpenIn == "previous") {
				window.PageToShow = window.PageToShow - 1;
			} else if (pageToOpenIn == "zoomin") {
				window.Scale = window.Scale + 0.2;
			} else if (pageToOpen<span style="font-size: smaller;"></span>In == "zoomout") {
				window.Scale = window.Scale - 0.2;
			}
			
			 
			
			PDFJS.getPdf('csv.php?fileid=<?php echo $fileid;?>', function getPdfHelloWorld(data) {
			  //
			  // Instantiate PDFDoc with PDF data
			  //
			  var pdf = new PDFJS.PDFDoc(data);
			  var page = pdf.getPage(window.PageToShow);
			  var scale = window.Scale;

			  //
			  // Prepare canvas using PDF page dimensions
			  //
			  var canvas = document.getElementById('the-canvas');
			  var context = canvas.getContext('2d');
			  canvas.height = page.height * scale;
			  canvas.width = page.width * scale;

			  //
			  // Render PDF page into canvas context
			  //
			  page.startRendering(context);
			});
		}
	</script>
	</center>
	<?php
}
function DropUnusedFieldsFromDatabase($ActuallyDelete=false) {
	MustBeAdmin();
	
	// Array to hold the result
	$q = array();
	$ql = array();
	$add_last = "";
	$totalsize = 0;
	$views = array();

	// Generate drop-view and create-view queries. We drop all views prior to fixing tables and re-create them afterwards
	foreach (db_GetArray("SHOW FULL TABLES WHERE TABLE_TYPE LIKE 'VIEW'") AS $view) {
		$ft = str_replace($GLOBALS['TBL_PREFIX'] . "flextable", "", $view[0]);
		$ql[] = "DROP VIEW " . $view[0];

		$ViewOnTableSelectCondition = GetAttribute("flextable", "ViewOnTableSelectCondition", $ft);
		if ($ViewOnTableSelectCondition != "" && $ViewOnTableSelectCondition != "{{none}}") {
			$extra = " WHERE " . $ViewOnTableSelectCondition;
		} else {
			$extra = "";
		}
		$add_last .= "CREATE VIEW " . $view[0] . " AS SELECT(*) FROM " . $GLOBALS['TBL_PREFIX'] . "" . GetAttribute("flextable", "ViewOnTable", $ft) . $extra . ";\n";
		$views[] = $view[0];
	} 	

	// What it should be
	foreach (db_GetArray("SELECT tabletype, CONCAT('EFID', id) FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE deleted!='y'") AS $row) {
		if (is_numeric($row['tabletype'])) {
				$row['tabletype'] = "flextable" . $row['tabletype'];
		}
		if ($row['tabletype'] == "user") $row['tabletype'] = "loginusers";
		if ($row['tabletype'] == "group") $row['tabletype'] = "userprofiles";

		$row['tabletype'] = $GLOBALS['TBL_PREFIX'] . $row['tabletype'];
		$efs[$row['tabletype']][] = $row[1];	
	}
	//DA($efs);
	$fts = db_GetFlatArray("SELECT CONCAT('" . $GLOBALS['TBL_PREFIX'] . "flextable', recordid) FROM " . $GLOBALS['TBL_PREFIX'] . "flextabledefs");
	$fts[] = $GLOBALS['TBL_PREFIX'] . "entity";
	$fts[] = $GLOBALS['TBL_PREFIX'] . "customer";
	$fts[] = $GLOBALS['TBL_PREFIX'] . "loginusers";
	$fts[] = $GLOBALS['TBL_PREFIX'] . "userprofiles";
	
	// What it is
	$ftz = array();
	$efst = db_GetFlatArray("SHOW TABLES");
	foreach ($efst AS $tab) {
		if (substr($tab, 0, strlen($GLOBALS['TBL_PREFIX']) + 9) == $GLOBALS['TBL_PREFIX'] . "flextable" && $tab != $GLOBALS['TBL_PREFIX'] . "flextabledefs") {
			$ftz[] = $tab;
			if (!in_array($tab, $fts)) {
				$tmp = db_GetArray("SHOW TABLE STATUS LIKE '" . $tab . "'");

				$totalsize += ($tmp[0]['Index_length'] + $tmp[0]['Data_length']);
				
				$q[] = array("table" => $tab, "size" => number_format(($tmp[0]['Index_length'] + $tmp[0]['Data_length'])/1024/1024, 2) . " M", "rows" => $tmp[0]['Rows']);
				$ql[] = "DROP TABLE " . $tab;
				}	 
		} 

	}
	$ftz[] = $GLOBALS['TBL_PREFIX'] . "entity";
	$ftz[] = $GLOBALS['TBL_PREFIX'] . "customer";
	$ftz[] = $GLOBALS['TBL_PREFIX'] . "loginusers";
	$ftz[] = $GLOBALS['TBL_PREFIX'] . "userprofiles";
	
	$efz = db_GetArray("SELECT id, tabletype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields");
	
	foreach ($fts AS $table) {	
		if (!in_array($table, $views)) {
			$sql = "SHOW FIELDS FROM " . mres($table) . " WHERE Field LIKE 'EFID%'";

			$ef = db_GetFlatArray($sql);
			foreach ($ef AS $field) {
				if (!in_array($field, $efs[$table])) {
					$size = db_GetRow("SELECT SUM(LENGTH(" . $field . ")), COUNT(*) FROM " . $table . " WHERE " . $field . " != ''");
					$totalsize += $size[0];
					$q[] = array("table" => $table, "field" => $field, "size" => number_format($size[0]) . " Bytes", "rows" => $size[1], "name" => db_GetValue("SELECT name FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . str_replace("EFID", "", $field) . "'"), "type" => db_GetValue("SELECT fieldtype FROM " . $GLOBALS['TBL_PREFIX'] . "extrafields WHERE id='" . str_replace("EFID", "", $field) . "'"));
					$ql[] = "ALTER TABLE " . $table . " DROP " . $field;
					
				}		
			}
		}	
	}
	print "Total size on disk to gain: " . FormatNumber($totalsize/1024/1024) . "MB. <a onclick=\"toggleLayer('queries');\">Show/hide queries</a>";
	print "<div id=\"queries\" style=\"display: none;\">";
	print "<textarea cols=100 rows=10>";
	foreach ($ql AS $query) {
		print $query . ";\n";	
	}
	print $add_last;
	print "</textarea>";
	print "</div>";
	print "<table class=\"interleave-table\"><thead><tr><td>Table</td><td>Field</td><td>Name</td><td>Size on disk</td><td>Rows</td><td>Type</td></tr></thead>";
	foreach ($q AS $row) {
		print "<tr>";
		foreach (array("table", "field", "name", "size", "rows", "type") AS $el) {
				print "<td>" . mres($row[$el]) . "</td>";
		}
		print "</tr>";
	}
	
	print "</table>";	
	
}
function XMLTableExport($table) {
	if (CheckFunctionAccess("AllowedToExportXML") != "ok" && !is_administrator()) {
		PrintAD("Access denied. You're not allowed to export XML.");
	} else { 
		print "<interleave>\n";
		
		if ($table == "customer") {
			print "\t<customers>\n";
			$fields = array("custname","contact","contact_title","contact_phone","cust_homepage","cust_address","cust_remarks","contact_email","active","customer_owner");
			$efields =  GetExtraCustomerFields();
			
			$res = mcq("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "customer", $db);
			while ($c = mysql_fetch_array($res)) {
				
				if (CheckCustomerAccess($c['id']) != "nok") {
					print "\t\t<customer>\n";
					print "\t\t\t<cid>" . $c['id'] . "</cid>\n";
					foreach ($fields AS $field) {
						print "\t\t\t<" . $field . " name=\"" . htme($field) . "\">";
						print htme($c[$field]);
						print "</" . $field . ">\n";
					}
					foreach ($efields AS $ef) {
						print "\t\t\t<EFID" . $ef['id'] . " name=\"" . htme(GetExtraFieldName($ef['id'])) . "\">";
						print htme((GetExtraFieldValue($c['id'], $ef['id'], false, true, $c['EFID' . $ef['id']])));
						print "</EFID" . $ef['id'] . ">\n";				
					}
					
					print "\t\t</customer>\n";
				}
				
			}
			print "\t</customers>\n";
		} elseif ($table == "entity") {
			
			print "\t<entities>";
			
			$fields = array("category", "duedate", "startdate", "content", "assignee", "owner", "status", "priority", "CRMcustomer");
			$efields =  GetExtraFields();
			
			
			$res = mcq("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "entity", $db);
			while ($c = mysql_fetch_array($res)) {
				
				if (CheckEntityAccess($c['eid']) != "nok") {
					print "\t\t<entity>\n";
					print "\t\t\t<eid>" . $c['eid'] . "</eid>\n";
					foreach ($fields AS $field) {
						print "\t\t\t<" . $field . " name=\"" . htme($field) . "\">";
						print htme($c[$field]);
						print "</" . $field . ">\n";
					}
					foreach ($efields AS $ef) {
						print "\t\t\t<EFID" . $ef['id'] . " name=\"" . htme(GetExtraFieldName($ef['id'])) . "\">";
						print htme((GetExtraFieldValue($c['eid'], $ef['id'], false, true, $c['EFID' . $ef['id']])));
						print "</EFID" . $ef['id'] . ">\n";				
					}
					print "\t\t</entity>\n";
				}
				
				
			}
			print "\t</entities>\n";
			
		} elseif (is_numeric($table)) {
			print "\t<flextable" . $table . ">\n";
			
			
			$efields = GetExtraFlextableFields($table);
			
			$res = mcq("SELECT * FROM " . $GLOBALS['TBL_PREFIX'] . "flextable" . $table, $db);
			
			while ($c = mysql_fetch_array($res)) {
					
				if (CheckFlextableRecordAccess($table, $c['recordid']) != "nok") {
					print "\t\t<flextable" . $table . "record>\n";
					print "\t\t\t<recordid>" . $c['recordid'] . "</recordid>\n";
					print "\t\t\t<refer>" . $c['refer'] . "</refer>\n";
			
					foreach ($efields AS $ef) {
						print "\t\t\t<EFID" . $ef['id'] . " name=\"" . htme(GetExtraFieldName($ef['id'])) . "\">";
						print htme((GetExtraFieldValue($c['eid'], $ef['id'], false, true, $c['EFID' . $ef['id']])));
						print "</EFID" . $ef['id'] . ">\n";				
					}
					print "\t\t</flextable" . $table . "record>\n";
				} else {
									
				}
				
	
			}
			print "\t</flextable" . $table . ">\n";
		}
		
		print "</interleave>"; 
		return(true);
	
	}
}
function ValidatePHPSyntax($code) {
	$fn = tempnam("", "INTLV_MODPARSE");
	$fp = fopen($fn, "w");
	if (substr($code, 0, 5) != "<?php") {
		$code = "<?php\n" . $code . "\n?>";
	}
	fputs($fp, $code);
	ob_start();
	system("php -d display_errors=1 -l $fn");
	unlink($fn);

	$resultPHPcheck = ob_get_contents();
	ob_end_clean();

	$resultPHPcheck = str_replace("\nParse error", "Parse error", $resultPHPcheck);
	$resultPHPcheck = str_replace("in " . $fn, "", $resultPHPcheck);

	return($resultPHPcheck);
}

?>